{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7751e1cb-0b56-4871-a74b-cbd692354569",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7cef9980-cba0-463a-9541-1b416e49be51",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d7c113d5-169f-44aa-a83b-5f7f0815357a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b7269179-bbbf-44f8-a19e-df4ec857f7f8"
                }
              }
            ]
          },
          {
            "id": "66922026-0f39-4def-bce6-ee6cb79ffd49",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cf065caa-7602-4e51-8864-3a4a788ed2b5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "76845b78-dab0-4a87-b7df-2e225c5b6da9"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "bf65912a-f45d-484b-850a-331d2299e258",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a8147f79-425a-4f14-8f0b-d1f95f1947ee",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ef0eb0ba-0e7e-4b0e-91e9-875ca515c380",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0137492f-b4f1-4324-888f-1877ed45740a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f5d5cc9d-c507-4ab9-96b7-590ddb1a8858"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "98b66247-160c-41d1-bcfb-211511b6de43",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5b5ebd4b-8bb2-47d2-a684-6f69fd437225"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "44711dfe-4ac0-4673-9591-5019b7a13558",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "af4bdf51-8a78-4b45-a05a-f231d0f76089"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67427c0c-33db-4c98-8ae8-4af5eb8926bb",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9c807548-d63d-4658-aba5-c901a51a6128"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "888a9407-bab2-45c4-b50f-83e71d93ac17",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e2faafbb-143b-46ec-83cc-016ba0b81614"
            }
          }
        ]
      },
      {
        "id": "8cc5a011-e5e6-472b-99a1-76b7191d581f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "46dbe49c-646f-42c5-b2e7-e0b8a98b0846",
            "name": "Negative Testing",
            "item": [
              {
                "id": "11dbd864-6561-41ee-ba09-89ca48cf64d6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e3a78af4-120e-4561-b500-21bf2c80d907",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ecff940-ed79-4c5a-a479-6395c7d91835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3d91fa3-9048-46df-ac70-7ffe26f1a889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d6589f-eb72-45d5-b87f-34b7d3c91d21",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e33f5e-e9a0-4988-84ad-66619fbb7cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a59e8c1e-7047-405e-8fe1-3fbfe1f6ca97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e60681b3-3101-4d91-98be-ed60ea1b8162",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c0eea23-891e-452e-b278-ebfd24dcda0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c572e189-a987-44e5-bacc-11c4727e0cbb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "25448a5c-9ca5-4f97-ae66-aedc9cef6773",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "788fb193-5f2e-4244-8360-d8cb28477b6f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c02a9e76-1039-4d75-8a39-155c6be49a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7afa40e9-24a7-4efe-b6e9-ac22e229ba18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb3c4f8-26cd-4a41-b368-78287c94eae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "028301fb-a3d2-4b32-aaeb-d428b2acee93"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4ea72609-04bd-469f-97bd-64ae607625e2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a27182cb-1fc2-454e-9de2-5d672ac6992a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccca0eb3-cc96-463e-b7c4-3a7e0b29231d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7bb3ce1a-db9f-4483-b798-88b17094f676"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd32faf5-5d15-4ad2-b5d5-c149542fd334",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "7d8ea3be-72cb-4aa5-8265-7ad3167f9a27"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f4f30edf-dbc6-45f7-9980-f40d7b16940e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aa3cfb96-6fa7-42db-9159-da6d36cc6bf5"
            }
          }
        ]
      },
      {
        "id": "3d91dea9-d5b2-4b9d-87cb-a39b39b0191a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "722ccc12-5374-445b-9fca-8e7ada0e738b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "81b11e9d-dbcc-4af6-bb52-ed6c6fcd310f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8e7185bd-40b9-40c6-a411-e69191a1377f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1731b05d-fa79-481f-827f-b52da06f221a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be359ff4-5d6b-40a9-83b9-67f8b09e89c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50cd32a1-7548-4204-8c14-50b457dee682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28713a0b-2231-44eb-b7fc-2c65f72e3a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f33fe2-b35b-4dea-8357-626d198341ef",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "653d754b-3d37-4b84-8f29-cf4081c11ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eebaee7b-e742-4b33-b732-5196566b8345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b64354d2-f513-4c47-8cac-fac4b907cfe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eddf86c6-b488-44af-a73c-dea1de7337f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c7862aa-cef2-4d09-93d7-a1e0b17d5fb5",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52eb198d-09c8-48e9-8a3b-8e7ccae970fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09f8f5df-7132-4e79-9baa-32a07fd0e4bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e323ebb-c0a6-4f7a-9ac7-9968dd2e60f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fea29f0d-f37d-4aff-8a48-48798cce15a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071fdbef-4e6d-49d0-92bf-7e43ad3fa6a2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db63c8df-a70e-4497-a3c5-0a552488a284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed16851c-2ade-43c4-9597-60131fe120a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2045ec2-0efd-44bb-8cfc-93c730cc78ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47620b8c-2f7c-46a9-a25e-daae6ca4bf42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93f0ec7-8411-4262-b8c5-4e388a10614b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c2c18f-425f-4538-9640-b0c4939c574f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca00163c-4328-45f5-93cf-e68646b2e771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef918e0-cbf2-42d7-82dc-b306c03d3214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bd87ab8-00e6-4020-a27c-ab476d3b1494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1667fb42-bb52-4a84-aaf5-aedaf75b4628",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b022f76-f920-4237-aa46-411362b0e960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "279110e0-0fb4-4f31-bc35-860f3a5a22d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa6f4d70-00ce-4f78-994a-4fc7db849e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9ea5333-2db5-4aea-a79d-d49eb923d245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22ff940-ff92-4729-ae0d-63401996264f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e5dfa2-2b0c-4ccf-a4dd-720e3e196793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bdf633d-71b9-4f26-a7af-2e1fc8ee31a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ed8364-47a2-44a8-b2a2-7a20346a02c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c45405ff-878a-4d13-8a94-5624de0f8e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9075dd92-bee8-4f05-a497-1203596e867a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bbc7472-811c-496b-9fa7-da7a46f91123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "275e9adb-f84d-4cdb-a835-2be59c8d2ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9bdc810-9450-4cab-b4d7-f440c43c0855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d228ddd-0ec9-42c0-9c6d-6e077f9b8209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92914c6-51bb-4816-b021-8b88b1e95013",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "081d5cd0-f57b-46eb-9fd3-db1ad693856e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83eeeb23-2357-491e-824f-ac73ffe2050e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6764c846-6212-4138-8b3a-a6c6a9c5f03d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0206d235-0d5e-4f3c-8ab4-f1473f1c9a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "591af4ff-b1bb-47f2-b478-0bce79ff8659",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a799593-92d1-4c3d-a1a8-cdb0275c7fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d509790-a930-4239-8d62-a5dc15da8c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db738e58-dcd0-4a47-8233-c7ad8502e0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9902a1ac-b321-480f-8050-ef5a1fe6a98f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31e3c7b-3ab6-4545-a62c-079a730463dc",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6363e0d-90ef-454f-87f6-9f96b1236272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24c27e8c-11cf-4556-8ad9-032645005c83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee16ebb-c470-4f42-b098-87de3d083ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82b30c41-9c2d-43a2-9fc9-7592553b9b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "431f3080-25a2-451e-9dce-e1b56c6c1ece",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "476de5db-9f62-4875-b9a7-3f50b7d7f612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3df47e2-709e-4ae4-b488-740fb777afc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f892ad-0309-41b8-bc98-904c738609a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f58e0266-dc2f-4662-a8bd-26743a7a6b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "847b16b5-9ec7-43dc-85ba-3f7937ee666e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b200db-9989-46c3-b8b3-9c4773d9b5e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95aefcc1-bec9-4fbc-aaaf-2d3f687b16f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a23b07f-4279-4a7e-86ee-96a479f153ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44ab7805-1871-415f-b766-2064d0c8f168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7cb59f-e730-4e5f-94bb-ed06ede42ca3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f952e08-5afb-4403-abd5-5dea7404858c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da421a6d-1c8a-4948-b83a-5bb4d0a1a709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dcf72b8-890f-4ae6-b2c9-4bbe76d0d13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e90bc56-0cbd-46a0-a20d-b56d5acb857a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ebdf1ed-12d8-40cf-9698-39e4b9d8d3c2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca737742-6a9a-4d05-ab8f-d1533920e92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fed0e7e-b47b-494e-b034-ac9720efbac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df247cf-7735-4061-8d0f-720e6cbfca11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bfeeaf89-257a-4c55-996c-e0c7ba64ffdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c3fd79-590d-427f-a09b-a0a8bda0401f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0130f966-1edb-4360-9c7d-24bcf262bcdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff6aab0a-3eda-4e05-9bad-57f38fdbfbfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ffd7bf-cbb6-41be-9bf0-2f55f36252ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c00d8fd-d9c3-494c-bb1e-03631afe687f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7567575-618e-4349-864f-d3a799af7930",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19bcc484-c708-49d4-8b73-87d1669728f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a45012dc-29a6-4a89-b88c-0e2c0404d8b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2679cab-e177-4e5b-8f72-2dc8df5f7d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a83382a-7a9c-47b9-9170-e27d6861841e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d4db0e-96dd-4ee9-9ad6-fd559547845e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5071d2bd-7cbf-48d5-a7e3-32bf2b774017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ba6637-2122-49dd-995e-d64b5c93a4e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c58f52d-ba52-425b-ba5b-57c5704d241d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "31772986-3be4-4069-81f0-306431c56576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0e5d79-b413-4c20-8cdb-c5ec6f51ab5d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6d76c0-7b1d-4bd5-9acd-fb78e4e4af63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc30d912-2248-4045-be94-004339fe5ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d893330-6fe2-4041-8821-4e703c94ce27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cd9e2b5-928a-42d9-9285-7043c8a1aa6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf9d0f2-7287-442a-9aff-2a8ad89182b1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf53061-76db-4b96-98d2-50c924851426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4994822f-4bad-4da3-9f41-5118c8de30a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed48b23-6f86-4602-b8ea-a358b8edaae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9df1ad34-1d17-4f17-92fe-6a1d8689c56a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ba1140-843b-4093-9cd7-d50cfeaae6d4",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138c81fa-289e-49f7-bef1-e6e03791ea37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e386d9b-cdbb-4ab5-bc5d-aef4f6fe53e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1e6d24-0d39-486d-ae84-4880f746d41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c1c8934-2563-4447-819a-f04964da8dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5081b0a4-8b8c-4c44-bc8c-de071d639af8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "723b7729-1307-477e-bad2-de3db0108be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfba8579-a5ff-47eb-9897-efad71f9f2b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931bd8f9-87fd-4386-b626-80129b40ee11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dac848db-1d94-4a93-8f2a-6c6cc38b3d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3415ee4-4b22-43ef-83f9-b0766648c1dc",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c539d01-1d17-4529-b0d3-4be4a6587f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed42459-725c-41b5-b912-75cb83362cda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4092bbe-98e4-44f6-b592-38128764479a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d5558692-9101-4103-baf2-5ea8b8e65440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2486a7f-1fab-4521-8062-085d2d072dae",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb15ff9-b268-4d0c-847a-12905c8b1c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "194fb417-8576-4ed0-9648-139131a6929a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5290445d-6ba2-49a6-be43-89e296f5eae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "953eb089-f4ce-42aa-b3ce-0ed16754bd72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b8f1232-c1ef-4e01-b335-3411c574fb20",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cff66eb-4e2f-4def-9f93-ab7653cd2bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a2b0b71-bb9e-4a9c-aaa0-c1151170a71d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd9fcce-044a-40e5-8d94-a36b37244beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "72c47844-741d-47db-8e3f-b1af746e9148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b8340fa-ef74-4cbc-88c1-7bfc05966801",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a42138e-86a2-44a0-a671-6e9b358aed67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90d9a4cd-7e4c-4a14-8385-d1d4179f0df1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1838e2ea-493b-4e63-afbe-c79aa3196d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fea95dac-29b4-4229-8e5c-4fa1830de743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68afede-ac9b-4d06-ae22-68f5942d51db",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312e2c16-59a5-4b70-ab4e-7f2df4aa1678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d84eee89-cf4b-4e39-9e76-e7189c9d535b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9dbde53-4d19-40a1-b332-1d20c2904edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f39a80c-31b1-4dc4-b849-f884eb2e29b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d12f82-4c97-4ca2-a2bc-6a89bbfe8000",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f30f38-3379-4879-94be-bcc9005b4648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0ffc6c2-3667-48b6-8413-768d9a5b594d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04fc1ac9-0954-423b-853b-8b8791a60eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ef8e4c7-c4c9-4488-8db4-3795a4ac636a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6deba5b8-0edc-4ce6-b97d-1ec82f160e58",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e98c6bb9-963b-4037-b174-407fb1bb1bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ddba676-4446-4110-ac51-52fc1bbdfe96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7dd84c5-9567-4b78-8b78-63cd2b0c1b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc35ae40-ca05-46a7-9992-4a7c2f43ff7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb594662-7f24-45b5-aab6-44dd835a46c0",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8e85df-fad6-477b-b06c-fb4032acfa59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4346d80d-e4f6-4b7e-a23e-f5900d85bae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b3112f-904c-4724-8633-ae3521287ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6528e76-97cc-42c5-84ad-0373b7f333cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef6ce570-f0a0-4b5c-8dbc-740f06220aec",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36bc90db-8077-48ce-85f6-fc8846abe078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3366e28-a5ea-409e-8f84-c05d050afeb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f52e61-d401-4190-b3e9-18fe90f0f06e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1f80e81-67bc-4739-8c4e-5ef1a9b58285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca94082b-af67-47d1-9a1e-cfe4856a1aa5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc7353a-c5ed-4970-a2ad-1ce1e71e284b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a28086ce-51d7-4875-b8a8-7241268090c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1625d44d-60d8-4388-876b-69b02a147ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fe40a2a-3299-4017-a149-bc1cdef8f320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1137e314-10af-426b-b9a7-e1628bbcacf3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dae1060-1024-45a1-a2f4-99da8aa4b58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a56f49c-e606-4383-9f1f-273b658e437e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce161fa-0f34-4593-a274-de7d46cbab05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac5d1049-156c-4472-9ace-f26e3d1bf017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fdcb6df-7154-4fbb-a986-8740e1f6309a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a564bcfc-b8bd-4926-855c-c9b7d07e9e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894359a7-5106-417f-b233-6ac52c6e3f6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f183b8a0-48da-46e8-a652-4e8a22354e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f46b08a-594f-4e75-9cd3-219426ec615f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be345365-7672-4a68-a2b9-f79fcf8a606d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5557ec-55d0-4417-a17c-60170f18fd62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aed1360-f0a2-4cb1-a565-7c4cf73b8f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295cc66f-5342-40f3-ab79-ec5389996a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7a81b761-6c0b-43ec-87d0-2227a8850bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6604c52-ed2d-4f6e-b7c2-215b981ab134",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "352586db-f92f-43a3-9400-6246ce0b1f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea0fb4c2-5430-4342-97f5-c8b9fcb63997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e3c88ab-f4ea-4add-a089-60e8f0ec5e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a06203ba-ebe5-4682-bf4e-e3442c2bb787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5dae33-d4ac-48c2-8bd9-d71938c5d6dd",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb713fb-3bd4-4002-85d9-83da8da73470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a29a18ef-64c5-49e0-bc3a-eaa65d36b48b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4ef592-1db0-4092-9776-1fd9c9ae0e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad3abfa9-9267-493c-b2a6-5f9d9b2da5ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd4f80e-955e-484c-819f-e3fb0dfb3ab2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7013ffbe-1d4e-4218-8a5e-3031aa5ec7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91de56ff-a5ca-479f-ba4c-c6142e305f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45840c3-5587-4489-bd80-15086e0c2239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "818e8a78-66f7-4f4d-85a7-72f003d64bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397fbb50-06f8-4418-89b2-dbfe501142ae",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23ba1f8-c480-49d2-a47c-ea1064cf5bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "500c44b8-fd09-478c-ae89-e12e1a2112a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc6804c-5f93-41fc-8421-3af798fbadb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e560722d-4e9c-4ca1-95cd-418cac16bb76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "457a1683-f249-4fb9-a88b-e8ea28113196",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77fcdfa4-97c9-4d92-ae42-e2a22713587b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e2daae2-c4fa-49b9-ab48-faf458fe2fc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e188504-e160-4f5e-a348-999e80905201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "81d26632-f891-434b-b755-4d6c3dcc5e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f52ea61-d6f9-4a1e-91a2-ea655b8e5fe1",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b913c32b-20e4-4654-beef-76b3a710b066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dec5d35-0715-4505-bf12-333af773b4ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11525496-d999-4569-97b4-cefe29dc60b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7eec7418-b25d-4d2e-bd4a-1228633bb3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7bf01e3-52c5-448c-89ca-6bfaff135513",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "307c2133-03b0-475d-b70c-7fd81c80712b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e921ca2-2d8a-49bd-8d60-9fc5ea88a446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6166b3a1-2d90-41e9-94f9-ca53dc19e0aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "69017e5d-7311-47a9-b451-1f2775f78567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19cf8b86-9a4a-4c30-bce8-4b490134e4e6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c056db-293d-4cee-9dfe-d9b04461fd3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25cd4977-e367-4235-be2f-8793a499534b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55e6e71-b055-49b3-ac91-a2ce3ce4a4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "938796d5-654e-4e86-b2ad-7bb7543d7a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23fa658f-c0cd-49a4-9e5c-f6d7c330e8a4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a315f9f3-a330-494b-a7f7-839d3bb24eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25548487-5e29-4ec9-bd03-22d6ffc8f2a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8466cb6-2799-49c9-b513-80605931bfa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f1fa223-776a-4b74-a195-7ca7714a3ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6f0e22-38f6-438b-be0a-bb1dd4b8857c",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b575256c-9796-41d9-aebe-51bee2d67af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9f4433a-8c40-4b75-a1a3-5628b4ac630e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9047e289-4fa7-4541-b6f9-ed3c1009ee20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee0c242-cfa6-4ea0-9475-1768bc325a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3e1bec1-c323-4728-ac30-91aa44e4aaca",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f5b86d-c596-448a-a83b-09a6d4e56b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8336c899-ab89-4d11-a87f-5135e009d66e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "615c6778-9ef9-47a4-927b-8253780e37da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "20801718-c4e0-4669-a3f7-58a4309c7546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455c6748-b62f-47cb-b2a7-b5ceab5c4afa",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46ecd36-826c-4f3f-90f0-190880429b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a2be7ff-190c-4b47-a442-08f6c35ceecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0250d251-6d80-43a9-9910-3a57ade00f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ec3f1a1-11c7-4654-9737-e0aa919b542c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08183df4-492c-481a-a904-5a12e7f74847",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "072f3314-c6fe-4153-b173-3d82d647e0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b707b73-65b5-479c-b8e4-d96bbc15f5be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b9e5251-23db-4061-9b3c-024ad275d429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a81c06bf-ef1a-4d86-ad1d-c70bc9255cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99dd41af-1880-440e-8bae-945484f039fc",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "917394a7-caf5-4df0-8cc2-de92cedaae0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "358742c4-b0d0-429b-b784-75b9cb87f647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05b0db8-43dd-4045-b1eb-d93502120f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "76594c85-5f91-46a9-840a-4d6907f07c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8fe858c-b7c6-423e-a0a6-2c04c42bf6e0",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c628d00-32e2-4eeb-9487-362c39e7e2fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d6d8d00-7edd-44cd-9cf5-56af195452d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0e2729-0468-4806-98c3-f6587d7a80b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f5622f5f-5f61-4123-beed-1033e1213f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b940d053-5d06-4d5c-af8b-8959111be8da",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9488c7ff-d3d5-49b1-8589-26c39be84d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ac7e2b1-0fc2-4339-82d2-86fd82ba3c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "481051f3-1e7b-4b84-8746-9e398782fc14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "295ad1d7-7e59-4b8a-a431-5fa157e5cdb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24b8a4c-ef91-4e0b-98ff-261ff2f4a5c8",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b823989a-f2de-4156-b823-8353633e0ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c835297-8482-49fb-b983-802309988c12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6f120c-80d7-4ba4-97e1-61bc85548e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ed6b1e0-dbc3-4680-a641-8b1bad039ded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be94b05e-494a-478c-bf92-9572c03007af",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d746e6-e8c6-44d5-a74e-d7dbf3107f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3152e9df-c5c9-40ba-8726-90c802be9c1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4562ebf-42bd-4491-bbdb-ea199a3efcce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "292bec0e-62bf-43fc-9aa4-f59ed0794b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1db443-8458-430d-a0fa-76dd9806decf",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71124b7-4035-4917-99e8-54d080f951e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ec7ce4-2b43-4d7b-bff4-98e71a72ed6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e72824-8161-4244-9b01-781c297469eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b17f4c4-1b48-49d6-a46d-9fc073c4511b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b32aae-aed9-47c0-8520-951d874ba9d9",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ebaf3d-9bbc-4889-bf97-f5a4fb4b9fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8be97e4f-80cc-4500-9f0c-f37b554dacb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ce5700-c5ca-41ab-b209-c6aafe09b9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2cd6b9a-f8f4-4781-90d6-44381a8ee6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5959e7e5-baf5-4d2b-848a-deb653df4b77",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed03dce0-f192-47fb-937d-f2c866768ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e54f160c-b8d5-434c-928a-bb81e65ade0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e04cc9-5f1c-4168-a1cf-4f06d4a2e304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "56c04794-7502-4aca-9052-17b47d4882c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6041d06f-3e30-4abf-a019-d8e0127fa41d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4dbd2a-53a8-4760-937b-b0e1303a435d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed48a50-e4eb-48d3-ac78-b84aaa2d29d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a4c793c-57e2-4947-8ca2-126ff6f82991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1eba8cd2-52a1-4f0b-b3d8-ccdf739c5b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62fceb8a-f56b-4df5-8e32-74e2a2b14c3a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a05da9-7225-4625-811d-8d984725394f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c25146e0-168d-47fc-ad1b-546e7a4423a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "819ac7a4-9958-4949-98c8-a19270b3b797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6050b5fa-abe4-46ac-af34-8fb233628bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842cdee8-c2f8-4deb-81f8-f4e6cd9fb308",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ccdf2f-8375-4f0e-a447-e0b82aa6a7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d68f55c-a380-401a-a028-493b9a329048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449de2c3-4f9c-4f5a-9c14-b14dcefe9e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a083d2e-b274-4c8f-9ee1-4a340402f1b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b3b6888-020f-4526-be0c-29ed350bad74",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5dfb4c-8d76-451f-b746-e0cd383fe247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d60fd36-7519-48c3-8b0e-83413baa9012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52572d7-aff5-4ab1-92e9-5c653a2ba6dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4357f5ad-347c-4df0-8bef-6531ccc2b106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad8a116b-bb8e-4e0f-b45f-5fa26220c366",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e924b45a-db83-4d14-88af-142bc5c62380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd809eb8-2e51-4782-938a-8757fd6e1cd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddfdf143-9f70-4d13-a34d-abb3f99f19ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5453bc29-3845-4817-80f6-d53076c0deb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b1f5eb4-9797-43a1-8952-0875c03d6ee2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9da3ad-c06d-4748-85b0-0e9716aa8a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8625dcd9-8025-4573-a3ec-173b8d215d2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f0f4a6-e674-40bd-9516-20e5b1733558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "e811ba82-678e-4a4a-88fa-9a207f9db39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07246378-037f-4b76-9be0-239ca2abcc54",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e2fbe4-4044-4698-9148-a03bd5f539e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb8e6e73-fbf1-4f40-9782-dd2479255680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6022611a-9c7c-4007-b692-d68052c1bb5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2122c322-87f6-458b-be98-a8f75a00f8d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8585228c-ebbe-4678-b204-4167889a067e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "504c12d7-b9d2-409c-ac0a-b77735c4c20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aee0d62b-fb2b-41ab-9423-da9a23855682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335e2729-7b7e-4a1a-aca4-2f4559938b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0628f82d-6afd-4700-ab34-1836f52fe16c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ee1f78-9fae-449f-895c-420ff253ecb6",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "647c2e31-3933-479f-b125-6d87deb8eefb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94c5d28c-3120-49d9-96ca-b9d145787c52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bec65b1-16b9-4aa5-844f-f80775643502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e014ef92-07b0-4b0b-b8c7-8538352b0808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dfafb5b-87ad-4df6-af52-b0b8b8ab95a8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8226cb-67eb-4f20-be47-2288bdae9531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c43682-4c26-4010-b295-22095590c81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c712721-6485-4999-a636-8e6182c2c35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e1a1a69-a606-410f-896c-68ce099407d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04316f1f-81a3-4ab9-8666-f845e8d72a04",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b4b953-684d-4e33-9872-66083252f160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b17c7c-af6f-4b79-bf31-71460c894769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3afe26b-3a1b-4185-95d7-54903027191c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ef880dbe-c667-4fbb-bf1d-6e536d3ff99c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8215131d-8af7-415f-8967-e026fd4b1c6a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3d83b4-00c7-4225-9087-1f28c0b91a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38f60801-177a-4874-ba23-b40e09245d1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec4254d-0726-49a1-822b-50e9de9cb80f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4e912a9-2463-4d6d-ad57-c6bb27e20886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ad9021-569d-450f-b5d9-312d63b67cd0",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "036a8189-435a-4595-ae74-88c473c66460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2159910-c2cd-4afb-a44d-ab4c80480d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1daf50-b58d-482d-a121-9b6cf605007d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e03e1aa-2189-4218-b63b-49e110ea9011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a6c7ee0-d5f0-4296-b4fc-d784ca488810",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4ebfb8e-14e0-411a-af35-7c800602609f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7589399a-0a97-4f16-ac03-56f343eb44d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "617d2947-ce43-467e-ae80-70757877c5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "31cbbdc3-c21e-4463-a481-e95d8e78d958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89acec53-b995-4a8a-aec6-0211e90df3fe",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d6ef8c-b294-4bb5-9ffc-23873fc50871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d768654-b3a0-4070-9618-38cf61a1e30a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773a455e-9410-456a-b0ae-c5fbcd51dc75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f701c9c-e629-4b9d-a451-86fbec2ea9b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bca17c6-a480-45ee-abdc-d93d0f441253",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeaf48d8-fdc9-44c8-bb14-4a3d22cf3779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d30da6d4-1120-4911-a5b4-489ab6a41618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f5257ab-e6ad-4bdc-88f6-8aad5fe6bf41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3465f3d-7744-4a27-9c69-b2ec6e1e0ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5d7adb-8f7c-452d-8e66-19c48aa17a0f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e9c180-66ae-418f-b061-25e054a54b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0f00604-a6c7-4f46-9d87-beca35d189c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08039da6-e36d-448d-8504-458004ee5585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff9bcacf-9cec-48f4-8830-b4625d223a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bdbaa3b-561e-4eae-b90d-aafc5711b9fe",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37ee4ee-d666-468c-bab3-05f071a4775b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e807c8e4-ab52-487d-96fd-c0ec426a1109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cca9cc5-02e9-4ca7-aff8-04b57f5c93f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "44fb43b7-8ec6-4202-a355-27834f18d75b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e94d50f-690b-4197-9551-8740f3b3d89e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f3b0f2-ce95-424d-a3e3-f2b552b78798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "114d0c74-d0d4-480d-bec5-0eebfce7b498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376cdf09-9e2d-4696-9e43-51c34bf558a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e76d9550-802d-48ed-8432-aa526613ff70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2196c7-5cb0-43b4-9f46-9064934f88e5",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c5dc08-2319-4c79-96d1-55240fccaa5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd62677-c7f1-418d-b962-4992a3e6e18b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd0c8dc-d9d4-4ff3-b8eb-646d83aa2a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ffa7cbc-2a16-4cf1-8f4d-54e8f8fb8bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab8042dc-f738-4d82-ae99-eeef1c4684a3",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aac2fc3-4a76-4caa-87f2-fc418e414e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e3fade-88ac-4346-b6d6-c5b65565b79a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d14d1d-5f57-42b8-97af-f09ef67b365a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "68c76375-2b15-49f0-a2e0-77f31f1656c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098900ab-ec69-43f8-b288-8f50acddb656",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d685ee-ef16-4d07-baea-0bed4f50d6b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a141cce1-4df0-459a-969e-1b7a0b7223f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98b41bda-1af7-4ad4-8905-47cc19ea2c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6364dbde-4b7b-4efb-8dde-7fbc795d6689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c8103e-3aae-44a4-8b3f-ca4baa546ca6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce18407-e079-4175-9cfb-652a630b3cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82d81afd-3f32-4980-a35f-e5a10504b973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767d5c25-4127-4db1-8c14-aa828dd4947f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "13d9e2e4-7197-41e4-8947-d61e2d747013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654bfc9c-6b4c-469b-b7e2-cfb4fb09f096",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8851accf-11e2-4543-adad-5501c367732f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc171446-9f56-419e-95f0-ff48df59d633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07f2e6a-a3ad-4e04-98bc-704c294211be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "de33a5f8-150e-487b-8b09-8ca868066050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89be275e-1327-4929-b7c6-17dcc4f72504",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b43ffc-c545-4e97-8c17-abb1c71af7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86e48119-33ec-4093-826e-5cf78ca80c86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "687a25f2-235e-4dd4-b08c-c239c93209b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "58b5155b-2002-4735-8426-9058ac4109ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ddea397-e71b-4c9d-a4ec-01989d784b10",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c01a078-7c43-4340-b2f3-e7653b058985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2254d9a3-2f82-440b-aa93-02dd26e64ba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e0121b-35a2-42cf-997f-851d250a9055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "557fd54f-c59f-42e1-a460-a1d323590087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b402a3e5-a0ee-42f8-a66d-9b562eab6933",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe91a8e6-769d-4d50-a2fb-7a2df32ca61a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d2081f-e5e4-4e83-8f04-b10ee8bf8688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84cac718-25dc-455f-8f99-56711acb126a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d97236e2-d3d1-48b0-bf90-1f32e205d4c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6728ad7-c1a2-4463-a7a1-23be8c18b324",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c4bf6c-451d-4d90-9787-f0c9be2eb245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a3280d5-01dc-47f7-9012-c933ec822e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f79ebd-f7a8-4454-81e7-f5f658719633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "87e73dee-1834-4233-b3ed-4928000f1cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a82abc21-46af-4afc-a468-98563da712ca",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66945b7b-887d-443d-95fc-a0bc000bbe14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "950e7714-61dc-4fff-a76c-015133f31f08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f3fd6b-a29c-4446-a68a-ffca8f1df889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fa39a780-1eef-494b-b8b5-aba658cd8440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9068ab-7804-4815-a1cd-5aaead9c6730",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a698758e-c808-47ce-8fd2-f14b6e5827d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78b67f79-8c70-4286-ad0b-7c42bd6950bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b89203-cc36-46cc-9bfa-0505d4c2b06a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ada4d6f3-beac-4cc4-a4e4-c85a022c3b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf09671-02d4-4ba9-916e-c26b3e6639e4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2827d1c6-f122-4566-b41a-3d17f9aaf816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d0eeb82-3093-4d09-80d3-16af790246b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c76aa4-c043-4814-88b7-d1ecedcd3feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "25b25e3d-a349-466d-882e-ac30f6012f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20acc0e-99d9-4c12-8bcf-cb993c54df73",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f542bf-8736-43a4-ab02-4e6bbee08360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7064b1cb-1ab6-4a6b-b474-8061d4db3b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204e057b-06d8-405f-a8c5-146420cb7117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "776e86d8-9f5d-49b9-98ee-cb33f3aceb23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e011153-fde4-4ae4-9663-bd848f11df2f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dbf5a7b-510b-4be5-a83b-7176d2cc2893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f76b4db-acfa-4f6d-9caa-99bdc43cd6e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827c96ed-6551-40e9-b4a3-d3f4a841d303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6db38b0-3cd6-4c45-bb62-9e4a1c54b311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb21e46-b322-44df-b6eb-81bed3b7bde2",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56eaa396-532d-4ae8-b6b5-e012469d5149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1639e1cb-bb98-4e5c-9019-7853d1b930a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f97dd4d-7b31-446c-b08d-c2e6f6980ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c1bddd4-c99e-4dc4-8071-ea4ecb6b5940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f6b71c-70b3-4588-a307-1942f82a1c6d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a82990-d500-4db7-8f36-12777aab555c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85277652-8133-47d5-84b8-690d9b9b813f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac38e71-96a2-432c-a1ac-6682de2341e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "667b15c4-680c-47eb-b7cd-b04be729f442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7ce68a-26ad-4375-8f98-580c4268410d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9752ef1f-be86-4069-94b6-1250452fe525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9c54db28-1f0c-4d7b-9238-c3a408f48685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7b534d-ea58-46bb-9cd4-5bb66c429138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8adfa499-4bf7-41e8-baee-50007a48da4a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e92593fe-bde5-4289-9333-658d150a028c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a50bd921-6923-4f6a-9d11-2a47df790e18",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed849fb-e50e-4340-a1f5-cd375e570b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58abcb95-dc9e-487b-b602-6e087c54f963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ec8dac-84e0-497d-937f-fed9d9efaa3d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "315681b1-ac95-409e-a937-c653a7165ec4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ecbb6d6-d654-4b87-9c46-797332ecf167",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48f6afaf-2899-477f-950a-160f0cad20c7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "765c3a56-3d22-487d-9f75-7f1e80ef9f5c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7d883f3-8632-4eb1-a32a-140ce903b650"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "375813bd-78d0-4060-b15d-25f6f3eae74f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7b762ca0-1d24-4a09-9092-74320115aec3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7a790cb9-e989-4aa1-aa0c-303fbf4809eb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a1fbea20-832e-4686-923f-417aa328245c"
                }
              }
            ]
          },
          {
            "id": "dd304618-7172-48f3-843f-a80ae03e8761",
            "name": "Positive Testing",
            "item": [
              {
                "id": "445a30ca-a490-4e30-95fb-494e9f47af1d",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "469d62e4-d305-46c7-898d-2389b49c9310",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97548f70-3921-400d-a816-91f927582d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9900a132-f659-45bb-848a-7f89b4dc4d7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44834035-fdb7-4010-8411-cfd2440318cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f5528a7-c3e8-4c56-bec5-df47cf8ba15b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c0a9c799-bcd7-43cc-a6d6-7f6d7ca3cbfc",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "609e7251-f656-4733-a2a7-a4f8378a1cb2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fb93d96e-14ab-40a6-b6b7-2c9e6eb7d31f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dbd51c42-1d3a-4e17-845f-08ad04a5c55f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9c17af9e-652a-4e86-a03a-86f0610011f2"
                    }
                  }
                ]
              },
              {
                "id": "953d9ab1-8a5e-48ee-96c9-778eb95ee731",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bd757af-7a19-427a-bd78-de24c13beb0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a5790378-3032-4ef7-b7fe-2ea07e5ba980"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ecda2a6b-04f8-497b-9ef0-d19ca067eb91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "094a44ed-5ddd-4660-8dd5-6c93f54339e4"
                    }
                  }
                ]
              },
              {
                "id": "2f6fbafc-cdb9-40f8-b1b2-88ecae7020d1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "14e07cd6-aab1-4f50-aba1-c14a376c632b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "75f209ff-9fc8-4c3f-acba-20929b4961f7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "826a9d78-c93b-4131-b579-07bfef28c83b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6bed65cb-4d9b-42fe-ac04-9b1b0f07a12a"
                    }
                  }
                ]
              },
              {
                "id": "492a725f-e365-4a58-ad8f-9f80cd6a3255",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dce8a0d5-f86c-4c42-ac00-99c56a15b57b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4abe94f3-6796-45a2-a5e3-5f4bd662ec4c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8edc07f8-50f3-4c14-9bed-07786784bcd7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c05a68ba-1e69-48d5-90dc-af93fc2976cc"
                    }
                  }
                ]
              },
              {
                "id": "245ec788-4d51-4062-887d-dc4ef5d16471",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0754dfcd-246d-4e19-b179-0328fb14c745",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d919d0fb-2a8f-4f0c-af94-a3f96b924bf4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d217c986-6967-4e8d-b96d-54d728549c5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "04127c0d-3fe8-470f-b51a-0b9716645cc0"
                    }
                  }
                ]
              },
              {
                "id": "98bee162-7723-4861-b05f-7eef32371eaf",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a1edeed-45dd-4c57-901e-4e7467f44c1e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ccefe517-8f60-4aa1-8b38-2f6be65f9d83"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5eb723f-b9fc-4401-a546-ba8c0c3fc1d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3a514357-2eb0-4bbc-84db-d9ddc5256b89"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bdb7a669-3c6c-499c-8c0d-4085616a4406",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3c7f9f9d-421e-4bd7-8088-4fae5c81c4bf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9cebb387-92a1-4b98-919f-fb29109e3e4b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "247281c1-61dd-4f08-9cf0-eaf45ef0c56e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b873064c-2269-47eb-a4f1-2edcaebe149f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "7c03cf55-f35f-45eb-8a7a-7c689e7ffe97"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7177f8ef-1e33-4124-b62a-6208bde61d8c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3bdb912e-5c2e-4e58-8fb4-2ab58c79df66"
            }
          }
        ]
      },
      {
        "id": "ef378535-563f-4f13-9e59-972a34ef83f9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "fcb27b10-a52b-4313-bfc1-9c346de0b065",
            "name": "Negative Testing",
            "item": [
              {
                "id": "58a98e7b-4dba-4a0a-9c9a-50cd6d0c78e4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "33ec957d-5dd8-4b45-aec6-9eba6e8d9487",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b00649f-8d67-4be8-a8ee-2a8f76680c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a962947-11cc-42fb-a32b-f6674ec64b16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c05c358-2a84-421e-9a8c-000c9bbd8e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "68dfe373-f5ee-4487-a081-91004c4d2265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce666844-0a0d-4928-82a6-c5ffe4c1c272",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aafef3a2-5635-4984-9238-8bb14814256e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22211a4a-1a16-4714-b812-a0aa2d16faaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d4abab-c2ab-4394-a8d6-35b2ab8076e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d929839-6a0d-4c74-9409-d36274dd23ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144bdda5-d886-4713-8243-d32cefbf61aa",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b824b3f2-7607-48b0-8b9d-9bbeb51a0126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bb2588a-6a48-4194-a3e6-7345aa2b6c51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb544259-1742-4f6f-bba9-7567bc388a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e94ed7b-118d-41f0-b76f-41d22847a3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a11efa6f-6616-484e-95de-6208aac872fd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc48349f-af1e-4077-bb64-eb768838bb8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b699e17f-81ae-40fc-8b4a-f5a3afe50aa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b86fa45-f804-4947-9bcc-d58e862232ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1908d5be-5001-430f-9c74-af7e7f3d1ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483ff49e-4ce4-4edf-9080-77d0143f579e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f38915-483f-4677-b226-328b3fa3236c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7fe2c6a-099a-4fef-a243-f29ae0ff614f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1ddf00-b19e-4f44-ad07-26b961c432a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8df4ba8d-af96-4ea0-a47d-11bcd8d69cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f342f1a-5fb6-438f-a918-40541de9bba0",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db7db95-63e4-4bf0-b748-7f91c623d353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd1e2691-2b7e-444f-b3c9-db4f3258c0db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d288fc81-3482-4746-8d22-4e558be8c8f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2cd0012c-3210-45c8-9a63-9b60dfce7915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b8f72c-2231-47c8-8782-a4bfa8561119",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4815ca-9f20-441b-a839-f578322d155a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce2fac2-fdea-4669-aa86-2b304e806774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c31352-3b29-4940-9b50-f9a692bb7181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "17691a95-0e4b-4b0c-a870-2835acaff30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14089070-80cf-4692-adcf-812df92c2517",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bbe4aa7-3494-48d0-9bb2-5c90219de383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e91c22-1c30-435b-8595-be0c1e8c89d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075d9da0-8237-47e0-bcf0-70c4f24c48c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c86ae29-6a91-4878-8b15-b78d44d522bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c208dc5-e8a2-4082-8744-f23984684344",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f22db8c-34d8-44af-a2aa-1bc7cac7c5ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73acad6b-6692-497f-b6f4-14304bd47123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6783a379-dd7a-45dc-9589-c69368ba5a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "521f3f63-b346-4467-b930-510937be7d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ae8e0e-cb0c-437c-b9b5-8cb9cdceef47",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ac6f7e-98b8-493c-ad26-1f255f518157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1f4e0a8-3548-4084-9e57-6381c0aec1f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4aa5c7-e8ec-42ea-90d4-fdc3e547f8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c21ca43-e215-49a9-91ab-345298994a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6598cd4a-366f-471b-b5e5-2627918f58e9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4322fc-d1cb-498a-a063-d1499c97fe02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f24d871d-6ee4-456d-8bc8-3558bb599d32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35233118-3349-41f4-89ca-003915f1d0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "958a7872-89b8-4933-8dcb-1df2c79ad7f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac0d564-a9f7-4783-bb99-13bc742c8730",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7ec46c-973d-4eac-b41b-6761af75ab93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8277bb34-f498-41a9-9c8a-4c09c5c3a3a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7736051f-8439-4f14-8f4a-c92aec76aa0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c146afb-4e82-48d6-af5a-302b3f0167b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58bbec0e-3cb4-4eb7-820b-dfa4e9fdbe29",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a874fd88-83e7-420c-9b03-cd3753c628e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b818a0ab-3c36-48ef-80be-369e44dfc393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb124576-afef-459b-be8b-e1ead8c39693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba9d46a2-a114-474f-9a1a-3235ada7ec72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a703dc6-36c6-42b2-ba63-362fa3e1d7ac",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7412d85e-fe01-477b-b1d6-9d3a76d019c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91c6a659-9f2b-45a5-adc9-24175a03347a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6131dc17-2833-4d30-8d9d-69b6734cce01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "669fb92d-87a3-4ad1-bf9f-ca9004c676ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a883edc-9754-42ea-8c9d-ecad3d8b2625",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c73e0bc-918d-44db-98af-94eeb8dfe55c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "893e4544-781a-454e-b714-50c05ab2e2be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765a504e-8c3b-4da0-b8bc-af9ff616ee32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a01a32d3-12b6-4d27-844c-843e74a04c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8a8bfa-7ed3-466c-9940-485200b4fa85",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "488dabc8-fac9-4d18-960b-b2a1c24a996f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee84ddec-c341-4923-a5ed-f5620477dbc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fed449-30bc-4f5b-9932-2c8151eac66a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2a01b92-caf5-4a40-87d4-b0db18529fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a4ad105-1891-4173-b1d5-3a8208fffd49",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40aeb3d8-d1c5-4750-9976-67fea0272ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f481fb78-0d99-4b32-a5f4-631104b80d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac1abba-31b9-41a7-9b22-7f4dfa96cf4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "16a19ee4-1bb8-4271-a759-e22fdd4e2712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8837a5f2-b15b-48a0-9124-1e0e92b4d04d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56ce41d-13d7-41da-ad07-b0621a03cd2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "680a576b-adb8-4538-b74f-11c18d9565ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "080a0aac-887d-4c3e-8801-93a763900f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "27ced0b2-eb44-4ae0-9f26-8c1de6a75bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ca6170-1763-491f-b708-97f80071977e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ede2c32-06dc-47dc-8b55-6c254c2b0c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce421564-0798-44c8-a6c7-92ba1d7a9f08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c6d62f-bc71-4b63-aa15-4809c9b33b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ff85af5-c8f6-4acf-be97-f0b2aa626661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f44445-540c-4367-bc3f-c4e3651eec2e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d34871-936b-4a43-a3a8-c36456e6acab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca7a3080-cf22-43ec-babe-5f080caa63af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0fe3a27-15d2-405d-9c72-1ddb2ae5536a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f5acef2-23d4-4357-ae48-b1288d918c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bebd0bde-f8cd-4c42-919e-e88b978f295e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "319888a4-e2d2-4dc8-acce-53b17e8957b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf1798f2-68c3-49e4-92fd-f0f05777e05e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83389107-bec7-49e7-a433-ee7a88faf036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49e86f92-1024-40f1-85ba-f014dab45e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740c58dc-f8d1-40b1-a1d4-957eed5d656e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4e3d8f-49e9-46cb-b495-6f9bdf55cd6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9daece89-316e-4b13-8d4d-f680558541be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c85b833-3c01-4d90-8685-b2e85bc854c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ab11f4e-1879-4015-aa6a-4fbbbf9fa27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc91e4a8-d284-4482-ab26-73e8f29f514d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2309c248-cec7-4eda-ba7b-9e009692a365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e4c9fc1-0277-4f76-b03f-e84aedb99fc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd58b5f8-5ff6-4018-b698-d347fb6b538f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "290b4b84-b07a-4b28-950e-34e859d52290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c9f155-6cb8-401f-81b4-a26d6370c5ab",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "214f1cce-cb2a-44eb-91c2-ae045b60579f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dd5bf9d-d33f-4029-9c56-c94eb04f1dfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfd99e1-674e-43c2-94c8-0c328c0ed985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9e373fa-6810-419b-ba89-7b38703ac97c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60647d1-ac6a-4158-9cf7-8db71d5904eb",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ebee538-9fd1-45ec-b0d0-dba54b856949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c89a25c-67fe-4172-b27e-14540e892a20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7edf844-a742-4449-86e8-a7b98e642f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29b746b3-0120-4462-95d6-624f8698731d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de6bf26-7515-43fa-8210-1bc6adf91520",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1743af5-b2a7-41ec-af29-d0c7fe040e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37f4c9ba-da73-4b78-ac8e-295a0666f56c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42bc5421-df7d-4a5b-9d11-e38bcbd84017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e33aaac-836f-4e8d-9d62-47da3d65e1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3d3a03-13c9-4c82-a9ac-a5c7673854d9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27745b45-775f-462d-b619-9d0c24ba0553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5bc6a5e-eb00-4458-b88c-0b1170bba0aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14edab20-b448-468c-b75d-f5cbf64fa9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5058129-0555-41d7-9120-500045d9d042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba2a4be-5458-4d2e-bc60-0d2f778cdd1d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5c33af-3720-443a-adce-ab8f5dd05e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2d1b0c1-d034-4115-8865-b593f7e61670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6030d1f8-72d2-4b12-a76f-0d45f7baae4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0177b215-26c6-41f9-814b-05abe0405111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff98acd8-38da-42a3-a084-54ba30522a3f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f344e57b-e10b-49c8-be52-bece14cbb9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "381163cd-dc4f-4b69-b6e2-eaf5bde6ae5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92af0b48-d888-4df1-84ad-63c47f45970a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ae79a14-34cf-40ad-bd67-ae0d29890cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4926728-fdc7-48ce-9ace-1e8c1b6c7ae5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd6a1a7-b95a-4683-ab32-413fbc8bf733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89d6802a-484e-4110-a5d2-613388bfcae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0549aaa5-e88b-491b-babd-8047ef8a8709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ffb2743-c869-4669-a8a2-33b6fae9d314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83da5941-5a7a-4acb-ae4e-c6222b9b9566",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38eaf719-ddde-4729-8f7c-899d39753398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "721adefd-1643-4bad-9fc4-b7956278e4fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "884d4b76-4618-470f-9ee9-29950fa96c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55a476c3-2d9a-40d5-a619-faecfa0e3f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c31013-e7c7-4020-84d7-2bbed2cb0dfe",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b3a6195-ff36-4d3d-8337-da76bc8cd94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "832fdfad-911d-49bc-bc56-dc509ff4482e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0121a9-3f7f-4f72-8a6a-75b700d8c027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88eb66b5-6df8-4be2-8335-ae8710ff53b2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0ee0fea7-c431-4f9d-8f90-02cc0cc9e782",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ab631767-bb62-408d-ac77-5220786b2945",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dac6797-7943-402a-940f-3128e39144c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b78334a7-2f49-42b6-8d7b-dd30ab84d278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af82e089-0dd6-4af3-9cde-adc985e9e652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce9ebaa3-1ef2-4e4f-aa19-ec453fa9361c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "366c73eb-3f54-4966-96b5-369c0313ad7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5092aa9e-baa4-439f-b8eb-9b5d14e84d97"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c1df240-8230-4e52-a162-7c08a31ec9cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1d959fe1-e042-463b-9d23-d62621f78c4c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec4ffb9d-9b63-44a0-8a09-8e9ae949daff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1d9e81c6-d195-4528-a556-78996be7324c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "314d8dcc-c5bc-49b2-878d-dfb544bb7f53",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3ec96470-887d-418b-a1d8-6b80d347d92b"
            }
          }
        ]
      },
      {
        "id": "6ec9beb5-59af-49b2-8426-f9b0689869ea",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "282aed64-69ee-43a9-932b-c12daf5be8dd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "11ba151d-80c8-4ed1-9cf7-e6c65a50e187",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "225ecf3e-55ff-4c63-a750-29ca4572b422",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bfdfb77-c299-44e0-91ca-58281968c4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57a4cc35-a79c-436b-83ef-19caae05d166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1cb3b4-2ff2-40cd-9a4e-b59b5ce944cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c45ca3f-69fc-4514-8722-e8967bcad66b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca4863d-2b7e-4869-8b41-ac11ac31f076",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32e848e-39c4-43af-aba1-e70a47ef08bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf357fcc-c49d-4647-aa47-5c35b12061ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4016e7d1-edbd-44c7-8eab-aacc55493f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "968e2488-11f5-4d78-a2b5-a065087c613c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f4b418f-58f3-4096-90a3-79965e5f1c7e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ef977d-c523-4a8b-8be5-a58e90a03655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "165a1c11-6f44-41f9-860a-03c3ac00f38a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c89ec2f3-f90a-44ea-9898-368861393351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7acc1bd-03c8-4595-84ba-f9888311aa17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73afd02-f683-4a59-9cfa-7a6a1fb59a2b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dffb5f6-988e-48d4-a526-b1aaf2f81a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e323c43-1ca3-46f4-88ee-a4fe96db6b55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d7ecad1-1e1f-4c6c-abf7-ef5e54873f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b69a4ca-056c-4fc7-9467-86af6a951c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b9fe8b-eee3-47f9-9258-b68327e22645",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a44a58-bc60-48fa-afbf-3641fb3f5abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ce0196-f06f-4d92-b2e5-5fa2a271216c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e77581e-2610-4260-8f00-9575f679da79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b37c53f3-c29f-4539-9e5c-0593aff0bc4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe18d1b6-caf3-4fd4-8e59-8de910e65f4e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f659345-2994-47a8-ab94-99d9bf15f3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb7255b5-c72a-4d3b-b149-87f16e150c72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd6d6d51-7c81-4fa7-a73b-211887fb25e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "73f7b39b-fdf9-41e5-ba68-c52f7af945a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e3a20d-d063-4a0d-ab19-1d2645936902",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "894cc5ba-a4c3-43ad-ad89-2605ce13d908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f242861-8202-4ad8-b936-13f165ae6b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d6b548-f0e6-4122-8b67-f151d9960250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "280960d1-3bee-4c12-9bc4-ee9fb0d00a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207eb4a6-d122-4b1e-af3b-493212ec0a18",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "003c337e-4e17-4ce9-9d9f-afcafca6c9d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc31588c-2809-4504-97b9-eda4743127bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4428053a-4812-4db6-9d69-3bb27bbe2d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "71ed5214-b44e-45fd-b0c7-91b89d91bba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49743309-98dd-4dc1-af7a-bc78f053b20c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e6adfe-fb2e-4f77-9894-ba86bb14f47c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b24ca68-acf5-42de-91de-2fc3d3751580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c2cc00-f5ff-4069-af53-be4e96146932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e83e808b-d846-4f92-ac9e-3f785ad425be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9e37a0-9b1b-4055-bff7-9fae03ca06dc",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa35a116-4bab-4104-839c-44631332b1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a87114-f394-4dee-be99-26fed4d5a38a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ce6fb7-0919-498c-b0fd-a6a12101378d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "89702e4a-ab2f-47d7-88b8-74c3eebbf4c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a051a42b-e20c-4dbd-8b09-de6d522c7490",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09be8239-199f-415c-ba5f-2134c72de459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2afe652a-6024-4f1a-a229-1704e112d721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb45626-6527-4078-8c08-803cc06a7537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f15d3714-c86c-490e-b25a-7f69efc7730b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0aee5c7-47cb-44b1-961c-17f790fe5f1b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29178964-104d-489a-8246-00fa881c42a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5042da7-255e-45e1-a288-b7d3b722d0e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "137696eb-ff46-4ba0-a95c-cb27f8ad69b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2351a56a-5ad7-478e-8be1-0a66269b3ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7ca26a-f075-4c1a-879c-b5d13549e3ea",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e5cd38d-678a-4439-9398-36956d7e3130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492a82a9-dc21-458d-b244-bd5ad3e5b5c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f50397-fa60-4d3c-9c65-20655ddf700d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a88723e-6a7a-4b01-9774-d2e89dedef33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de4f603f-e580-4192-b22b-83e3c668ab43",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b41733-51b5-4593-bf52-8ed0b5bc4891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf39f9d1-9058-44a6-a290-8b066978e5aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781f4551-d2a5-4f0b-b4af-812781a8c444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "66bf58e9-6951-49fb-9f62-eca8c1bdf011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b051e7-523b-492f-bb10-132183ddd1fc",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce382791-05cd-4756-9613-e8f57912e995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e93fafdb-da96-44fd-a40d-e0d77e432f0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9475b4a2-9dc6-4340-8e45-6b0301dfe01d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "32ba7cdf-62fb-485a-a24c-c201f0255aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8041d248-9c4f-487f-a4e2-6a1e1ad23eb6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1534e010-320b-4fb8-930c-7e3d2ba6c00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b7b58b-1ef1-422b-9098-596219490816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00cb219-4ac5-46f3-9d33-98c03bba16f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f59adf5-fee7-4457-bf6f-e1aa99788355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbff97c6-023b-4c38-9ea2-9ce0103d94a5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f954a63-a7db-4687-af58-dca184c70148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cecee3b6-3efe-44b8-a68f-7cf94669fa66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af23ca35-e848-4985-a348-c5639e2a2555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6477aeae-de3e-4a81-8789-5827ac80a6c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15271ef-2a01-49eb-80b6-e260a8ed70b4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ed6f52-5130-440b-ab99-6498dfeca31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "825e6d61-daf9-4615-9848-2a045808889b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b461ed-9757-4216-8c4a-79526a969c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cff981e2-5954-4bc0-ab3d-b79b2d51bb86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a0b1ec3-af1e-47fc-b5a4-80ad6bf8d1d5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e448ae-cf81-45d3-b7e2-ee1b16448b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac510fc1-dcb8-4454-8b4d-52434fd9e40f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ba9f33-955e-4ed8-9f1f-0effc060e028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7941383c-12b1-46e7-8c5d-bf7c40364eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca349ca1-76b0-45df-a9c2-9e28b6bbee93",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd64179-5136-4089-b9ef-c7b6c8e933b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a11cea2a-0e70-4ff1-a57b-b97bff3166ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88a9c89-9b48-468e-ad07-d3baa8b711f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f411852-2a8a-471e-9bb2-061fda6b0c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b787ed9-659a-4894-8d21-e0798b2be5dc",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "420613fd-fdb7-446d-a90c-e0e71a522b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d13b853-abd6-4428-9839-cbac86d752d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50841808-5ac6-4aa8-9aae-6f5cbaf0111c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "723a7b0c-7d4a-40d2-8d51-5ac24b6ca1f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12ae84a-d481-4c42-851b-04e1c1beb41f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c7da78-d4be-4762-8048-4e39cc5c1b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab4ceac-98bb-46e5-a2dc-c3f33960a472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbecf5ac-138b-4072-9093-cc20ac146504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "198310d3-8468-4d8e-8871-990d0e2b39fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1989a3-0a77-49cb-929e-fca7cce392f2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e9eb85-1ebf-4afc-ae93-77441311fe09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "927402ea-7572-4a5e-a5f0-f4b9c82b3868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78526d7a-f22f-4cb5-85ae-c5f8bc51db9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c679d825-5deb-483d-a350-10d617feb963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808fe2fb-6657-4a2d-98e6-fad5570e769a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1af814-1ba9-4b43-98b7-1dd8fc0b00de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ccfcba-7dd5-498a-93d0-252a1e612d07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "431714c0-8c88-45c4-9f3e-8b5d479fd1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83fe69e5-1bde-4ea4-bf70-f60f79b7ca60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db18bbed-5978-4f23-96f2-0abfab97132f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "074f3ce7-e2c8-4804-b1bd-77fba37bd85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4956abe3-be23-457b-90b2-33e1290c9108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f552a29b-9b52-49a2-82b8-8b715cb7a838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "615a670c-ad6c-4f99-b18c-4f00b7f69fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f54dbbc7-3492-4c5c-a36d-6b0d2e07423b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03840c7a-0feb-41e7-996e-b04916df134c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f638fc-c5e0-4781-b8ee-96b06ea8212d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97cb34de-7716-4136-9f57-3941dc95ed4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc12305a-2a08-4254-a3ca-25cfadb76cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf412d55-7b7f-4a37-bd6a-3090850a9c46",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59be023b-74fd-4c26-98e6-527dc36dceec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0995e535-c68f-4f16-bfeb-a7067c8572b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d852d66-bb54-4076-a649-55de9e133aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f79fc3f-3bdd-4b38-a93f-3afb128fcddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ac2d0a-a68e-472c-8fe6-d0e26df66373",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c640df68-12dc-41f6-b14c-95d4eb6862d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "388b59ca-56b3-4f63-a463-caa8c8cc38c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4abbb87-1860-4f83-a9b0-7f8b67c478d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac225beb-3fa4-47cf-a4a0-9e77c1cea63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212ced5f-9fb1-44e7-9a62-e110d41292d6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f28bc1e-458d-44cc-b399-d8992b301d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36b5b201-126d-4d9f-ab5e-221827903c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ee702f-0ab6-4e00-bc00-4daedeba54fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e6a79c2-9481-46e1-bd61-d1eeec9322ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14192783-3a79-492a-bb30-e20b7133a5e0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d41320-1451-4eab-a269-51e8bbbeb3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8dbf6d4-22c2-4325-bd0d-7abc02f8220b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47cfa9c-bea9-4aae-8f24-74dcc8a9de20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7d25919-c8f2-4635-bd72-1b0c5810d15e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abde24fd-7fa1-46b7-a23a-8c4d51cc41f5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb6b5f9-a19e-4f1d-b735-4f3e01c94e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09ad573e-4d54-4dfd-88e2-4ba6256732eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d36d36-83f0-4acd-80b3-4c64fa0db8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81e503f3-3f02-4f96-a369-204b0337ce2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a7fbb3-b888-45d9-832a-70151ceaab23",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6add34a2-ff93-4549-885e-fd81301dea53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c64c0155-cc22-488d-abd7-b6f1bc5a676f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c2d66f-c472-463c-a206-d4fc67088b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4895603-a381-45a6-bc0c-2488d57c8d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98257492-21cf-46f8-9bed-38493fe33867",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2890b12-6f8a-4942-b398-6166bf7f6d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1d5119f-95c9-407c-8833-04f4ea940fc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6451d53-f266-479d-8781-4bc78ef37e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b1c99c-ca83-4a29-b9a4-46dfca1d1667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c3c2f5-6e37-411f-840a-61078bf79a99",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b344b67-63b3-45fc-af66-24900977f91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3fff1cd-e0ea-497b-ae27-aa16a38d75c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368cc477-12c8-4770-8d5f-dfe7dbe3d2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ccbd1df-970d-459a-87ba-b80e462ad4aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "070e0e08-14b2-4a4e-ae92-5b7f249f8452",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b6cfe2f-0415-4c93-b7b1-b9bb365e66c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c1e1105-3aa0-420b-b34c-b38041163e5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778ab2f8-7d87-4dd3-b8d5-84997a7b2287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eaf3749-a064-45c5-9da4-db7902bbd15f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a607074a-83e1-4472-a35d-a3f7e12d640e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2915cd-afd8-426f-bb54-aab5f3f5b985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d5b4643-41b3-4fba-9726-70093220fa48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1090a0-a69c-4366-b9d7-e91892c4ab5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "700441cb-f264-40f6-a83b-52b32db00c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5dfa9f1-7ec8-4eda-8058-b3ae2b9fbc3b",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad064d1-1267-4dde-8f38-523de7137093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0600f085-4618-490a-a50e-6a0185106857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e297ac6-46ce-4bdf-acfc-cf94f2b97278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d876693-7631-45e5-87f0-0c8fa54f4755"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ac9eda54-f433-4e4f-9b00-7f2cd8150449",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fabec2a9-c522-4e3c-b492-e24accaa6785",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434baca5-ce66-4786-b1be-d2c3c5d86b74",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "29c9d588-9d7d-468f-8d57-c1769b1eae6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88287cba-51d1-49a5-921b-b3af1c77c775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b520a74-45ca-44ec-9b51-a73892b37500"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60375ec2-43a3-454d-bff2-850a6c00e3f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27f346f2-e1bd-4099-b038-09c3d429f442"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "43683570-cdb5-4c43-806a-0cf028714c80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa1105aa-f5a6-43c2-973b-797c41062922"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b94df5b8-9ff2-4b24-bb19-a3c203f02aa5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f4e5199e-bc45-4cd6-8e34-795fb16fd163"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66b2311c-3365-48e7-af98-f11aee75be28",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1f0fc4af-c790-4275-a7be-4ac3811f7d02"
            }
          }
        ]
      },
      {
        "id": "8c2d2de7-6691-4da3-a3d1-9de88b38551a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "eaaf51b4-3bb5-47ff-88fa-7f1bf75b9433",
            "name": "Negative Testing",
            "item": [
              {
                "id": "446b5b1e-7e0c-48a2-94e4-6bc3d5f384f2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e1f1a941-0665-4e81-99b7-9f9f49b8acfd",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ea904a-befa-4f9a-acaf-824c30efdb27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f5f5713-779e-4166-b383-490b424d7f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc344a4-7986-4b8a-afa3-67eb132f9e74",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36d25ce-c85f-4bdc-a7f1-a44a96b10318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dc0b05d-028f-44f0-abf1-4f6a843f51ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34eab92a-c81f-4eae-8749-dd0b10b5963a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdbdfb70-d5a8-4484-a830-8c9d33016a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c59b3fc2-7a35-40a1-b0d2-d565727ae531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e74e63b-8f64-488d-8ef0-a1d4cd1ea2c6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2550a555-1971-4810-9784-895f101578a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c0e0d4b-ef0c-457a-af96-df412ed69c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc191500-5091-404f-885f-c7f22c5f0427",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "831f479c-ac0f-4b7b-8605-f23f7e360264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "362d391a-9638-4779-b7d3-cd67c6c9525f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d63c8a-05ea-4910-8567-c350a7613a01",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51080210-b212-4b57-b1fe-dd29a29a4ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "473843ed-561f-42f2-b122-e3441f715706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2941c988-3620-43f0-9e9b-d8407552510e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f47f002-0131-463c-b2f9-19e24f671d3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41eb3251-bd06-4b74-828e-e5489c21b90d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98822e00-ad19-4272-b604-30954e7d52fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f741a4ce-df49-4175-a3ca-3a0df75457a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d73e39-0f26-49f5-a9f4-b1af8d93360a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "650109c9-2fca-4a93-999e-f137dd0692c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb7a99e7-636d-41a1-8ac3-1f5dec7cc4dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91495a33-4956-4bad-81a4-645124234cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29795e82-afa3-4554-9797-af2cd967692f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a34e35-920a-477a-bdb7-382ae23f4dfd",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3355d6d-0362-4cc3-bfc2-e72d9960745c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66ca4869-d49d-4fcf-bd72-b92fac557e56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9b99ec-c082-4fb0-ac87-5bc2f00b679f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f63cab3-b651-455a-beac-ecf2af3e8b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f9bf3c-a415-4278-b471-353ac746b0dc",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb889ee2-4ec6-430b-b125-9ab832c9a163",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "416373e1-32de-4f1d-a357-727550f1f278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c894eb63-0aab-436a-aa4d-2361cc797b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f03112c6-8911-48a7-bb0e-8b212d2183db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33597679-448e-4faa-a548-3253d59d87ec",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a1e7ce-a299-4d34-b7cf-22c179fa61e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac7e9028-e929-4737-a074-0c38b019b855"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d08df4-c74a-47e7-a21a-fa7d42e643cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "454db321-ea2a-4147-9514-f373c8506228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "889ea8da-a620-4dfa-9466-4af7aee1dba5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af87b1c2-bd8c-422a-8821-1bd9fc780ba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3baa3854-b548-49ac-828a-caa5036e24f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be687c8-c165-4285-9751-cf50f21780e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4798230c-073b-469b-ba16-6188dff9c29c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8124b215-cf1f-40c8-a749-6fea654d9dba",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47743d9a-1f57-44a0-8490-62b35c13771a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "609efe88-624c-4676-8396-cbb00909300d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b8e083a-5466-4eb7-87b2-5ec2ef101ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c73b944f-e430-4c4e-9368-42c81304e33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf863424-d938-44d0-8ec9-e738ea6b8965",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ba58d3-cfdf-42b2-b941-9e518fb4fa1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5687959c-22d7-4967-9ca8-a9b8f186e0b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "792d3792-b758-4439-b933-7522fd0ad0a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cfb9511-7c2d-4482-ab1d-23b3cdd49c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c637ab78-4cfd-44e5-b5ac-51ef99842fc7",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a52f55d-95fd-4153-a7fa-bc1cc542a97b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "334938ff-58f8-42ef-aa8e-b2436b8a029d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3b3aa4-3d07-4562-bd84-b6c5a01c78e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43d10c5d-14d4-470b-a82f-d6c62423cb82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6bff3d-caf4-40f5-963c-ba87ff30ad1b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86283d4b-a350-42fb-b096-448686235d75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb866a4a-a3da-46c7-922b-1fe49dd89fb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2873490-c8a0-4c1b-b941-6e445615707e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aff2594-0dc9-492f-9e0c-9e812cd62c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b3d336-09fe-435d-9d01-a13446eb5a6f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6025962-c84b-413d-ba1f-f054e5317142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "721c9232-37af-4a8d-9ffc-6cfd3001eb68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e878196-793b-47e5-85c2-fa7a072e6f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51b13424-b6e2-4d85-bd6f-bf769a0d17ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7ec626-6756-4d14-9005-80e6566e25f4",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9259b4f2-554f-4524-8ee8-c6e9132690ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72934532-e97d-41ff-b095-388118cf2059"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab812ab2-d741-4d88-a686-af06c1e6b12f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea43b3f-c01a-42dd-97f6-7c3ec7adc02a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81472f62-4ef2-4627-88d3-6dcae71025f9",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49dc3c66-b637-42df-848b-0c6232c023a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60ca1287-5698-4486-b92e-e31e50f224c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "556854a1-a3ef-4ada-b6d6-761ca60a3820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bed07d0-2a83-4636-a12c-d18a1beffafc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2109c6-a880-40b3-ae26-4e6fe9d13f3e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80c5e43-236a-486e-b3db-3eadfc1107a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "080a4448-0ac2-4a09-8279-d740cdc72153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be5e598-929d-4bde-b6d3-bdd4c43609e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83cce6a4-cee1-4484-916c-c64597ce2542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8317fd6a-d6b5-4a73-88c4-a34225402516",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b26774d6-2d01-488d-8248-a2a569566201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23aa7682-c3e0-4d77-869a-380cbd8078b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "197fdc99-3159-4081-b42e-6b076bb2d78b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4e467d7-9639-4e66-ae36-3f4799c64560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c1ee769-e67b-4664-9d9b-b62b1c3dfdd3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00f9909-9b47-40f7-b15e-9f507befcb00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ad7e53b-438c-4274-9345-fa1c66d68ebe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f89e3b6-b593-45ba-88b4-606c0dd34200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2b37eae-c14c-4a38-b498-f0a02c45c897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ea4928-d254-42bf-a250-e1e377d4e4f1",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f2f630-b646-4067-9b47-3584338f981b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3c56167-25e8-478e-9768-378645db52a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84098f5-8539-4aa3-bb0d-1893846129f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01cf285d-fd0e-49a6-807b-c283443c3c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22862ea-2a45-4948-ba8c-1149b32087fc",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3907642e-c581-4f16-aa4f-bf9342cb55c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "431a24bc-d869-44e8-baa7-1b94744b481b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "513588f0-a5af-4659-adef-17463c3dfc6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64ed74c4-b13d-4206-afa3-f0ccb3a24b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6053dd-15b9-4027-a266-1a1074afc2ef",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d264d883-aa24-43c7-bbbd-ac322805b5ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb47bee8-49be-4dce-a4b2-dc65722b4181"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c618153-2a64-46e0-be02-83ba3d011958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "922881d4-a513-4679-ab7a-6508af40f762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68e1b9e-1e3d-4836-81cf-a66951202291",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "230daa28-770d-4652-a829-85fc8dbfb28a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0751be2-2d70-44b7-914b-e6bb6e2b09ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a916e84c-a261-4a0b-9d1e-865bd5a78879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7598b4c-af10-4048-836b-ae7149de7083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5d9ab09-d0a0-4aa9-8ba4-a92e533b8147",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781e8cd5-363c-415e-8145-642103fc3bc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09544dbf-21f6-4b11-93fe-d800612a8646"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f90dbd2-f0a7-4898-84c9-46354521d291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24497e9b-d87e-4835-b89f-5287deb88ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0ea358-19a8-415c-b536-ba3bf2a1eb58",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f16f38-0bba-4bce-a400-68da70b3a1d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbd42ef3-de8c-4986-aa69-9da63f538816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1090947c-6416-4705-a2fc-7ea9178bf952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3bb206e-7449-4280-837b-de950c42c62e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d29d53-4384-4dc1-8a04-e3b9b302b12b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d8871a-d751-4d66-9ff1-3d9d8dc03395",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd6cfbf1-43c8-42f6-8331-efa958d60ed7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61dc3b2d-5535-46ca-b113-3257a79222a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cfcec5c-d503-4782-8e36-47d7a16df53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30cc9ca6-e2ce-43cd-a475-e72ff77cae20",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e13055-24b7-4263-95f8-e9b25ea07a54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df13a204-4d0b-404a-b988-95072b095b7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0fccf0d-41f3-42cc-8683-138f971af33a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b325aff-7b30-4825-8f91-59e47ec34cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb89ada6-2d37-4919-afb7-04851d52ba26",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2ed23c-2a45-4332-8ada-e93906cf636e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7da2788a-9296-4ce2-9539-081fbecd7963"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55eb8316-ffb2-4b4a-b9c9-5265357dbb18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f4f37a1-e4c6-4e35-9f53-364ae8bea1e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7843e7-4b68-4467-894a-3c2ba71a8cb8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4208ae42-3302-41b0-bd4c-1091d1e227d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8eccffc-9d6a-49b3-b0ab-fce8b284fed2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ab21e8-87dc-4710-ae87-4b5f43b76ad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80ccf5bc-87f6-4f08-9dc0-be9b1b774b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3538ec8-58c6-4b40-86e9-9b873339e948",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477bc7fd-d0bc-4dad-b1ab-c9c16f9d2636",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aa1f334-1103-4fe5-a1b6-622d08d13ecb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f328e5-6636-4a52-9cbe-016e26f8879a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd9bd769-be14-4da4-8b87-9ffd66f1cc3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9583b89e-fba4-4986-9caa-e9961ad61271",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e77b5b-3645-4f0b-b0a0-d3a8ee7693e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bb2b560-e827-486e-b9f6-728fb9dde9aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac53e664-713f-425e-bc70-e429343bdef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13c622a6-c63c-441e-8d77-2a0783227dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362061ef-dee0-4e91-8f1f-a2968445f49f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f17c663-aea4-4f7e-9fbe-820c0cd2442c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee3e9794-c34b-4482-82b2-199f56b7f7f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30995341-fed3-4e04-a2ae-b7b97e6a5d7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5e05907-9e5e-49cb-8901-f64605229dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb2ebdaf-f715-4ae2-83ac-5ceb3fb35e66",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4366e05b-5a8b-40c6-84d2-485e0e37b4fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bdc9592-333b-4960-a5ec-ff4f872727b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55ec819-0f6f-4116-86ef-d443efee2e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91bc5019-011d-4457-b38b-da194d50e08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b0bc52-9be7-4425-9440-6749eaf3bf93",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e018e30-094c-4be4-91ad-c9447575fb58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a01f6ea-9285-478f-a270-6d46236778b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c7c8ba-d8cb-486d-9c42-f255ddddafa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a3f7777-69e3-43a1-bb21-9bcaad0d4894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e89efa-07fd-4b99-ad75-c5c3c892bd0b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d7dfcec-51cf-465c-8a35-dc38aeb5728b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c378cbcd-109d-40d7-bb48-099bedc67885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "398fcbff-ffa0-4092-b15e-7dcc1a0de5c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "326255cd-1dc9-48b8-9344-e3fb44b625f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486db33e-b6c2-40e7-af0a-692514656644",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd3a50c-a34a-467d-b28f-53f17ea65a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "debef759-921c-41f2-8118-f4dba779674d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26557254-2895-4d46-bf88-8f2dc1e8fe20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c89e875-f1d2-403f-8865-e14fcc8dafac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3711751f-defb-4435-a715-1d7b78b3f000",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2a8eb8-65ec-47db-9e3e-048ad2d86dcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "084c09d8-8010-47ee-be9a-2dd6f9ec916a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82004e4-c2ac-427d-b684-ba5975923d04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0555857-26e4-4b1e-92c6-3ade68e874e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c99c2a8-a0db-4292-9445-bf6e2e1ac434",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f70b056-18ab-4610-9009-03f8a816c749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d39e7fd-1041-4f32-ab12-eb79eac1aa1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da7c126b-a46f-4d36-9e75-379ae7888dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6c582bd-bb4b-46ec-b033-f4dd16543db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b583da6-4089-4270-8980-1111386d46f1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343a42a1-d9dd-40b0-8cff-ae81639f1007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d725125-e4ba-4be5-b5ec-43a88b9858ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de882969-5b87-4590-abce-76b2cdc4a4b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74720a96-61a4-42e9-9b06-4acc12591ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6baff87a-95a4-47a1-a7fc-c1a2ad24fcb0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e47905-9810-47de-951f-aa53b1303308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2acb499c-ad02-4c24-8b0e-33fa13843711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d296e3b0-61b6-4956-a464-6e38e64b7f20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce3eca70-dbde-49e3-b3aa-d22cf60100e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f68497-5d9d-4af4-b0a4-8510c0cf9606",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9055ad29-95a4-4481-963d-59eb4fb4ae2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df253780-6b84-4df7-813f-e86bb0877fde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c180e7b-a446-4356-aaff-e82f0bb91f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95c41e7e-d361-4593-b2db-3d25844cccab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42127bd5-9738-4723-bb24-e9490bb9bd56",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74a2f2f-fb25-4f0c-9638-ced9de40d5e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad53ecdd-7602-4d6e-b7af-2bf28ca3167b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "225d91b5-32f9-44b1-99ec-b3ab7ccca315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbbec705-789c-4d37-b1c7-6399aaa89755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc65d4f9-23a5-4d17-94a0-609d23450797",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8cadebd-6038-4c08-8cec-360d416ecd99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d49c15f2-1355-45dd-9e51-4d0190f6b210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b35176-7751-43ad-945e-689a3b535d75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ace9ad0-44b9-46aa-b3d0-c08944dc6779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f28c7631-0b8c-4e7c-a9a1-2f4967fb0ca6",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c0d8beb-2e1b-4550-97e5-7cedc05d154b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ba6c0e8-000a-4781-905c-1358f0e73e65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee037064-677c-4714-b0a1-428c42392397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3af0b9a3-f0f3-4baf-b087-34b23bfb2f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc743cfb-998f-4c72-a8e7-c5a16934143d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c4ade5b-d99d-43fe-828d-c941070dd5ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12165eaa-08e5-4dcb-a2e9-ffc9f15584e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ec59ab-10ed-4521-a159-ae44bb1bbf00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4616682d-a843-4df3-96ff-3ac5cfce2a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a131db-3827-445f-a89a-be28f9424cf7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be22c2e3-d69c-48b4-bfb8-28cb6f92a760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5df691b-251b-4c52-bc00-f61d53bd1754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc82421e-2235-4152-ab67-c9f9de045653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d11818f-42a2-4ce4-ac11-035924b8616d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b54ae2-e465-4a17-91ff-ba02dd69eb36",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82a653e-81b3-4e45-b149-5eccacd6b652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07646bb9-2a19-400b-b445-856c74ffeb00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9fe257-9552-4c26-bac9-0233c0315e2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4513ca47-b872-4001-9586-eb05d994be1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a125a09-3c39-41fe-bb9c-5ec4fbaaaec5",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256e5295-12f2-425d-bb41-ac08d2cf27c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78710bed-2a7a-4395-bd40-829f717bd71a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6226e1db-95c4-40e3-b776-68450c36fa6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b6f7bf5-5ec4-434c-841b-66dbd0cae02b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a0732f-9eff-4eff-b14b-6a0fc836f4e4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0dd1194-3182-4cc1-a2ef-e825a6600c38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3711f24-0c4e-44bc-958c-326b06b40677"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f93d89-5bcd-4b12-94bb-69bd745ef19a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b16c00-dc7f-4d40-a0b7-09cfecf917a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c855ad4a-82d6-42af-8c3e-2fc80460317e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3808b084-49b1-4b81-951f-d6fb55014bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "228f26c5-d9f5-4a6d-9595-97eec5f8e9fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cded147b-01b2-49d7-95b6-8f3b9b8e3b78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "618517ca-420f-4dcd-bddc-5b9b86bbd12d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f2ec850-03a6-4bea-a00d-ac83f613de5f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b612f1fb-c69a-4504-aeb1-89d69628b73e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f9b768f-1756-4275-8d0c-53bb3c62110f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3e15cc-8f38-4a55-822a-cb69d9690118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d56eec2b-6407-4342-9b84-6c121aa3fe1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12acbc23-35f8-42c9-94c8-f58e66922e38",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68662ce5-33a8-4afc-b2c8-7a6ef68f9a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cd47b91-9f00-435e-833e-f88de0fb7c10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2765be80-0322-4057-bdf3-8492377da48c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb3d498f-a573-47fe-aa9f-9b64ebf1ea7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4a7e9c-e86b-48d6-a8eb-256a66479b44",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40012090-6793-4381-810b-87dd32afeba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66be6353-eafb-428d-95e8-2d3be1e96eab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "437f9a6b-bf03-44c3-8b8b-d8ca17b5eb7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04488564-526a-4763-88de-a05e81e24d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72a352b-ba3b-469e-8815-3ee60b1146b9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e20c391-3b91-442d-9460-b65c0697b1db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf189a79-9731-4ca5-b252-7f57c06c82b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "892cb1a9-9f46-4543-bd95-306256970d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31705e66-dc5b-47e7-b6b3-f0c0ba35ca52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d85968-4441-4d32-8776-14f7b98cdecc",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e959f5e6-780a-4a3d-8725-46ec585a1a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1c40adb-649e-43f3-b47f-cb05d79174c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d85ccbcc-5767-4ff8-a278-a18c2be59b65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de7df21c-a024-429b-b34d-d61727127453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e5c8c0-d359-42f1-9915-201e553f7854",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4910b22c-a83d-40e3-8af4-1f405fd0255c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "633ede6e-f856-4e10-b9c4-6cd8dd27a363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc01708-748d-44ba-8b0a-2622e9971a9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd8fcf8b-fda9-4788-8d89-18c96ea4e701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e4b362-8109-47a3-8eed-245e83b1c9bd",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b5f9d08-4839-4a46-b62c-0c82f7706cb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e2db157-adf5-469a-80d5-a6e9a65c935f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b91204a-191d-4462-971c-bd5a54764531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeb4daa6-b256-4cee-b840-8e319a4be185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749d28f8-de85-47ae-92a2-35f70e9d6944",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4c8c52-3fc5-440e-ad26-ea39f5d32e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9afe8f8-b0e2-408c-9f51-5e5ab53c6c72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9851f0f-a016-4d88-8f0a-a1620db781fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96a76be2-f353-44d8-a4b7-980322bb0354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371e1cd1-679d-4598-a391-276e4b12a4c5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea407eb0-8872-489d-9e80-3c39efe8e6ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9f119b4-77df-4203-b30a-81c3298f93d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "369b5597-2d0e-49ed-9920-5e156c461589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78646c44-a92b-4185-ad89-5f7dd3c891c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae26b64-cc09-4609-9b47-738688625bb7",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bcc7faa-343b-4f2b-b028-995dc7280822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ec1f752-ce99-4cdf-abd2-759171d57af8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b239eb53-92c8-4347-908d-fbd8f720fb0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63c22ec6-2096-4f07-b228-145939e0b65e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5dd26f3-f1b1-4bea-9b70-94d12052c08e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a27abbb-322d-47b6-abd2-8a7a004c3849",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09011d6f-3c56-4c54-966d-9c73457f0878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad165b8-1897-4c42-8784-fff58e4d8763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a42575fb-5c60-4198-b349-17951a61b3a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258b0916-9f83-4074-a084-fcd181687987",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27cf067c-50d8-46e5-8d68-edc103e12911",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44d101d2-e730-4bdf-83c1-28bfbf139cda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37680be2-8262-4af7-b020-46b5157433ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9167631-eaca-484b-b237-643166a11b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a2d6dc-d1fb-45bb-aeee-2e9e943fc4eb",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0761f026-85d8-43dc-a79d-13132680c3f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52d12f1c-c7a2-4a69-8521-8c5a215f04f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20449005-e5f8-484f-ae50-926ecb910b0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4ec2f43-245e-4e72-b772-02fb0dfd3cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45654008-14fe-408b-9c1c-882e491bb650",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b359fd-a161-44e0-ba76-e269f8f189ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce1bf1fe-a25e-4693-ad0e-1a95190b900d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "591bc8ea-69e7-4e0a-b8de-00f05fc63e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c502570-5968-4757-ad71-ab671a6f69c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a08c024-016f-46d0-b888-45ab0b1c27ae",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28bf482d-660a-4fac-9d9f-7788a3280734",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc1f052a-648a-4a0e-b660-e1316d3ced85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e21a4d1-0a88-4e42-be6a-bd7467d125cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "270e9833-eaf6-4853-be98-075762ceda92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f6203b-5c2d-4c30-a333-c354fcf7021e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d58e4b0-1224-492d-9853-d50f26815fbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "befaedf9-f51d-423e-b530-157e4d628665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0352e005-0c30-4034-a594-7a66c99d8cff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b36131f-e148-45d4-adf2-caaea9657b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f38353cf-3508-48ac-a17f-09243b3d4782",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69306288-36a5-4261-9e4e-79cb6289a891",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebdaf321-423b-4845-8764-38fa4f9f7b51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa6caaa-ab1f-4297-b671-0aa7540ca78e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e2eb3cc-eaf1-4e4b-b3b3-36fb79915a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d57fa98-a95c-45cc-ae93-0ab4553c803d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f94e050-e4ca-4b2c-96c8-7f9d5a69ce1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d20d2e4-8b8e-41ca-851d-5f4f188906d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b60cad-1272-4664-88d3-932d73045b34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3280bcf3-e0ba-47b9-ab8b-db8ae02ed054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1687aa5-e0f3-4ab6-928e-ae56f061a776",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1b77d0-3ebd-4480-a03b-cddcd3c5a02f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ed10509-9f30-4ab0-8fa1-c71cdf91bf5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab8ff29-51ce-4c9a-a8ea-927ff92b7532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf10f5f1-c884-4d7e-abfd-609f2a58f7c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17ba5ceb-4281-4bcc-a79b-df679f3bc099",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94104d20-b936-4f19-815f-93041c3cf896",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcf4611f-4229-4e33-855d-933bbd48c32d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9796e89-b3e7-4f80-9104-7724f9fea710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eca9154c-4fb7-42ba-b340-21c45710afbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e8ee1e-94b4-4a1b-83ed-e151702667d2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f573ecd7-3eea-4eab-8cdc-bd60f117600e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61c8debc-5ce4-446f-b314-360e6c26904c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "898f0868-2fa2-4dee-8a11-54f960e90dbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f945f6a9-e0b9-481a-b33b-4aa5fc615342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7fddc4b-8d14-4757-b916-a21cad71627e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b8af3b9-df14-4467-8a4b-18d7a23c3c37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b88823be-5bc4-4690-ae51-a2ed1fc72632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e2fb07-292e-46e4-a440-1eac4da39910",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c684fad2-393b-423f-8eb8-e5b1fbb46499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e51ac8-3fa2-4b12-b5a7-03aacbbebbdb",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd97006-3d6a-4926-8ab0-1c17687d0950",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e7ea9eb-de31-4ec1-b260-4c6fea1f71c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b8cbdbe-94d7-4597-98e6-91e6f8f3b8a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3a43775-2e02-489c-a2d3-f22f52ee16c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b45eba1-8549-4c51-b9d6-37427aee7655",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d556aef-20f4-485e-9660-7dd835fb99a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "415d5fea-fb57-4f03-8562-619b9ccd2cee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5865031f-cccb-46fb-bccd-87f732b535e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45bf9603-3325-4895-ad05-fbfeb6678046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34757369-aa54-4fc2-a86b-a6550e68c85e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd23f0c5-1d75-4c71-9040-1ac98c9e04ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6174e664-c47e-402f-88a9-26efb7200bc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70c1089-6cbe-4dd8-a7cd-4fb8ca66df1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b72f905-2cab-4a2e-9a5d-f7d3c247f102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94001e4-dbaa-403d-9046-86443b4cbe1c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f96bdb5-4758-498a-86ef-02827f01d21c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "622857aa-20c1-49c0-a4cd-95d85fca5ea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff26e43-14e6-4a38-8115-06e7c0d59a4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6da21731-15bb-48e6-ade8-21ae7a3e2df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023b4efa-29c7-451c-bbb5-eb0b64fcc25a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e70653-3ae2-4c89-8304-d96cb447453e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f592bb8-dd0e-4d06-bd14-4650be0f9a4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e984e178-de10-4b1c-be3b-00996e60d26d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa27bb37-205f-409a-87e6-62e4f013bf87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aafd8f5-69d9-41cb-aa61-dd839164cc59",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44221f52-2907-4d75-9955-ce8d6727ccd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b92aeebd-c892-4cd2-a0a5-fb5dfe46eb7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83dbade2-acea-40f2-816f-ad15dbf8faba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a76718f-4c8e-4ab9-af22-3de972f72e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94371ba8-bcec-41b9-9b74-09f256e3e60b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f866b355-771b-448e-a56b-16bdc587f445",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43cfef54-bd80-4f7e-9bf8-5b37e1afec6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e574856-62b0-40b6-bf9c-b00628417e39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbfc5ca9-bb6e-44c8-aaa1-e8d9d2cc46aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087a7797-379f-4980-a7b0-5720b29de777",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30445a89-efa1-4c95-8314-d642385e3274",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "281a41e6-ba24-4405-aadf-a47613d8777d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14633212-dc29-497c-b340-0f3a8ba332cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a086890-e83b-459c-bd98-13154dfa4ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3c38c5-41a1-4c6b-a22f-49ae000b604a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e08dfb5d-7ab2-48bd-91d0-a96e50c322dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52314082-04ee-4ed6-8e3b-88301cd28b2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2a6ec3-5015-4849-bf82-978431459029",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8026c922-2482-457b-a4b9-d40ee282ab13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd546c12-b82f-48ea-a0b4-c1cb72873b55",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff88ca16-2479-4906-8b38-bce0001ba24b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e172b76-472c-4014-8c0a-7c4533ab4af9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae730e1a-d683-447a-9bc9-ee82a797d424",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d77f856-8577-420f-9dc8-a970ca45247c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863d6fd6-0dfe-407b-b78f-cd282aa89287",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e8ee87-392b-4cca-9eb2-7dac0fa72d8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89cb5c44-7f23-4d51-a874-51f95a7a4c11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "196a29e1-834b-43ce-a2a0-793cb460e84a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9af322c-4dd0-41fd-a0d7-df6f5ae53877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b366148-7ac9-4695-9014-ce6bb60ac870",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76fe9da-0af8-43aa-933e-1791ef1baca3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5030db10-295c-4e34-93c5-5bc3d5a8f35c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a54a6c-0dd0-48df-93ee-30214d30717c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd8a8cea-0b82-49b7-a193-d079aed0cf12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62bbf4e-9cf1-49a4-a6c8-fd3960b6373b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8b23b0-2791-41e6-afb6-add7cb2e538c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0990289-3cb9-4290-a4e9-5a3d2dd9f6e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c660debf-054d-435c-814c-998a66459ac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61269be7-c5ed-438f-b4b4-62186a76f908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74dea37b-0b16-4a39-a26b-3bd8b50aade8",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59867c99-5fa3-4fca-9831-e7a6adb6d970",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd372e01-0cbc-4bc8-8f99-ca5242d48abc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4323cc5a-179c-42ee-a573-16ddc2dc4530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dff6f61-3b8e-4e55-98bd-cd3ed61e93b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b15623-6057-4d6c-9563-0ab7acb6a53e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d051ad6f-3401-4970-ae22-a919530cb491",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b0418a0-c577-4dc3-bc66-99e1f0c12207"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f6d04c-68c9-4712-91f2-64e0645e5d11",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd18245b-fb96-4584-9659-705100d96631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2afa61b1-f477-42b8-8d43-4a784eb98a2d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f3115b-4d19-40a7-a859-345056ab9e2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eb3182d-4a5a-4d8a-9f49-e6144eedaafa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca60a00b-684c-4e05-bd55-6f4e72191a9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52d50b13-00c6-4e30-8331-0a8e5e7bbe4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ab54f1-d772-46d0-ad5a-e6e1e664c72d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d52b49-c2ec-4ec5-8e13-51c64e3f0cd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cf973dc-1267-4412-a902-d54cd6251d92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99bb0a33-490f-4117-9e7d-80458dbccd48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fe07c6f-af80-4408-b074-c5b41260ad95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24154820-63dc-4136-9dc3-a448e939a57e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce6e27ee-22b6-4959-9811-a384cd965fbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4192eff5-a5ff-4c5b-8be2-1909a6a11159"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33b30f9-0445-4c14-abcb-53c255d24cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "389ad0c0-fffc-40e1-a210-8dda76aed677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05132796-6ec7-48b3-9720-90ec9167305d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9535d92-86af-4b1a-a1ce-1e8be0f67614",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57748916-2319-4ea8-b0a1-76eda8ee00e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8e4a6a-9342-4131-8700-88ebc552b184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf3c5365-c1ca-4093-9791-c52941dfd2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "208213f3-2d2e-4549-a45a-3e4c14af0046",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bc88476-16eb-4f9f-968c-ffdcbd9b37d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c94f52c-04d6-4c26-8505-2659f0d9a89e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4cd642-71c7-456b-97d2-52e5d9bf8465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcb53769-d617-4e69-87cc-75b2528f04af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e50559-bd6d-4002-ad22-92c3c9062d70",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa9c3ba-e4fa-459d-a4f9-3a7e585e8bc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cf044cd-21b7-4fb2-85be-e71012a74852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "481b63a1-749f-47c8-97c6-57dbc6ce849d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c21273fa-9a57-4e8b-a7b8-d1757a1bfea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b000cdc-9ed6-468e-b60a-320a25e9efc0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4a63e3-1a49-4aa3-acee-cbaa271104de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b29f5d1-9900-4545-bfea-401dd829f889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9531897b-6491-4298-9389-d5bbc31cb19a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72055fab-c925-4e03-aece-7c34f51796bb"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81a8e3a8-d8b8-44cd-8eea-0928c073e322",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64d2c212-279e-4c24-ac00-bbbdb4fc3760"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "db3ab369-b8b4-412b-b0dc-094e7ae5a4b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e11d776-f2b3-480d-b005-80410cd74f5f"
                    }
                  }
                ]
              },
              {
                "id": "783912e2-44e6-4fc0-8c0c-5018413d4b94",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a6ce807b-71ff-483c-b20c-9aead32582d0",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c75025-a375-4453-a071-b4950fecb507",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "15949639-d0e8-4aae-8c00-c32401fb3033"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4cc5bab-2f81-4083-9f0a-a653c50b9e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "359db4e9-d523-423d-a23a-73c964ef45c7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a65c5457-687f-4914-80fc-a7ecec1b5953",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f68d3eab-b036-4184-a840-5700469f3eee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c07dd14-36ee-4dae-8190-3fdea0bb23d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d802bb8-65b7-4277-8d58-e4b5c3a958a5"
                    }
                  }
                ]
              },
              {
                "id": "03d67117-821e-464d-9d50-894e13751553",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "26154a04-38b3-49c7-b190-a606de9db9b1",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48836981-4c95-492b-9ca5-a89985fd52d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "64520577-3c99-4a0c-a094-7b66e92869f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4527bac5-d0de-4d18-a4cb-428b18c8e0bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f14ead8-87b6-4bcc-865d-b908cf327920"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fa974c36-7acb-4226-8789-0de157d7a335",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e5b2a230-3fb2-4205-927f-47565df2092f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7483fd21-f5ac-4b2d-ac08-9dc5b27dfd95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5c217fb9-2ff5-48c2-b664-8f862dff93d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9925059f-5980-4ab4-afd4-342b7e130733",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b6e1dea-a580-499f-a080-4b6d6d8a64fe"
                    }
                  }
                ]
              },
              {
                "id": "d009a87c-4543-4d45-a897-e28c07e84988",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5baedb59-d664-4d18-8a46-c6bf560765f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bc4b33e1-6493-4685-9b3e-ba53b157894e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7190dc66-a811-4f22-a0eb-693b48b44676",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96503df5-4943-4578-ab82-4f017cafbb3d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe3db290-40a3-4590-ae2d-e447ca205943",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3f35310f-21c5-4d61-8dce-38ce062fdb18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5cd347ba-345d-459f-8e79-8337c0ab14c0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "319653f8-496c-449f-aa33-70a0d0772b70"
            }
          }
        ]
      },
      {
        "id": "f7f45caa-fb34-4660-b541-c8c20ab6c18e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b9fd34d7-df4d-43de-9f97-653a3ef9b830",
            "name": "Negative Testing",
            "item": [
              {
                "id": "69e92ee6-5245-4959-8b0f-a6ff92d5f1e5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5e600f34-2a82-4d62-a245-069aa6c9e64b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572afc0e-8f41-4b91-8e88-417b646df2a8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c44079cc-1e28-4e97-bd54-5d29c09584af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0139ae2f-db3a-4670-8aa0-e18b36b4621b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ee1ccad-42cd-42b3-95e6-298d86bb5f31"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf44a1ca-d515-4edb-9367-5b449abe0211",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9655149f-ce35-44c2-87de-ad7b4ad20e5f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3fd3552-fdb8-40aa-b86b-64cffe63c71e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c49b3ae6-274a-4eee-b690-b7dc60c0d906"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2fe0e582-7467-4b37-8b40-829df340979e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9884a556-c7a9-40e2-b02c-0b83b6be10d8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa173905-e212-4c60-8a66-2d4c03fb341e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ddbdea40-2ac5-412e-8fa8-9618a5d5888f"
            }
          }
        ]
      },
      {
        "id": "039add8b-759e-48e2-803d-81a422453dd0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f46749df-0d56-4e27-8d6f-98f19aab0837",
            "name": "Negative Testing",
            "item": [
              {
                "id": "909f17d1-bd05-40bb-8084-46ff6f3ac8cb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fa68a15e-2694-4ec4-9b61-5457e739887b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de8da2e4-8310-418b-90f2-4d40645fa9ea",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87844235-91f1-47ce-bb28-e662d2d14cb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd1e07ec-c3b9-42c6-b743-01bcb3bf2022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c85bc73-6258-450e-a137-0dd822edf116"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d47841cc-0210-41fb-9675-998bffc3b36a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35e29fe9-39cc-440e-864e-24bcc9bdc9c4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab8525e5-d8b5-44b2-a3c6-b9d5b50ffe3c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4a76df4-b21a-4d4c-b6da-168a146fe494"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d654219b-304f-42a2-8065-e728541d4249",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "464ae75d-a3c7-4fff-b560-4ba79a11215d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ccd2e6b9-e2e2-43db-a0ab-6d08228ae77a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "878435e3-65b9-4732-b59b-d8855aff2734"
            }
          }
        ]
      },
      {
        "id": "be162748-8c03-4ec7-95f8-8a9edd837c48",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2102a033-6f64-47a7-a212-88d6be5b7d15",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4da18220-3bf2-4680-bf65-2050a77f60c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "12c066c8-9af5-44b7-91c2-78eb1970c052",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68775ffb-0e05-4f54-92af-cfc965121ec4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d0be8d1-9af7-4885-96ce-95cc5417cd5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b1bdf8-13d3-494d-a9bc-d3f723b33784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70a65352-30fe-4f39-a926-e80df536abbb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fee5630-6a71-4bbc-a376-7254072916f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e42ec7b-e3a4-4369-a7ee-990903ce0692"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a98297d-b0dd-48e3-9bfd-5f75ec0dc68d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5de94cc7-04e4-469a-96cf-6368f3375671"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "987aa36b-28e1-4020-a5da-a7ee7dc5891d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5866e528-27a3-4aea-8914-fb2dc61385f8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70133180-d3d4-4d4c-8d6e-d2d59ecb3e66",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b8503219-9dd7-43a7-ab06-932c762171db"
            }
          }
        ]
      },
      {
        "id": "dfdca90a-00c1-4332-b986-402a436b43f0",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6803db86-a32c-417b-bc06-e11f689304f1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1111bb48-fc4f-4860-85c4-1e71240c92e5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "de0c518d-970f-49e0-80b1-5183ab7db33c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a9ca523-f520-41b4-9dcd-edbd7a9a3b9c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a995c253-4996-4317-996b-f5cef1f32087",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 110.53333333333329,
      "responseMin": 21,
      "responseMax": 555,
      "responseSd": 83.51574981903863,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1709771282544,
      "completed": 1709771323712
    },
    "executions": [
      {
        "id": "7cef9980-cba0-463a-9541-1b416e49be51",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "49737480-9323-4285-a72c-1d875a277734",
          "httpRequestId": "fef2d5a9-5ce7-4b9b-8152-0791c3feecc0"
        },
        "item": {
          "id": "7cef9980-cba0-463a-9541-1b416e49be51",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0e519ece-1ab2-471d-bf0f-290e4dcefc4f",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 0
        }
      },
      {
        "id": "66922026-0f39-4def-bce6-ee6cb79ffd49",
        "cursor": {
          "ref": "29bfa41b-2b31-4e0e-bea5-969ae0261eb9",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6f002109-b9a6-43f8-94fe-d166abd98cca"
        },
        "item": {
          "id": "66922026-0f39-4def-bce6-ee6cb79ffd49",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "484f7fd8-501f-4c69-ad30-ecaf6e5176fd",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "ef0eb0ba-0e7e-4b0e-91e9-875ca515c380",
        "cursor": {
          "ref": "7f028190-49c7-497d-a71f-8090928ef13d",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4026095f-d724-40f3-afb6-a19b4f0b9efe"
        },
        "item": {
          "id": "ef0eb0ba-0e7e-4b0e-91e9-875ca515c380",
          "name": "did_json"
        },
        "response": {
          "id": "396b9531-1207-46b1-95a1-64f79d1e6e3f",
          "status": "OK",
          "code": 200,
          "responseTime": 323,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a78af4-120e-4561-b500-21bf2c80d907",
        "cursor": {
          "ref": "66f28322-f47a-4c66-b400-4f7fb8902d42",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2a66fc7f-0e95-4ff8-a20a-3983c581cbc1"
        },
        "item": {
          "id": "e3a78af4-120e-4561-b500-21bf2c80d907",
          "name": "did:invalid"
        },
        "response": {
          "id": "07d41191-04e0-4192-8a78-1e4bd7728320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a78af4-120e-4561-b500-21bf2c80d907",
        "cursor": {
          "ref": "66f28322-f47a-4c66-b400-4f7fb8902d42",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2a66fc7f-0e95-4ff8-a20a-3983c581cbc1"
        },
        "item": {
          "id": "e3a78af4-120e-4561-b500-21bf2c80d907",
          "name": "did:invalid"
        },
        "response": {
          "id": "07d41191-04e0-4192-8a78-1e4bd7728320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d6589f-eb72-45d5-b87f-34b7d3c91d21",
        "cursor": {
          "ref": "670ec6bd-93e8-4d7d-8669-60f721686d53",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "25d16c61-70a0-4909-9c33-e2162131fa4b"
        },
        "item": {
          "id": "88d6589f-eb72-45d5-b87f-34b7d3c91d21",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1e670e26-70cc-444c-ab0b-143f280db6e0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 134,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e60681b3-3101-4d91-98be-ed60ea1b8162",
        "cursor": {
          "ref": "112f6d06-07b7-4472-b81e-10c856d96a56",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "eb5dd9a9-f7f0-4a07-b2b4-5eb6b6f628e9"
        },
        "item": {
          "id": "e60681b3-3101-4d91-98be-ed60ea1b8162",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "cac48174-dde0-4cac-bad0-e2cb7c28e5cc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 85,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "788fb193-5f2e-4244-8360-d8cb28477b6f",
        "cursor": {
          "ref": "ef97c671-d761-4378-b63f-7d75588cd3a9",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "40e84038-0777-4ccc-aeb2-d6c7a5624f94"
        },
        "item": {
          "id": "788fb193-5f2e-4244-8360-d8cb28477b6f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "deec0ce4-0261-4599-bb56-43c1a821ff11",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27182cb-1fc2-454e-9de2-5d672ac6992a",
        "cursor": {
          "ref": "31bfc1d9-6917-4517-9750-735380944e4a",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ba1b20fa-7c49-478f-94be-e1a98a5c7015"
        },
        "item": {
          "id": "a27182cb-1fc2-454e-9de2-5d672ac6992a",
          "name": "identifiers"
        },
        "response": {
          "id": "d391f9d8-0c1a-4f2d-a82f-c911c008b412",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7185bd-40b9-40c6-a411-e69191a1377f",
        "cursor": {
          "ref": "0fc55546-5c48-4fcc-8193-7459ef1b6a6a",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7261f74d-e19e-44bb-b534-57fef5030c12"
        },
        "item": {
          "id": "8e7185bd-40b9-40c6-a411-e69191a1377f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5957ebb1-2355-4e28-8f5a-8de0dcb4d34a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89f33fe2-b35b-4dea-8357-626d198341ef",
        "cursor": {
          "ref": "e03f3fde-58c0-45b4-916c-21a9b9c848ec",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0c082742-282b-4681-96e5-a875a8fb5cf4"
        },
        "item": {
          "id": "89f33fe2-b35b-4dea-8357-626d198341ef",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dd076d59-c2d9-42ca-aaf8-ea4264d95d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c7862aa-cef2-4d09-93d7-a1e0b17d5fb5",
        "cursor": {
          "ref": "16954cc8-89da-469f-b4fe-b5f2e1b0e7e8",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7f1ed968-d07c-4259-bc19-285859a88ac1"
        },
        "item": {
          "id": "7c7862aa-cef2-4d09-93d7-a1e0b17d5fb5",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "22a719b1-8566-42a8-9ff0-51ff90bcaaf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071fdbef-4e6d-49d0-92bf-7e43ad3fa6a2",
        "cursor": {
          "ref": "986ffd34-3049-4b1c-9c41-672ed4ad4a1b",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0df5c6ef-6b93-4cf3-bffa-ab776bbfb3b2"
        },
        "item": {
          "id": "071fdbef-4e6d-49d0-92bf-7e43ad3fa6a2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "8efce0c9-3679-4b8d-9e5c-b13222d856ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f93f0ec7-8411-4262-b8c5-4e388a10614b",
        "cursor": {
          "ref": "7414968d-de19-496d-a58e-f07ea31479e9",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "dfbc6548-52c9-4797-a673-146df62732c3"
        },
        "item": {
          "id": "f93f0ec7-8411-4262-b8c5-4e388a10614b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "dcb40c16-886a-4110-994f-9e381d42ca04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1667fb42-bb52-4a84-aaf5-aedaf75b4628",
        "cursor": {
          "ref": "9e7f9d5b-33f6-44f0-818a-7cab9e677bdb",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a678e875-424b-4f52-9f1f-8f6f7986f3ca"
        },
        "item": {
          "id": "1667fb42-bb52-4a84-aaf5-aedaf75b4628",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d5c3d5f5-7d40-4a32-b5eb-46c4ac83a0d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22ff940-ff92-4729-ae0d-63401996264f",
        "cursor": {
          "ref": "8c739219-94aa-467b-be43-ee1a82b1ded1",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "eeaddca5-3a24-4d35-b6e3-13de295a1465"
        },
        "item": {
          "id": "e22ff940-ff92-4729-ae0d-63401996264f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d8cbeb1d-2a66-46cd-b659-c6d68376b328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9075dd92-bee8-4f05-a497-1203596e867a",
        "cursor": {
          "ref": "d2383633-08e8-4a26-9577-47f24b5b72e4",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8d879263-f928-4e58-95c5-789106cd6996"
        },
        "item": {
          "id": "9075dd92-bee8-4f05-a497-1203596e867a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f7fe7d5c-ee2a-456d-a7e4-329725e5e709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92914c6-51bb-4816-b021-8b88b1e95013",
        "cursor": {
          "ref": "312814ac-30a6-4e49-8404-773928d15176",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f2faf291-6938-4f3c-9fe1-29999d391923"
        },
        "item": {
          "id": "b92914c6-51bb-4816-b021-8b88b1e95013",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a1ef1be6-cb15-4d91-bd1b-bde29d3cf8f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "591af4ff-b1bb-47f2-b478-0bce79ff8659",
        "cursor": {
          "ref": "1e937427-9177-45eb-8963-26012a0a4289",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f359c51b-16e2-42c3-a216-88726fe90def"
        },
        "item": {
          "id": "591af4ff-b1bb-47f2-b478-0bce79ff8659",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e13359a1-0679-441b-b2c7-c1bf63dd7ebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31e3c7b-3ab6-4545-a62c-079a730463dc",
        "cursor": {
          "ref": "b6bacb69-635d-40a8-9a10-fa79f73412f7",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8e9e0c40-36d3-4ef2-88df-d4533056ec02"
        },
        "item": {
          "id": "c31e3c7b-3ab6-4545-a62c-079a730463dc",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "535d92d4-f911-475c-947a-53cc9d0d55f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "431f3080-25a2-451e-9dce-e1b56c6c1ece",
        "cursor": {
          "ref": "a807dcb5-556c-4db2-b31d-dfde8a39bb69",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "03016c2a-cbea-4006-97b7-208e23faf8b1"
        },
        "item": {
          "id": "431f3080-25a2-451e-9dce-e1b56c6c1ece",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a7e0a356-fcab-492f-bf29-5cce5cdabb6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "847b16b5-9ec7-43dc-85ba-3f7937ee666e",
        "cursor": {
          "ref": "b6680505-23b8-49ec-9d4c-f9761ba6bcf8",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3c64cf89-b096-4f93-89eb-b38545c00c0c"
        },
        "item": {
          "id": "847b16b5-9ec7-43dc-85ba-3f7937ee666e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "bd93f3ab-597f-485a-bd02-ce3b750c5f9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7cb59f-e730-4e5f-94bb-ed06ede42ca3",
        "cursor": {
          "ref": "31c3ef79-57f4-4a09-9b38-c24d001badf2",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1bfa0fe9-e764-4136-a58d-10694ed97d3f"
        },
        "item": {
          "id": "dc7cb59f-e730-4e5f-94bb-ed06ede42ca3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "50765bb8-9d8b-41f3-a84a-00ad48c25e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ebdf1ed-12d8-40cf-9698-39e4b9d8d3c2",
        "cursor": {
          "ref": "23782342-8bc3-4c29-acd2-a2fa99bb4fa0",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2519b144-1ed9-457d-b838-cedf9903fce0"
        },
        "item": {
          "id": "2ebdf1ed-12d8-40cf-9698-39e4b9d8d3c2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b41dbbee-5320-49ee-af1e-abd7a5070363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c3fd79-590d-427f-a09b-a0a8bda0401f",
        "cursor": {
          "ref": "a015f4b7-fa6b-4b94-ba52-5228920c80a5",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "643ab309-6848-4642-93b1-30d3ef31eca0"
        },
        "item": {
          "id": "66c3fd79-590d-427f-a09b-a0a8bda0401f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c3935715-f60b-4401-ac7c-de29277ae573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7567575-618e-4349-864f-d3a799af7930",
        "cursor": {
          "ref": "d4641406-031a-436b-a8b9-5c605e4cb2ee",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "759faccc-8ef7-43d6-9abb-43eab4f01182"
        },
        "item": {
          "id": "b7567575-618e-4349-864f-d3a799af7930",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "6637293e-93f2-4628-b177-487c3239c880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d4db0e-96dd-4ee9-9ad6-fd559547845e",
        "cursor": {
          "ref": "02e66899-7058-4d16-9579-b647d05b5d8a",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6d9b0034-0ae3-43ae-85a9-ba69b8b2d4ed"
        },
        "item": {
          "id": "a0d4db0e-96dd-4ee9-9ad6-fd559547845e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4d58b1d6-97eb-4d25-8248-e81c77698fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b0e5d79-b413-4c20-8cdb-c5ec6f51ab5d",
        "cursor": {
          "ref": "78bbadbe-fc39-4729-b9e3-e769d07cf5ed",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b99fe38c-425e-4f24-b130-b7d2e27745a9"
        },
        "item": {
          "id": "8b0e5d79-b413-4c20-8cdb-c5ec6f51ab5d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "33479edb-5f02-44c8-b66b-7bcc543eabb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf9d0f2-7287-442a-9aff-2a8ad89182b1",
        "cursor": {
          "ref": "141f6798-efeb-45b5-8d04-4c76881f4bb1",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2cfdaf70-6d5c-4346-85e5-1bfa331260ad"
        },
        "item": {
          "id": "ecf9d0f2-7287-442a-9aff-2a8ad89182b1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "9946d1f0-bc6f-4a9c-bf42-d9d1e27e548a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ba1140-843b-4093-9cd7-d50cfeaae6d4",
        "cursor": {
          "ref": "89b82a61-1f47-4aa1-b3ea-5779ad2af7fd",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "83b4a779-5726-4c6e-929a-153adf6e0373"
        },
        "item": {
          "id": "72ba1140-843b-4093-9cd7-d50cfeaae6d4",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9de2e821-a2e0-4224-a673-3d56c371a3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5081b0a4-8b8c-4c44-bc8c-de071d639af8",
        "cursor": {
          "ref": "91e55cdd-7264-46b8-b32e-a2e07c620ba2",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "594c1ea5-1e38-450d-b53d-b33aeb8b397e"
        },
        "item": {
          "id": "5081b0a4-8b8c-4c44-bc8c-de071d639af8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4514ebe2-0fa3-434f-8983-19d5a1ff38eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3415ee4-4b22-43ef-83f9-b0766648c1dc",
        "cursor": {
          "ref": "2a165a1e-8fef-4c52-9091-3f2523cc1ef3",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ac9dd2ed-55a4-4b86-ae0c-32f3889a0d76"
        },
        "item": {
          "id": "b3415ee4-4b22-43ef-83f9-b0766648c1dc",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "96bccd9e-0a11-40ce-97bc-f9abd58a6766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2486a7f-1fab-4521-8062-085d2d072dae",
        "cursor": {
          "ref": "ed87acf4-5e3e-4b20-8edf-cca59e336ddb",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "77385676-423b-4a07-8f36-511b2df9a4fe"
        },
        "item": {
          "id": "a2486a7f-1fab-4521-8062-085d2d072dae",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3d81159d-279c-4c0f-85d9-5f5ea3eb5150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b8f1232-c1ef-4e01-b335-3411c574fb20",
        "cursor": {
          "ref": "0ee356cc-d051-44cf-ad2c-7ba6bfb1153a",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9cdc8320-0862-4107-8b19-50d2d0a71487"
        },
        "item": {
          "id": "9b8f1232-c1ef-4e01-b335-3411c574fb20",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d184a24a-2ae9-49d5-a2c7-88718ad7f3e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b8340fa-ef74-4cbc-88c1-7bfc05966801",
        "cursor": {
          "ref": "57257bce-3171-4b62-a790-b8f19914f834",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "927bad9d-1113-4ca4-a0ec-bb0062b6bf1f"
        },
        "item": {
          "id": "5b8340fa-ef74-4cbc-88c1-7bfc05966801",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ff8b7640-5376-45a8-a9d2-d25cdabf6eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68afede-ac9b-4d06-ae22-68f5942d51db",
        "cursor": {
          "ref": "b43840b6-a2d9-4bc5-a279-e97c99745cf7",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b63c07d0-1213-41c9-8bdc-adffa77c6e65"
        },
        "item": {
          "id": "e68afede-ac9b-4d06-ae22-68f5942d51db",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7522b867-72f9-474e-9dbc-27299992fc00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d12f82-4c97-4ca2-a2bc-6a89bbfe8000",
        "cursor": {
          "ref": "debfa802-8670-4950-81bd-8dc865ab766e",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "348b3899-a2a6-4997-b904-9687c7bcb8a2"
        },
        "item": {
          "id": "47d12f82-4c97-4ca2-a2bc-6a89bbfe8000",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4a425acf-53e7-4597-942b-58894d6d0e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6deba5b8-0edc-4ce6-b97d-1ec82f160e58",
        "cursor": {
          "ref": "a2eab457-b908-4e72-8027-d395aa76d696",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "43fc2ec6-eebc-495e-88e4-0d7ef4652827"
        },
        "item": {
          "id": "6deba5b8-0edc-4ce6-b97d-1ec82f160e58",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "161d50af-3ba9-439d-9b3b-2e06cbfacc67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb594662-7f24-45b5-aab6-44dd835a46c0",
        "cursor": {
          "ref": "55cfbff7-9961-4a21-8b78-b8de76e208a9",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "047e7f92-00db-4339-ac09-a811510b149e"
        },
        "item": {
          "id": "bb594662-7f24-45b5-aab6-44dd835a46c0",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7fbb02ea-a57c-4311-85a5-65d48de49b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef6ce570-f0a0-4b5c-8dbc-740f06220aec",
        "cursor": {
          "ref": "7858f89e-fe5f-45e5-83b0-d344698a6b62",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3ee58af0-1b22-48a9-86a1-bcad8bc33271"
        },
        "item": {
          "id": "ef6ce570-f0a0-4b5c-8dbc-740f06220aec",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "95123bb1-b6d7-421c-b3e0-2c243e486c9d",
          "status": "Created",
          "code": 201,
          "responseTime": 555,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "ca94082b-af67-47d1-9a1e-cfe4856a1aa5",
        "cursor": {
          "ref": "54046416-60c0-4bb7-93d7-e3ab22b6428b",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "efae3a10-5630-4e71-ad15-1bdf0691e9f1"
        },
        "item": {
          "id": "ca94082b-af67-47d1-9a1e-cfe4856a1aa5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5c1de694-2bfa-4c15-b046-cf2c5051221d",
          "status": "Created",
          "code": 201,
          "responseTime": 358,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "1137e314-10af-426b-b9a7-e1628bbcacf3",
        "cursor": {
          "ref": "cf52ba95-5edd-4dab-ae37-4d9ec83b5a10",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "770bb723-d5c2-480e-a49f-c7c0ee54352d"
        },
        "item": {
          "id": "1137e314-10af-426b-b9a7-e1628bbcacf3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f71e408b-5425-4417-98a3-325d5d25e863",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "9fdcb6df-7154-4fbb-a986-8740e1f6309a",
        "cursor": {
          "ref": "d867fc28-6489-4a5b-b2a2-24e9d34b71b2",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b9bd4655-ce70-437f-92f7-a4a37767cd21"
        },
        "item": {
          "id": "9fdcb6df-7154-4fbb-a986-8740e1f6309a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "fef8d752-83ec-4f0e-80f4-22c4172520f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be345365-7672-4a68-a2b9-f79fcf8a606d",
        "cursor": {
          "ref": "00c32532-442f-4590-bb43-886d99efc0a1",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "32c7d0f4-7608-4c4f-ac6f-6b9cff7ce454"
        },
        "item": {
          "id": "be345365-7672-4a68-a2b9-f79fcf8a606d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "83d45df6-2591-481b-8ce5-39018c42289d",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e6604c52-ed2d-4f6e-b7c2-215b981ab134",
        "cursor": {
          "ref": "fdcf174d-3adc-451a-a252-8c88eb0a31f2",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6c64d129-79a9-4695-9a0a-2cd03fd084fb"
        },
        "item": {
          "id": "e6604c52-ed2d-4f6e-b7c2-215b981ab134",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d343ba7a-dc75-40e8-97e9-6bbd5a1576cd",
          "status": "Created",
          "code": 201,
          "responseTime": 375,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "da5dae33-d4ac-48c2-8bd9-d71938c5d6dd",
        "cursor": {
          "ref": "57968990-3392-4d03-99c8-bb4141ab566d",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "45b02287-e28e-4a62-8142-f32d8c3cbe88"
        },
        "item": {
          "id": "da5dae33-d4ac-48c2-8bd9-d71938c5d6dd",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e7f439ea-66b3-4f3c-93f1-e1f82ff03bf2",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "dcd4f80e-955e-484c-819f-e3fb0dfb3ab2",
        "cursor": {
          "ref": "e319664e-64c8-4b37-b391-edadec0d1ecb",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "fa97fcd9-7d31-43ce-969b-862a5683e84a"
        },
        "item": {
          "id": "dcd4f80e-955e-484c-819f-e3fb0dfb3ab2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f72ebca2-bf9e-48af-8820-6eb036dc25a7",
          "status": "Created",
          "code": 201,
          "responseTime": 367,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "397fbb50-06f8-4418-89b2-dbfe501142ae",
        "cursor": {
          "ref": "200deb12-fe85-404b-bcff-e28a934dcff6",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0011261c-d569-4469-9aa9-117ab20e95a1"
        },
        "item": {
          "id": "397fbb50-06f8-4418-89b2-dbfe501142ae",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c201bb06-b921-41f6-88d0-be66d5cf0246",
          "status": "Created",
          "code": 201,
          "responseTime": 351,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "457a1683-f249-4fb9-a88b-e8ea28113196",
        "cursor": {
          "ref": "42607fc2-9d84-4e07-998c-46a137f88ebc",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3be98091-9dba-444e-a2fc-299ee0d923f8"
        },
        "item": {
          "id": "457a1683-f249-4fb9-a88b-e8ea28113196",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e8b34066-7d43-47f7-b356-239e1db12b3b",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "1f52ea61-d6f9-4a1e-91a2-ea655b8e5fe1",
        "cursor": {
          "ref": "4624f758-337e-429c-8210-0355bed24430",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "03c25027-caea-4097-b09f-04fd9cff6549"
        },
        "item": {
          "id": "1f52ea61-d6f9-4a1e-91a2-ea655b8e5fe1",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "42526102-d74c-4868-b7e8-444277521107",
          "status": "Created",
          "code": 201,
          "responseTime": 480,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "f7bf01e3-52c5-448c-89ca-6bfaff135513",
        "cursor": {
          "ref": "a8e5def1-8d98-4a23-8e31-da0423a2aaac",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5d32152e-ff99-43dc-a590-8bc06f9fd6c3"
        },
        "item": {
          "id": "f7bf01e3-52c5-448c-89ca-6bfaff135513",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a114f5f4-b980-42ec-ac57-5b43e1f76339",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "19cf8b86-9a4a-4c30-bce8-4b490134e4e6",
        "cursor": {
          "ref": "f6cf77f8-3344-4825-a4af-10a72d3ef103",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "039da038-0ffb-42e2-bf16-b9b2f442b73a"
        },
        "item": {
          "id": "19cf8b86-9a4a-4c30-bce8-4b490134e4e6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1d1d2266-b5a5-4e92-9d41-c18416754f98",
          "status": "Created",
          "code": 201,
          "responseTime": 361,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "23fa658f-c0cd-49a4-9e5c-f6d7c330e8a4",
        "cursor": {
          "ref": "21a0ef18-0b5a-4576-8047-08e42baae303",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7f06893b-e087-497b-8aac-3f64bedbc97a"
        },
        "item": {
          "id": "23fa658f-c0cd-49a4-9e5c-f6d7c330e8a4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8e7a5d13-dd98-4ce6-886f-9b05f82a7b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6f0e22-38f6-438b-be0a-bb1dd4b8857c",
        "cursor": {
          "ref": "ad286a85-bb04-4ce9-a108-41dd30e8ae7a",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7c846600-9ecd-485d-8318-045578d636ff"
        },
        "item": {
          "id": "0c6f0e22-38f6-438b-be0a-bb1dd4b8857c",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2207d26e-f160-4ef2-81b8-f2fa9c823cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3e1bec1-c323-4728-ac30-91aa44e4aaca",
        "cursor": {
          "ref": "590f8ad5-fa28-4f9b-9667-2578612088a9",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4a7b1879-6c88-4829-b67e-657501c86dd6"
        },
        "item": {
          "id": "a3e1bec1-c323-4728-ac30-91aa44e4aaca",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "88df0a72-695a-40cd-88be-5ccdc788ef67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455c6748-b62f-47cb-b2a7-b5ceab5c4afa",
        "cursor": {
          "ref": "e42e6c25-9c16-4f11-a945-27ce1ea8776b",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f23a1cc5-ba5b-4b0a-aa73-8d5a9e2c38e8"
        },
        "item": {
          "id": "455c6748-b62f-47cb-b2a7-b5ceab5c4afa",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0f644de3-e840-4c7b-a2cb-02c60451cc3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08183df4-492c-481a-a904-5a12e7f74847",
        "cursor": {
          "ref": "93ae7cf4-5d18-4fca-af87-82cb22d4a79b",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "46c16cf7-2f27-4305-bca5-9656a6b12ec7"
        },
        "item": {
          "id": "08183df4-492c-481a-a904-5a12e7f74847",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1ff8e948-5a69-4879-ad6f-cbf19af78b73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99dd41af-1880-440e-8bae-945484f039fc",
        "cursor": {
          "ref": "f2971364-e264-4a9a-9bcc-bccf63547227",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4dba1487-7c4a-478f-95c2-5c8c61d05a84"
        },
        "item": {
          "id": "99dd41af-1880-440e-8bae-945484f039fc",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "159d0d17-46f5-4ee4-8e22-2448cb7c3a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8fe858c-b7c6-423e-a0a6-2c04c42bf6e0",
        "cursor": {
          "ref": "1dad8cfa-d69e-4f83-b75f-e425490a1554",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8ad507f4-faa7-4745-ad4c-d3457b5c8c2d"
        },
        "item": {
          "id": "c8fe858c-b7c6-423e-a0a6-2c04c42bf6e0",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4b3fe3c0-0157-417b-b184-b7b584a50afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b940d053-5d06-4d5c-af8b-8959111be8da",
        "cursor": {
          "ref": "43eaab08-08ec-43a8-ade4-760a4073faf7",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "92ea98b6-9f54-4819-b964-f90066758569"
        },
        "item": {
          "id": "b940d053-5d06-4d5c-af8b-8959111be8da",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1e9e3c26-f163-45c2-ae82-38892924a872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24b8a4c-ef91-4e0b-98ff-261ff2f4a5c8",
        "cursor": {
          "ref": "307927af-28fc-40e0-b93c-5f74f8600d5f",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "37e7ead4-b301-4eb0-a374-4b09b19cb00c"
        },
        "item": {
          "id": "a24b8a4c-ef91-4e0b-98ff-261ff2f4a5c8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "5326804b-1820-4460-9aef-4eb003b4871e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be94b05e-494a-478c-bf92-9572c03007af",
        "cursor": {
          "ref": "786522fe-b664-4dca-9f8f-4168800661bf",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1b266234-469a-4d40-8e18-8e387527da0c"
        },
        "item": {
          "id": "be94b05e-494a-478c-bf92-9572c03007af",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "71ab89f7-5596-4c16-a773-b7975680e5b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d1db443-8458-430d-a0fa-76dd9806decf",
        "cursor": {
          "ref": "f1f182d0-01bf-452a-bd42-d9a9614e2018",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "84c6177a-3364-49c9-aa85-3a09d4342d81"
        },
        "item": {
          "id": "5d1db443-8458-430d-a0fa-76dd9806decf",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "132be342-b6d3-4060-9b22-11d28a6c4867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b32aae-aed9-47c0-8520-951d874ba9d9",
        "cursor": {
          "ref": "a2807539-3fc9-4e0f-90e9-b81dc4ec90b2",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f67e7a73-2593-48f0-9282-9ed0de7ec036"
        },
        "item": {
          "id": "c7b32aae-aed9-47c0-8520-951d874ba9d9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "7a29553f-5636-47c9-bb55-a2363a4f6957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5959e7e5-baf5-4d2b-848a-deb653df4b77",
        "cursor": {
          "ref": "3196b0cd-74b8-4b7d-a8ad-e09754515975",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e9932d05-9254-4759-80c6-d37460a52c36"
        },
        "item": {
          "id": "5959e7e5-baf5-4d2b-848a-deb653df4b77",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7b322d8f-fd56-4005-80f8-2608c4059eb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6041d06f-3e30-4abf-a019-d8e0127fa41d",
        "cursor": {
          "ref": "1648001b-9717-467e-9ecf-5757a35506dd",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2c820d0a-d370-4136-96aa-e76e1d252028"
        },
        "item": {
          "id": "6041d06f-3e30-4abf-a019-d8e0127fa41d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "da65a4c1-3aff-4122-a956-96ca6f1674ec",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "62fceb8a-f56b-4df5-8e32-74e2a2b14c3a",
        "cursor": {
          "ref": "3d350b0a-5c5c-4389-b83a-a0d0dd99c335",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "43dd57b3-da2f-4c14-9f00-3c2f1eb5e504"
        },
        "item": {
          "id": "62fceb8a-f56b-4df5-8e32-74e2a2b14c3a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "063b9396-affb-43c4-9cd7-3d7ffa2ec052",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "842cdee8-c2f8-4deb-81f8-f4e6cd9fb308",
        "cursor": {
          "ref": "ba36c1e8-fc27-431a-af71-268d4387a53b",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "32923f9d-a20c-4b64-bb78-3b7cc6253a55"
        },
        "item": {
          "id": "842cdee8-c2f8-4deb-81f8-f4e6cd9fb308",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "513bea27-0c1c-47c4-b9e8-49ee865ac1f9",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7b3b6888-020f-4526-be0c-29ed350bad74",
        "cursor": {
          "ref": "7dd22779-4788-411d-8fa6-576e408e6c2e",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "29a31d31-bf49-4051-a0ab-62b587dc859a"
        },
        "item": {
          "id": "7b3b6888-020f-4526-be0c-29ed350bad74",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d3c95c64-a264-4bef-8520-ae83ab247ce0",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "ad8a116b-bb8e-4e0f-b45f-5fa26220c366",
        "cursor": {
          "ref": "ba5dc651-7836-4d25-9e2d-b1456ac7ba0b",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f5744bd0-e8ea-404e-acb8-40dbb7cec471"
        },
        "item": {
          "id": "ad8a116b-bb8e-4e0f-b45f-5fa26220c366",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "65afeb61-1e58-40e2-82fe-2b73b374dbb4",
          "status": "Created",
          "code": 201,
          "responseTime": 356,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "8b1f5eb4-9797-43a1-8952-0875c03d6ee2",
        "cursor": {
          "ref": "3f7ee8fe-7d7e-47ed-bfdc-1b68e487f72b",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8f740ca2-8a2c-4779-bffc-962867b9eb80"
        },
        "item": {
          "id": "8b1f5eb4-9797-43a1-8952-0875c03d6ee2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bbe0ac3a-8467-4fc2-8b12-397a0f776831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07246378-037f-4b76-9be0-239ca2abcc54",
        "cursor": {
          "ref": "03f3f805-cc2b-45e3-862d-c19a183938ab",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "067f8125-dad0-4df1-817e-8ebbb235b686"
        },
        "item": {
          "id": "07246378-037f-4b76-9be0-239ca2abcc54",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "de255e6c-971c-4c8f-91fb-464e9c940a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8585228c-ebbe-4678-b204-4167889a067e",
        "cursor": {
          "ref": "b0cde159-4cc5-4a34-b40c-ac640c7ece9f",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f6b3a98d-a85a-4c74-8a50-15f7a6aaec63"
        },
        "item": {
          "id": "8585228c-ebbe-4678-b204-4167889a067e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "827826ed-7b06-45c4-b46a-8367d572faff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ee1f78-9fae-449f-895c-420ff253ecb6",
        "cursor": {
          "ref": "095fcd0f-3931-4347-bc54-acb3d1694f79",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8d463226-3a37-4e9a-a47a-18c4451a2b30"
        },
        "item": {
          "id": "e7ee1f78-9fae-449f-895c-420ff253ecb6",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c281d6ba-f062-402d-9817-2272c4d842d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dfafb5b-87ad-4df6-af52-b0b8b8ab95a8",
        "cursor": {
          "ref": "c35df4a8-1d5f-4516-8e40-a327c5de463c",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6c632c3b-bd70-446a-baf9-43f558f3ba31"
        },
        "item": {
          "id": "8dfafb5b-87ad-4df6-af52-b0b8b8ab95a8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "abef1e58-a117-4cd9-b4d0-5437bc3992e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04316f1f-81a3-4ab9-8666-f845e8d72a04",
        "cursor": {
          "ref": "51cf90ce-0c00-45fe-ba6b-39070ddebcf6",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "38facba3-2c16-41c5-ae06-aa21fb7bc829"
        },
        "item": {
          "id": "04316f1f-81a3-4ab9-8666-f845e8d72a04",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "bcb48a58-96cc-4636-b526-46a305b75956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8215131d-8af7-415f-8967-e026fd4b1c6a",
        "cursor": {
          "ref": "81e93517-48c4-4b4c-b3dd-7e0dda9c3b0a",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "814f5d63-f65b-4ba0-a86d-6ce1f6066c83"
        },
        "item": {
          "id": "8215131d-8af7-415f-8967-e026fd4b1c6a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9774605c-ac85-45e2-ad77-4bcfb043852f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ad9021-569d-450f-b5d9-312d63b67cd0",
        "cursor": {
          "ref": "1165d6e1-8952-47f6-b7a3-eaf059495e27",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ad70ad67-07ac-4245-9eaa-c8efe55326dd"
        },
        "item": {
          "id": "a9ad9021-569d-450f-b5d9-312d63b67cd0",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5b82d788-b657-415b-933b-6ef3b3bda201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a6c7ee0-d5f0-4296-b4fc-d784ca488810",
        "cursor": {
          "ref": "ab5e132a-1377-4b76-afee-24397547d76a",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "de5642c2-1c25-42ec-9449-429498ba3eec"
        },
        "item": {
          "id": "1a6c7ee0-d5f0-4296-b4fc-d784ca488810",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2a983857-523b-4303-a550-3cc9e6e377fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89acec53-b995-4a8a-aec6-0211e90df3fe",
        "cursor": {
          "ref": "541079b0-bdb0-4ef0-933d-90fe8fe337fe",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f2f5bdb0-e020-4840-8e09-5d1f808768e1"
        },
        "item": {
          "id": "89acec53-b995-4a8a-aec6-0211e90df3fe",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "cdeb0bc9-adc9-4380-8269-968dc313ddc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bca17c6-a480-45ee-abdc-d93d0f441253",
        "cursor": {
          "ref": "b4ed1c29-53fa-45c7-bbf5-319ccb4725a8",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a464315e-9eef-4823-9f19-d31d13040c67"
        },
        "item": {
          "id": "3bca17c6-a480-45ee-abdc-d93d0f441253",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d02f245e-b477-490a-bd7f-207908dff02b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5d7adb-8f7c-452d-8e66-19c48aa17a0f",
        "cursor": {
          "ref": "ef84a81a-b00e-4990-baa5-3bdd751f483e",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0a8e1b6d-834c-432c-8705-e0b4fb308cea"
        },
        "item": {
          "id": "6e5d7adb-8f7c-452d-8e66-19c48aa17a0f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5bc6acab-57cf-4d39-a369-8c1f5cb41d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bdbaa3b-561e-4eae-b90d-aafc5711b9fe",
        "cursor": {
          "ref": "a0b4f7aa-6e3f-4d49-9720-db5e32fb7132",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "69762f6f-a11f-49f6-8f56-7eb25533630d"
        },
        "item": {
          "id": "2bdbaa3b-561e-4eae-b90d-aafc5711b9fe",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8784f0bb-353f-4210-8668-e86011c0bcf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e94d50f-690b-4197-9551-8740f3b3d89e",
        "cursor": {
          "ref": "1515e02c-b5b9-40e6-a95f-14bc93ac0f30",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "79c91fa7-722d-43cb-acc8-4fb8fbfdcaa5"
        },
        "item": {
          "id": "5e94d50f-690b-4197-9551-8740f3b3d89e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9acdc14c-32b1-4889-9ac1-0c6cc582be45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f2196c7-5cb0-43b4-9f46-9064934f88e5",
        "cursor": {
          "ref": "286c9ff6-7b13-497e-9aa9-f4f73e54b150",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e2f948cc-7582-44d2-8e17-b71459287bae"
        },
        "item": {
          "id": "1f2196c7-5cb0-43b4-9f46-9064934f88e5",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "bfd6b50a-c44a-47e8-96fa-53d141df54ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab8042dc-f738-4d82-ae99-eeef1c4684a3",
        "cursor": {
          "ref": "b10f99ae-2a55-4131-b80b-fd9f227dfbaa",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a2690e57-a758-4ca9-88da-af01123df7fc"
        },
        "item": {
          "id": "ab8042dc-f738-4d82-ae99-eeef1c4684a3",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1150c920-76ab-4f79-a390-1d889d3499fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098900ab-ec69-43f8-b288-8f50acddb656",
        "cursor": {
          "ref": "2cb34005-1e1d-4c00-962e-d04b0969252c",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5cf3423b-31fd-4774-8644-5447316ada90"
        },
        "item": {
          "id": "098900ab-ec69-43f8-b288-8f50acddb656",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "4df2cee8-f97f-448f-9c9f-89e65f6f309d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c8103e-3aae-44a4-8b3f-ca4baa546ca6",
        "cursor": {
          "ref": "2bbd9d5b-41e6-448b-b8fa-2330f625a8f4",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "03b8fb53-a92e-483e-b2d3-a49e37c5b3a6"
        },
        "item": {
          "id": "d6c8103e-3aae-44a4-8b3f-ca4baa546ca6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0f5f1de7-60a0-4457-aca9-03fc08bf969e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654bfc9c-6b4c-469b-b7e2-cfb4fb09f096",
        "cursor": {
          "ref": "b02ce7f2-da1c-4667-85cc-0c08bdbbc845",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "3f53385c-887d-46c2-97dd-5d50a30239e9"
        },
        "item": {
          "id": "654bfc9c-6b4c-469b-b7e2-cfb4fb09f096",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "45720641-d447-4419-879d-eb0fc94c569f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89be275e-1327-4929-b7c6-17dcc4f72504",
        "cursor": {
          "ref": "585a2b4e-d185-4f69-9428-8d35ef1d181c",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bc8fc56c-4aba-403f-9286-882e982c3600"
        },
        "item": {
          "id": "89be275e-1327-4929-b7c6-17dcc4f72504",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4a4a15c6-b825-474e-9c30-8368ff59cbb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ddea397-e71b-4c9d-a4ec-01989d784b10",
        "cursor": {
          "ref": "b32e171f-a90f-4ed8-b6e5-2deff3b94e66",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "39896a2f-0fe0-43eb-96cc-57d2638654d1"
        },
        "item": {
          "id": "9ddea397-e71b-4c9d-a4ec-01989d784b10",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9d56dd25-280f-49f8-842f-4f215d8d0ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b402a3e5-a0ee-42f8-a66d-9b562eab6933",
        "cursor": {
          "ref": "e8d68870-0f11-4d5f-ae71-f47b328909cd",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "66b793be-6772-4c4b-b27e-ebf0863d1abc"
        },
        "item": {
          "id": "b402a3e5-a0ee-42f8-a66d-9b562eab6933",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7278ccf8-fe70-44af-90c0-f73ecc722085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6728ad7-c1a2-4463-a7a1-23be8c18b324",
        "cursor": {
          "ref": "3b37e7a4-e040-4a8a-9570-a4aad063bc3e",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "4339fcd0-9571-47ab-aef3-92d846054103"
        },
        "item": {
          "id": "d6728ad7-c1a2-4463-a7a1-23be8c18b324",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1bb1b381-e373-49ab-bcbd-003de622bf16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a82abc21-46af-4afc-a468-98563da712ca",
        "cursor": {
          "ref": "c05f2bc9-ef22-4d80-a3d9-f93858be39dc",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1490555b-c7e8-4c69-b0b7-34c23e503c94"
        },
        "item": {
          "id": "a82abc21-46af-4afc-a468-98563da712ca",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "354c4b8d-f904-422c-aa0a-dc2643fe0fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce9068ab-7804-4815-a1cd-5aaead9c6730",
        "cursor": {
          "ref": "1f9def6c-c480-440e-b5c9-f9b9549b796f",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "61f2307b-c652-48f6-9316-ef4c60caa512"
        },
        "item": {
          "id": "ce9068ab-7804-4815-a1cd-5aaead9c6730",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e4632712-0cd5-4dbb-bd35-85abb85987a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf09671-02d4-4ba9-916e-c26b3e6639e4",
        "cursor": {
          "ref": "cdac393d-8568-443d-8e25-486b8a380904",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6a030646-8d28-4ace-9172-2fe690d01d08"
        },
        "item": {
          "id": "8bf09671-02d4-4ba9-916e-c26b3e6639e4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7518b043-a835-4941-9bd5-99fa45dc8fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20acc0e-99d9-4c12-8bcf-cb993c54df73",
        "cursor": {
          "ref": "03af64da-5b82-4dc8-95b2-e24612d5456e",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "077a82b0-c3fd-4c84-a30b-42ca8cfb332c"
        },
        "item": {
          "id": "a20acc0e-99d9-4c12-8bcf-cb993c54df73",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5bf431f6-6820-40bf-8e78-ca6b6cb8ab4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e011153-fde4-4ae4-9663-bd848f11df2f",
        "cursor": {
          "ref": "40fd72e7-6667-42a5-8b3f-0f6e63e80c44",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "49b798b9-ac09-4c91-91e7-796eb5f210a7"
        },
        "item": {
          "id": "5e011153-fde4-4ae4-9663-bd848f11df2f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "95e88af9-f2c9-41a7-991a-546370319eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb21e46-b322-44df-b6eb-81bed3b7bde2",
        "cursor": {
          "ref": "d52e10d7-78b4-4379-acc5-04df28ff8781",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b584dfdd-24d9-4227-9951-55a9025c36e1"
        },
        "item": {
          "id": "ecb21e46-b322-44df-b6eb-81bed3b7bde2",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a60e2e9b-2349-47e5-a74e-9d19059b8aa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f6b71c-70b3-4588-a307-1942f82a1c6d",
        "cursor": {
          "ref": "4cc69cf0-7408-49f6-a7b2-d333793ac242",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "712875ab-63be-45c7-8c86-4b264ae584d1"
        },
        "item": {
          "id": "53f6b71c-70b3-4588-a307-1942f82a1c6d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "240fe9aa-3012-48c8-b85c-59840d1025c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b7ce68a-26ad-4375-8f98-580c4268410d",
        "cursor": {
          "ref": "250a5a4f-bdff-4243-b235-611785b9d077",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "eb2dcc94-26e0-406f-8b6b-f974648db70d"
        },
        "item": {
          "id": "5b7ce68a-26ad-4375-8f98-580c4268410d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "727bfc40-b1aa-43b4-8001-46c3f85faa5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50bd921-6923-4f6a-9d11-2a47df790e18",
        "cursor": {
          "ref": "cd06b4d6-37f7-4883-8ec8-bec27cce432e",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0bf43220-50b3-4fc1-83f7-f5eb6c363280"
        },
        "item": {
          "id": "a50bd921-6923-4f6a-9d11-2a47df790e18",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "494de3d8-b361-43de-ae07-1debde1721ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "469d62e4-d305-46c7-898d-2389b49c9310",
        "cursor": {
          "ref": "3ec81566-c778-4d35-8aa0-a2b31a8ab932",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6546f780-d529-41c0-ab37-b4b9c0b619c6"
        },
        "item": {
          "id": "469d62e4-d305-46c7-898d-2389b49c9310",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "bdc61457-96aa-46c1-a387-612392a6c251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c0a9c799-bcd7-43cc-a6d6-7f6d7ca3cbfc",
        "cursor": {
          "ref": "34843e71-a81e-4e31-9aaf-c89d1ea6b1d8",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "928e3cfe-d50d-4188-a384-563e323ce298"
        },
        "item": {
          "id": "c0a9c799-bcd7-43cc-a6d6-7f6d7ca3cbfc",
          "name": "credentials_issue"
        },
        "response": {
          "id": "1f099c0b-723f-45bf-83b8-b4fe1a6e5cc6",
          "status": "Created",
          "code": 201,
          "responseTime": 354,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "953d9ab1-8a5e-48ee-96c9-778eb95ee731",
        "cursor": {
          "ref": "ebfc9f9b-54bb-4c64-863c-4ffbdc2cf1ef",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f0095675-6faf-415f-aed0-034cb7eed60c"
        },
        "item": {
          "id": "953d9ab1-8a5e-48ee-96c9-778eb95ee731",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d9394b48-d069-4a10-a309-d615974d6989",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6fbafc-cdb9-40f8-b1b2-88ecae7020d1",
        "cursor": {
          "ref": "6cb0ddb2-f589-4d7a-b767-ef0868e0a5ab",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "dc3f6db2-9a52-42a9-ad4a-83d7aa498cc7"
        },
        "item": {
          "id": "2f6fbafc-cdb9-40f8-b1b2-88ecae7020d1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "cd958eae-be80-452c-8ab8-5b5655d3417c",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "492a725f-e365-4a58-ad8f-9f80cd6a3255",
        "cursor": {
          "ref": "fcf14c89-e556-4729-a5e6-dff6245fcd07",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "675a9b72-7f4c-413c-a8e9-ae93ebb36880"
        },
        "item": {
          "id": "492a725f-e365-4a58-ad8f-9f80cd6a3255",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "241a1d0e-51f6-42d4-aa2e-3e13bdc7552e",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "245ec788-4d51-4062-887d-dc4ef5d16471",
        "cursor": {
          "ref": "d5f8bfa1-e519-4a71-8981-417c7f9a0b82",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e80e3063-44e0-4daf-a8af-387164738533"
        },
        "item": {
          "id": "245ec788-4d51-4062-887d-dc4ef5d16471",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0b15b415-e8ac-439b-9008-fa96c90e65a7",
          "status": "Created",
          "code": 201,
          "responseTime": 356,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-07T00:28:21.787Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-07T00:28:21.787Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "98bee162-7723-4861-b05f-7eef32371eaf",
        "cursor": {
          "ref": "bd3fa109-3891-452f-8a53-0c7e68eda5ad",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8ccc6247-fbb4-4ee1-90ed-ab5919475e14"
        },
        "item": {
          "id": "98bee162-7723-4861-b05f-7eef32371eaf",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "bfcecc82-68bf-486a-a4ad-bafc4abd320f",
          "status": "Created",
          "code": 201,
          "responseTime": 359,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ec957d-5dd8-4b45-aec6-9eba6e8d9487",
        "cursor": {
          "ref": "28aa9f90-8ca1-49c0-9258-25e0b249f7c0",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a0bca3d4-e39b-4cd6-a26c-df2823b56784"
        },
        "item": {
          "id": "33ec957d-5dd8-4b45-aec6-9eba6e8d9487",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a041a14c-8cc2-44b7-bcd1-32d69619e122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce666844-0a0d-4928-82a6-c5ffe4c1c272",
        "cursor": {
          "ref": "173346dc-a434-4271-bf57-8ae90eec6973",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "722baa5a-a251-4450-84c4-a7e8fe771390"
        },
        "item": {
          "id": "ce666844-0a0d-4928-82a6-c5ffe4c1c272",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ff70d97c-c4a9-44ff-9862-d59ffb092abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144bdda5-d886-4713-8243-d32cefbf61aa",
        "cursor": {
          "ref": "da6c7081-4ccc-42bb-896c-103a894bc098",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "550421e2-4848-4b69-95fe-da9f6e063864"
        },
        "item": {
          "id": "144bdda5-d886-4713-8243-d32cefbf61aa",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "955dbca5-2659-474a-b4e0-2eb2c00c723f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a11efa6f-6616-484e-95de-6208aac872fd",
        "cursor": {
          "ref": "e9be3e0b-c55a-4481-9e48-cb4106d2676a",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7f9f2443-836f-4657-b42d-e05e9f19227d"
        },
        "item": {
          "id": "a11efa6f-6616-484e-95de-6208aac872fd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "577d9d6a-46c8-4511-8342-e1b305769b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "483ff49e-4ce4-4edf-9080-77d0143f579e",
        "cursor": {
          "ref": "70e4a7f1-b561-41e0-9638-5bfbafc08d0c",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4a1e80c3-3708-405e-930a-369c5521c5b3"
        },
        "item": {
          "id": "483ff49e-4ce4-4edf-9080-77d0143f579e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "07c29447-d708-4795-99a8-71cb9ae264ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f342f1a-5fb6-438f-a918-40541de9bba0",
        "cursor": {
          "ref": "3ac31ddd-3061-4c03-a900-49001e3ecfbc",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0095ef3a-ad74-48d6-91a1-fac508dfc37d"
        },
        "item": {
          "id": "1f342f1a-5fb6-438f-a918-40541de9bba0",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d5ed4b16-697a-408b-8fe0-375fe85f08c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b8f72c-2231-47c8-8782-a4bfa8561119",
        "cursor": {
          "ref": "a6dc9dab-748e-431d-8384-014d738bc33a",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ef984c56-7aa5-4680-a81e-6bbf121d1809"
        },
        "item": {
          "id": "49b8f72c-2231-47c8-8782-a4bfa8561119",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d7758d7a-4653-47bc-9ea1-66065f662298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14089070-80cf-4692-adcf-812df92c2517",
        "cursor": {
          "ref": "647133c1-8e94-46d8-bb83-85927db10182",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "43f1ce5c-ecf8-4ed6-b275-99dc648f364f"
        },
        "item": {
          "id": "14089070-80cf-4692-adcf-812df92c2517",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b5da8a04-7c9b-474b-bfed-81268c4d6822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c208dc5-e8a2-4082-8744-f23984684344",
        "cursor": {
          "ref": "0f50ed16-63e4-4b21-b9a1-7ea1a88a13e2",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0af5f06e-b41d-4088-ae29-21b92315c4c7"
        },
        "item": {
          "id": "5c208dc5-e8a2-4082-8744-f23984684344",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8a843586-147b-4cf0-bc7e-b451c9b1ab5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ae8e0e-cb0c-437c-b9b5-8cb9cdceef47",
        "cursor": {
          "ref": "a3d99d52-6b68-4ef0-ab50-faf80a8643eb",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "39a29b6a-1315-41f1-9834-d849b1ff441b"
        },
        "item": {
          "id": "e4ae8e0e-cb0c-437c-b9b5-8cb9cdceef47",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "dafb440a-4451-4049-83b6-514eafea2db1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6598cd4a-366f-471b-b5e5-2627918f58e9",
        "cursor": {
          "ref": "87a3f1c7-ffa7-4b9f-83be-3012cfc35f44",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a8c2b176-c0a6-4934-9194-fd7fe7adfdaa"
        },
        "item": {
          "id": "6598cd4a-366f-471b-b5e5-2627918f58e9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "029fc3f3-445e-4943-8c7d-5daa537d16f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac0d564-a9f7-4783-bb99-13bc742c8730",
        "cursor": {
          "ref": "c0de31bf-7648-46c4-98f4-6d868f9a0ff0",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1ebf938b-9450-472d-8cae-ef30c3f35371"
        },
        "item": {
          "id": "8ac0d564-a9f7-4783-bb99-13bc742c8730",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a8aef231-0c4b-4159-a815-32dabbf4058b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58bbec0e-3cb4-4eb7-820b-dfa4e9fdbe29",
        "cursor": {
          "ref": "5e4625b7-1106-4be4-8908-215913926827",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b37d91c5-ef79-4cab-ba67-ecab45f9f962"
        },
        "item": {
          "id": "58bbec0e-3cb4-4eb7-820b-dfa4e9fdbe29",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "19529019-86e2-47b6-84cb-719cb449f154",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 132,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "5a703dc6-36c6-42b2-ba63-362fa3e1d7ac",
        "cursor": {
          "ref": "c3636061-bb8e-4e75-b7e4-f672823f3871",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d6367282-effa-4455-b5f3-31f08908ce2b"
        },
        "item": {
          "id": "5a703dc6-36c6-42b2-ba63-362fa3e1d7ac",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1271fab1-1399-432a-8bc1-bb168190b239",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 130,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "7a883edc-9754-42ea-8c9d-ecad3d8b2625",
        "cursor": {
          "ref": "bebeb5b0-3910-406a-97e8-7fe7f16a144f",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "13627329-a3ff-451d-83c9-ea0629e1a577"
        },
        "item": {
          "id": "7a883edc-9754-42ea-8c9d-ecad3d8b2625",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "46b1df4f-6683-456d-be65-3a47a404b607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c8a8bfa-7ed3-466c-9940-485200b4fa85",
        "cursor": {
          "ref": "34a959b0-5f45-4d77-bf28-e5a1c6aae4f0",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "1034d5c5-a2fd-4d1b-8061-aeb4440d38ee"
        },
        "item": {
          "id": "2c8a8bfa-7ed3-466c-9940-485200b4fa85",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5c2a4b9b-d12e-4ec4-802b-b9950e939da2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a4ad105-1891-4173-b1d5-3a8208fffd49",
        "cursor": {
          "ref": "113868c2-5793-4e06-a5ff-5a658bdb4f22",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1f6cf058-065a-4155-839e-3ea2c386ec6c"
        },
        "item": {
          "id": "9a4ad105-1891-4173-b1d5-3a8208fffd49",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1b084480-c890-46a4-8771-6b4d0cfc25ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8837a5f2-b15b-48a0-9124-1e0e92b4d04d",
        "cursor": {
          "ref": "a4290642-8e90-4dfd-a7e2-4ec2a269f264",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "873714c4-bdd4-4838-b777-28cacfc5741a"
        },
        "item": {
          "id": "8837a5f2-b15b-48a0-9124-1e0e92b4d04d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "08732dab-449d-48dd-8f86-236b202dde30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01ca6170-1763-491f-b708-97f80071977e",
        "cursor": {
          "ref": "efcc08bb-d818-406e-a871-3846a6bb14b3",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1d96191c-d7cc-4107-8a1f-216a0d022f2c"
        },
        "item": {
          "id": "01ca6170-1763-491f-b708-97f80071977e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2c672edd-ca0c-40e4-8690-13d061e29924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f44445-540c-4367-bc3f-c4e3651eec2e",
        "cursor": {
          "ref": "d8cd2aa5-b3e4-4415-bf73-9985ddaf527c",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3e91072f-a73b-4fb5-8ff7-e2993be7590e"
        },
        "item": {
          "id": "94f44445-540c-4367-bc3f-c4e3651eec2e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1a58c618-bf29-4e6e-86f6-2456533d5e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bebd0bde-f8cd-4c42-919e-e88b978f295e",
        "cursor": {
          "ref": "147f7374-48cd-4991-88ea-1eaf2f450eaa",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "71125265-18b1-4803-9c1b-10276ea0ee6c"
        },
        "item": {
          "id": "bebd0bde-f8cd-4c42-919e-e88b978f295e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5c1bdca9-124e-4015-afb8-45e761b4cf6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "740c58dc-f8d1-40b1-a1d4-957eed5d656e",
        "cursor": {
          "ref": "72d7da2b-d7db-43c7-b983-c6b2344325b7",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "656ded74-b404-4ffc-ae93-c0406fa4408f"
        },
        "item": {
          "id": "740c58dc-f8d1-40b1-a1d4-957eed5d656e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4897c945-ec58-47f3-a257-9e0a4905f4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc91e4a8-d284-4482-ab26-73e8f29f514d",
        "cursor": {
          "ref": "8fa0a0db-f266-4e1d-ad6a-da703747bbc4",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7b62c872-3528-4558-ad0b-bf9f671bdf53"
        },
        "item": {
          "id": "bc91e4a8-d284-4482-ab26-73e8f29f514d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "eb8eaa1d-0e6c-4df9-8f8d-97aac3e3cd47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c9f155-6cb8-401f-81b4-a26d6370c5ab",
        "cursor": {
          "ref": "1e1e337f-7fc4-4f54-96b8-f898eb55d853",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "eb763078-c6a9-4abe-a35f-a613098c8e0f"
        },
        "item": {
          "id": "c6c9f155-6cb8-401f-81b4-a26d6370c5ab",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "488d2990-d437-488b-88be-f608cb18181f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60647d1-ac6a-4158-9cf7-8db71d5904eb",
        "cursor": {
          "ref": "4d165033-84d5-436a-b3a9-590dedceab24",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "48045f42-bff7-4f69-8579-371ed993abdd"
        },
        "item": {
          "id": "a60647d1-ac6a-4158-9cf7-8db71d5904eb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "43123ebb-924c-4eff-ab53-796142a077bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de6bf26-7515-43fa-8210-1bc6adf91520",
        "cursor": {
          "ref": "5deb9be1-6172-4797-9d3e-7de8f1a7f3eb",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9267e3e3-da57-490b-ae8f-56869102680f"
        },
        "item": {
          "id": "9de6bf26-7515-43fa-8210-1bc6adf91520",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7c1c0842-0dd9-4e67-a896-c40c2ea208ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3d3a03-13c9-4c82-a9ac-a5c7673854d9",
        "cursor": {
          "ref": "a6094ccd-b0bf-4f39-9e3a-0cd3a2652759",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "32e3acfa-3a8e-49cb-b5f5-c59b1e733102"
        },
        "item": {
          "id": "be3d3a03-13c9-4c82-a9ac-a5c7673854d9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "bfa8350b-a092-4ef4-8a18-1c54c2e87025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba2a4be-5458-4d2e-bc60-0d2f778cdd1d",
        "cursor": {
          "ref": "34c587f8-43bf-4118-b5a9-aa5048ed0c4d",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "44bebcf4-91bc-4f5c-be47-628f08d104ee"
        },
        "item": {
          "id": "aba2a4be-5458-4d2e-bc60-0d2f778cdd1d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "497b6453-8e1d-4c56-b46c-3d470b549d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff98acd8-38da-42a3-a084-54ba30522a3f",
        "cursor": {
          "ref": "1b4bf615-b061-497d-a62d-810152ade971",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f590489e-04a6-48a8-a8c8-b666fc481274"
        },
        "item": {
          "id": "ff98acd8-38da-42a3-a084-54ba30522a3f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0c4c67a6-4819-436e-bcaa-eb75c1b9dd08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4926728-fdc7-48ce-9ace-1e8c1b6c7ae5",
        "cursor": {
          "ref": "66e7f3cc-7eb6-4477-af88-0a6f8eb75ade",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ed3e1ba2-8644-4d22-8beb-05c898e6ddde"
        },
        "item": {
          "id": "d4926728-fdc7-48ce-9ace-1e8c1b6c7ae5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "37c746ef-1935-472d-aca3-c00e1f9ca935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83da5941-5a7a-4acb-ae4e-c6222b9b9566",
        "cursor": {
          "ref": "cafec53d-dbf6-4d19-bcdb-97749e566455",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "facb0a8d-cd35-466f-b755-542f061c3838"
        },
        "item": {
          "id": "83da5941-5a7a-4acb-ae4e-c6222b9b9566",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ef673d44-b805-450c-a34f-501d400601a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c31013-e7c7-4020-84d7-2bbed2cb0dfe",
        "cursor": {
          "ref": "286046f9-b072-4080-bb4d-0d3f7d449f36",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "82e06021-7a4e-4786-a47f-ef611a1e9d63"
        },
        "item": {
          "id": "a0c31013-e7c7-4020-84d7-2bbed2cb0dfe",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "afa93c60-b963-46c6-933b-ec60041a81a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 124,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "ab631767-bb62-408d-ac77-5220786b2945",
        "cursor": {
          "ref": "94ffb882-4d2b-4b7e-8e89-468849328efa",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e1352a9c-ed87-43ed-bec0-53d06a27c550"
        },
        "item": {
          "id": "ab631767-bb62-408d-ac77-5220786b2945",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a4e642ed-c0ee-4791-824b-b8baa1381e97",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "225ecf3e-55ff-4c63-a750-29ca4572b422",
        "cursor": {
          "ref": "8bfafe7c-282c-4120-be2a-c1cd3908a7a0",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "809d3d8b-1133-445c-80b3-9275e78d0d9b"
        },
        "item": {
          "id": "225ecf3e-55ff-4c63-a750-29ca4572b422",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3ed2c158-2690-42f5-890d-e0b8cfd50be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca4863d-2b7e-4869-8b41-ac11ac31f076",
        "cursor": {
          "ref": "a051f151-4f73-4dfd-9e82-ddc1b800b7b9",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "beb0d313-5bd5-469e-b78c-77d4246eb0e9"
        },
        "item": {
          "id": "2ca4863d-2b7e-4869-8b41-ac11ac31f076",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c5469ac9-ac95-48a7-bc86-6005da6c6a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f4b418f-58f3-4096-90a3-79965e5f1c7e",
        "cursor": {
          "ref": "7fb0cf97-7d0d-4385-9b85-19bfadab190e",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1b1a1733-4dc4-417b-8294-bdff160734ed"
        },
        "item": {
          "id": "3f4b418f-58f3-4096-90a3-79965e5f1c7e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b176576a-ee4a-4a37-a806-c68dffaf213d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73afd02-f683-4a59-9cfa-7a6a1fb59a2b",
        "cursor": {
          "ref": "0dc27ee2-2755-4a5b-a4f8-6d022759ed49",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b7ac154f-1d07-4c0e-a760-1cd241982fb1"
        },
        "item": {
          "id": "e73afd02-f683-4a59-9cfa-7a6a1fb59a2b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9c0b033e-6bbe-43d1-a1f6-db0cf4eccb44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b9fe8b-eee3-47f9-9258-b68327e22645",
        "cursor": {
          "ref": "d500cba4-a44b-41e4-9623-c571604b7de5",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6a67feb0-83b6-4720-8afb-d4a024e24f98"
        },
        "item": {
          "id": "c7b9fe8b-eee3-47f9-9258-b68327e22645",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7d58ed88-fc37-4242-a03e-d43c61f6afe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe18d1b6-caf3-4fd4-8e59-8de910e65f4e",
        "cursor": {
          "ref": "e4ecf301-f336-41ee-85d0-d49b7db30c92",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f042ec48-986d-469b-8cce-33619750df76"
        },
        "item": {
          "id": "fe18d1b6-caf3-4fd4-8e59-8de910e65f4e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "db439ac9-a20b-46a9-842e-de6a37cc9444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e3a20d-d063-4a0d-ab19-1d2645936902",
        "cursor": {
          "ref": "fb9d977d-c572-4118-a545-ff452f8c4bfd",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f4b95ccc-84d4-46f5-8a2f-8350e5189b4d"
        },
        "item": {
          "id": "27e3a20d-d063-4a0d-ab19-1d2645936902",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1098cfb2-09ee-494e-bd74-406763fbfb5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "207eb4a6-d122-4b1e-af3b-493212ec0a18",
        "cursor": {
          "ref": "c15f27b6-b13e-403d-bf11-fcc68dcfff86",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "69580c3c-bc0f-4ba5-b9f6-babc3abe9ba7"
        },
        "item": {
          "id": "207eb4a6-d122-4b1e-af3b-493212ec0a18",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "32f61c10-0070-407f-9b32-1373ca23e22f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49743309-98dd-4dc1-af7a-bc78f053b20c",
        "cursor": {
          "ref": "35037e72-986f-479f-86b2-15fe674e58e1",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "30bcb90e-b93d-4f71-aaf2-e4a403083d6e"
        },
        "item": {
          "id": "49743309-98dd-4dc1-af7a-bc78f053b20c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6636bd46-0125-4bda-aa77-646c2c68fdce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c9e37a0-9b1b-4055-bff7-9fae03ca06dc",
        "cursor": {
          "ref": "711d09c3-c6c3-4f71-a640-ba7efbefeccf",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0df29e8e-43ed-4303-acf2-e74b37cc3580"
        },
        "item": {
          "id": "8c9e37a0-9b1b-4055-bff7-9fae03ca06dc",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "624e5b49-2000-479e-807d-4c24284014c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a051a42b-e20c-4dbd-8b09-de6d522c7490",
        "cursor": {
          "ref": "eda2e8c0-5c7c-425d-8cc8-3f1c9cf0b0a1",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "be8568e3-860b-4a54-9e87-a7588dba56a1"
        },
        "item": {
          "id": "a051a42b-e20c-4dbd-8b09-de6d522c7490",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1eb174e5-07c7-4de3-9663-abffc62bbd19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0aee5c7-47cb-44b1-961c-17f790fe5f1b",
        "cursor": {
          "ref": "c299ad0d-8ae9-417f-bf5e-e9b6a90c2b12",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "011c39d7-d4d4-4b23-84d7-a6094428ca56"
        },
        "item": {
          "id": "f0aee5c7-47cb-44b1-961c-17f790fe5f1b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b68b8a3f-f22d-4c9e-b356-65509a9be12c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc7ca26a-f075-4c1a-879c-b5d13549e3ea",
        "cursor": {
          "ref": "896aa8e4-f2cf-49a5-813c-c4a5dfc5230e",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "26c0f90d-7f91-440b-8889-bb80ddfd8b57"
        },
        "item": {
          "id": "cc7ca26a-f075-4c1a-879c-b5d13549e3ea",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8ef67a67-1fda-4cc7-91e0-9e759e98544e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de4f603f-e580-4192-b22b-83e3c668ab43",
        "cursor": {
          "ref": "d3b4a3e6-74cf-45e7-ae30-9d48f08ef81f",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "42c58a85-4112-4903-a3a7-d7396d9c873c"
        },
        "item": {
          "id": "de4f603f-e580-4192-b22b-83e3c668ab43",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "04938c52-920e-483f-93d0-69d48c076739",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 114,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "08b051e7-523b-492f-bb10-132183ddd1fc",
        "cursor": {
          "ref": "3fd6c261-f0da-4668-93c9-71b9dce46dcc",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a5d4bfbb-32ea-447f-8f6a-1e8ccb06ef5f"
        },
        "item": {
          "id": "08b051e7-523b-492f-bb10-132183ddd1fc",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "14de770d-e1a6-4127-b3b8-6ee4b0416b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8041d248-9c4f-487f-a4e2-6a1e1ad23eb6",
        "cursor": {
          "ref": "9f237321-6f75-4c33-90b4-dcde6e4ce11d",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b35710f1-0fd4-4123-86ff-eb908b0ef2a0"
        },
        "item": {
          "id": "8041d248-9c4f-487f-a4e2-6a1e1ad23eb6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1e95931f-3a6b-4fe2-bfc6-cb604fdc16a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbff97c6-023b-4c38-9ea2-9ce0103d94a5",
        "cursor": {
          "ref": "ab26e505-ff45-436d-9ac9-a1f124d5ad3c",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "56b7bcad-793d-4ef2-9f67-857ff5a70a1b"
        },
        "item": {
          "id": "bbff97c6-023b-4c38-9ea2-9ce0103d94a5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e943304d-99b3-49f6-86f8-9c1783e616f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15271ef-2a01-49eb-80b6-e260a8ed70b4",
        "cursor": {
          "ref": "a33339a1-3988-4af9-8b93-d5dba6303ac0",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "64e5f3d0-5a26-4ce8-8d1b-db3ff42a5481"
        },
        "item": {
          "id": "c15271ef-2a01-49eb-80b6-e260a8ed70b4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8d9f1ed7-34b4-46c5-a10d-ff5d22f874c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a0b1ec3-af1e-47fc-b5a4-80ad6bf8d1d5",
        "cursor": {
          "ref": "21daf9fd-f3e5-4511-b91c-0c0998ebdd78",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "afa42d14-4b28-478b-aa2c-8b86e302c7e6"
        },
        "item": {
          "id": "0a0b1ec3-af1e-47fc-b5a4-80ad6bf8d1d5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5dd6a2a9-086a-424a-a9bd-ab9fcce499db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca349ca1-76b0-45df-a9c2-9e28b6bbee93",
        "cursor": {
          "ref": "f0ebab40-a90b-44ef-8b22-d93908d6d156",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ca46a6cf-7268-4454-9929-24af3c85cccc"
        },
        "item": {
          "id": "ca349ca1-76b0-45df-a9c2-9e28b6bbee93",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "066588fc-ee07-4629-aa5c-d257e3751ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b787ed9-659a-4894-8d21-e0798b2be5dc",
        "cursor": {
          "ref": "20c74db7-8c6c-4a9d-8fea-ea0c92d01aab",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e6e3f50b-9ebc-402a-a215-0b7effd7c3c9"
        },
        "item": {
          "id": "3b787ed9-659a-4894-8d21-e0798b2be5dc",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b5e8a5f4-a6eb-41cb-b0a0-04c6d6983f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12ae84a-d481-4c42-851b-04e1c1beb41f",
        "cursor": {
          "ref": "fc7909f8-caaa-498d-8746-53506e182d29",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d3f80037-c4ed-4d4d-afeb-ebef8aeb4632"
        },
        "item": {
          "id": "f12ae84a-d481-4c42-851b-04e1c1beb41f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "95702115-adba-4db5-b232-d98ae7e44b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1989a3-0a77-49cb-929e-fca7cce392f2",
        "cursor": {
          "ref": "8d080d02-ca7b-4182-af7f-ed73f4d2133c",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c41f6160-04bd-410e-9745-f008b80c1dab"
        },
        "item": {
          "id": "be1989a3-0a77-49cb-929e-fca7cce392f2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "83447db1-4d56-4149-a8e7-0a0bd87a1159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "808fe2fb-6657-4a2d-98e6-fad5570e769a",
        "cursor": {
          "ref": "a231e8a1-fa6b-44f6-bfd0-0132247ee208",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2d3e1ac5-6bab-4c68-879a-6e4bb8310d50"
        },
        "item": {
          "id": "808fe2fb-6657-4a2d-98e6-fad5570e769a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2c040d6b-2f4b-41fb-9499-5d78dc573a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db18bbed-5978-4f23-96f2-0abfab97132f",
        "cursor": {
          "ref": "f9e5d9d9-7478-432b-9506-666d3d8bbe92",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4e3a812e-c0ab-4d80-ad74-5ea66a497620"
        },
        "item": {
          "id": "db18bbed-5978-4f23-96f2-0abfab97132f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "97b0575d-eb4a-4642-86ac-d452ac240f14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f54dbbc7-3492-4c5c-a36d-6b0d2e07423b",
        "cursor": {
          "ref": "e803a4f4-cb12-47cd-8878-18251370e6b0",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "3322e202-67ac-4a38-a218-87807aaed106"
        },
        "item": {
          "id": "f54dbbc7-3492-4c5c-a36d-6b0d2e07423b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a480918e-675e-4c6e-a7b5-2dc5b1facb36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf412d55-7b7f-4a37-bd6a-3090850a9c46",
        "cursor": {
          "ref": "49a2d52d-4314-4cd8-afe3-c775f624dbd9",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8fd91b97-0bc0-43c3-b970-8ff04840cf64"
        },
        "item": {
          "id": "bf412d55-7b7f-4a37-bd6a-3090850a9c46",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "088264a5-db77-42ba-a61a-bfe633934cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63ac2d0a-a68e-472c-8fe6-d0e26df66373",
        "cursor": {
          "ref": "7890ba64-ff83-4d88-a14c-40e5bb6ae41a",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "50434714-b89e-42c9-97f0-b4cca81fca9f"
        },
        "item": {
          "id": "63ac2d0a-a68e-472c-8fe6-d0e26df66373",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6d9ff083-0ba0-47f4-b6b1-a873a4f18e9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "212ced5f-9fb1-44e7-9a62-e110d41292d6",
        "cursor": {
          "ref": "c69c1f36-61d6-409c-93c6-d5d33d980d1b",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8065bf1d-b275-4507-8308-5a804b769c3d"
        },
        "item": {
          "id": "212ced5f-9fb1-44e7-9a62-e110d41292d6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9b2409bf-7fb5-484a-aa17-94f4add90131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14192783-3a79-492a-bb30-e20b7133a5e0",
        "cursor": {
          "ref": "14d35858-3efc-4983-a6cf-928059937ee7",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "99a07b54-9193-4456-afd4-87f71dcc5f8f"
        },
        "item": {
          "id": "14192783-3a79-492a-bb30-e20b7133a5e0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f91e93ff-eb31-443c-9cc1-f456b9c14e58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abde24fd-7fa1-46b7-a23a-8c4d51cc41f5",
        "cursor": {
          "ref": "896c3041-a5b9-4238-bef5-af5f4163c43a",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "687d8ee1-d3fd-4ae3-a2a9-7249a7026a45"
        },
        "item": {
          "id": "abde24fd-7fa1-46b7-a23a-8c4d51cc41f5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "72c77579-cce8-4cc2-93f8-7c34fe600a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a7fbb3-b888-45d9-832a-70151ceaab23",
        "cursor": {
          "ref": "a5932dd5-0784-4f8a-8e95-fefb1b12c05d",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "af3e890f-6982-45d7-af4c-f21642246092"
        },
        "item": {
          "id": "b6a7fbb3-b888-45d9-832a-70151ceaab23",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "f79b10f2-7a77-4c91-ac46-e792aff12726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98257492-21cf-46f8-9bed-38493fe33867",
        "cursor": {
          "ref": "fa6d7ec9-42aa-4e67-85b2-6fcf0db1759d",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f7ebd1ae-af2c-40eb-b532-b1f80c36de98"
        },
        "item": {
          "id": "98257492-21cf-46f8-9bed-38493fe33867",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "182b7476-ba82-41ec-adde-55f2d6f19f0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c3c2f5-6e37-411f-840a-61078bf79a99",
        "cursor": {
          "ref": "739f916d-4391-409c-bed8-c7ab18cafbde",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ca680a25-9894-42e5-98fd-522da2930db0"
        },
        "item": {
          "id": "95c3c2f5-6e37-411f-840a-61078bf79a99",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "60a1e28e-8546-49c9-add0-668922247113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "070e0e08-14b2-4a4e-ae92-5b7f249f8452",
        "cursor": {
          "ref": "85e2cdf0-feeb-4c53-b0db-f7f0d4200c05",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c6ca0159-52eb-455b-b38a-4127f6ae12f2"
        },
        "item": {
          "id": "070e0e08-14b2-4a4e-ae92-5b7f249f8452",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "56881cdc-9faf-4b0b-8a07-e377ab4af125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a607074a-83e1-4472-a35d-a3f7e12d640e",
        "cursor": {
          "ref": "0277e99d-06e3-49b4-806e-8ab8d3e87854",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "977b2d11-abd9-44cc-b90e-859f8f818d73"
        },
        "item": {
          "id": "a607074a-83e1-4472-a35d-a3f7e12d640e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "800b817b-401d-461a-87e1-61f1f2f17cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5dfa9f1-7ec8-4eda-8058-b3ae2b9fbc3b",
        "cursor": {
          "ref": "1670bb9f-2f99-4239-8bd0-e568d9e3114d",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a01b84de-dc6c-4b3b-852f-d15c92d2adc9"
        },
        "item": {
          "id": "b5dfa9f1-7ec8-4eda-8058-b3ae2b9fbc3b",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "2158c368-1646-4222-919d-7b5db07613a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fabec2a9-c522-4e3c-b492-e24accaa6785",
        "cursor": {
          "ref": "073ff669-6afc-4a17-9a0c-6cf6d34abd81",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c1ad7c7a-b8b3-487f-8179-74a73487b48c"
        },
        "item": {
          "id": "fabec2a9-c522-4e3c-b492-e24accaa6785",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "59c80fce-c1f7-46d7-a073-b6207c3bf022",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f1a941-0665-4e81-99b7-9f9f49b8acfd",
        "cursor": {
          "ref": "2a15e8ef-5a92-476d-b1b8-7211aed90376",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c24c0754-877f-4b11-8cc8-f0c530208892"
        },
        "item": {
          "id": "e1f1a941-0665-4e81-99b7-9f9f49b8acfd",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4f97eb29-a7dc-4fed-885a-6024181aac9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc344a4-7986-4b8a-afa3-67eb132f9e74",
        "cursor": {
          "ref": "f1d2b2a3-3dd3-4e4a-a6ed-fc5da6b41b1a",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e971d573-05c2-4d67-a29b-14ea04c9286e"
        },
        "item": {
          "id": "ccc344a4-7986-4b8a-afa3-67eb132f9e74",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "32e70572-8620-4491-b6cf-57aae00a7b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34eab92a-c81f-4eae-8749-dd0b10b5963a",
        "cursor": {
          "ref": "2c09fd1e-51f0-48cd-95bf-b76d20b84dbf",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3978f3f5-d50d-431b-b37a-b33149c916ae"
        },
        "item": {
          "id": "34eab92a-c81f-4eae-8749-dd0b10b5963a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "596d857c-46b2-4c45-bde1-3c37cc7b0e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e74e63b-8f64-488d-8ef0-a1d4cd1ea2c6",
        "cursor": {
          "ref": "b497959e-d940-4f1a-b09d-c59c6003da3c",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4d687b91-06f5-44b4-bb9e-dea90092be72"
        },
        "item": {
          "id": "3e74e63b-8f64-488d-8ef0-a1d4cd1ea2c6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e2ca8929-8969-4632-a736-136bacedec09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc191500-5091-404f-885f-c7f22c5f0427",
        "cursor": {
          "ref": "49bad80b-9ba4-4ecb-b7ba-d6b9db4833a1",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b5aa0984-bdde-43f1-b87d-edad280a22e0"
        },
        "item": {
          "id": "fc191500-5091-404f-885f-c7f22c5f0427",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5f127cff-530a-44e4-8a9f-e4487999bf11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d63c8a-05ea-4910-8567-c350a7613a01",
        "cursor": {
          "ref": "7bcb78ca-adec-4e6d-9541-7e787d5d43ab",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "dc9f96ba-9369-4fe1-9b22-21be7e01930d"
        },
        "item": {
          "id": "d1d63c8a-05ea-4910-8567-c350a7613a01",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9f2b8925-8fa2-4504-b3de-b23bf03fb536",
          "status": "OK",
          "code": 200,
          "responseTime": 189,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "2941c988-3620-43f0-9e9b-d8407552510e",
        "cursor": {
          "ref": "2a19dd57-e972-4806-86b8-c7d667559b51",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "06ae5397-32ba-4e83-bba4-a85c478d4add"
        },
        "item": {
          "id": "2941c988-3620-43f0-9e9b-d8407552510e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2a08f74a-633d-44a2-a38f-3d4d0cffd5a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d73e39-0f26-49f5-a9f4-b1af8d93360a",
        "cursor": {
          "ref": "526e5a82-9300-4826-bfad-ccd4fd5219cf",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a0665e48-4cd4-4bc4-8f53-9d780b74b0ef"
        },
        "item": {
          "id": "c8d73e39-0f26-49f5-a9f4-b1af8d93360a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d8282008-2229-4ba3-a4a1-c906b5cb81e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7a34e35-920a-477a-bdb7-382ae23f4dfd",
        "cursor": {
          "ref": "6540f52b-09f3-4ab9-baff-db007c216c79",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4c4e48d3-0b03-4956-8fb5-3498a64e8924"
        },
        "item": {
          "id": "b7a34e35-920a-477a-bdb7-382ae23f4dfd",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c20aedb1-869d-4c40-8b9f-7b38aab466cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f9bf3c-a415-4278-b471-353ac746b0dc",
        "cursor": {
          "ref": "12216631-073e-4fe8-8a6d-475fb85c05ff",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ad325015-6d24-4226-9a4b-a2efe9a6ea7c"
        },
        "item": {
          "id": "10f9bf3c-a415-4278-b471-353ac746b0dc",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d58b7252-05b6-4f62-86b7-e1b01e999b6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33597679-448e-4faa-a548-3253d59d87ec",
        "cursor": {
          "ref": "381d3867-dd99-4405-bef9-7762db38bdc1",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8a816065-8429-4331-a01e-3583c307a9f6"
        },
        "item": {
          "id": "33597679-448e-4faa-a548-3253d59d87ec",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d552eefc-42dd-42bf-bc76-7a57891f6513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "889ea8da-a620-4dfa-9466-4af7aee1dba5",
        "cursor": {
          "ref": "fce781cb-c5ca-4f75-9c2f-caac4184feb8",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3c742611-9cb0-477d-bfa9-05601f470d9a"
        },
        "item": {
          "id": "889ea8da-a620-4dfa-9466-4af7aee1dba5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "328361a9-5a61-4a67-abe3-3eea5fd0673a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8124b215-cf1f-40c8-a749-6fea654d9dba",
        "cursor": {
          "ref": "33b218c1-4af2-4cd7-a124-432229ff5123",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f7fc3f2c-ebb2-429c-86de-3aaa5ea2360c"
        },
        "item": {
          "id": "8124b215-cf1f-40c8-a749-6fea654d9dba",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3c154568-8bdc-4869-ba48-425e489a8e6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf863424-d938-44d0-8ec9-e738ea6b8965",
        "cursor": {
          "ref": "3ae1eefa-0e67-4f40-b556-b1331869e331",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "96de9d78-e86d-4456-848d-5e14ffce9117"
        },
        "item": {
          "id": "bf863424-d938-44d0-8ec9-e738ea6b8965",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5d0820f2-26ff-4958-9825-c93afe765698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c637ab78-4cfd-44e5-b5ac-51ef99842fc7",
        "cursor": {
          "ref": "5d17f7ac-03b7-4d7e-9b60-c74a0b4c847b",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "38e7e5f0-04d0-45d2-841f-bfdbc848ba50"
        },
        "item": {
          "id": "c637ab78-4cfd-44e5-b5ac-51ef99842fc7",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "894852c4-6998-4fc7-94c3-dcabfb99ff96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6bff3d-caf4-40f5-963c-ba87ff30ad1b",
        "cursor": {
          "ref": "9ec213d9-a52c-4767-808d-4fc36c6f098d",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7291daa5-fa51-4ba0-ae24-e545cb7373e2"
        },
        "item": {
          "id": "8a6bff3d-caf4-40f5-963c-ba87ff30ad1b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ff52cef0-42eb-4967-b441-97f1bbcdba33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b3d336-09fe-435d-9d01-a13446eb5a6f",
        "cursor": {
          "ref": "2404efa3-6f79-4885-911c-c437965c27d4",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "bd7063b7-5249-4c99-825e-124ca8b57cc0"
        },
        "item": {
          "id": "e2b3d336-09fe-435d-9d01-a13446eb5a6f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1ae5d909-e83d-4d73-8f58-aec30ebcd60b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7ec626-6756-4d14-9005-80e6566e25f4",
        "cursor": {
          "ref": "d10ab263-9fe1-4c16-bcbd-cf6aeabf25b6",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f2471a70-a5f4-4817-b8b5-ec19a92705f1"
        },
        "item": {
          "id": "5a7ec626-6756-4d14-9005-80e6566e25f4",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e6b9edf9-a711-4038-967f-7ef301954721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81472f62-4ef2-4627-88d3-6dcae71025f9",
        "cursor": {
          "ref": "5b082f1c-a4c4-4223-88a5-4a312d46b0bd",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b0019822-b775-4945-a572-10ee0d9e1ef5"
        },
        "item": {
          "id": "81472f62-4ef2-4627-88d3-6dcae71025f9",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ea60644e-3a5b-4fb3-b8e7-2ae0ee408d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af2109c6-a880-40b3-ae26-4e6fe9d13f3e",
        "cursor": {
          "ref": "2d8ee781-cfce-40c3-b382-a27479831e15",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "24736d8e-dc7c-414d-81b5-470daa2aec12"
        },
        "item": {
          "id": "af2109c6-a880-40b3-ae26-4e6fe9d13f3e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c61259eb-a1cc-4874-ae4b-13ebc7ce583f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8317fd6a-d6b5-4a73-88c4-a34225402516",
        "cursor": {
          "ref": "87d5943b-8e4e-45b3-8ba8-54203c84b79b",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4d341442-da31-4066-94ec-d5eef6ad6ba1"
        },
        "item": {
          "id": "8317fd6a-d6b5-4a73-88c4-a34225402516",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "413bf19a-b909-4268-a366-756e1f89eb19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1ee769-e67b-4664-9d9b-b62b1c3dfdd3",
        "cursor": {
          "ref": "a71dfc2e-512e-4981-bcfe-2a60c79c5707",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b6d81a58-9201-434e-b3d7-645b28175350"
        },
        "item": {
          "id": "0c1ee769-e67b-4664-9d9b-b62b1c3dfdd3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "174322ff-3356-4033-90c8-ff5fb6c53940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ea4928-d254-42bf-a250-e1e377d4e4f1",
        "cursor": {
          "ref": "d50c50ae-d9f0-4548-8b0d-70462a041556",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e57a35cd-edec-4192-be01-fa869e64d6fd"
        },
        "item": {
          "id": "97ea4928-d254-42bf-a250-e1e377d4e4f1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "2d064658-f290-4cab-8c39-c12b39a88f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a22862ea-2a45-4948-ba8c-1149b32087fc",
        "cursor": {
          "ref": "89c966eb-de51-45b2-acbc-dd323e3743d1",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b89c224d-69d0-4147-a715-c51673d2d6c0"
        },
        "item": {
          "id": "a22862ea-2a45-4948-ba8c-1149b32087fc",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d832ec7c-ebe7-427b-8ccf-64d5000994bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d6053dd-15b9-4027-a266-1a1074afc2ef",
        "cursor": {
          "ref": "802d4af0-d0c2-4a22-94d6-a83111962afa",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "78032d70-4713-4973-ac17-c7fab4568b6d"
        },
        "item": {
          "id": "0d6053dd-15b9-4027-a266-1a1074afc2ef",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0133c6e7-338f-4cd3-949f-21ff4f90a76e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68e1b9e-1e3d-4836-81cf-a66951202291",
        "cursor": {
          "ref": "8d5015a8-14ae-470c-ac41-0aed5b31de77",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2188ff9e-ca1c-4fb1-b787-ac7b02f221af"
        },
        "item": {
          "id": "e68e1b9e-1e3d-4836-81cf-a66951202291",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "18217bed-09a8-471f-bff6-27bc0858a245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5d9ab09-d0a0-4aa9-8ba4-a92e533b8147",
        "cursor": {
          "ref": "c6fd04ef-ba9e-421b-98de-9e59c4bd598d",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5389abf3-0448-4427-af18-9ce3120cacac"
        },
        "item": {
          "id": "a5d9ab09-d0a0-4aa9-8ba4-a92e533b8147",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "119a9b86-e852-4428-8b7f-a33e58a8b5e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0ea358-19a8-415c-b536-ba3bf2a1eb58",
        "cursor": {
          "ref": "c17a990b-5a0f-425f-b520-76ace1e96a3f",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7bf96eaf-d945-4c8b-b0a9-43cd21336ef8"
        },
        "item": {
          "id": "2a0ea358-19a8-415c-b536-ba3bf2a1eb58",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "29514ade-5293-485d-a468-97eba1052638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d29d53-4384-4dc1-8a04-e3b9b302b12b",
        "cursor": {
          "ref": "6d70c29b-62ca-43b3-9e6f-27983d3fadb1",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6f3f0566-5abb-4289-8d1d-cd90e1c0df67"
        },
        "item": {
          "id": "a8d29d53-4384-4dc1-8a04-e3b9b302b12b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "68eedbaa-d402-4b4d-8952-8ddf16f79700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30cc9ca6-e2ce-43cd-a475-e72ff77cae20",
        "cursor": {
          "ref": "631606d8-279e-435b-80e0-a7050c1e0e1f",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d8d70ff9-9228-48e1-9ba6-b3c0eb7d69d0"
        },
        "item": {
          "id": "30cc9ca6-e2ce-43cd-a475-e72ff77cae20",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "31cca2bf-c43f-4d55-a1be-a054d70c9b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb89ada6-2d37-4919-afb7-04851d52ba26",
        "cursor": {
          "ref": "e9849782-c392-4723-b01d-ccc01c4055ef",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "59aecb71-588f-4bc8-8921-8d9f488a9ef4"
        },
        "item": {
          "id": "bb89ada6-2d37-4919-afb7-04851d52ba26",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "fbd952e0-617d-4bb1-9caa-4878e9f1ad6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7843e7-4b68-4467-894a-3c2ba71a8cb8",
        "cursor": {
          "ref": "62af5f56-aaa0-4edd-9b45-2b709a5b457d",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0bb150e8-d369-48d1-9e54-8683cc2d6ab5"
        },
        "item": {
          "id": "9d7843e7-4b68-4467-894a-3c2ba71a8cb8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "52d0346b-54b6-4be6-8574-4279b3052f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3538ec8-58c6-4b40-86e9-9b873339e948",
        "cursor": {
          "ref": "d3130d0c-d493-4d6a-99ae-fcd432ccf7f9",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "463a4ba1-e979-4e03-afcb-48488ca918e1"
        },
        "item": {
          "id": "c3538ec8-58c6-4b40-86e9-9b873339e948",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b3bb449a-1894-44f1-aad7-995e3169470e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9583b89e-fba4-4986-9caa-e9961ad61271",
        "cursor": {
          "ref": "b7485d80-a8c4-4551-8edf-9304d0579ea0",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b5a63aad-961f-4a7a-98d6-443bcac19c96"
        },
        "item": {
          "id": "9583b89e-fba4-4986-9caa-e9961ad61271",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0f92bedb-1f41-4d53-a63a-ac698761fecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "362061ef-dee0-4e91-8f1f-a2968445f49f",
        "cursor": {
          "ref": "86e4e633-4f7b-4824-bac5-e8c70fad6608",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "748cc06c-3e06-4297-af32-22ff60d64452"
        },
        "item": {
          "id": "362061ef-dee0-4e91-8f1f-a2968445f49f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d16e955a-50bf-4729-860d-69028976e1ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2ebdaf-f715-4ae2-83ac-5ceb3fb35e66",
        "cursor": {
          "ref": "5b3ad58f-06c7-4062-b8f2-5388b77c5183",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d44fcaff-c255-4f94-a3b7-a586c5c51fd6"
        },
        "item": {
          "id": "fb2ebdaf-f715-4ae2-83ac-5ceb3fb35e66",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "dffe8777-1700-4efb-ba63-fbbc3e138b31",
          "status": "OK",
          "code": 200,
          "responseTime": 180,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d9b0bc52-9be7-4425-9440-6749eaf3bf93",
        "cursor": {
          "ref": "f4c47cec-2724-4e7a-9b84-210873b6c0a4",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e6ee0510-e664-4af2-be36-5511e4d40554"
        },
        "item": {
          "id": "d9b0bc52-9be7-4425-9440-6749eaf3bf93",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9975979b-0378-436d-941e-95f1d1ace51f",
          "status": "OK",
          "code": 200,
          "responseTime": 180,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "a5e89efa-07fd-4b99-ad75-c5c3c892bd0b",
        "cursor": {
          "ref": "047fd9a2-5211-48cd-b8e1-93a9e8b35a75",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "39ba123f-0aa7-4b2a-b5fb-2ef4b3454c4d"
        },
        "item": {
          "id": "a5e89efa-07fd-4b99-ad75-c5c3c892bd0b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "283a2d8b-c62b-4de7-b0f9-9876a9719204",
          "status": "OK",
          "code": 200,
          "responseTime": 192,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "486db33e-b6c2-40e7-af0a-692514656644",
        "cursor": {
          "ref": "d1aa67cb-468c-4a03-97ce-9202d9c4b0df",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "aa8f25be-ef5d-476c-b2b3-1098882b5f85"
        },
        "item": {
          "id": "486db33e-b6c2-40e7-af0a-692514656644",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f4707d59-c0f0-42e8-93f4-41d57c9c2e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3711751f-defb-4435-a715-1d7b78b3f000",
        "cursor": {
          "ref": "f77dd3b1-4e3c-4e1a-bcab-59c20e0a4293",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f81ebb9a-af94-47ef-8c87-60bf24b9db48"
        },
        "item": {
          "id": "3711751f-defb-4435-a715-1d7b78b3f000",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "babba5e7-a3b4-4047-b95a-995cf7c7d203",
          "status": "OK",
          "code": 200,
          "responseTime": 176,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "6c99c2a8-a0db-4292-9445-bf6e2e1ac434",
        "cursor": {
          "ref": "dbb0f4c2-e578-45c6-844d-47cffcb3108e",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "55e1bec8-c5e1-4eeb-8449-fc55febe7825"
        },
        "item": {
          "id": "6c99c2a8-a0db-4292-9445-bf6e2e1ac434",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "03651b38-402e-44b5-a401-21824d297da6",
          "status": "OK",
          "code": 200,
          "responseTime": 182,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "5b583da6-4089-4270-8980-1111386d46f1",
        "cursor": {
          "ref": "d6579d2b-b33b-47bc-8bbc-a3406204b421",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "503f258a-c873-4bb8-9a93-be3e20e41a3f"
        },
        "item": {
          "id": "5b583da6-4089-4270-8980-1111386d46f1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "80ceeed6-b554-4bbb-a22c-75263a66e274",
          "status": "OK",
          "code": 200,
          "responseTime": 176,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "6baff87a-95a4-47a1-a7fc-c1a2ad24fcb0",
        "cursor": {
          "ref": "44799f97-7b10-4979-b9ce-2119f2ed89e6",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "355d5289-4ef7-4a72-a72c-83b4eaa2edfa"
        },
        "item": {
          "id": "6baff87a-95a4-47a1-a7fc-c1a2ad24fcb0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f69a40d2-0c60-4dcc-aef5-1d99955ff58d",
          "status": "OK",
          "code": 200,
          "responseTime": 177,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "35f68497-5d9d-4af4-b0a4-8510c0cf9606",
        "cursor": {
          "ref": "2ea844a8-d1f3-4755-b727-8869206354bf",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3ed6d14b-23d4-40c7-9671-f8a10db0d95f"
        },
        "item": {
          "id": "35f68497-5d9d-4af4-b0a4-8510c0cf9606",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e63adaa4-2b24-4f15-a8e3-a1bfc1ee1b3e",
          "status": "OK",
          "code": 200,
          "responseTime": 192,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "42127bd5-9738-4723-bb24-e9490bb9bd56",
        "cursor": {
          "ref": "e8d7e682-f1a4-48e7-be41-7ae7d61f38e8",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8bf6a19f-14e2-4ecb-bcb8-207de7421fe7"
        },
        "item": {
          "id": "42127bd5-9738-4723-bb24-e9490bb9bd56",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "752275a1-126f-4571-911a-30d26d9a15a3",
          "status": "OK",
          "code": 200,
          "responseTime": 182,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "fc65d4f9-23a5-4d17-94a0-609d23450797",
        "cursor": {
          "ref": "86f66d6a-e4d0-442c-8f99-31c7eeab2c4d",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "62834354-664a-429c-a8bd-25bc60e7813f"
        },
        "item": {
          "id": "fc65d4f9-23a5-4d17-94a0-609d23450797",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7cb26122-1909-4286-9baf-b789e5daabec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f28c7631-0b8c-4e7c-a9a1-2f4967fb0ca6",
        "cursor": {
          "ref": "5bd3c254-52f5-40bc-bffa-acb31a239a0e",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a155fbc2-bc75-4df3-b78b-a9aea8f38e41"
        },
        "item": {
          "id": "f28c7631-0b8c-4e7c-a9a1-2f4967fb0ca6",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "bd1d9561-64d9-4d68-beaa-49f281f3f5f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc743cfb-998f-4c72-a8e7-c5a16934143d",
        "cursor": {
          "ref": "115475c4-a976-45a1-a303-281d38b3ff6b",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ed259eeb-67f4-40dd-9674-57861494d924"
        },
        "item": {
          "id": "dc743cfb-998f-4c72-a8e7-c5a16934143d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "32bd9818-4a1f-41bb-8b97-126085686a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a131db-3827-445f-a89a-be28f9424cf7",
        "cursor": {
          "ref": "ceb7bdd7-1be3-4f4e-bb62-44c455eaff26",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "5f11c829-84a9-4eb9-8ec7-435aab0677b0"
        },
        "item": {
          "id": "00a131db-3827-445f-a89a-be28f9424cf7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b2d28956-b86d-40a2-a041-b4dcff65e0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b54ae2-e465-4a17-91ff-ba02dd69eb36",
        "cursor": {
          "ref": "93a8f591-9c51-40b4-a87d-df253161de77",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0785fbc3-da84-4b05-8267-6c1a6d5afd76"
        },
        "item": {
          "id": "50b54ae2-e465-4a17-91ff-ba02dd69eb36",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9a68b17b-badf-43aa-88ce-c81e88383fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a125a09-3c39-41fe-bb9c-5ec4fbaaaec5",
        "cursor": {
          "ref": "0de762ae-ae90-4df8-9676-5ed7e37c4e1b",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "85dfac11-ea6a-4fbc-8b7d-bb18cc0f50ea"
        },
        "item": {
          "id": "5a125a09-3c39-41fe-bb9c-5ec4fbaaaec5",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "8abe5238-b7bc-42c2-a266-ef1e0c340a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a0732f-9eff-4eff-b14b-6a0fc836f4e4",
        "cursor": {
          "ref": "0c28f005-b718-47ab-a0d5-88af326035ba",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "17b590ba-dbbd-4b61-b7e3-536a08201c4a"
        },
        "item": {
          "id": "b6a0732f-9eff-4eff-b14b-6a0fc836f4e4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1f321bda-1271-4ca9-a56f-e561079f0464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c855ad4a-82d6-42af-8c3e-2fc80460317e",
        "cursor": {
          "ref": "781ebb1b-da7f-4ced-9937-0505e69e0f52",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8121aa3b-ead8-4834-af5d-9bdb5b619230"
        },
        "item": {
          "id": "c855ad4a-82d6-42af-8c3e-2fc80460317e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "366ebc0c-8f0c-4d2b-8965-150778dd9f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2ec850-03a6-4bea-a00d-ac83f613de5f",
        "cursor": {
          "ref": "75480519-7057-439c-addc-836fd6d2da84",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b92634dc-a360-4f4f-975a-4e2f4332fdca"
        },
        "item": {
          "id": "6f2ec850-03a6-4bea-a00d-ac83f613de5f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a4243b40-6df3-45ed-a0bc-43f1ac0029b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12acbc23-35f8-42c9-94c8-f58e66922e38",
        "cursor": {
          "ref": "18205dd3-6acb-45ec-a48a-14bf891b07f6",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "fee4b7f1-75c8-49ab-a982-00f787c53a4f"
        },
        "item": {
          "id": "12acbc23-35f8-42c9-94c8-f58e66922e38",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c5ff29f6-d6f7-4337-8f89-cc1d8908c939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4a7e9c-e86b-48d6-a8eb-256a66479b44",
        "cursor": {
          "ref": "7035e5b3-81ee-46fd-9fe1-0e2afd0b2ebb",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "401eabcb-52d0-44d1-a358-47e8f01ae852"
        },
        "item": {
          "id": "0f4a7e9c-e86b-48d6-a8eb-256a66479b44",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5e5379e0-3360-4a3a-a51a-5eea510d87ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72a352b-ba3b-469e-8815-3ee60b1146b9",
        "cursor": {
          "ref": "13c2ae9b-87da-4644-a835-db71ba512b1d",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "024ba9e3-ca8e-4b4f-beff-b9750af4bace"
        },
        "item": {
          "id": "f72a352b-ba3b-469e-8815-3ee60b1146b9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9a16b3c2-d6a2-4397-9d28-9d33b79c73bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d85968-4441-4d32-8776-14f7b98cdecc",
        "cursor": {
          "ref": "b6375ab1-dccd-4b97-b6cd-e88eadf41d5e",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "75a4e5a3-2a8f-47fa-a6d9-f5cae89e1be2"
        },
        "item": {
          "id": "c8d85968-4441-4d32-8776-14f7b98cdecc",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d50f86cd-6348-4535-8b01-a9d61562c350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e5c8c0-d359-42f1-9915-201e553f7854",
        "cursor": {
          "ref": "cbb500ef-fd3b-494b-be80-56666946456a",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "97f8650f-3719-4ab5-bff3-ece5036c26af"
        },
        "item": {
          "id": "a5e5c8c0-d359-42f1-9915-201e553f7854",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7ef94697-25f2-42b9-8765-22cc8104ad27",
          "status": "OK",
          "code": 200,
          "responseTime": 176,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "62e4b362-8109-47a3-8eed-245e83b1c9bd",
        "cursor": {
          "ref": "7591aef9-e7f4-4fa3-a823-71eee402a460",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9ee02284-ec83-4fa8-bc8f-0e5e009caa24"
        },
        "item": {
          "id": "62e4b362-8109-47a3-8eed-245e83b1c9bd",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0acc8222-b28b-4e70-994b-e55e39d29014",
          "status": "OK",
          "code": 200,
          "responseTime": 175,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "749d28f8-de85-47ae-92a2-35f70e9d6944",
        "cursor": {
          "ref": "bfe7e438-717d-4cd6-b407-78356e6c6aa2",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0766f41b-562c-49c5-8467-deb6d9d538c9"
        },
        "item": {
          "id": "749d28f8-de85-47ae-92a2-35f70e9d6944",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "676c6834-e188-4a7b-bba9-7436df79ba13",
          "status": "OK",
          "code": 200,
          "responseTime": 180,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "371e1cd1-679d-4598-a391-276e4b12a4c5",
        "cursor": {
          "ref": "d4285041-3146-4d33-9c4e-d095bb8de1ea",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "202114e0-d9f5-4907-9302-89b4f282f8c8"
        },
        "item": {
          "id": "371e1cd1-679d-4598-a391-276e4b12a4c5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "db2647ed-6498-4129-97d2-4b88d9c6252a",
          "status": "OK",
          "code": 200,
          "responseTime": 190,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "9ae26b64-cc09-4609-9b47-738688625bb7",
        "cursor": {
          "ref": "d130881f-5e52-4f3d-95be-2a96baccd8ea",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a7513e25-0b0e-4f09-bb50-8dccc638ac7a"
        },
        "item": {
          "id": "9ae26b64-cc09-4609-9b47-738688625bb7",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "76898798-bb0e-4ffc-a19b-d4910daed6cc",
          "status": "OK",
          "code": 200,
          "responseTime": 183,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "b5dd26f3-f1b1-4bea-9b70-94d12052c08e",
        "cursor": {
          "ref": "e64c066c-6b45-488c-800d-950130e9e5ca",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "68e97b08-8dc8-4a79-9ec6-5e309113acf1"
        },
        "item": {
          "id": "b5dd26f3-f1b1-4bea-9b70-94d12052c08e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6908d13b-1be9-4ef7-bbfd-83b27cfb0da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258b0916-9f83-4074-a084-fcd181687987",
        "cursor": {
          "ref": "639d7bc8-d9b5-430f-8afe-997d52b7c67b",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5176b724-5f40-400a-b8a0-ab8e15038b9a"
        },
        "item": {
          "id": "258b0916-9f83-4074-a084-fcd181687987",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0d17a879-086c-46ef-96c4-e8479e0a0449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a2d6dc-d1fb-45bb-aeee-2e9e943fc4eb",
        "cursor": {
          "ref": "21ad050d-e24c-4b99-9d4b-c4fb44aa8cdc",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "95a3fed0-3516-4e44-8c7c-2e45a54892b3"
        },
        "item": {
          "id": "55a2d6dc-d1fb-45bb-aeee-2e9e943fc4eb",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "443c3d2f-0f56-456d-b980-549a90383cec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45654008-14fe-408b-9c1c-882e491bb650",
        "cursor": {
          "ref": "ef91f4f5-8dce-4cb5-ad70-6663bacbaa4f",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f6221e06-6b03-43ed-8696-442b2fa5210b"
        },
        "item": {
          "id": "45654008-14fe-408b-9c1c-882e491bb650",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a7c4b2d0-caf4-40f1-94b0-42192d82de26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a08c024-016f-46d0-b888-45ab0b1c27ae",
        "cursor": {
          "ref": "b2a72d18-f0de-49ef-b807-b97b45e109b6",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "74234bd6-f751-4f8c-8119-2cf6b7342b00"
        },
        "item": {
          "id": "7a08c024-016f-46d0-b888-45ab0b1c27ae",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9839d553-a60d-4c42-9ffd-086d0dec8da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f6203b-5c2d-4c30-a333-c354fcf7021e",
        "cursor": {
          "ref": "a8fb7bdc-47ce-45cb-8105-dc95b1ed6333",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c2d045a2-682c-4815-a47c-39b5fb74fc82"
        },
        "item": {
          "id": "00f6203b-5c2d-4c30-a333-c354fcf7021e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "103256d8-b037-4478-b693-0a0ce8bcd2b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f38353cf-3508-48ac-a17f-09243b3d4782",
        "cursor": {
          "ref": "0e66a305-eb11-4797-addc-2f721bde31f3",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8586e2e1-4564-4a0f-9f6a-4e01b85969a4"
        },
        "item": {
          "id": "f38353cf-3508-48ac-a17f-09243b3d4782",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b0b55d88-04c6-4b06-8763-656f67e627e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d57fa98-a95c-45cc-ae93-0ab4553c803d",
        "cursor": {
          "ref": "94f26266-a403-4045-bb9d-c666714264e6",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "eb9a2e31-f30c-4659-a507-1a871108deb9"
        },
        "item": {
          "id": "5d57fa98-a95c-45cc-ae93-0ab4553c803d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5524e413-a76f-4cbc-b2ed-5118e9f62cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1687aa5-e0f3-4ab6-928e-ae56f061a776",
        "cursor": {
          "ref": "23ed9ab3-2dee-4ca3-ad39-365ebac5523a",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5a6f8415-cad3-4d8d-ac69-181c712da149"
        },
        "item": {
          "id": "f1687aa5-e0f3-4ab6-928e-ae56f061a776",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b7bfe1c3-4958-4146-8ada-70ede2afd5e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17ba5ceb-4281-4bcc-a79b-df679f3bc099",
        "cursor": {
          "ref": "a76a1315-df42-4620-ac0d-a97c9746b977",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "21f844cb-1ab1-4752-8b6e-164f54eb5bcc"
        },
        "item": {
          "id": "17ba5ceb-4281-4bcc-a79b-df679f3bc099",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "05ed079e-9c2e-4422-a600-b790b76dfefa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0e8ee1e-94b4-4a1b-83ed-e151702667d2",
        "cursor": {
          "ref": "3a51806e-7abc-4eef-acbc-a3be3b43d985",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ff0fe1db-c899-410c-98d7-7a21b433ce4c"
        },
        "item": {
          "id": "d0e8ee1e-94b4-4a1b-83ed-e151702667d2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cfb15f29-76cd-4a4f-a252-454184a3f9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7fddc4b-8d14-4757-b916-a21cad71627e",
        "cursor": {
          "ref": "cdf1f9b2-0701-44a9-808a-8f427a026d75",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "1abab58e-196e-4a83-9781-18dc4b6cb9b0"
        },
        "item": {
          "id": "c7fddc4b-8d14-4757-b916-a21cad71627e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a130072a-edef-4807-a4ff-a058d430f856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e51ac8-3fa2-4b12-b5a7-03aacbbebbdb",
        "cursor": {
          "ref": "fa5facf4-d0c2-4f41-b520-291326ddf03d",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "a7b8bf1c-fc56-4cb1-9010-a47739c6030d"
        },
        "item": {
          "id": "49e51ac8-3fa2-4b12-b5a7-03aacbbebbdb",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "abd76d40-ab65-452e-85c6-f02f218d05c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b45eba1-8549-4c51-b9d6-37427aee7655",
        "cursor": {
          "ref": "9e9d0f04-c2ed-4eb8-b0e1-4136dde5cea8",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "8eb08b12-b600-4b01-9288-c01aa55d4be6"
        },
        "item": {
          "id": "4b45eba1-8549-4c51-b9d6-37427aee7655",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "70435038-eaea-4dd2-9762-0d5cd97fcea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34757369-aa54-4fc2-a86b-a6550e68c85e",
        "cursor": {
          "ref": "3232dd6d-9ad1-4cd2-b029-3b723eacc032",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "7f406d91-ffc1-4680-a570-6f2e077d07da"
        },
        "item": {
          "id": "34757369-aa54-4fc2-a86b-a6550e68c85e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a63a3847-970f-4134-961e-79a2536864c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c94001e4-dbaa-403d-9046-86443b4cbe1c",
        "cursor": {
          "ref": "52077e87-7855-456c-98f8-afe96ed8820e",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "72f12278-9696-4692-8e97-ae4f6f75f4c8"
        },
        "item": {
          "id": "c94001e4-dbaa-403d-9046-86443b4cbe1c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "219d25e0-cef1-424b-96f0-d88ec4e22df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "023b4efa-29c7-451c-bbb5-eb0b64fcc25a",
        "cursor": {
          "ref": "c173a3ef-6c96-4029-8c7a-b5cd4ec09a6f",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ffe7a878-16a2-4ab6-81a0-f40ccbe29c02"
        },
        "item": {
          "id": "023b4efa-29c7-451c-bbb5-eb0b64fcc25a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "874b7fc6-a25f-44d1-8403-ee920d96a1a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aafd8f5-69d9-41cb-aa61-dd839164cc59",
        "cursor": {
          "ref": "cc928bc6-8ec8-4790-984b-aa0f32e65f6f",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "98c5360f-65ca-477e-8499-ccecab16a1a0"
        },
        "item": {
          "id": "5aafd8f5-69d9-41cb-aa61-dd839164cc59",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "25c9572a-7c5f-4b1b-b8aa-65dde83390ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94371ba8-bcec-41b9-9b74-09f256e3e60b",
        "cursor": {
          "ref": "89c87ca7-88fc-4ae7-b156-f29c72c2a678",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "4983178a-4e74-442d-950a-ea4b5eb01f8e"
        },
        "item": {
          "id": "94371ba8-bcec-41b9-9b74-09f256e3e60b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b5acd19d-0e76-4e3c-a658-d0c9b89de1c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087a7797-379f-4980-a7b0-5720b29de777",
        "cursor": {
          "ref": "1ab7ae51-cd39-4ad6-9e3f-175eecc38b21",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "695fe015-d5ef-4ce8-b3ac-4fa284830e52"
        },
        "item": {
          "id": "087a7797-379f-4980-a7b0-5720b29de777",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7d786344-4fcf-4288-a923-b23c9be67ff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3c38c5-41a1-4c6b-a22f-49ae000b604a",
        "cursor": {
          "ref": "a8ad4df0-b0a3-4771-8378-10c0962958b8",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "2d93c546-e829-45ca-9dfe-2a2ea432299d"
        },
        "item": {
          "id": "dc3c38c5-41a1-4c6b-a22f-49ae000b604a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a284a96c-22b6-4951-902a-9bde196cd05f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd546c12-b82f-48ea-a0b4-c1cb72873b55",
        "cursor": {
          "ref": "93add266-c1ec-4890-8298-6ef9804ead1f",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "8a3ae3bc-2abb-44b9-8b55-1dd71897f7ab"
        },
        "item": {
          "id": "fd546c12-b82f-48ea-a0b4-c1cb72873b55",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "cebe0b45-d555-4e24-8dc2-5d29f5633b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863d6fd6-0dfe-407b-b78f-cd282aa89287",
        "cursor": {
          "ref": "ea26b98b-a6a1-473c-802f-9b43c4972508",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a276bbd0-7dd1-49e8-b644-12c6a8e103a9"
        },
        "item": {
          "id": "863d6fd6-0dfe-407b-b78f-cd282aa89287",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "074ef0da-38b9-455e-8029-d30324bac1b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b366148-7ac9-4695-9014-ce6bb60ac870",
        "cursor": {
          "ref": "2ca60bee-5681-4a72-95ad-16dbff4a9fe3",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "9654f9e4-9451-4078-b853-6fd141f4820b"
        },
        "item": {
          "id": "3b366148-7ac9-4695-9014-ce6bb60ac870",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e94cae0c-0b73-4bde-803f-ba21e84af58c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62bbf4e-9cf1-49a4-a6c8-fd3960b6373b",
        "cursor": {
          "ref": "04c35322-d9a1-4eb1-9a3e-1bdaf66f1f91",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "ce55a946-b1a8-4c1e-bcb3-3a1f768487d3"
        },
        "item": {
          "id": "e62bbf4e-9cf1-49a4-a6c8-fd3960b6373b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "462bd9d4-2874-469c-95da-8efd65b8a299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74dea37b-0b16-4a39-a26b-3bd8b50aade8",
        "cursor": {
          "ref": "1c9c94df-5c55-4109-a103-8121c78d5293",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "f5bdcf97-e1e5-42ef-a706-fe3467f4c3b7"
        },
        "item": {
          "id": "74dea37b-0b16-4a39-a26b-3bd8b50aade8",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f18adc3e-0d45-497d-bbe0-3b9be55ef214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b15623-6057-4d6c-9563-0ab7acb6a53e",
        "cursor": {
          "ref": "6fe1fa24-278b-4d0e-8899-4ffad6be332f",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "715b6709-9f50-484e-b2f9-e9acc65b5629"
        },
        "item": {
          "id": "c3b15623-6057-4d6c-9563-0ab7acb6a53e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "523efe5e-f79e-4a23-bfbd-a0c6c0f0172d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2afa61b1-f477-42b8-8d43-4a784eb98a2d",
        "cursor": {
          "ref": "f68e5147-b602-48cf-bf01-b9b2a7446dab",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "2b1d2e11-186a-4978-976c-82746b9a7ca2"
        },
        "item": {
          "id": "2afa61b1-f477-42b8-8d43-4a784eb98a2d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "498ecdb7-70db-4371-8584-3dc4f8c3727f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ab54f1-d772-46d0-ad5a-e6e1e664c72d",
        "cursor": {
          "ref": "b6f4cdaf-54f8-485e-bd3a-047994c99830",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "ab673a7d-531c-470f-af63-80e308ead368"
        },
        "item": {
          "id": "50ab54f1-d772-46d0-ad5a-e6e1e664c72d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1851781b-bad5-4679-8e31-518000148d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24154820-63dc-4136-9dc3-a448e939a57e",
        "cursor": {
          "ref": "5629813d-6aa6-45ef-9ddf-1da85ca59525",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "a7527eae-4d91-4194-a11d-96f96efa8b0a"
        },
        "item": {
          "id": "24154820-63dc-4136-9dc3-a448e939a57e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "199eeb8d-cf09-4273-8e09-438ca8dfcdeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05132796-6ec7-48b3-9720-90ec9167305d",
        "cursor": {
          "ref": "994aa917-a333-47ee-852d-f023432309e2",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "c8b1f45f-7eae-4847-9179-74d14a417d1d"
        },
        "item": {
          "id": "05132796-6ec7-48b3-9720-90ec9167305d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5a1cc7c3-79d5-413c-b0d6-2e88cb1d47ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "208213f3-2d2e-4549-a45a-3e4c14af0046",
        "cursor": {
          "ref": "38933979-7ed2-4378-9667-e7171e313267",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "febfcb70-4187-4591-8b3a-1f276674a777"
        },
        "item": {
          "id": "208213f3-2d2e-4549-a45a-3e4c14af0046",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b5c7924b-a3ef-4183-91a5-91a7f6b4db4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e50559-bd6d-4002-ad22-92c3c9062d70",
        "cursor": {
          "ref": "150d1715-962c-4156-a8a3-d7961467e148",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "169c494b-449c-41b5-9331-ae40be4ae8bf"
        },
        "item": {
          "id": "c2e50559-bd6d-4002-ad22-92c3c9062d70",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2648b8dc-9f8b-4522-a09b-78aac8bdf82e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b000cdc-9ed6-468e-b60a-320a25e9efc0",
        "cursor": {
          "ref": "0e0040de-eef2-4294-bf61-363ae4306175",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "17b557ba-977c-4cee-aaff-59949eb8e498"
        },
        "item": {
          "id": "0b000cdc-9ed6-468e-b60a-320a25e9efc0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e91476d0-8698-49ae-976a-f2cd3e020921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ce807b-71ff-483c-b20c-9aead32582d0",
        "cursor": {
          "ref": "51201609-153d-41e2-a929-f6ca57638dc9",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "4cef0e07-e233-4d07-82c0-4a4577f1492f"
        },
        "item": {
          "id": "a6ce807b-71ff-483c-b20c-9aead32582d0",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2607fcfe-494f-4cb5-ac4b-3c004b72d5b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26154a04-38b3-49c7-b190-a606de9db9b1",
        "cursor": {
          "ref": "76ded31e-f4bf-4a9a-bf2d-bed7ea7389f9",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "b223d7bc-b7a2-4981-b9ff-205998453e69"
        },
        "item": {
          "id": "26154a04-38b3-49c7-b190-a606de9db9b1",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8f61da48-3c34-46e6-8548-f8de07bb6752",
          "status": "OK",
          "code": 200,
          "responseTime": 175,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "e5b2a230-3fb2-4205-927f-47565df2092f",
        "cursor": {
          "ref": "fc688a29-15c7-41fd-a3cb-1ff38b18c97d",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "1fdd0303-e440-4227-b4ef-018579c4cb96"
        },
        "item": {
          "id": "e5b2a230-3fb2-4205-927f-47565df2092f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "92f7e96b-df49-4437-9bc9-e29b31280f4d",
          "status": "OK",
          "code": 200,
          "responseTime": 182,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d009a87c-4543-4d45-a897-e28c07e84988",
        "cursor": {
          "ref": "a0a58097-e19c-4b05-85e8-73211025fbb5",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "dc9516df-42ab-4605-a98b-6cd0a83ab5bd"
        },
        "item": {
          "id": "d009a87c-4543-4d45-a897-e28c07e84988",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "efabf37c-4613-4516-8865-3370919337da",
          "status": "OK",
          "code": 200,
          "responseTime": 179,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e600f34-2a82-4d62-a245-069aa6c9e64b",
        "cursor": {
          "ref": "a40f9ede-7fa9-41a2-8dc2-16bdd364bda1",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "28c23813-dff0-4017-bb49-1367055be248"
        },
        "item": {
          "id": "5e600f34-2a82-4d62-a245-069aa6c9e64b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "db4e17d1-a422-40ff-9a0b-9cf3239be885",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e600f34-2a82-4d62-a245-069aa6c9e64b",
        "cursor": {
          "ref": "a40f9ede-7fa9-41a2-8dc2-16bdd364bda1",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "28c23813-dff0-4017-bb49-1367055be248"
        },
        "item": {
          "id": "5e600f34-2a82-4d62-a245-069aa6c9e64b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "db4e17d1-a422-40ff-9a0b-9cf3239be885",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa68a15e-2694-4ec4-9b61-5457e739887b",
        "cursor": {
          "ref": "df9cc9bf-b803-4512-a397-08ba245d005d",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f656ab61-863f-40b5-9cb0-f65dea1242c7"
        },
        "item": {
          "id": "fa68a15e-2694-4ec4-9b61-5457e739887b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "da66503d-394c-441b-9f41-0cce97e18ee5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c066c8-9af5-44b7-91c2-78eb1970c052",
        "cursor": {
          "ref": "f36a354d-6a2f-4d2e-886a-5ba2f62b299d",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "b0263a2a-2202-4278-8a6d-3a94e919da43"
        },
        "item": {
          "id": "12c066c8-9af5-44b7-91c2-78eb1970c052",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "872e38b0-9b0c-47cb-84f2-6b4ec3d82bcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}