{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ec2fbd85-3439-458b-92a3-b6ffc3598f2a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "44db1587-9b33-4374-bcf2-bcb3ab14d7dc",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "81313736-6c8c-4d53-8da8-150f1ea999e9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4ed2c23f-693b-493f-9406-fa719e4a6e45"
                }
              }
            ]
          },
          {
            "id": "1723f163-935f-43d7-a15e-e346ea935691",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "11299523-95cf-4ab1-88c4-447fabee027f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9f9357cb-81dd-4021-831b-f79c8fecb855"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1cfeb0ce-a251-456f-9a3c-e6a53f3444bc",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a3f16535-49c0-4320-b38f-b1595b09c140",
            "name": "Positive Testing",
            "item": [
              {
                "id": "767e2c9b-76b1-46bf-97a2-3f09370881d7",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4cc590a6-1e4e-4890-bf55-fd3fb1b92fd8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f04ee7e6-6175-482d-b835-081d96274c84"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1252b2b7-15a9-4032-a682-9abe68c53967",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1697803c-d075-4298-8c3c-18dc2dcf6458"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e6a064ad-7988-44cb-b9d1-1bc9c0f11601",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "73bd5002-43b9-458d-848b-284e79a37b4b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "504781bc-e462-4fe0-9f3a-71cec48a0dd9",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "32221424-b923-4470-9065-407853bf026a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bdc66154-8d2b-49eb-9540-657771410c0d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ee1c6ab-8b2c-4873-9cfa-566535ffa013"
            }
          }
        ]
      },
      {
        "id": "53ee83c4-3f79-44eb-88a2-2419e757263a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e1b4ff07-1734-42f9-8452-8e8c1752ebf6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b57a1e70-add8-4bad-96cf-3eda9d289b83",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b8929e91-90c5-4744-bd56-77e73c0e9b80",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4db92f7-8ee2-4416-9172-404f8fb7106b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3cca1618-5884-4509-b308-64d9eb98e3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04178cde-b91e-48cd-b7a2-ed2e028804aa",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91328929-57b7-42d7-a82f-7923f38b1937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d8483c8e-f07a-4a2e-85b6-ac468633ea73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa2825a-c9c0-4761-a5cd-a6c3556a0214",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c71a26-f440-4a15-a202-2838552b4253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0479cf14-fc61-4dd8-a59e-16dd492ec666"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "49ce8a19-b1b9-4347-a970-36f8b1d8efa5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b93d3444-0b7c-4c5e-a918-de8ed924561c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "056fb195-f3e6-468c-8369-5849bb3109e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa47991e-b309-44ff-98a6-b8f1684e95fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba860931-ccb5-4e63-85f9-7a91fb08a7c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a75da6f4-e71c-4f9b-81fb-3455b6b1e94c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e1c2e626-3439-4014-9f2d-a1855a333db4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7d5bb074-5e07-4428-922a-7c3999746169",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7b7beed-e306-4d9c-aaf0-2dcc79b3ab3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7627df1c-acee-4eae-86b1-0658b5bb5d46"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "044e1998-e607-440e-98e9-f9ea159801a5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "a182b3b3-6bdd-4394-a486-d6154c40198f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31afc82f-87cc-480d-bd9c-48e8a2c78c57",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "54e36052-e168-4908-834c-48d2d8046b51"
            }
          }
        ]
      },
      {
        "id": "91dfce9a-6830-4f66-95f6-3aa209db8ba1",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a70add7a-f4e0-48a7-941f-0cc570e12649",
            "name": "Negative Testing",
            "item": [
              {
                "id": "03b71f8f-2363-4f32-b588-68cb97949e11",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5f24ca38-9dc6-4eab-9f85-d45caecd7846",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b520cb-3d17-4aac-9bed-f8be5e9b1c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9742634c-d0dd-4336-8d8f-d4befbae8f0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0280f76-4c10-442a-9885-7fc6f8c9f324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7495871d-0bbd-4bc6-9f31-83314c2a38fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce1e9816-306a-495c-9dff-eec1830f17c0",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e732983d-f07c-4fd6-8df9-d4cd6a2ad3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68ca3c30-7193-4af7-9238-d6bc185400ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4174e6-5515-42d5-b135-66eaa0956446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56ece586-af04-4dea-a5ae-e5d80c60af85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e252c6f5-a7b3-4aa2-b027-229dd4f2ae78",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b9e9d7-1551-4960-b1d3-8172242cc8cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83156d19-00bc-4d74-aa3c-d199dde6dac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811f1a59-a455-4f0a-b14d-3dcb55133ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4d569fd-c1c0-4435-952e-8c440b3ae40e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5d36e9-66a2-49d1-9682-afad5d13657e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "945abcf2-7bbc-4a53-8135-9fb045fd2b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76a4c56d-4207-40a6-a2b4-265db48170d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c946c93f-de4e-41bf-acb7-84b006db17ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b27c91e8-02b5-407f-9075-6bca848352ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d06afb8-c89e-4fe9-8f1c-6e5c7678931d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "717fcf2d-530c-4cac-8c04-69adfd7fcf49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9418cab7-fca8-4bf3-9797-80c8cb4eb497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bfcb1f9-9ead-42b5-a3e1-d47f48845ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26005f91-d095-4261-b0ee-f83bc552080c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad6048c-f53a-46c0-b7a5-7aa544e17e7f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81985fff-d675-45af-bc59-18d6a6168d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb1d934b-6902-40b9-ae93-edde0b57dbee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6716dd2-9f6a-4e07-80ec-79139b663c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae130f7c-14d3-4b6e-bb51-c091da7a8293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a907f2ce-1b18-4102-8d76-7195b14be35c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b86689-e685-40f3-a4fe-32a38d1d6656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46ff9759-c3c4-491c-a07e-a104d2c3bdf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb2cff4-3f90-43a2-9c5d-17cee04a3ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb11e26e-c8e8-423c-8a6c-708af5b841a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49afa3aa-c4e7-49f6-b6e5-3aa2bca3d71b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc4e5bc-30e7-4423-8bbd-9ecb0642d757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0e2e2a0-1b64-4576-945a-51199490287d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "645acd12-82db-4e2d-adb1-15b91df2ad02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6fcad283-d4d2-4d4b-a437-3e7803dfd94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b550198-0501-4cf4-b2c5-9499c7830339",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdafb300-1407-481d-9080-1526327317d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e61d1786-be95-4c5e-b5b8-63114c3a9970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063cb724-2d66-4ff2-9bb9-2ccf4a33925d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3cdf6b2-714f-468b-bb96-897a5fcff3ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dffba8ab-45d7-4d31-b137-1cf99e9f0dac",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6014798-0fc8-4a47-90e7-7486349e429e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86d776f5-a70a-4778-b808-a3ff5722c447"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d9fecc-05a5-4133-a939-90fd22fc0196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1582e1a1-9f3c-429a-b554-d03b14a0112e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35567a07-e272-48df-9abb-a1ecf106467e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1146d0-4f96-49b5-8f95-bf7e88e8eccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2294882d-0751-4e80-93e7-9620f72bfef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38114609-6ca1-4d06-a4ad-f38a7fcefd02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c16c6474-78e5-4f78-bb78-0f9dbef02a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe9acf90-6ef7-49bb-b094-d0d99929aa18",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "196c8baf-7bef-4c73-9a55-a3a6a4b54348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d06b3563-d3c0-428b-851a-2ae10261876e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f653999-8e4c-4e8a-91c7-37d6df6bc953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c9f2a30-07f7-40f8-a410-c0bdb1659fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fdc6f39-9953-4726-8763-fe39960aa4f1",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec61daa-913a-44bb-ace9-b13be9f2e698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fa67f3b-9d51-4966-8778-c294a7f3ecdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467c61a0-7437-4ac0-bcd8-4466108c1f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f4bf2be-4168-41f9-92bb-3172e2692d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b9c9d8-ff1a-47a4-8a65-055c435af364",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5116a84f-cda3-45d4-912a-c168b8db00d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27d0c4b7-70af-4f51-92e3-198adad049b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef274a7-d8e4-4f01-a6c6-61d2fb9d58be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "632d4b89-ed63-44c7-9d01-aa10ec0a0b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b3c488-d10e-4c96-80a8-20be08897120",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7dec83-89ea-443d-bb5c-cef70c0474c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cf7c985-75b7-436c-908a-cc97f7a0362f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c327b1fb-a966-4c0e-b5df-76472678a078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09b77759-3d73-4383-af53-3db43288e060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d4b05a-6702-4232-8a06-ced0437d4fca",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f85833-31a8-4fd8-a272-fc0feb3f56bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c97388ad-9bc3-4ef1-bc6c-64efdd2e7a83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a56012-1640-4689-8a38-1e374a119e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70f22511-f91f-46dc-bd94-360f3f2495c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89821fc4-918e-43cc-bc79-ca137f82aa30",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1559c87-9d4a-4e81-82cc-f91a75e8a202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5549cfac-87c4-4d42-886b-c9d586340680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e32f6305-d1d6-4fe2-b20d-593dd0b69a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8edbea2-64e1-4b8f-a88e-54db84d9e965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a318fb-c313-4caa-bd72-7cbf479090fb",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8490fc2c-525b-4f41-a58a-ad76eb088b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f04efa-aa61-4b58-ac75-1207e805bd9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bebf68cd-d8f5-4afa-b80b-12180ad359e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "93659813-b8c9-4ec3-8ebb-df42914837c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f12993-b71c-4944-8b03-dc6429a0ed77",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e4d654-0ae7-4bbe-b85b-513aa1ad47f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd521205-6ebc-4890-b870-e2c07e4065d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f3fe40-9ad3-43d5-b9d2-502bca9b9340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15136a46-6695-4f30-a723-3702c025c399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ede0ae-e9f0-47ff-bddb-5adf8f07a483",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "074056ce-2160-47be-a7ea-c4a3c10abcd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d460f10-f31c-4a3b-83d2-86e06ba1c933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3525ed-2c78-4b57-aabf-1e60745adc9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1d5f367-f154-4847-bc44-85baf71462ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb53f88e-5d95-4b5e-bf36-b57aae066475",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "184da5bb-50e7-4b63-aba3-9da0f6f5de45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "443c3817-0c42-431a-b0b6-5b49eeffe189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d596e521-6547-4c0b-b8bd-5d0734ee3a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11fa0f21-7fa2-439e-9494-c39991fa923e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6aedc71-01c0-428f-a288-b8eb463fe283",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7aa855-a817-4712-bb36-a7889d51e84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f6a9a81-0e39-4e83-8fd5-8a0f6d066319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7dba51-3a02-486a-bf6e-91cefea165e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "deea443a-9ed8-47ad-9b68-4bcfa3107660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e330cee-9f30-43d1-bf0c-c0852f37bcef",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02285894-5014-4e12-9dc6-1abe3bc48b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cba38b7-d3fa-413c-9663-44dd4bcbfce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c55493-23b6-44db-be4e-c5fb2634e573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "78e0f3b2-fe0c-4772-8aed-d383aada1afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f9d480-d460-457b-82e0-e82aef0f0e78",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5bf0b7b-2669-4328-8afd-a6c4a08df3f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e22f9b06-8dbe-495d-ac8e-c05c5c5fb0f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc417a8-8dfa-4ee3-8aff-8d6750a1c8d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c746e7d-25cf-44f9-b7e9-2cabc6a738e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ce989f-08dd-4e3c-9bb3-17fb430becf3",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "547ca6be-bb00-4110-a186-c310f737b73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4934ef19-eb38-4062-a4b8-9ccfd3d94ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3939888-3608-4737-8ee1-f90190d0685f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "45b36ade-ba0f-4db2-a0ae-e480c417e529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c09a39b-5145-4e40-bd3d-f6e473633c8f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23f2840-b805-4c7b-8988-6a1174a26b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb748847-be5d-4fc6-8ae9-65ec6e6e645c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d2bdb9-cbdf-479a-8ce1-f79d7d66413a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "465dc17d-c5bf-4c02-863a-5fc1821e8b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5739be2-c269-4b4b-b0f6-d4ad8c2e6479",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3842b10a-9e64-4986-92ce-4754da569d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e456014-6c88-4874-84ce-ce82264cbfa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50ca985-a1da-44d3-8fd9-a58922f6fbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f88da3c1-86c6-4f55-a836-6d7f61846489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e5661a-97a2-4337-8cf8-3d2675d78b52",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9d49e20-a128-4008-ae79-c5dab5169f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b6d445-1519-4144-9100-3f9fd6faca5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0299efd7-4286-434c-957b-4b9d0a6d0fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "04ecaf7e-8143-4d6a-9cab-33848c3746c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978e7afc-7394-422c-900f-baded1f3fdae",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0982ea59-93d0-4c5a-a3e3-e5dc31f31c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e6e6b2d-1fab-4915-b7ca-02e7d8095d90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf5f758-cdeb-47bd-9724-139ad5e107d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "55e9500b-b1d1-4dff-89a6-f5973a8d4377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43789102-8f3f-4c8f-9391-db35499897b1",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "028e4dcc-3372-4953-81ef-b4d2fb8b6926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f8115d-7e72-426d-9c0e-15c268795221"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ab6465-b24f-4f96-bea7-6b4a5975f6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "28cb9334-c2cd-4475-96ae-463fa9f33e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0993fe-b46b-43f4-8301-753665059015",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f16b4b-7d10-40c4-b206-ce1b1f7c2558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dce43d56-71b2-4c7b-8888-3685b1d697fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca5c736b-9160-43f6-ba88-063c29f6cc04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "94f6d9ff-ba5b-4ffb-8312-3818c7f999c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5ccdb6-67a2-4ca4-b0f8-f9c8236dba28",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "976ab50b-5d31-4ffe-aaaa-05fd2e636868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6114c560-a507-4847-840f-f1e57ad807bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdcee135-e645-4168-9415-c2d5fafe8b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fe7bb4a-dd90-4c8c-b488-361e46258b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be511dd4-a272-45c1-90e8-313173724f90",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45859075-5a5b-43c9-9811-5453b4bc3a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8013d8-9db5-418a-83fe-377b7dcc8b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b2adc4-25cc-4bdd-9fa6-a811ee8b36ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5caedfe6-341f-4552-a1eb-c3d1a6aa3f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27bd1677-2847-4a31-b358-fd9c8da7f69a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5900eae-98c1-4fb3-babf-2050bbdd0cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcae1f3f-f242-4d5d-a2b7-1f1c6f668e52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f45b7c3c-c95d-4d68-be61-7c87439007e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c50f5592-fc81-4ceb-b4e2-3c0c0d9a374e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "529525b0-0273-4302-8091-73f36cca2085",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acccbd8e-fe7f-4a77-9503-fa7d4be78f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "727aba86-df1a-4e9a-a1d6-779197a4452e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4c563f-3267-4103-b6e7-9ef6c2c8d1c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "95dc3cd2-362a-4ea0-b799-28c58d5e1a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c2061c-657e-4735-9250-7edecc00a18b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dcdc6e2-a605-44a6-859c-89626ddc3168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13a55bb5-5cad-4358-8c3f-92c305cf3d2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d66bd994-3ca2-4665-8f23-9eea4a66f60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f6bb36b9-25bd-4c8b-9894-6acc3d90999f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c3775d-09ce-403d-8b08-89b905329ae5",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e8691a-d3eb-4979-a6dd-1e1330ade177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e94962-3bd7-4873-823b-0a2c651bc039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133890a6-2bed-4710-87e8-95569ad7e668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2d1195a-5813-4764-a69d-e187d27809a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee145c90-e2ed-4818-8663-2793d00dfdf8",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f196f4c-9f58-4764-8492-3c5f9b0f8302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d44300d-f446-4daa-a475-6254ae43cf59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b7c330-3989-4c18-915b-58bffc8682ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6691015c-828b-434b-91cb-974368399e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b0bf7a1-66de-4b61-996b-c38319b848d0",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df278a5-2d80-4458-b4a6-9f497bef62f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4506e5a4-c176-4c1d-b218-b779580df115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509bdcaf-c1a4-4269-81e6-9fb66a8da3ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a08fbee-cdea-46cb-9221-974687e357f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a2da59-3ef7-4649-9a13-64d0da174844",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c5c712-6173-4bc6-bf64-b7f52e97a70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7017a3ce-86ad-4cbe-91fa-73463441cfbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4896cd-0c8e-48f1-bddc-9868206dec80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1244ed3a-1633-4f9c-a9ed-2cf17945ccab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdaa709a-6bdf-480f-b375-83623963da4c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40263955-4d2f-4c72-8c2c-b85b8ec16cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48071e02-5f36-4a72-b780-e3906c69db5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ae8a69-bcf7-4d24-8c84-fd5936957a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "19edb41b-7f40-4fec-aa67-415ff9507dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2489fcc5-f42d-4245-b5ea-8d63eb8b1f3c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf7f3ae-35bb-4e60-989b-beb39431d4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "203a7749-207a-48a5-a459-c9a65956cb2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e11bba6-eb86-49df-865b-84cf475f48cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8f3a66bf-3e6e-4d6f-8816-badfa7313af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef2c455-8972-4d2c-9e9d-bdf6b78c3fd9",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d23af0-933f-4062-bcee-e2de352b82d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcf04560-c28e-4f98-b2a4-9fcd3bc7eab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892e085c-af76-411c-bd7b-2d6b9454ff58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "97f07c57-54ae-4125-865b-34b82ed9fa46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b595674a-51b7-4de3-a099-8cd72f4fb274",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ef10fa-6bdf-4cad-8fea-6b48839b71e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f07e7813-effd-405d-a24a-0c66ac13218c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c0e48d-bcaf-4052-b12a-9ae3a8b1db2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f536e5e-b224-4229-8989-d57b33bd0e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547b7f4c-6803-4f98-92bd-1624dc6fbdbe",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28acb7de-e790-41c1-a315-a2b7ebee827f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60fae328-584b-46cf-b559-df4b6acf7d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9d9650-0439-43f8-9bfe-8c6f48b3d246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e6b5256-54a9-4e6e-97cb-ac6daac42f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8745df-1100-4243-b073-9796d28c9cac",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa72f2f-63a7-4188-8190-aee33e474b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd28bd50-6ff1-439f-8023-8cfb93e1a18a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b7b56f-0a19-47d8-b4fa-eefa18e18db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4aa5d060-a0b0-4f45-a86a-598b96331528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f12b05c-8b49-4e4a-a766-9043e498c388",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "038bec0d-4997-46a1-9234-57abc4002223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8237531-e8b0-4ed5-b478-31c0f69f0be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea92d59-8fec-4e58-aa60-bb5fe3c290fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52426337-5b71-4362-96bd-e9e60c1b2d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b230f9-a88a-4630-b1db-3f3ca8fbc4c7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a00c6c6-9fe3-4769-bda3-a0c019bdd58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeddf97f-a4a0-4a4b-8802-1285cdbf3fa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0588a732-4823-42b8-91d5-e5c03c4ff8a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e123f31-ccb6-4b71-a730-b7a7d9a7e960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6dcd32-090c-421b-bf5b-23be4d9b16c8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d2ce1a-aba5-406f-8cef-04af6751c1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc3f4bc8-b51f-4f18-aa86-83f08b93a998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d6699e-d599-468f-af85-1fcaa07ec80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d53641c-2a76-49af-acd6-6f23f8bcc7ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34ebbde-c380-4bbb-9365-e27572eff217",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d72e922-c3d4-4458-b550-619b9cfc1a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e99df17-5cb4-4a0f-b0a7-63ef254ce6a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373c2d33-fa03-46de-b2d3-1c92df2d2012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "795fa847-1bd2-4822-a7aa-ba1fb5710598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e76d9c-06b0-45fc-b808-e71f84026b52",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e12fcf-fe43-4271-9bcb-9ec3e19188e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ef92bf1-c784-4aff-a7fb-8456ff35e7ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc03e48-8a8b-4ec7-af11-e2b2542d8443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c97cfdd7-99aa-4475-a85d-3e13328f331c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd60763-9104-4ba4-9a04-3b703f576879",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "283c6087-53c1-4782-b652-030dd81a5cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ca0b56-7746-4af5-be49-5b13409c9463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "205432fb-8801-465f-8c76-e032f3f4b170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9116089a-eb28-42a9-9ca6-9e29c82cacf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64569125-6d91-4e46-8755-6e3c3aee95e0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b02bb083-aa47-441e-975c-4a904eb2a4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8646e627-fd28-4e76-9ad3-23af3c6ff6ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f4a7c1-6f07-47a4-8419-cd5aacc7ff34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "643db4ae-2949-4dad-b3bc-4fc19249a0e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee32531-bab2-473d-adf4-bf0c506e0221",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0e4ad6-5d77-477a-9d2a-830dac33849f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da195444-02fe-41b4-80a9-6aeaa99fc45e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5a1448-6cb3-477c-863a-0503d8a88bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79265627-7189-4995-8792-5704dfd85a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd1e212-98f8-415e-b68c-5ed40445a38b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ccbed4-b293-41b1-bd13-df84e26f0abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2985859-ef0e-4dd2-b3d7-10548ad79dc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad5dc3b-7ecd-4154-a3a3-1f024bcaa71d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "96863a1c-f12c-44ad-be51-98fe9ed256e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c072f8b-18b4-4c6b-8658-a76ea2d140a6",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "841b3dea-c6bf-4cb7-aab7-726c1c73fc49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11d03961-a43c-4443-94f0-5f020cba8ed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a40d998-f33f-4695-a72c-f914c95a9199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "85f748ad-4bdb-4dec-9ab1-d7dd341567b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02c724e-cdf4-4488-8e64-fced11466a94",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32e7eda-4b18-4ce2-8263-5f6519f4f861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd790228-c2e1-41ac-a194-9dc21e3f27ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b125cd4-e34f-4fc1-999c-24c9c6d95ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d877a4dd-dc09-4b83-8817-af79dcbfc314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9187609-0da2-4863-af90-72c0c48df43e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30db0c6-4feb-487c-9ace-a989555cba47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1aa3fb6-71dc-42ed-99f2-ad7c2aafb887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120c0de0-1eca-4ece-9a61-5350e15d2298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7dd349dd-dcf6-46c5-99c1-db1fecd8aa6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6488e32e-d125-4f58-a1f5-d6e7c593366a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e78be71e-d3ed-472c-917a-cd552dba76c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44a19c3f-48fb-49f7-aff0-fd5869fc4c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "252b3f5b-6ac4-41ad-a26b-81db1ad44ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7dc7ba6-b80e-4e16-a6a2-fa3e63902380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011e6ccc-245c-44c8-99fc-132a975127de",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a245df1-96be-4619-a62e-a03bfe1dc867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c62e2b5-7730-458e-8172-63587062680b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05be2d5a-013e-4a12-9804-7f8b48a24740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d5df4ee-0c3b-4ef5-af95-4d372ca1bb01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5edf644c-0e44-4695-abf5-01085ba3daaa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8680f8-4797-45d6-b844-b9a69b4bd2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdac5dda-cc7a-4763-8cc8-7519bce50157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07fcd72e-55dc-40cc-b6a3-acd0a0787084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c624faa-0e12-4621-89fc-bbf5ab501af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02dcf4d2-f484-4843-b969-f83a824b1093",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f52d4a5-de78-4057-8bd3-c6d3ccfc47d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a686a19f-6ee7-42a8-ad1f-c81500919ddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c1df54-6c6c-40a0-9639-ec9835000cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f375945-55dd-4aed-8faa-223740975e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fef0a8e7-fdd1-4218-b823-ecf91db3d115",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b4e0c0-e2d7-4244-add9-7dc59f6031ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5643ce4-3de3-40fe-bbef-4833fee3df9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "567e2dd1-664b-4021-ac28-a116769399b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7ea2764-39cf-4185-bc70-a3f0298bdeb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd3679e3-ff62-4f5d-b0f6-2bd24fef7e71",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8788df-fac2-479f-b3fb-1210328b803e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "524fe241-56dc-4d85-8bd7-1b9f8a2fc7c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13db520-a041-4027-acac-517f81c7c2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "99cd1153-e599-442e-9a90-95645b9e2a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7da7083-55a4-49e9-8709-29c06c9e5cd4",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2679827-c352-48c2-9dcf-e2a70f9091bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb34e275-ca62-4fb9-996c-c60df356f81a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e723b4-9680-490b-b8a4-7507b6c1a994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "17dd563b-7f64-47c8-88be-ebc2330d2033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02556372-dfa9-4de9-b54c-a0863625ed17",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9c0997-f7bd-40e1-9da1-dbeaebff16a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "427627df-1cf2-49ca-a905-58b22abaa948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8be168f-fff6-4141-99b5-c3a36c5f8233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "090205a0-c767-40ca-8d86-bab2a7dd89db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5197cfb6-58c5-4993-ae71-3181ca9ce003",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "844621d9-e788-4ee9-ad2d-e14433e8e97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "845a68d9-11ed-4e78-9010-fe02e7053efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d581b537-63ee-4173-baa4-b9b92b047bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cf269a30-042a-49be-960c-dc0f193196fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c65814e-64d6-487b-9744-0e50c75cc4f9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c862f83-cb53-4b96-99c0-3c950ab7851b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f50a10e7-48ca-43de-8b0f-7d7c4e567804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87e69a7-ad33-4d67-8544-29d8ac2a8550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cd04786-6474-4e8a-9b6b-deca93bfb965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6238e83d-f736-4a5b-bcda-8fd0ac927223",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f82a076-330e-44cb-ba7a-2ff37aaf4321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe5f800a-64a7-44e5-8084-8466836dbb42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736ffe38-121f-4823-8657-50c6b9d804f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8d00e6d-95ff-4ead-98d6-3344394690fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119d4deb-b5f0-434d-942e-f5ffba505a32",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd71b91e-f68b-4695-a84b-904aa419340a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1489e586-b547-4750-ba25-fd661168870b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3dbb720-b85b-490f-aaf5-cac88205910c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb31a631-5e14-4eb5-b8d2-d6e82a5b6b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb50533-faeb-4c7d-b24c-18bba0b4f829",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39a94f5-24e5-46d9-b6a7-d9e75c46c896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ca3aed-0cb0-4dc3-b30e-6fcd1bf574d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb99eed8-fa67-41fd-bbda-f3651016212c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d46f35e6-a764-458b-97f1-d9074e3f1506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dedc2c46-8c77-4a2b-891d-f41665a89e79",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44247ec0-c284-46c2-81a8-b40cdb37292c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d9d0881-c3fc-41d6-9f93-86dbcfba0af3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5f43c6-de72-4f4b-9ad6-4143f1c02d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3dcee67-a10c-4742-bf9f-5dcf022a8d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad7bbcc-5aa1-4df6-86d1-f4aca40dd827",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb63963-5fce-414f-bb11-196351f1b31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eea10e8-a1e8-4711-8f80-d29708f1b9a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b71d7f9-e6a6-4471-a06f-8b9f28620378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d6f5371-0d1f-4861-8bc2-524e14d2f481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc1b8372-1d82-4de4-95f4-56c5f868b568",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a552131-db39-4a26-aee4-6e338a3d939c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb379f0-a66f-420c-af0e-a4e86909a57f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb495a27-d859-4fc7-8d0b-696adc251f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3bfee1d5-d19e-4f20-a85b-be18146217b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0cc081-a84a-4af2-a686-af32257e7537",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7555803f-2e1c-4ed9-b4b1-25eb74ac5c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "564237eb-c0c0-4a98-82be-6c4ad3613fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48f7040-e1fc-49ff-890b-b32858198bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e74e779-1c71-42cf-81b4-66db5b2ebfb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80987dc5-ee29-4ede-b175-9eed3d1cbe76",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4e25a1-c062-4f24-977d-01602a97a05e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5a1c46b-4919-4069-8cc7-d3d8b81d33f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938d627f-e0e4-4f3d-a2ea-656ff6373775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d64da98e-abf7-4b8a-9f96-0629f5396ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c70338f-4740-4bd8-b944-c2491edb7619",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3711ca68-c705-4b32-a5e9-dae8d93bb6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b8c7c43-98a2-45ae-b454-d32756ce443a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e1772f-2345-4f4a-9594-b12438007f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22718abb-c761-41d9-a70f-4b4445b3276d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a51f5bc6-4b82-40bd-a1f7-57b46805cd95",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d5041c-a662-4c5f-830b-9bb187c0667d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e00f7c68-b6c4-4a08-a6d8-3267105eea4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12120a29-fc29-47ff-98fb-0c4e1554a12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "82bd9d8b-dfb8-41eb-b009-993944dfed61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5335a4-d26e-45a2-a8a9-adc910c23f90",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0173c0-f7ae-497c-b380-1d6b4cd06431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa69219f-9ac1-4549-861a-b54eec83de73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfea78b7-461d-4d68-8ef5-663c3804ba9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a591500e-8052-4cff-9209-807ba4b3ed7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c590ca8-2eaf-4219-96cd-8646bf897281",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4330aaca-5561-4675-9823-6e9719eef9b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "814d50c1-45c5-4306-8dfc-64299fcb1154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5d6443-9d73-45a9-95f0-d65ff8b1abbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d8b4c1ad-3ffa-408e-b97c-798fd59c7c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9ecbe4-f78a-4242-b862-86ce448c68ce",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db6e395-a9e8-4967-8192-9ba8d0102294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db7a48e5-496a-4e7c-b1e8-5f7f63a29762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b8b1f4-c2a0-49f4-b3d2-870c11873e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dae25f5-869b-4887-86bb-6f633cbd0660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3282bb34-cc3c-48cd-a887-35a76788db0b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4b0cd7-74e1-442a-bd46-9f0ad33541cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62c2b374-7ed7-4a6c-b9a3-1c09aa1ce48b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de458d5-9c25-465b-828e-4c4bd9197eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d436e7-3c95-42e6-9e6d-7645ac8afead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3caf008c-6fdf-4e22-b63d-1b4a963984e0",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1538dab9-2116-48a3-9eec-3336378d14db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31339d7e-6a07-4f32-820c-fce5a4ed25d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef68cbd8-afcc-4bae-8033-cd467a8e5148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d5c4ca6-5978-4fbc-a656-106919bee7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6b5eb2-9563-4d07-9b48-54c3affc09d3",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a03913-1d7a-4072-b420-98cab51c0f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27347ef5-4b5b-477d-b979-49680fa0dc15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df80c16-d050-4160-9aed-3731dcdeffc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "daca48fa-aa6b-4ee5-8403-69a6f8729fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a5d938-243b-44ed-8c6f-90d44f6e21da",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e7a8ea-a6ae-4070-8bf5-92bb69ca5b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9cd2926-3dc9-4c05-ba5b-ed8ba413d565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928a5765-1173-4f45-a366-ee31f205d81e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a8c9f40a-f61e-4ac4-956c-4ae9043a52b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99a6782-7aec-450e-8a17-1a46e89381d0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83892b48-a15a-4430-b3bb-b34908aedde4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3946d00d-aad5-49ee-9cf3-0f914731a1a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc6b772-1f57-4c9c-9844-ce5d61fa96e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3fd3b78-c0ea-4a58-9cb1-396f193e2074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0defadd3-37ab-43ad-8a2f-bb5b5b462ed2",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "002d1871-0040-40a8-8fa8-e6db7c95ab0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29f8dd75-aa22-44a0-8f72-ad57c011abf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d5aa9c-26a1-483d-a442-06d388614f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c21e4dc3-b0c6-4a71-9b71-04f1220a7f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063bb453-c18a-47c2-8142-c39f48c34d32",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ca5c93-9618-4517-aad6-88e63a8096f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7d1c8d8-97a4-4a78-8229-410b2fe56c45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed59bf50-3edf-4782-827f-db068028560f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "65ba15ed-666c-4a51-b977-19a4fa3b93bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5268eb7-42b9-4571-9dac-9eafa9ce826f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41416479-5c36-4269-8ace-df10ffebfd4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6677a34-80b6-4efb-ab9e-2428b87430ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a14178d-82a9-4f54-9c20-1d2a246d74d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ed56d09-90f7-413a-a5eb-208e1f64df0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36744a95-213f-4bcd-989b-3fa1efe6a245",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fa413b-d27c-4014-9834-8f4648762723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd2f946b-22e3-43f3-8965-9b77a2aabcc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f711f6a8-3fd7-456d-a013-380c3b81103d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f309d18-7265-499f-bd18-c01b710fb5fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9143f86-805b-4731-a587-0c7ec4049aa9",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4556529f-9e92-4170-9a2f-8d0c7252f1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e50a7562-c563-4666-8f21-beb0df040d67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6274e43-409b-4bbb-8f37-e3998ffce3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b1b3306-4895-4303-ba1d-79acaca7227a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c0bedf-f8bd-4ad6-bb04-c798364212e3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eaaefdd-cbb4-4119-92cd-18383c21c393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "268751eb-b267-47f2-9fb9-cb6482f12aa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09bdf067-ce9d-48d9-9182-9b936cc70042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb0b732a-8831-4f97-9703-9e7df5c58a42"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8c410398-c60f-4e4f-bb36-3add59bd0859",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4232695-bc7f-4448-84fd-c37aa4f7b27f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0c8651-84f9-419f-9d0c-717b3dc925c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e03e1181-f575-4ac2-8d46-3e791fe5178c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65f7fa0-5752-4c22-8b16-43345747940e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "456b78ac-53c3-4d52-bbdb-9710101885ed"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77044789-3828-4a50-af6c-37cb260d337e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b973369-32d4-4a4e-8137-fbe2958b45d8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc8d1a65-76fb-4c74-9913-d215efec40b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34cc21fd-88fe-4dc5-bce0-dcdcd7003a94"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ac26317b-737b-49a9-911d-e508929a5aba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8dcddc38-5208-4ee7-852c-c47ceed369df"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "624e6f26-19e2-412d-bd90-1a85143f38db",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b91d9a8c-2296-4b1f-9792-117c44704af1"
                }
              }
            ]
          },
          {
            "id": "afff2656-076b-418b-acfb-025a1e97c891",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4613d72b-3a0f-4d0c-a74f-66e73388026d",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "0c6f4341-1dbf-4bbb-9e48-90aabbcd7d10",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55ab093-2dfd-41ea-9e16-2542d71e45f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "24ed3b46-67ec-484d-a14c-7f13dabe9c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da046ca2-7f17-406a-8adc-1eff9029d41d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ae17bd-2706-4dac-a7bf-85f778d0665a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a37274df-e324-4c56-8ea9-4aa8e65e324e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9054fc62-348f-4b8b-a086-ee29e7fefcb5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7c408d67-16b4-4518-92b8-0aed22e57c24"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6416b28d-47d1-4039-927f-c9a88137fa10",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cf8129bc-2e6d-40dc-add7-c9fd7774b407"
                    }
                  }
                ]
              },
              {
                "id": "7ea42e26-16bf-4024-9342-9b8f40febd6a",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9910a59b-07fe-4afd-b83a-db9473cf3420",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6ff79e39-1fac-40a2-b8a2-446abec23c95"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18fe72ab-efea-4596-a454-44fafe4d90bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "34c6f91f-52ba-4af9-b6d1-801f0a79ff10"
                    }
                  }
                ]
              },
              {
                "id": "11563327-6778-40b4-ae4d-7b6909983a75",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8660a2c-82c7-4c0c-9095-d3d77690a3aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "746e391a-0c3c-4fac-979d-8ad479f9a649"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81805348-0a18-4e32-877c-7f116925a630",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cc698a67-3d0a-442c-ac2e-f5c04197d060"
                    }
                  }
                ]
              },
              {
                "id": "ab733225-5b51-4da6-b265-bbf03770e6a4",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1dbe16e-4d2e-4c80-8e24-cbd8a2383d6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ff6d847a-fbe0-4b91-a26f-f5a42fdbe366"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f38c51ef-5185-4aa6-a75d-6d6fe285e86f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "58866b7f-fa3a-4bad-9db5-864e1109db5d"
                    }
                  }
                ]
              },
              {
                "id": "47467dd1-63e5-40d2-ba2f-f8da1c9fe43f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a6686f5-6ac0-4087-85d0-f53068cbcc32",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a08bef4-d92f-4c72-a1b7-b5a190fbdf55"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6996a2a-8968-41c0-823c-944855f53cf3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a831bd37-9b88-4d1f-a233-44b003c78bca"
                    }
                  }
                ]
              },
              {
                "id": "42118061-e6ea-4fe1-ac98-074bf8674985",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ade46425-1c64-4e95-9c02-74e1c7f62b15",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c4c61eb5-1afe-4210-9e27-418f6e5ee68f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "583ee021-7b99-4fc1-81fd-c1846e35753b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "434e7c13-7169-4e0c-bef7-889cf28753a3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "58f6f3c2-619d-410c-97da-85a107fc10c5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7750d5d9-f46d-44a3-9c7f-c2e31ad66390"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "32716c1a-2de9-469e-ba43-c3688b94f5be",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fe5b68ff-2eee-4b83-a379-727463bf3c7d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c4511de-86fb-42d9-81a9-b2f03093af52",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "00d03dda-d25c-4b31-a25e-852cc62602dc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e1b12b82-c788-4108-8df9-0a26e57238bd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "93bdfeec-ab88-487a-a00d-d3309c824a5b"
            }
          }
        ]
      },
      {
        "id": "ea8a802c-9f24-40f7-8de0-e35e21b8f0f3",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "19a4a4c4-e263-40a8-9a95-aca8789c81b6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1eaecb4b-6f64-4096-a83a-01e91d014099",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2216cd42-b94f-4ca9-9a47-ec8e8c3a8d08",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5a70b3-fdf8-4777-a63b-52cc72e2f241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0ecc941-e627-4301-b0e4-053f150efed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06166e6f-14c5-4edc-9b89-b40e3307777e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "80acb287-1c76-4e0f-9541-373be32f0dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e065ef-dc32-4c6d-9122-cab47b2134db",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "830fbf78-deb0-41f7-b222-bfd4b2e022c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c051129-7685-42bb-b877-418fb34e5420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5b54d3-2097-4791-8178-00dcdd4b7c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6df02a8f-6741-46f7-adff-08bbd3dcf43a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c108a602-2193-43ab-ab61-5298b8a3e2cf",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce61eb9-8169-464d-acba-636b8ca19c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e449ed26-5ce4-4aa7-93d4-07311544dfea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14161444-9d21-4e97-b04e-36914b10d421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "71247564-e896-4c8f-a95a-8fc48069e186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9173e428-31fb-4447-b6a2-a50c65f1b79b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "585eefe1-efb6-47ba-8ca7-6c6711e1ed99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a376e7f-10da-4942-9130-39c7939313b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd0e584-eeb1-478b-b69d-f2c4cc408279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "262e56fa-f92f-460f-bbec-9cfd6bc2037c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce367ad-6c1d-4d98-81c9-4e5f8bf8166f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6386fdcd-b5c6-4a13-b665-fbb2b4820c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6df7475-e37b-410b-a8c0-9126a93e89fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca69af7-a6aa-44b8-be6f-9ff5c4453a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64eb65c9-4789-4c0c-9710-9c89a3de51ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6458bbb3-3fe1-40ae-a4a3-441136c173b9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1e3031-d164-4f6c-9f17-737960708bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a1f77b-7cd0-4688-a4ee-668f108c6981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66de0a87-0f56-4462-97c2-82236b913678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c973a7f-a0fb-4f18-9557-f8f3f4352df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7565cd6-9a28-440f-a844-b86ec3db5910",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4845346-ff8b-4b14-91f5-a51c1ac53c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd6abbf1-d70b-41fc-b493-c6e5a539cc28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0686e3ed-975e-4c83-bb6e-1defc05fd263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "05802fe8-1d92-4595-bc0f-70ac6908af72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3b1a41-c0e3-494d-a160-73a2f1e7d0de",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca238c6-a42f-4bd7-8529-29e94742f34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3b2aa7b-00c0-4f4a-8691-68f4c294ba1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dcc40d1-d92f-4e46-82e0-7f917559c55a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c0a4f49-d082-441e-b911-cf00a916bf80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4feebaaa-1723-497a-a014-95a848a3dd30",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8146d83-6ec5-4be0-ab6c-9d4cb5572c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25758745-20f0-4875-891e-49dcc674072c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0405264e-29ba-4ff0-948d-b9737d063fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "72c8f80a-5fd6-4e09-9615-7ec8a5c648c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "406490d1-7a6c-42b7-a315-0e7c2f6ef9ff",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5704fe-a814-4544-b753-352f2b6aeae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e4f20dc-675b-4755-a29b-1909043f190d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a954e886-7f4b-4d09-a01b-b69c0feeb83d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea7492d5-d2ac-4102-8d3c-d5ad6fa231c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a0eb54-fa8b-443c-9acd-241b878fe736",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97999391-02b1-4191-8dfa-10838caf4618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9785ee4b-7e5e-4517-bce7-d1374d495dbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61246c66-42f2-488e-ab88-76ba5ed58202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "beb9a34c-3c66-4816-878b-acfd548f78b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828e007d-5aa3-47f3-9e91-6a7da6dd9649",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e6ec30-071d-4236-a093-79005a02f438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58926cbe-b7f9-4a5c-980d-3062579eb026"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a95fd43-389b-4ca9-9b66-58b851830128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0aa27fdd-4903-43a8-8f18-8c432705e4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42474e8-cb2c-4434-ac12-308af297d7db",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d4a1c75-d32f-4064-92da-520249a691d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29daf64d-d135-42d3-8eff-66730fd06da0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "759dbb0f-b290-47b1-98cc-9f554606389c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec5e5e79-ac15-428d-af7c-30b22e738e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9d3893-4be4-429c-b998-e14c17e8a7ad",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "478157e9-2a13-4b88-9fea-e3662a7a2d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ee63a7-03ec-409a-93a7-2e46bef71c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e1c52f-6cd2-4e89-b901-7a5398fca566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2fafeef-676a-4fba-af0e-a20971048f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "862487fa-117f-413d-91ad-65c21ce23a92",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25eabe6c-9a5a-449f-a9f0-b42a9b23c8cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65504796-ecbd-4b81-8b20-1a2647a08581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5788e295-02c1-4f75-aeae-3614eed204a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a606529-3539-476a-a7c1-8136c4a6b27f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9267f7-6ee5-4e1a-8166-62c235a42990",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f71e6ba-5855-48d0-bb63-3aae2619ad85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d1aed89-e4b9-4fd9-b2a3-217d87c539f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452847cf-f4c4-4ab5-b259-f28af3918ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfe3c6d8-584a-4d38-991b-d112ddd6299f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c1e9ba-4e82-4588-92f2-0db6a72be70e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9bebf19-9cde-49e1-add3-5774b64a5e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e05a8d4-0fc8-4dc1-a830-a3e0041ccf52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0098b4a-22ea-4027-8bf9-3fbd6472b709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fecf2617-4b0f-4636-b3d3-8c8d43bc5414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b05e53-f131-433b-b1ce-8f55da72cc6f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89deedc5-5317-40dc-b0bf-b87cb586a4e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b97ad35-5e99-44f1-bf2f-ca13874b15cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91959630-dcab-46af-8a55-148beb63eed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9cd85db-a0ea-423b-b244-5c7e5496863a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "735d639a-64d9-4a94-ad68-85009c3d90ed",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b38c1a-f206-4e86-8a11-758f1b1adf63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "013108e2-a6e3-473d-b522-2ecb04649f63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ed57ff-424d-4d80-905f-0762f1db9cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "724bc987-2cd5-490a-a67a-038860414f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af21c714-7771-4c6e-8ac5-4d5f34f9e82a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1003f463-7661-4cd5-bf52-bc74970cca8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6773662-2d50-4e61-bb55-3f9fe3631388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec9e405-712c-4bf9-8982-e4a555ba660f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6aa77bb6-fb6a-4c70-80b6-b729f1266e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1466193f-48cd-4115-af83-4233284832ba",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aecbcdd4-39cd-45d6-838b-24f55335c32a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c8eb7ca-1d94-4cfe-addd-d8b7145c279c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c954c5-1e31-4525-8b7e-05843a9864b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22bbcd74-760b-4ce2-a6ee-0c3918a26607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836b1794-83a2-4baa-b4d2-83c4dec0f379",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ab1aea-b500-49a4-ad0f-5686dde071ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb72789e-4c4e-4f24-839a-ac75729ed3e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d90ebbae-1c52-4ddc-b65e-f86e7b1aa0d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90701b37-f22f-4399-a3c5-342de8d896c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a064779d-5ec4-4df2-8200-0d58bac9f779",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57238216-d84b-4901-9a86-4d0b5855b2ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a17c2793-8053-406e-a9af-c7455c1a823f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca672b2d-604d-456b-ba42-dd65ec940b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5457c7c1-903c-47a0-bdf2-9c08e2b7c38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3608a665-291d-45ac-93c6-4287108dd2fc",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59d1fdc-43fe-46fa-83a1-f5f63428585b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05fb6bf8-5ed4-443c-8b30-3aa92ebdf896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e8a0a3-c397-47a0-b1d2-fe07d8d9a3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28b70cec-4d98-495e-812a-94faf0ef9cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab197268-8fb9-4bbe-91a1-521f09a1e812",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "503c8206-55dd-4c75-af10-18c6049f0bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84a87ea-23fc-4dec-bd0d-cdd4fd3665ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220ef838-74b2-41c0-a3bc-e2a1622aa30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df72378f-030d-4ac0-b285-e20b8041929f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd2c357-0a27-4b56-8e96-9157ac643382",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8188a8f1-4705-4983-877c-88baf29a7e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02f0a5b5-d332-440d-84d9-2da96d27b983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eec7559-8d90-4f78-a3f5-27249ccb4297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d7dedda-0875-4d36-a295-2f596a4ff2f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fabaa961-2160-4e4f-9f99-af0f71792a3c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9dd33da-0f46-4cbb-9fcc-5b045cb07151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac57698f-6dfe-4d6b-82e0-1da43b3237c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6355b3-821e-4fa2-938e-33e6390f6707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5aa3a10e-bd8f-490a-ba34-afcc36ee27d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749aed00-f107-4bac-be8e-da9405eae5f9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1bbc01f-d8ec-43c2-9d5d-295c6b192239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "558795eb-1cee-4074-be7e-dae8785799f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4245c692-608a-4604-b844-69113eb6393a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "994a2ab4-56de-4fcd-b8c7-5325a5a58d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aca288a-4548-4b52-a452-a7df5f66ada1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2da50de-74ff-46db-9e1b-ef0cc322534e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "072c9723-37fa-4c6d-8c40-b740ff3fe4db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30dd5f07-c75d-4a79-8942-571eed5c529d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a260798c-0161-4fef-b957-dd40b39746d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb4ff55-f807-488a-9721-0d89eb148267",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3fe2a5-37d6-4699-aa4c-d67d6db5269c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46567b81-92dc-4823-ab63-098a4334fe5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b88044-09f1-4035-97b4-eb31fd3cfe21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0ce9513-44ed-4eec-b22f-5f6bf191bb3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7db1239-db22-4f79-8215-09f641985074",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f445f8-65b1-4488-bb2e-7f571327665f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc383ecb-a2f9-41d6-a825-ad764560579a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e762065-0c97-446c-a592-5b347ffd6cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14efe704-3238-4443-a8b4-b6a41f4b8b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96fc224-40ca-41dd-b470-0969ca5f8cf8",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5811bd54-af07-48c4-b914-65d3ecbf799c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddf75ee9-bbaa-42c4-b13d-5da6ef466269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee83ed2c-d757-41b8-a4e1-69c880f1e269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a8054ef-4d42-43df-8fe8-0143fd47b258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6829a774-8c94-46ac-8944-5eae953018f0",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9881e87-d627-429e-8081-7622603e7a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a03879e1-5648-43eb-9e4b-457cc161c153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70156e94-f48d-4a59-8d44-7027ec97e2ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38641d26-62d6-4a48-a9ed-93cb75e8ffe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b2482c-8187-489d-a015-d075ef08bcee",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32217b8f-a4f2-4cfa-a496-6dbc4377d038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66579f05-d32b-43e5-a948-ee20e9929ec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b7722c-8af8-4d90-b213-1d98f50dc5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56c6b397-8578-423b-b039-b98a25a5f413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5088d6e0-3ab2-4b4f-b585-249c472c0524",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bfe3787-0ff3-47d3-be43-55f9ec91c8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef1fd0cc-a667-4a14-8b11-41a6fadf801b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03484cc-bf4d-49cb-bdc2-6f1c1e3f1d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a179c416-45bf-48bc-9074-42618895fff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9073b70-7a7b-4797-b7c0-daf49d8e3be2",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "278fcbe7-23d8-4924-913e-8fa5a6de035d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "305797a6-3442-4c1c-890e-a7f47b177e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9123eb-6a86-43d5-96fe-0d70ad160c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da2e29ab-6e8b-4fa0-b08e-2ef57b14e381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470d5210-e73a-4301-a796-53066fa42099",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79400b38-4752-49ce-816e-3138cf9217eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a556d6e-b320-4984-9c28-5a9d09fa71c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2436ee78-6d14-460a-9f0b-fb55f6d13fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f154426d-7bdf-431d-8386-0295ec9db792"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d47777ba-562b-41b7-89d7-f411c171d131",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a99fb3a2-702a-4a50-a06d-10c42b1c9286",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1fa241e-7623-4687-b033-0202b4419832",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "18a9edd1-ed53-44a6-b58a-193909dd3a86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30424e1d-f510-47dd-a4e9-e36bf8d7618c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8fbb4a13-4016-4280-9421-a8562993984a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d318776-f609-4178-b247-6b56bb659dc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "224a5e06-afec-4f5d-9ffd-0676ff6070b5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f67c9a91-4e2d-460a-b49d-b6f4e42015ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3426541b-c995-46d7-9eb7-77fbcaa216af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba70ea59-7de2-4d76-bd9e-6b294a06c111",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0c33138e-621e-48b7-9189-a5cbc9d8a28f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3ced7439-350d-475a-82a1-0815496b368b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "57a30de5-e983-40c3-b7f6-2a9e8214825d"
            }
          }
        ]
      },
      {
        "id": "28d79b3d-e250-4ff7-8358-16dfa0f885d9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "690df685-f301-40f6-a7d8-1a5ec16074c0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9cfd2fdf-bfe4-48be-9207-5de554e6e271",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0cce3f4d-77dc-4827-bb88-ca4bb886dc51",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "560182d6-60a4-49fd-82d6-fdf7c1e50054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb0c95db-cfe2-406a-aa8f-6be58f59e0dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076dc7b1-7c8c-4a28-90f3-cdeff3a3491a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f7b122-29c2-4fc0-96e9-5ad45830300a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ba50e3-ff2d-45b3-8c9a-fd2a3f714edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f316ca3c-4f6b-4e38-9cfc-6300c463735c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb56e6f9-ef46-427d-9cfb-03c512432cde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfd69285-5ce3-47d5-a721-51dd30820d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "453ab415-dc64-4668-af1b-29d4c758ce38",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24720fe8-c4bf-4549-86e3-4e9cd76b541b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c974f7aa-2455-4345-9fe1-22981d1ad6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bef9f20-fb98-4bfe-848c-f0dbba4f9f93",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "795c43ac-6d34-4c33-b5c3-29e7e9258e5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bcf7730-05bf-4cc8-b923-e42730aeb90a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5984dc3-f9dc-46ff-9784-28cba879443c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8feb4b6-ab79-4ec3-88a0-d6ac33aa099f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d08b7e4c-e694-48aa-9472-ebce1e8c09f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72687d3-b8a7-42f4-80e9-740e71d8208e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b29b24-19bd-4179-a700-4554e6d55fd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "019123a3-f0f1-4007-acf2-5497f3ac9f29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "643b4b8d-3e8e-4df8-9a8e-cdef7ceb2a69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a01eff2-eb3d-46bd-ba5e-75df7dd8312a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a90c75b-8ef6-4546-b02e-4349de32a2bc",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d16b9977-a727-4225-a98e-962d1f06ff9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fac5c24-844c-4c7d-9e7f-0197b864ce4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbace8aa-aa03-440c-b6ee-c4802e5bf7ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c6b9206-b757-4753-bec6-2d5a6dd613cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d574b4-d7db-4863-9b61-28cd24235c88",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c73b5dc6-bbf6-4c3c-a33d-67cbf093a5e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99eaf66d-9166-4f2e-be08-ff8f23dd9eeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4003a998-50c8-4e81-9495-1d20c0f88e76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a72f93-8cd8-47f0-ab83-e5b36c8afa0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895fa5cf-19da-4a68-8d97-6833e6eb5679",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab44d493-4a55-4b0b-8c5e-4c88fdd828da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8e397e6-7b6f-46bc-b5d1-cc6839170a2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd1faf6-d7a4-40a6-ac59-daf5bbdfbdf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be0660c-8d6a-435f-9ad2-2cd95719ec4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59616c49-75cb-41ff-aac3-fe2f3740bd1c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c4e45d-3795-46fe-adac-80914a1f42f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70362ef3-f5c9-4d0c-84c9-d93d347ceec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1822886b-1d23-4f69-a4fd-38b0e3d50c6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "371dd836-59eb-460c-a069-b23571f17b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b411e932-6fbc-459a-a08d-8b07d8a8b09b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d5691d-310f-4b73-b6b2-6636fe3bc23d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffd87668-19cc-4d02-9a5d-8922a3c6053f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "876a2398-c4c2-436a-b91e-01902ee9c4e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01f9deba-943c-43b4-87c7-d625546f1f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c048c3a4-b87f-4b23-a344-03f6721fae15",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5530ff46-4f4a-4296-86da-f1d347a896a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df0760d3-bf2b-4235-90e6-50c42987c148"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae709381-82e5-4aaf-ae29-1f5d92351fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "507bf72d-e019-4d16-aec5-e452d1b32915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de39cdd-f09c-48fc-9851-4128417a7684",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43dc1f5d-4860-490f-9a7f-6825df78168e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41629363-cb51-44db-9a9b-a2e152047b63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef332d4f-1718-4fc4-a01e-7a22c5d6b483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b451d92-d676-4749-9809-7bbccf59225f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd044ba-dd3a-4fc9-b140-985d1e298a34",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7adbfe11-07eb-4276-8da1-bb97db81d59e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a31411e5-d250-4f91-8c9c-e473635024b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "476666e3-eec1-4b33-90ee-371617735e09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3a12d72-2f94-4236-bbbe-fad45780aeaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf5a3891-0cfa-45d4-8245-baaaa914f428",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62563f27-cda9-4c43-a835-24fb1aeefaa0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3afc6819-c836-4d10-8a3f-cdb545fa07ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a986792f-75ef-4a5c-a8a2-12ff1abcf05f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29b4018c-bf24-4f58-b65a-6346bfeb1f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabe5a27-d748-4754-9781-75b8fc506d52",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ce64de-58de-4ac3-99f7-25a1637f63bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ad3f8d-73e2-4adb-9bce-89508abebcce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4951f9a4-eb6e-443a-ad48-c741e04c263e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9534b10f-b8f0-43be-9398-14cc62a9667d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3c9db4-bb22-479f-8ea1-5f7f40eeb38c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245eb348-9280-4835-88f0-ffa9976dbbad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54878e3f-7580-4f1d-b7ad-89274c642b91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "295bf902-f779-423e-bbbf-08c1d91b95c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93756a61-1168-4739-bc69-087c73be5db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e53cf08-cd5f-46db-9a0a-629b4c751416",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113d4bc9-5b75-44fa-bba7-bf20ae8197c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "638266bc-1e4f-4688-bbc5-4ed4950b9641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b239b4b-d8c8-40ba-a7f3-3806caae5b38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec82798e-388c-47ef-a7db-550a24dad78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de24c3e-8de0-4941-8508-23becb6144e1",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7fc487e-e3a0-40c5-8163-dec75fcef3f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5b571fa-585d-4e71-818f-73a1ef7af7e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e7e088a-8cc6-46fc-8eda-307d71283429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f1aa23-809b-4982-bbc7-c20a2be0311e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580091a4-bae5-4576-b218-b833fc8b9153",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09204965-8301-4264-89f3-ba895d820ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e1ab5be-e080-49a5-8c95-c41e83122a5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a8d1c5-00c6-456b-b5a3-68116cbc6634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b90dde-75c7-4d36-a133-9ceddc673e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c86860-873d-4524-b694-7cdff8661813",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b31107b-7129-4abf-8412-02048931dca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9567cc7-3199-40f5-baf8-e601d13a9a67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2e2c4e-a85c-4717-bd33-a81418ff5526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cec9e661-97c6-4720-b0fb-901404e39957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb20a41-f485-4acd-a17d-5632898c949b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95536ae-0107-40f7-a9cb-91e86e852a54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65e38476-2a61-4ed7-b354-a185925d8830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fedb28cd-58e2-4915-9513-fc032ccb2c47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b846fd6d-a9bf-419d-851c-5113cf9003d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62f93a3-1b97-4b30-8af5-4a72f53a7800",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba110ee-44c1-4967-9cc7-f20cdbbcf266",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1729ff1-5049-479d-915f-fde98871e399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8ef657-e6f1-4b82-b82d-7a7a92267d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bb8b8a7-b42e-419f-84e8-3d75a4906037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a32385-7223-4422-987b-f04c9d0882cb",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea825d47-11f2-4acc-aa30-46a97bd9700e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f13aff97-09fe-4bc6-9b52-c3d3db5675ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ff1462-a2ff-403a-8ef7-fea4a77565af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "481fdfd7-f801-414f-b1b1-b79dc056d5af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268046da-d8fd-471f-b38b-c619651ff7ae",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f0f10e-7da9-48dd-a9d5-99080a8c1cd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e06a6aff-987c-4abb-902f-84b947ecd9dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de066469-4b16-4879-a048-06fbfc847510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe114759-47ae-491b-8190-7632df0d3c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a1fd1a8-360d-46f5-8a05-737e7909ba09",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e59ce1a-18c9-47db-b556-a9dfbdcd2c77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3354fd0a-eb29-4a2e-9db5-fcdc71895839"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd84e217-fed7-42fc-b4e1-d9ec0b8e2649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac7c8105-5548-44b6-b430-cbd8bb6dbd6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d42b78c1-8538-471c-967e-e4f9c8392547",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a44b62-3216-49a4-bf60-934d713fb2a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1553da6f-5a3d-4160-9173-b5d6a8dca2e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91211d50-0677-407b-97d5-d5d136ce173b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d877c82f-a8aa-4138-99ac-493fa9a69ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c5fc1d-0afc-4c2b-8d14-7792c2af367d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6508e01e-7f21-4761-8013-03e0dc143b55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a1385a2-8336-482c-9c72-cf44ea777273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b79c1bef-bfbd-498d-9747-3556244f4c70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a589eb40-344d-4d98-b72c-564c3431ed2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd2fe82c-0bf3-4cf1-9679-09d5c7b3419d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712758eb-aaaf-4f74-91da-b152a06a46b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d9f0c4c-bc33-41ee-a0f6-679c2a4ded20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14523ac-0e00-4dca-a68f-c073ab9da1f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc8920d6-b444-45cd-9e93-a3758cd6b2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d408f8b-5c6d-4ebd-bf45-2f01a8d59d96",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03ac842-93c8-442e-953e-274df5cfddc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aabfa7bd-b8cf-4b57-82e0-294df490c80b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdd8041-8078-48b2-a562-23ad91aa74c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "328e7491-186f-4649-86b7-a8d57f2fec87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b729c9de-1986-44b5-9eb0-9d3d11c10088",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147710d6-5272-4ee2-b521-698496cb4fa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8bbfe62-fbae-4390-aab8-a2298e451083"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab12375-180b-4ef4-bf04-d3af1eb1e6f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31b7a5ac-6a76-41f8-87a5-b518d2aa0ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906d1ee2-6fcd-4b5d-ac4f-700a832e69bd",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebee7532-7e33-4e7f-b70a-8a14a3644519",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1e90c11-0310-4f73-91cb-fae12903fc1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b718ce3c-6984-4cad-b182-8d1520d44cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "988275d2-bc1a-467e-8637-a40a01776104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1539a983-8e6a-44e3-ab24-60921e49f8bb",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae56f8a-d961-4e56-b3e3-0c675da8c5cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bf3f131-4bff-4dd0-8600-423de08de3db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "627d55d7-5264-4de5-9b32-71657a3b41d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9fda3ad-c16b-4fc7-b807-39afb5920008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b37c1fd5-c26d-4225-ab57-bdffe16de482",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b11713-68d8-482d-b4ff-a9f994ebd313",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ae8aa34-5f3c-472d-ae97-c249391a0872"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe28e65-8c5d-4c5e-a815-2d7d8f11ea67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f2a448-d7e7-454f-8d27-3cbe8dc6aa60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba888a1-2dcf-4d67-b224-3d57ee4803e9",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a5179c-4b85-45f2-b721-6bab6139d9f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d798460-61bb-40ce-b75f-44ec0d28cc8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18ea10f-706f-480f-8a03-94ba5b7dd38e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74110810-db57-47ea-9faf-e952e1a09e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d65901-a487-41a5-a653-56e2b3c51a4d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a61a18e-27c6-48e2-9603-55586000c49d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74f3a55e-15ce-45df-b197-9dad9d717160"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a5aed6-da00-4a87-9b21-228fbe9918b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f651a793-09bc-455c-ac91-5497730e4d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d366af52-ada1-4921-bace-99c770a45ab2",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465be336-49ce-48d4-bc48-65bb6bce0bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48fdeb9f-3fbe-492d-b3a8-a34c3646b9f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc506279-6f08-43b8-8e70-ba80da1f5804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db0c1e52-a653-400f-bd13-69ccc1d52c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5638647-2b68-47c4-b15b-f164a1079291",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bec636a-b626-4b7c-ae01-8b5d8325a7a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6087b65b-75be-481e-9c57-4721f61ffcce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e84b774-5886-45a1-8318-676f43608537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9f48ea1-0e73-4288-b591-8da40467475b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d7fc7d-05f5-4276-82ec-b284b1eea4e4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5588767-c76e-4800-8d9e-41e5c299a83a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad768367-9c1b-42d5-a53b-146347315d6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d512bd9-acdb-42e0-912a-17ec718ed3c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ef1de2f-88e4-476f-ad81-22cc3e02b52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0c7baf-c984-4d4e-a597-1a4a5ae4f5cf",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29f7ff6-819b-4ad2-a329-89b6716420bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "185d0d32-390e-4d5b-bf76-887b661b0be4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e30170-e572-4503-8bdd-6ba284b8a061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dfecb46-1dfc-49ed-b1eb-a484b60bcb38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5622349-3bce-402e-a958-7d86c5f87816",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aaaa8a7-4279-4286-b4b8-44f8461b327a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "758d60cd-8a20-45ac-8f67-c2747d3ea9e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7b7a3e-643d-440d-bf70-a16175f87563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7879e69f-0e48-48c5-8a95-5cd2c99740a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf446ca-198b-48b5-852a-f81712181752",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b58a76d0-cb7a-421c-a1dd-73ebcdada948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c37706d-7299-450c-a9d7-711c49374e33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6adfaafd-67d4-40f7-af44-1d9e567e401d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2285fd5f-f7c7-4640-bb3e-150ee5a39e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259c5067-729b-46f6-bcfd-38d6c48f4ec4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e81f94-c5ef-49c6-8604-7e138151f8ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b78f4ac-23c7-406b-b607-d1343e5c2b56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebad37f0-d8be-4f11-8626-ce2576f2581e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd7147f-c750-4c12-8bba-65e888c1b4cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fffc99f0-c1b0-4e9a-8e7b-796d34194685",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47648c8b-30dc-4a75-b798-086266b9d498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fa8a434-9b9f-4bd2-84c0-581bd03e45ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5a0eea-3788-43d1-9543-77e3e7b07c01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60f55aad-cdc8-4d7f-b2ac-4f6798c6d9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85cdb1bb-ea5e-423c-9081-c44e0944dd37",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9feb0ff6-26a4-445e-84ec-655e2d16e12b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f325ca7-ee6f-4443-88cd-476a1a1224e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc48349a-1802-47c8-9a93-65e541e549c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ffc10ff-231e-49d3-8c5e-4e0a4e10bbc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeaecffe-a066-4185-919b-621b4c038a69",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "414a9c0b-3407-4963-9c19-926454c91720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51935944-dd3f-4b6c-9dc8-437f2a75dafb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a5f87b-bb34-4ea8-8542-6407a04b8fb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c8edff-f735-4780-9835-ec42217a0354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405620d1-fa9d-4d12-836b-c78c3d666127",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a051199b-9a6a-4a55-8ba0-d75901b0b93c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "303f8a48-e81b-492b-a86f-86889c447f3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ff21a1-8da7-49df-8dc9-bac953c919fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de6e27ba-68d5-4909-aa7f-373a7d2415bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7427f033-674c-42aa-abe7-c84c63334877",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b93447f2-4bcd-4192-82c4-7281a2ab025a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d83ae509-9636-4590-ad02-e459ad5e1a1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32f3b6c-6098-429a-a6ef-838ccb36dfd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f3fe511-e14e-4ca3-bde6-118d8776ec91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30152a51-606e-4468-9ec7-990141f144f0",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4514e1d7-d6de-4f26-847f-9bd6ca8f9107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85b461d3-4bc0-4b46-b34c-4ecab1185b1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa5ecb2-931d-42fe-af46-9450c1c62c0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fcd0575-61cd-4447-b657-03d06f975521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c931e4-619a-4ac9-8921-9ef94261fedd",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3385adf9-6600-40e1-98c1-1c4f4f31a7a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef66b190-c5a0-4081-86cd-d164391a057c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ae5a5c-806b-4344-97e8-be4a5ea24dd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76c37d54-5b53-4a2f-9b63-c8ae59c92a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da3f4d4-6c3d-41d0-bbb2-aff6e2bf754a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8468e122-4efc-42a6-983f-8da705d4edaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fadbf78-ca4c-475c-a5a9-5e68ebde260d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be955bc-0e46-495b-9b3e-5835ecd1efb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ac79093-1209-432a-bbc4-73960d592f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20bd25f4-00bf-4c25-8b0f-ccfce480de0e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981844bc-3365-4a5b-ab8e-4afef4edb26a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcca6a42-5ffe-4232-a151-3075331a1521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1fd2d36-01c1-4867-94f3-50745ccaa1f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eec4312-6642-4132-9cb5-0a5e3cd6bca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ea0a5f-d9a5-44ed-84f2-a9648dc74618",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04b5ec0-3ba5-4b26-81f8-8f97b6b6ff30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f09c95-d8f1-40a1-8237-bd13e81eab06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33eec297-335e-43f2-804c-9da173d82a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcb0a30e-7648-4271-8654-07bd560f3bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c5c3c9-9a70-4799-9cef-c89886353566",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eccac4e9-bbb9-4f41-806b-21d7c4b58235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e38552-9c1a-4156-8ce9-9c3163a2f3c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e1f94a-9a95-40fe-9538-330cada9ef8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9de95bf-cb6a-418d-b453-c99f9f5fd6d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e87103-bdc3-4e43-b2d6-a3a726e135fb",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be030015-e010-429b-90c8-d6ea0636ce2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744b91b4-ff50-4e61-91fc-7b9a80237d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29155ff2-2e9d-4cab-a732-46856882a938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68882f8b-53cc-4faf-8d9f-f2669ea312f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebab7e55-2ec7-4fce-88f8-96d8f7d3d85a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a2d388-7d51-42e5-bb37-82e606a3bbf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e528b7c2-78cb-4da4-9fa7-b8b0845e9556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eaf5b96-f2f9-408b-a124-9346687c713f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f40bd22-fc7d-46a6-b374-2b545e4aa831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdccc734-6430-4ca8-beb6-065d6cbe7013",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e7f6be-3d40-4d28-9911-dc6b6835c56e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95ae3994-eaab-45d0-b7f4-69bd3cbb48e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c03c1d7a-a292-4cae-9cbf-94d76543aaa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be9949d6-5c3f-465f-891b-20eb6a06f8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ccd8820-1c99-449e-baf8-5fd1ac80f6b2",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ac88cb-48d9-45fb-94b0-5f3766a8f0ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6821fa07-e307-43d2-9177-7e8d9212981c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3cd680-2d47-4095-9fe1-fb723d82b79f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1487fc3d-3c95-43f8-9ba8-12f6bc80c102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb41e4f9-2ca2-49fa-a80e-55f0e8f9ad4c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e571f56-5754-4914-99cf-2495b6c68189",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be0a96d9-b47c-4aa5-8973-cb1c4f200819"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0b1d00-48bf-48be-a5a6-4ec10b87fd05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc0f1d3b-c906-46b4-be72-8871a065e75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "763f95d0-975c-4587-992e-09ce2a265265",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b551241-e77f-42ca-a178-95a2f2f30da2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f87c198f-1933-468b-a258-3b86270ce1cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b309d268-e646-49c7-88c4-71617d80dd22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f126fbd-f2b9-468f-a4c5-106081ff3ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ababb6-29f0-48ce-99b8-9f0574decf90",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b9d3a4-bb56-46da-abd2-fba9f18985be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87462584-3adc-4333-8403-48865c70607c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e285d5-e553-4a14-8267-5b95938ebcb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50a1a058-9d23-47f6-ad99-2ada64032ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf4c36a-3e92-4d81-8762-f017ed4b355a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabc9fcf-ac39-4860-99d1-1bbc8a5ad2b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "193d9846-273a-458d-a97a-073d4b20d0c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a84db5-494e-4b78-a459-a834a9a4e205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18c3de89-2e8b-4419-a1ea-2b6c9a5c1d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef655787-92e7-44ce-836b-3a893d38c4bb",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3feabc7c-009e-4d8c-9537-e54cc78d73bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2373f324-d580-43b7-92a7-0ad5922315cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68241cf2-730e-4625-90f4-f27871458b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45f736e4-7fb8-46ee-b380-6aa5563f3f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c5f815-a175-4eb0-9c2c-3c07975457ed",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e55b8d-71c2-4cb2-ac8d-c6f842984f07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1141bdd-1488-40c6-8cd0-c6337131b6e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be452211-f263-41c1-93f1-533cfff41613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68198bce-2503-4b11-bb3f-6e526ddf1b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c18f86-dc91-43d1-8a76-a48cc9c8117a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159ea7cb-8782-4278-96e2-9d1d8bc44037",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afb82f1f-b1d3-4223-a6cd-07a11aeeebfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48bc277e-caac-4ecd-87cd-89601cf2139d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6443c5a5-bd15-4e02-8424-79fd858cabd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b462216b-e889-4120-bb8d-975cb619a973",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d5f64f-216a-44b0-8ab2-9ed97f0fb54f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc5b1776-c35d-4441-a564-0c550bbc566b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0869b5-5892-4d9b-a6df-9832a7f7047b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "395b5c6b-be56-4a15-9538-ca5d0ee2be32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a18c92-2df6-43d9-bd2a-a89a9baa8474",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624e9f72-1cb0-4eb7-aae0-edb8e2a18409",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d7966c4-f85c-462e-9693-38d567625eb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bced06fd-c95f-4de4-884d-b7dfe50eab00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ff9f55-f8f1-4f24-be81-a5abbb5b41fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d732ca-d034-4614-8ea6-4939a176f45e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73c90b5-965b-4bab-b84c-52d6551d31fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4624cbd-2566-4191-90a3-c6f986d0a5b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff7ef90f-f93f-4ce9-be38-8d683efa0e99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08cd70ee-a545-418c-b562-da407fad50c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8810233-e400-45c2-b5b7-9e97654342f4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110b0bc3-4714-4da7-8b90-1e73c4e06f5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44e43d50-e822-4f73-9e08-294b89157737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc5b26f-e45a-4e78-a6b2-f1d65a3aca2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c6c7002-5553-4721-af2e-35cbc0fb3ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07beb8c-21b6-47dc-9cf6-2b34343680a6",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc12e48-a0c6-4bb3-a04d-a38addf1f638",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4df4068e-d372-4c0c-89cd-856dfc9ab8d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7511fa79-811a-404a-a5f7-28f222551d21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8533386-bfab-40ee-99ad-4d8066e79c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f215c1f-f214-4ba5-9912-5a0538b03335",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8fe308-86eb-4194-9f03-f5cedfcbd578",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69a143bc-e498-4600-85ec-cb8132fd5da2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6be7ef-01b1-4236-9739-d5ba2b63279a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a27279f7-5d01-45a7-a185-e1c43d63954e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d64e2c-13c3-4b39-aeb8-9f5f90c6c127",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fecf2e4f-475b-452b-9ccc-729cdd4169b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "451173af-1e06-4809-ba2c-864c932dec13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b3c867-7020-4484-8b3d-00576c64b2a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37079b74-719c-4f5f-8c24-7015068e6f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00da145f-d5e1-435b-82ab-72adfca064f0",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52fc8be5-f57c-4ca0-bded-19b1f04a13fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd4eac9d-8586-4202-9387-9f72414f382b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4360358c-8002-4506-8eae-f000607ca4a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d9d8957-2a87-4556-9388-80f29cc8c61d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d23831b-8616-4990-a915-5acb8008e495",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2186a63b-0b3d-4b95-ba43-2050d57cc96b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd5f8071-c15a-41f9-b587-7006c75ef7d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad333a13-2591-4134-89d3-cf178626bae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f25920d-74f0-4c72-9020-80e3fbb4dba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd51a092-b12f-48a8-a2ae-6166d579577b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f77290-ad5c-4626-a82a-2a98b3e60808",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "530d57dd-b69a-47e0-be8d-c9aea0019394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4c05c6-4b59-47d9-b8de-7adb6c94e7b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2da8d45-1249-4788-9399-076009ec4c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383fc9c4-268b-48d2-ad77-965c4d3eb264",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5f72da-1a15-4b7a-8f74-f8785fb943a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7944c5a8-0c94-4e6d-8ce6-2a819a4a237a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f408d90c-2aa6-4d9a-97c5-e943828853f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9df7e01-e1a6-4f0f-a93b-f31f1bf39ecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0429415d-8d16-45b2-9a43-c8533e0848b9",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef66cc88-f4ab-4820-8ddb-46d682763d47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bebf6f8-ada2-4464-b239-bcee36d4701a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "260949fb-a97b-4251-8dc3-e825992fb9cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7489a49-63ae-4cf5-9201-7c498c5bafc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458da20f-606e-4540-bf22-9bc5df35210b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7babb24f-d67e-4a60-8a48-149e54811b4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f18f0fdd-3772-41ef-bedb-c04cd629c72b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eee8a92-9453-4ebc-94cf-68af5517f835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f52757c5-d267-4dd6-a2b6-c8110ba262e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "388e4ec8-9ebf-4cb9-84e3-bed8173b3dea",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2662e5-58ce-4a96-93fa-3689a73ba289",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7edb45fe-b5a5-4f62-902e-ff4bf187be10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af2aadf-4400-47f0-ad49-f711bb48e7cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eaf7caa-8cbe-4a23-b233-b6e0cbf0a07b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec60a488-66a0-471d-8ba1-2318d181536e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abcfac3a-3abf-4da0-b1b2-7c2426fd294c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccb81b3e-c9c7-43f7-946b-bfa5d7a62d80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0253f0da-08fa-4e3f-9fc9-bda8097a6701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30d48b3-afcf-42ff-8309-b74e804a6aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5abbe3a9-bbc7-4828-bf48-1b4c644ab94a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa854402-7092-4229-8983-ff24b41fa08b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baf8f8f0-7f3d-48be-badb-9f94a9801aef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a7022a-dc4c-4b80-8920-ac7ab58ee101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d73accbd-58e5-44e5-8e51-9fb43db86a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2964ddbb-d914-4ef0-94af-81aa8507fae6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d7273c-52d0-491e-bf00-bfd7cb6351ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08e9e70e-08bf-4e3a-a5f8-cd3c33fcba2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aabf4c3-b4d1-4dc7-83e6-2ab5fa725e95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c58e4133-db29-4427-bfa2-bbcffeb01376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cbfa0f6-e897-4f4e-8665-ed1938d79777",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281caa53-3ebc-425b-a9fb-90ff96216cd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e420ac23-465b-4629-95c7-250af13a48a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d97a52d-d3a7-402b-a3c9-f9ab5894bb76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6d7c692-37e6-46c1-af93-855f9699c4c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b840e156-12e0-41b5-b0ff-f1de0f4fd7fc",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b1eb88-9711-40e2-803a-5ca413e217d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82d9cf4f-5f29-4b35-b10b-8989d60f1ddc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbac522b-329c-4824-97b1-67e15e7d36e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e8fa72b-4a73-46dd-adef-2ba15f521500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931b497f-4ca1-477e-ab6a-693f7bb2d12b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a19efa18-f27f-4a75-823e-a43976a1eb34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30504d59-eafb-4853-8ff0-1c8b18c71034"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81720d54-c8c8-4c11-bafa-b3988fc592ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86b08b15-a0c7-4616-86c0-507daf959acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf63e5a-50ae-4678-bf0f-f22baf385f0d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a932980-baf3-4f9c-84b4-b6e491d900e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1aac2cc9-4980-495d-b0b9-fdee85075bed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6979b5b5-e5e7-4d3c-a8ce-5f475f700663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4313320b-4197-49b4-9963-f4e7a692b665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5022e299-944a-474d-90dd-7c645d3f1a01",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a44a1763-d2a5-44f8-a2b8-517ea4d1052f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f54f386d-d837-4b6e-a7de-7eca7343d0fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "012093cb-1ad7-472c-ba7a-dbd76a8954d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31d3bf41-f0e1-4862-8010-a89ea6a2eadc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647f37b4-8c20-4927-8fac-40535c7bcde6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad2cef6-b673-44e5-a0df-33ce501de59e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ee17f81-afca-49bc-8fcc-36ec0362b750"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18ba5da-6cd0-411c-aaff-9e9b74d9bd7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b81c28d-281e-42eb-88e9-c806c76d4425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7720b08-df72-48a0-ac3a-462eb172fa02",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea608fba-5813-4c45-a140-2c61b5a80ec3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "016b5c5e-0700-42df-8cab-9017877808a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fa92a0-f126-4389-a4e0-0cec113d7196",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be13af42-f5f3-4fd6-beab-9ddcebd0ddeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94a8610-c92d-4b48-9e1a-3bafc5ece73f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549af4b4-8518-4ce5-ba4f-3ef933af3427",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9939311-934b-4a16-956d-7d6a7a5f33eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6e44be-ed42-4c0e-93b2-3c471ca172fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2ca8cf4-a6ea-4a07-bfb4-007599d33670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f008ac05-e693-43e9-98ab-ecb2e304b579",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7066009a-adf7-45d2-9a7e-7a23c8c7dc27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d51547c-b8e8-4c0c-827a-ca39f748b644"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2facb884-0da5-4996-b456-4d71545cd72d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5186c311-a201-45db-a5d1-ecad86a65ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c39e313c-eab4-4a84-9d7c-90aae58d7dd8",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9016f26-112f-40d8-8a5f-3d704bca2ca0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "551bd1f8-0268-4c94-aaa4-88dfb4d19c85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "391935ce-8810-452b-91d7-69c97acc6ce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "323a3f08-c069-4d60-81a2-aa52fa2c4b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "366666dd-56ba-4bcf-97b5-9d1494a4ac1b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bbc09cf-b507-46eb-b0bb-d5c5c1983068",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc1010e8-c7cb-4d70-9052-8a5c552e8904"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0135bc-3cec-42b7-a074-3adb6ae1c66c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58c2ca47-0ef6-42dd-844c-4cf3f531f29c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7135739a-9901-4026-8764-3215a86d908b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4022247-724a-4822-a39d-bebd4c759ed5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5bfe691-374b-4345-b474-79781fbfb3a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc582d76-36e1-445b-9f78-f6eb856c5430",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "551f7070-0a65-4a96-bff0-b1f3a9a9fb8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53084102-3f42-4844-8368-7323302b74a7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "963fde3f-a9b7-4311-b8df-4d84503bfb35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7edb3263-1887-4d58-8f44-fbf61cf6e772"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65fb31e7-97ab-4893-9d6d-1e5a34f4ea13",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6310d8d-705b-473e-9c27-04dfdaed4238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1017f37-a950-439c-af11-f4577279931b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fef47d1-4472-4148-b039-3b35ad1f734b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a2d42b5-986a-4a87-9119-ef8991a44d0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0e436d8-c265-498f-b3d1-e593810c7b55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43a6d8bb-a1cb-4ba7-acff-447a1817d451"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90807428-1de4-4eac-b013-4d790548dc53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7da46d34-2d8c-47bd-8d0a-20e9bd1da7c4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "78507595-a25c-41d1-94ee-36ec3be8c838",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fdc0186f-370d-4928-94c8-53751caec590"
                    }
                  }
                ]
              },
              {
                "id": "623b8184-563c-48b3-b8d2-5a71ff42b5a1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "622ad6f1-de11-472a-9573-c1ced593f279",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c71e52-2447-47fa-8de9-f45c7b8d2e84",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "db1b4acf-5f88-4d27-82dc-649fbdb59c0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bdb5987-32be-4dbf-b0b4-3aa93123fa27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ffad1955-49f2-4f8d-b605-889035537e35"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30c8401d-a3b5-49c3-b633-10811efc0bd4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f57b66a0-3c18-4481-b192-bfb3ecd25581"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "891cfc6f-b036-4f08-808f-4e92f4b46c8d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc8b7cd8-9354-4d7d-bf36-6b85cac44727"
                    }
                  }
                ]
              },
              {
                "id": "3d6fb96e-405a-4258-9b88-1f54358fea21",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "5e7563d9-f789-45ef-8cdc-72b6da600edf",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "669b76e6-6e9f-4aae-9533-23725a484c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0d007424-6b68-48b0-8c8a-44d40bd5c33c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8582e5-b606-42b9-a52b-fdaba376a5c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08599528-224b-4f94-932d-16b4c03fb750"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c5143faf-be62-4c88-9b64-98351f24a1c3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "54b4d31f-786f-40b9-8553-a7d4ee1467e4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f089d574-4b2d-4476-af28-992fb39d4237",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6c4c349f-9b4e-445b-9c90-c9d732ed0dc2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9241374-7be6-45bf-bbbc-67da054d3a83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7843f19f-2fc8-41ec-b37b-ad892734c3cf"
                    }
                  }
                ]
              },
              {
                "id": "153fc92a-6018-4788-8cd9-925b846ff20f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "41ded869-f1c0-4d98-95ca-7c70539ba8d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "efa3a683-ada4-473d-949a-261e603943fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d700365e-5bca-4296-a630-2e1e0865824a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c579d23-c794-494b-9ed3-bda570b7f44b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e43f02d-d385-4811-b3af-e6de007b2c56",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a334924a-e681-4521-90d3-ba6dcbb530c9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3818bf36-4d2a-4e3c-8a13-55a13283897a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1fbefb29-166a-472a-a1f9-6b8c035583e8"
            }
          }
        ]
      },
      {
        "id": "a1cf798c-e47e-4051-a8b2-2805bfa6f13a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7d2b2dc5-e254-4427-8bd6-0fed8666c737",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1aa464a9-fc97-415b-bcc9-568bb0abb9f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "174f9910-1076-4707-951f-389a15fed9c1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2b3e20-51d8-47b4-b152-3f7a46263682",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6bbbb27b-6c19-4993-9b0d-37ed417984b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7bdeb75-23e7-4df3-9481-5876ae1c913c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65ce8c05-ca38-43aa-9612-560f7361ce79"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5c8e0e1-a2e1-4ecf-a243-d092aad4363a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10336e17-4984-4a43-b212-3b433ea0b879"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "78a0f021-1794-4410-94a4-cd1c7c3892f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6303f7a5-a291-4d0a-b399-f89034a33cb2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee77b491-4590-4104-b21e-a0f2c009219c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "608af921-29ca-4fc0-8777-3b91b6e85df7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d94f83ab-022f-44eb-a55d-0d93eeb4849b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0ca176d2-760f-4c64-ba5a-8a5eabd2ef73"
            }
          }
        ]
      },
      {
        "id": "c9456946-ea93-4e2b-b021-f663217d82f0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a89b5fa3-e13d-48aa-8081-9bdca97c58c2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bd289029-0074-422c-9c9b-3bb3447194a2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c6e0ced3-c158-4d88-b108-c680d1de78d9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b96fd1-4ce9-4645-a73b-b21957eef1e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "600a4403-2c0d-4edf-a631-c2a6fe2fcef2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5eaca7-493e-47b7-bedc-5456f511938f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00dc09c6-04fd-4a2b-a420-209331dcef0a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67f6dd8b-9ffc-4182-80a1-efedb1c00887",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a16aaeaf-daf6-4a8f-afe4-3bbcb7288426"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a29254b-bc88-4615-ae5b-e9ebcc526b43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a774b2a-fbae-41d3-b844-46e6852ba87b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "68c37104-50c9-4585-b1af-c223a4241044",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "14a164bc-76b5-4a62-9469-908eb86fa265"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d52568c-d30a-4e61-b63e-c13c39f6067a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10a01704-bcd3-4f73-91e3-26169e1e836f"
            }
          }
        ]
      },
      {
        "id": "fa572c66-8a79-4d2d-99e0-2fdfa33f8a47",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6f47c6a9-5348-4111-82bd-99727933f330",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c630f4db-2325-4b58-9a8d-7ec504ddd5b5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e30a03a4-68bb-4224-9a65-df5e7ae95be4",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b2df4c5-3f0e-4bba-9191-7c1691c86310",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce6b54ea-bb90-4896-8075-7040fb0da1e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "308cec49-7f96-4a86-b0e0-b300b2715cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a781c09b-fc20-4c30-b127-a1736b426a24"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9b6f13c-a37c-4bb0-9d32-1bf06235bd55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f5c6e04-d923-4e84-9ba2-6a0cfcf74916"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "517a5b03-1faf-4ed2-b09d-c287f157e4c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c059897f-51c2-462b-a2c4-3072bc085cbe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "242e0770-d68f-45c2-9d67-daa28f4f103a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7ed6df7f-87e4-4bde-a639-dffc48f3585f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e574a738-338c-4c94-ba8a-5a71144c30b4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dcbbfc63-d422-4fcd-8d49-cec3f3f8f794"
            }
          }
        ]
      },
      {
        "id": "cdb8e398-8307-44e1-9ac3-df61b6b61f0a",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7fa75d0d-d2fb-4070-ad20-5e63206c4da5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce24f28d-0f78-4018-9b65-ff8aa20176cf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d08f5fa4-0e92-4e8b-be55-af31812053d1",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "efff7c37-d292-43a9-aafa-472b5302c72b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c9af1c4-a76e-4fc3-95f5-0238a03ac92e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 112.83333333333333,
      "responseMin": 12,
      "responseMax": 799,
      "responseSd": 89.6701849194706,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1722300007411,
      "completed": 1722300044443
    },
    "executions": [
      {
        "id": "44db1587-9b33-4374-bcf2-bcb3ab14d7dc",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a500d032-24b7-48e7-a669-67e6c7c95461",
          "httpRequestId": "e27eb90a-50c8-4941-bbcd-0e67bfe5c8e9"
        },
        "item": {
          "id": "44db1587-9b33-4374-bcf2-bcb3ab14d7dc",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5b5adefb-a0cf-4b46-abf4-8ee75e09ad67",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 0
        }
      },
      {
        "id": "1723f163-935f-43d7-a15e-e346ea935691",
        "cursor": {
          "ref": "962a6e72-56f5-4209-895b-45282a731e84",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9479dc6b-8757-4ace-b9fd-81b0142f8a6e"
        },
        "item": {
          "id": "1723f163-935f-43d7-a15e-e346ea935691",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6d293b57-3624-4d53-837a-5255ea85b2e4",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 0
        }
      },
      {
        "id": "767e2c9b-76b1-46bf-97a2-3f09370881d7",
        "cursor": {
          "ref": "a4458719-35f6-4d6d-acf5-d70679f613f8",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "77521a84-73cc-4f67-ad39-3f04f57da643"
        },
        "item": {
          "id": "767e2c9b-76b1-46bf-97a2-3f09370881d7",
          "name": "did_json"
        },
        "response": {
          "id": "b680f707-c8fb-42d1-b1fa-92ec766c72d4",
          "status": "OK",
          "code": 200,
          "responseTime": 240,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8929e91-90c5-4744-bd56-77e73c0e9b80",
        "cursor": {
          "ref": "bf02eac9-28f0-476b-b189-0c6f06794d35",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d8accbc2-ca75-46a2-8406-fd38f382b5d7"
        },
        "item": {
          "id": "b8929e91-90c5-4744-bd56-77e73c0e9b80",
          "name": "did:invalid"
        },
        "response": {
          "id": "b2433131-4f41-4282-b5f9-d1f7f0dd0c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8929e91-90c5-4744-bd56-77e73c0e9b80",
        "cursor": {
          "ref": "bf02eac9-28f0-476b-b189-0c6f06794d35",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d8accbc2-ca75-46a2-8406-fd38f382b5d7"
        },
        "item": {
          "id": "b8929e91-90c5-4744-bd56-77e73c0e9b80",
          "name": "did:invalid"
        },
        "response": {
          "id": "b2433131-4f41-4282-b5f9-d1f7f0dd0c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04178cde-b91e-48cd-b7a2-ed2e028804aa",
        "cursor": {
          "ref": "de686762-d1e9-4932-8fa5-689161e506d2",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "57eac5e7-279c-4854-9e09-69603b864966"
        },
        "item": {
          "id": "04178cde-b91e-48cd-b7a2-ed2e028804aa",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6f5a09ea-565c-4864-9711-08c73164889d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 163,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa2825a-c9c0-4761-a5cd-a6c3556a0214",
        "cursor": {
          "ref": "ca3dd830-a724-43d4-9010-e7f16bfb0dbb",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f270fd37-2f53-48a6-9ba2-2bddfb3438e9"
        },
        "item": {
          "id": "1aa2825a-c9c0-4761-a5cd-a6c3556a0214",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c04664ad-4229-4781-a02d-99336df9f61e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 77,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b93d3444-0b7c-4c5e-a918-de8ed924561c",
        "cursor": {
          "ref": "9f1ad565-0048-4e14-95e0-32b24d8ef581",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "490ee46f-9def-4c71-bc34-29ae3f75bce1"
        },
        "item": {
          "id": "b93d3444-0b7c-4c5e-a918-de8ed924561c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5bd38689-7b82-4720-9f99-2e07da6b27d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d5bb074-5e07-4428-922a-7c3999746169",
        "cursor": {
          "ref": "ff86f8b1-f0ef-4d8b-9234-750013406070",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a812485b-e662-4698-97a1-97f256628ce5"
        },
        "item": {
          "id": "7d5bb074-5e07-4428-922a-7c3999746169",
          "name": "identifiers"
        },
        "response": {
          "id": "1ec750ad-5fc4-4d87-9852-b1767d130877",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f24ca38-9dc6-4eab-9f85-d45caecd7846",
        "cursor": {
          "ref": "8c695e83-e0c4-4bb6-8a14-af3ff9398f43",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f5288c39-7f9a-4838-bd69-0f4ec05a1b73"
        },
        "item": {
          "id": "5f24ca38-9dc6-4eab-9f85-d45caecd7846",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a7d6bdce-c15d-400e-82f6-0a101fe95639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "ce1e9816-306a-495c-9dff-eec1830f17c0",
        "cursor": {
          "ref": "29b9835f-ed36-40ad-8174-419d78f027c5",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "928238d6-8049-4ab1-9cd8-c9fbd5834167"
        },
        "item": {
          "id": "ce1e9816-306a-495c-9dff-eec1830f17c0",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "bea04607-2cda-4f86-96bc-6e1779c8e996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "e252c6f5-a7b3-4aa2-b027-229dd4f2ae78",
        "cursor": {
          "ref": "d8326c6a-952d-4cb9-a92d-219836c555e9",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "05c52a45-7a7b-4683-911d-877ff1207d24"
        },
        "item": {
          "id": "e252c6f5-a7b3-4aa2-b027-229dd4f2ae78",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "11992095-729c-439c-a145-ce5a2ae56a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "5b5d36e9-66a2-49d1-9682-afad5d13657e",
        "cursor": {
          "ref": "88d8d05f-c06c-4432-aedc-a4695feab0ab",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a37df978-b437-4797-85bf-13c9bba60505"
        },
        "item": {
          "id": "5b5d36e9-66a2-49d1-9682-afad5d13657e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "77485483-cee8-4c39-8591-00683c7903ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "5d06afb8-c89e-4fe9-8f1c-6e5c7678931d",
        "cursor": {
          "ref": "7d6631b4-4bd9-4f6e-8eab-647418f11241",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5f537799-01b6-4f98-8859-023dd7ab8c5e"
        },
        "item": {
          "id": "5d06afb8-c89e-4fe9-8f1c-6e5c7678931d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "64494305-cc6b-4d7c-ba94-6c3aa3669c94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "7ad6048c-f53a-46c0-b7a5-7aa544e17e7f",
        "cursor": {
          "ref": "402b97c9-e55f-477d-ad45-b45d1ede8770",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c3bb4241-3027-44e1-a97c-569f73a878a0"
        },
        "item": {
          "id": "7ad6048c-f53a-46c0-b7a5-7aa544e17e7f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d969e91b-5979-41c2-aa90-9adb4e68a384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "a907f2ce-1b18-4102-8d76-7195b14be35c",
        "cursor": {
          "ref": "8b8a0562-db84-42fb-8a8c-869f6e3ee211",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "761f6bf4-349f-449f-9a7d-d1c036d5472a"
        },
        "item": {
          "id": "a907f2ce-1b18-4102-8d76-7195b14be35c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "17f07474-1ab7-4eb7-b63e-fa5b03ebbed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "49afa3aa-c4e7-49f6-b6e5-3aa2bca3d71b",
        "cursor": {
          "ref": "4e458e4f-7172-4ef2-a761-b406faed5ad5",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "59d6ff87-6c9b-4b99-8825-79f94504ce76"
        },
        "item": {
          "id": "49afa3aa-c4e7-49f6-b6e5-3aa2bca3d71b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "cc217248-7c34-4b54-bcfc-5f31af4835ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "8b550198-0501-4cf4-b2c5-9499c7830339",
        "cursor": {
          "ref": "74700309-bdd5-4c2a-8eb1-a52dc159adbd",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "743fa4a3-2181-40de-9024-9e5c0ded2158"
        },
        "item": {
          "id": "8b550198-0501-4cf4-b2c5-9499c7830339",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3d6719f2-d569-45a6-8743-3182246fea3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "dffba8ab-45d7-4d31-b137-1cf99e9f0dac",
        "cursor": {
          "ref": "41415eaf-a729-4082-bb3a-81e573aecf99",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5d216e90-8c2c-4366-8ba0-38e7a1e3ae9f"
        },
        "item": {
          "id": "dffba8ab-45d7-4d31-b137-1cf99e9f0dac",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "deca4d32-4254-4009-b25b-f901dfe4e42c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "35567a07-e272-48df-9abb-a1ecf106467e",
        "cursor": {
          "ref": "c4bbb1ff-c984-4657-8c3f-ebea195de4f3",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "64e31d83-91c9-4de4-86f3-a3684cd544da"
        },
        "item": {
          "id": "35567a07-e272-48df-9abb-a1ecf106467e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d5d748d6-773d-478e-ac52-c200ea69c9d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "fe9acf90-6ef7-49bb-b094-d0d99929aa18",
        "cursor": {
          "ref": "5d2a5dd3-df84-4ee5-8209-1d6f107ec3a1",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "836a4544-8d52-454e-84ab-e16b9c1e1934"
        },
        "item": {
          "id": "fe9acf90-6ef7-49bb-b094-d0d99929aa18",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e8aafc92-b920-48b8-babf-730fa7a1d0ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "7fdc6f39-9953-4726-8763-fe39960aa4f1",
        "cursor": {
          "ref": "b066d1bc-d0e6-46fd-a0ad-ac9d17f6958a",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e64ea1fa-5410-45af-b596-9a8d1621d9d0"
        },
        "item": {
          "id": "7fdc6f39-9953-4726-8763-fe39960aa4f1",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c21fa43b-1771-4e36-bb98-900ac5541f53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "17b9c9d8-ff1a-47a4-8a65-055c435af364",
        "cursor": {
          "ref": "f0bfe65b-b392-46eb-86ad-29937f71412d",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ea891587-0672-49fe-9f23-c1353135aba9"
        },
        "item": {
          "id": "17b9c9d8-ff1a-47a4-8a65-055c435af364",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "072a7018-ce66-4007-8ce5-6532206bfb35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "b3b3c488-d10e-4c96-80a8-20be08897120",
        "cursor": {
          "ref": "ab3964f8-2d25-43a7-ace3-514f9a543173",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "93834fb3-167e-457f-a666-a6f5309fd2b4"
        },
        "item": {
          "id": "b3b3c488-d10e-4c96-80a8-20be08897120",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8dadfdcf-d907-47c6-b49a-c06aa41e1f4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "c9d4b05a-6702-4232-8a06-ced0437d4fca",
        "cursor": {
          "ref": "545997f2-d130-4c78-b21e-cc508aaea817",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8ae83319-e0d9-4099-bf03-546e5e4d7597"
        },
        "item": {
          "id": "c9d4b05a-6702-4232-8a06-ced0437d4fca",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "436cbab5-fef4-4cb7-a55a-0b343a84a6b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "89821fc4-918e-43cc-bc79-ca137f82aa30",
        "cursor": {
          "ref": "ce49fdc6-52f7-4c4b-b9c2-92ae27b4bb50",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8faa2a38-c0e3-4b03-86f5-23496c6d4ea4"
        },
        "item": {
          "id": "89821fc4-918e-43cc-bc79-ca137f82aa30",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7e34d8a5-3ba6-488a-a034-1af96e2c0118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "40a318fb-c313-4caa-bd72-7cbf479090fb",
        "cursor": {
          "ref": "2454cf93-626d-40e2-b63c-5948eb85f622",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "cc872662-f16f-4e65-b278-533c9379bcfa"
        },
        "item": {
          "id": "40a318fb-c313-4caa-bd72-7cbf479090fb",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b6ff74d5-4d28-4483-a4cf-f0e4ceab7ad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "16f12993-b71c-4944-8b03-dc6429a0ed77",
        "cursor": {
          "ref": "f6fb4654-5b34-4a42-916b-e93b4890574a",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e703327b-97d3-4597-a2f8-88591b37f798"
        },
        "item": {
          "id": "16f12993-b71c-4944-8b03-dc6429a0ed77",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "30de39db-c932-4925-a766-221007bce84e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "82ede0ae-e9f0-47ff-bddb-5adf8f07a483",
        "cursor": {
          "ref": "a4de33c6-cf20-4b96-8646-8d0578cd9a2f",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "069da447-8a20-4cbc-8a76-a2005b0ea884"
        },
        "item": {
          "id": "82ede0ae-e9f0-47ff-bddb-5adf8f07a483",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "198b66e0-705e-4dbb-8a54-86481fccd422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "eb53f88e-5d95-4b5e-bf36-b57aae066475",
        "cursor": {
          "ref": "45c7be96-b074-4a9f-82e4-2ed2e092d0f6",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "656f27d6-99de-49eb-9c67-d257a9cbf390"
        },
        "item": {
          "id": "eb53f88e-5d95-4b5e-bf36-b57aae066475",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b950a493-8ca6-4cd4-b812-6776aa1e152a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "c6aedc71-01c0-428f-a288-b8eb463fe283",
        "cursor": {
          "ref": "6f783076-7741-42e1-8d29-187a1524b5a6",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5d75cf97-4d19-482d-b1d7-90a4fe1902de"
        },
        "item": {
          "id": "c6aedc71-01c0-428f-a288-b8eb463fe283",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "61fd848b-b607-4415-b242-4b1a9d9fd7e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "7e330cee-9f30-43d1-bf0c-c0852f37bcef",
        "cursor": {
          "ref": "377b1658-ecde-4e76-af17-bdce910ed349",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "fbaa0e6d-0003-4c5c-970b-1661b48000aa"
        },
        "item": {
          "id": "7e330cee-9f30-43d1-bf0c-c0852f37bcef",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b5ec238b-8b43-48ad-8b84-ff8c8c055f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "71f9d480-d460-457b-82e0-e82aef0f0e78",
        "cursor": {
          "ref": "93946a8d-314c-4cff-88fe-aa824f1fe49e",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b980259c-1f56-4045-a63f-b5c2cee739bc"
        },
        "item": {
          "id": "71f9d480-d460-457b-82e0-e82aef0f0e78",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0020254a-0d87-49da-851a-5d4845b03020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "05ce989f-08dd-4e3c-9bb3-17fb430becf3",
        "cursor": {
          "ref": "b6f98836-27f2-4550-a546-32f624162e2a",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9be585a3-f39c-4594-8280-830ecb8fc5b4"
        },
        "item": {
          "id": "05ce989f-08dd-4e3c-9bb3-17fb430becf3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "87f4649c-23c2-44ed-b753-357d9846eca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "0c09a39b-5145-4e40-bd3d-f6e473633c8f",
        "cursor": {
          "ref": "c21d754e-ef19-4d91-9ba5-5f3040752a89",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b7afb08b-ed62-4816-96c6-feda357eb391"
        },
        "item": {
          "id": "0c09a39b-5145-4e40-bd3d-f6e473633c8f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "07b8ae21-754a-4618-9350-2dc8f68a7a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "e5739be2-c269-4b4b-b0f6-d4ad8c2e6479",
        "cursor": {
          "ref": "c34be44a-1cc7-4df0-bfcf-ef292f6ba239",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fe1c91b1-bd0d-42f4-ae5e-64c91f539f3d"
        },
        "item": {
          "id": "e5739be2-c269-4b4b-b0f6-d4ad8c2e6479",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "42212154-6ae4-4955-be99-17a36e1caea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "b1e5661a-97a2-4337-8cf8-3d2675d78b52",
        "cursor": {
          "ref": "86359e7e-b140-48ec-840d-ffe5cf533c1f",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a48067cd-723d-4c70-94ce-16a015bbf0b1"
        },
        "item": {
          "id": "b1e5661a-97a2-4337-8cf8-3d2675d78b52",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "bc6350d5-658d-4caa-baf7-c721db225d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "978e7afc-7394-422c-900f-baded1f3fdae",
        "cursor": {
          "ref": "ca57a91c-d2df-4e72-a878-58789bbde074",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "14ea37c2-2549-435c-92e0-4a71efa39553"
        },
        "item": {
          "id": "978e7afc-7394-422c-900f-baded1f3fdae",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6d5818d8-2c96-4522-ac8a-c27dc2edfe1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "43789102-8f3f-4c8f-9391-db35499897b1",
        "cursor": {
          "ref": "a56a02d7-4dc6-4410-b92a-09507c89ccf3",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "861ffdfb-021c-4347-90a0-eb0ad2712aa1"
        },
        "item": {
          "id": "43789102-8f3f-4c8f-9391-db35499897b1",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e8008fd4-e91e-455b-9938-dc2b2960dc56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "6e0993fe-b46b-43f4-8301-753665059015",
        "cursor": {
          "ref": "11312d23-01be-4a10-b465-5506c43f4989",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e6c6aca2-e54c-46ff-a226-22d2deb79064"
        },
        "item": {
          "id": "6e0993fe-b46b-43f4-8301-753665059015",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f05f253e-fe84-46e8-ba6b-04b3e58e3da3",
          "status": "Created",
          "code": 201,
          "responseTime": 799,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "5a5ccdb6-67a2-4ca4-b0f8-f9c8236dba28",
        "cursor": {
          "ref": "337df552-2955-47f1-9d60-64fa8fe685a6",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cb214fc2-0058-4127-af04-0a7aceaca31e"
        },
        "item": {
          "id": "5a5ccdb6-67a2-4ca4-b0f8-f9c8236dba28",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3b196c87-58b1-4ac7-a236-3153f5838d39",
          "status": "Created",
          "code": 201,
          "responseTime": 350,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "be511dd4-a272-45c1-90e8-313173724f90",
        "cursor": {
          "ref": "96dc92ca-6fe6-43ba-b48d-9a38e8175065",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "42542dee-748a-4d02-b7fb-603cf2afd6c0"
        },
        "item": {
          "id": "be511dd4-a272-45c1-90e8-313173724f90",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c4c75fb0-36fe-4b82-8065-b9df34231ed5",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "27bd1677-2847-4a31-b358-fd9c8da7f69a",
        "cursor": {
          "ref": "6bc5af12-3807-4e87-9ad5-72abf8a10450",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "92110a49-7f66-4bd1-84cc-31cd60584607"
        },
        "item": {
          "id": "27bd1677-2847-4a31-b358-fd9c8da7f69a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "aab1ffc1-cd14-4178-85d3-465b33d13f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "529525b0-0273-4302-8091-73f36cca2085",
        "cursor": {
          "ref": "4ebf9955-6d36-42ba-9599-e6c889885b89",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1824db43-1ebf-47d2-826d-8f3bbf6ca6a1"
        },
        "item": {
          "id": "529525b0-0273-4302-8091-73f36cca2085",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a0c634ea-1e08-4c7f-810b-11e715739d79",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f0c2061c-657e-4735-9250-7edecc00a18b",
        "cursor": {
          "ref": "4d3fef46-8a7c-48f1-add9-cd5c3b0deef7",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d02fce18-093a-4380-8ff3-62cc68f928e5"
        },
        "item": {
          "id": "f0c2061c-657e-4735-9250-7edecc00a18b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2c57954c-61bc-40ea-b91e-fdde8fcde26b",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "94c3775d-09ce-403d-8b08-89b905329ae5",
        "cursor": {
          "ref": "f6d9278f-a3a0-4eed-8c9d-c02f60f62057",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "000b8edc-0434-45af-9e3f-64b679237bad"
        },
        "item": {
          "id": "94c3775d-09ce-403d-8b08-89b905329ae5",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9cb89f8d-a1f0-4250-b8a4-aa4cbc9902ad",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ee145c90-e2ed-4818-8663-2793d00dfdf8",
        "cursor": {
          "ref": "e7b0871f-a040-423c-aeaf-d252f4996d09",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "82632218-b811-44bb-896a-adf877c7a3a9"
        },
        "item": {
          "id": "ee145c90-e2ed-4818-8663-2793d00dfdf8",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "af0415bd-9905-4a97-b521-b5be16f88c6c",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4b0bf7a1-66de-4b61-996b-c38319b848d0",
        "cursor": {
          "ref": "c50d3104-32c2-45c1-a59f-0f733e403735",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "cdc6d2d1-bdf4-4862-a716-4e8c3ffac417"
        },
        "item": {
          "id": "4b0bf7a1-66de-4b61-996b-c38319b848d0",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "972f3c3f-e95c-4ce8-b7d8-fd2468441d95",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "05a2da59-3ef7-4649-9a13-64d0da174844",
        "cursor": {
          "ref": "8d03e840-3b3a-4c35-8b0b-0e02df57c7f0",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "14d36fd8-4a42-4c94-9854-4de5cd1cf4b8"
        },
        "item": {
          "id": "05a2da59-3ef7-4649-9a13-64d0da174844",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "6c212999-8db6-4ee8-a22c-24602f1abf81",
          "status": "Created",
          "code": 201,
          "responseTime": 352,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "cdaa709a-6bdf-480f-b375-83623963da4c",
        "cursor": {
          "ref": "e6cd6718-306c-475f-b424-c34ad80cec98",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "bd8a3603-e22c-4442-a414-2c72119cc98a"
        },
        "item": {
          "id": "cdaa709a-6bdf-480f-b375-83623963da4c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "cee1c42b-1629-48d0-a7e8-6e2a23ed69de",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "2489fcc5-f42d-4245-b5ea-8d63eb8b1f3c",
        "cursor": {
          "ref": "b42aaca7-074c-4aee-b363-414499a1f4de",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "61936e87-fc26-456d-9657-ec0f5a9de259"
        },
        "item": {
          "id": "2489fcc5-f42d-4245-b5ea-8d63eb8b1f3c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "827daf53-6af3-441a-b009-255d1ca6010e",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "9ef2c455-8972-4d2c-9e9d-bdf6b78c3fd9",
        "cursor": {
          "ref": "3d584198-908c-45a1-a026-0f9cd64c8032",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a2c1a05f-09ec-4466-94c7-f20500ee8816"
        },
        "item": {
          "id": "9ef2c455-8972-4d2c-9e9d-bdf6b78c3fd9",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d67c6625-2ae7-479a-b621-5f24d60a2f3e",
          "status": "Created",
          "code": 201,
          "responseTime": 401,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "b595674a-51b7-4de3-a099-8cd72f4fb274",
        "cursor": {
          "ref": "3a7e0792-9a05-4d1e-8c8b-43895e136f2d",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "34e88cd4-21be-4898-934d-f263f7cb4212"
        },
        "item": {
          "id": "b595674a-51b7-4de3-a099-8cd72f4fb274",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "afaeea65-a995-4711-ab65-a743ba17f819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "547b7f4c-6803-4f98-92bd-1624dc6fbdbe",
        "cursor": {
          "ref": "30b48258-78da-4bea-a4a8-bf5e6a3869a9",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9a397fdf-03c2-47d2-818c-b38c3766930e"
        },
        "item": {
          "id": "547b7f4c-6803-4f98-92bd-1624dc6fbdbe",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "01311be7-8c15-43d1-9469-adab9dafe790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "aa8745df-1100-4243-b073-9796d28c9cac",
        "cursor": {
          "ref": "f8178a35-999f-4d8d-a0a0-b3b3f40049a8",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1c5c9927-4a68-4a9d-a004-159081f7e7c3"
        },
        "item": {
          "id": "aa8745df-1100-4243-b073-9796d28c9cac",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "256467b1-e6fb-4bfd-855f-df493aee548f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "7f12b05c-8b49-4e4a-a766-9043e498c388",
        "cursor": {
          "ref": "510d85dc-3ad6-4e39-8782-fdd5bb8332ee",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "172c20fe-b983-4dfd-9514-d2f1c87a7c0f"
        },
        "item": {
          "id": "7f12b05c-8b49-4e4a-a766-9043e498c388",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9e0eb0b0-e812-4e7b-9642-f6edd0160a65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "e9b230f9-a88a-4630-b1db-3f3ca8fbc4c7",
        "cursor": {
          "ref": "58e27098-e3ae-4a8c-90d3-6d1d6e064441",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5aeb51de-79ab-475a-b6e2-b1dce77cbee7"
        },
        "item": {
          "id": "e9b230f9-a88a-4630-b1db-3f3ca8fbc4c7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "03fa55fc-6837-4587-9b63-07de31d5faec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "9c6dcd32-090c-421b-bf5b-23be4d9b16c8",
        "cursor": {
          "ref": "80858a26-ca77-4579-ab6f-abc47a7894ab",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4acf5972-56c2-464e-a1b3-98d0fa5c261b"
        },
        "item": {
          "id": "9c6dcd32-090c-421b-bf5b-23be4d9b16c8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "011895e7-85af-4aa3-8797-f2b6e65d343c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "e34ebbde-c380-4bbb-9365-e27572eff217",
        "cursor": {
          "ref": "c34da1ed-b8c8-461e-84d4-3377d1a4facb",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8566f546-501f-435b-88b3-6fc65fb7713d"
        },
        "item": {
          "id": "e34ebbde-c380-4bbb-9365-e27572eff217",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1fca162d-2511-4d13-a133-aad79da05241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "00e76d9c-06b0-45fc-b808-e71f84026b52",
        "cursor": {
          "ref": "3412042b-b42f-4b37-8717-9416c53f27e4",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e36d220c-70d7-41ed-8f3b-30eb309d7dd4"
        },
        "item": {
          "id": "00e76d9c-06b0-45fc-b808-e71f84026b52",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "04ff2bac-aa62-458c-b847-9c457d8a5518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "afd60763-9104-4ba4-9a04-3b703f576879",
        "cursor": {
          "ref": "ba0d5f1e-f59f-4928-8fe4-8454394b39a7",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d8e17a96-8878-4bca-ba70-ffb2e59aef4f"
        },
        "item": {
          "id": "afd60763-9104-4ba4-9a04-3b703f576879",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "6079e740-4195-4754-ad17-1000534ede3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "64569125-6d91-4e46-8755-6e3c3aee95e0",
        "cursor": {
          "ref": "01f7366b-54f6-4777-8f04-24de0e454d2f",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "541f939a-5db6-4ae8-a3f2-ec35e54d93f1"
        },
        "item": {
          "id": "64569125-6d91-4e46-8755-6e3c3aee95e0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "64976238-200f-42c1-ac5f-1446a54e3269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "cee32531-bab2-473d-adf4-bf0c506e0221",
        "cursor": {
          "ref": "fe7c3175-c964-41cf-a37b-0e2ee2a1ba5e",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "faeff7af-6778-4d66-bdcf-7e774ad8c94f"
        },
        "item": {
          "id": "cee32531-bab2-473d-adf4-bf0c506e0221",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d8fd8432-509d-4de4-b7ce-617260972972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "acd1e212-98f8-415e-b68c-5ed40445a38b",
        "cursor": {
          "ref": "cf1521ab-b19a-4739-8f5a-03a118574de3",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "197b037e-e43b-4045-9fc3-b216d6ebf330"
        },
        "item": {
          "id": "acd1e212-98f8-415e-b68c-5ed40445a38b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "466ef08d-4805-4d84-994f-25fd5949812d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "9c072f8b-18b4-4c6b-8658-a76ea2d140a6",
        "cursor": {
          "ref": "235b99b3-0f91-4e2d-b686-516f39244163",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c7a4d144-dd98-42e9-9596-45be15f1c1a4"
        },
        "item": {
          "id": "9c072f8b-18b4-4c6b-8658-a76ea2d140a6",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "bfaa2038-7f4f-4bfa-9f1d-1f81dad3a2f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "c02c724e-cdf4-4488-8e64-fced11466a94",
        "cursor": {
          "ref": "efa90a73-a997-4ea5-9efe-09f85cbfd70c",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "585a994b-808f-4f6e-9493-33caf6ecb443"
        },
        "item": {
          "id": "c02c724e-cdf4-4488-8e64-fced11466a94",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8aa10cc3-1470-45de-a1b2-6068aec66c30",
          "status": "Created",
          "code": 201,
          "responseTime": 447,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "d9187609-0da2-4863-af90-72c0c48df43e",
        "cursor": {
          "ref": "fff6f4f5-8d43-4afa-a130-09d9530f1802",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f5f0a826-6511-4cc3-8db7-50c28a69c933"
        },
        "item": {
          "id": "d9187609-0da2-4863-af90-72c0c48df43e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6b06d7cb-a5a3-49d5-927f-783a83ae5886",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "6488e32e-d125-4f58-a1f5-d6e7c593366a",
        "cursor": {
          "ref": "f9f1fdb9-5f3f-4fd6-94eb-7835d24e5afe",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d04aefe2-79c9-4c49-a06b-28edd18dd090"
        },
        "item": {
          "id": "6488e32e-d125-4f58-a1f5-d6e7c593366a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3f80817d-e96a-434d-a09d-96d5088855c0",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "011e6ccc-245c-44c8-99fc-132a975127de",
        "cursor": {
          "ref": "ec97b6c2-b987-4aa9-b106-2d4bc2ab9804",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "4fb8bf3f-8de5-449f-a17e-1aec8553248f"
        },
        "item": {
          "id": "011e6ccc-245c-44c8-99fc-132a975127de",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "585d2e1d-5bd3-483c-811e-b9fd44f92dbb",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "5edf644c-0e44-4695-abf5-01085ba3daaa",
        "cursor": {
          "ref": "823c4a70-01a3-4242-9dd1-75b41f6d3333",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1e3329ba-3566-4f3a-95c3-9a84c5595a41"
        },
        "item": {
          "id": "5edf644c-0e44-4695-abf5-01085ba3daaa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d18b7846-4c69-4426-b90b-a805dba4cc04",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "02dcf4d2-f484-4843-b969-f83a824b1093",
        "cursor": {
          "ref": "e62dd841-d47d-49a2-9b9d-6697e7c96eef",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e3a8acc9-d46d-4ea6-a579-6c2167797552"
        },
        "item": {
          "id": "02dcf4d2-f484-4843-b969-f83a824b1093",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "35a659bc-9089-40a3-ba67-0aed1799ef5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "fef0a8e7-fdd1-4218-b823-ecf91db3d115",
        "cursor": {
          "ref": "d719d932-af71-418d-abf7-1abac6140c58",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "31d657de-a5ca-4e70-b760-1bee8a21585e"
        },
        "item": {
          "id": "fef0a8e7-fdd1-4218-b823-ecf91db3d115",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b0873134-1c9a-4716-a7e2-2941ce8ab3b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "dd3679e3-ff62-4f5d-b0f6-2bd24fef7e71",
        "cursor": {
          "ref": "271fe282-f1b6-4699-94a6-8aad269829f0",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2371641d-ee32-454e-b7d9-7c55f9dc54af"
        },
        "item": {
          "id": "dd3679e3-ff62-4f5d-b0f6-2bd24fef7e71",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "55dfa4c6-8952-440f-843c-95a49bd75c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "f7da7083-55a4-49e9-8709-29c06c9e5cd4",
        "cursor": {
          "ref": "e8dddfe8-c08a-410a-a445-1921a2302b39",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b2bb0c64-a8b0-4b4f-84bc-72ae879f7ed1"
        },
        "item": {
          "id": "f7da7083-55a4-49e9-8709-29c06c9e5cd4",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d3c8971b-419d-40cf-9b7f-cf2a76135ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "02556372-dfa9-4de9-b54c-a0863625ed17",
        "cursor": {
          "ref": "ec8fac6c-b903-4166-a745-9c4a36a830ff",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c4ebb760-0979-49dc-b429-eddea4657199"
        },
        "item": {
          "id": "02556372-dfa9-4de9-b54c-a0863625ed17",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "800c7577-c72a-4bc9-8297-4ddae46038ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "5197cfb6-58c5-4993-ae71-3181ca9ce003",
        "cursor": {
          "ref": "0c15a96b-e510-4684-82c9-4c654d1910da",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7a8cab86-f669-4715-9073-dbd89e9a854f"
        },
        "item": {
          "id": "5197cfb6-58c5-4993-ae71-3181ca9ce003",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "1baf8207-dafd-473c-bbd4-9f0162e259a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "1c65814e-64d6-487b-9744-0e50c75cc4f9",
        "cursor": {
          "ref": "a984d2fe-7e44-4ef2-ad81-d013378fcaf2",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "60bf76bf-f7fd-4d48-9af9-7bef80c82734"
        },
        "item": {
          "id": "1c65814e-64d6-487b-9744-0e50c75cc4f9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ff23f930-5e96-4cae-b3a2-8ba6dc91feef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "6238e83d-f736-4a5b-bcda-8fd0ac927223",
        "cursor": {
          "ref": "2b3d5f93-00c9-445f-a148-9afebb0baa69",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f67e7ff4-cf5f-478f-8b0e-ce4152b5cda2"
        },
        "item": {
          "id": "6238e83d-f736-4a5b-bcda-8fd0ac927223",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e7992fbe-9900-4559-b97c-2d8c8f479a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "119d4deb-b5f0-434d-942e-f5ffba505a32",
        "cursor": {
          "ref": "82621039-88df-4833-b879-825c1b3484d4",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1fd3f89a-df00-4ade-978a-46ca83763de6"
        },
        "item": {
          "id": "119d4deb-b5f0-434d-942e-f5ffba505a32",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "28f54ebe-77ac-4ea7-949c-8b433c0d256b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "bbb50533-faeb-4c7d-b24c-18bba0b4f829",
        "cursor": {
          "ref": "2d6539d2-4e68-4e71-838c-e9440d0dfae2",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5fa1258c-1925-4fe3-82e3-1e9a6655071f"
        },
        "item": {
          "id": "bbb50533-faeb-4c7d-b24c-18bba0b4f829",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "da7c97a9-404e-4e12-b0fa-caae91aaddc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "dedc2c46-8c77-4a2b-891d-f41665a89e79",
        "cursor": {
          "ref": "1fd3ca46-82e3-4e5e-9e92-811f304d15d7",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "39c616c2-bc7b-41dc-9cc5-fdf6d1382086"
        },
        "item": {
          "id": "dedc2c46-8c77-4a2b-891d-f41665a89e79",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b86cecdf-6266-45e7-a4f1-6edd26056d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "5ad7bbcc-5aa1-4df6-86d1-f4aca40dd827",
        "cursor": {
          "ref": "f285f500-b532-4f7e-b21c-f667e2928658",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0f3203d9-56d2-4c23-a8e3-96df23e04639"
        },
        "item": {
          "id": "5ad7bbcc-5aa1-4df6-86d1-f4aca40dd827",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ece84468-4d7b-4608-bee6-aaf57c6bf029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "cc1b8372-1d82-4de4-95f4-56c5f868b568",
        "cursor": {
          "ref": "0e0c857e-eb04-447d-8eff-c4fe145cffe3",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3fb023bf-f655-4803-9086-65b9126b70b9"
        },
        "item": {
          "id": "cc1b8372-1d82-4de4-95f4-56c5f868b568",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "307e58fc-8c4c-42aa-92c2-bd57c23b3c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "6c0cc081-a84a-4af2-a686-af32257e7537",
        "cursor": {
          "ref": "7b642765-6651-45eb-9332-42c9f1aeff4a",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "99d2e9b6-ae4a-4ac6-9a97-255ea8fe4257"
        },
        "item": {
          "id": "6c0cc081-a84a-4af2-a686-af32257e7537",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "60b797cf-8b81-4f0a-a413-5dad09369d48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "80987dc5-ee29-4ede-b175-9eed3d1cbe76",
        "cursor": {
          "ref": "74bf85fc-8916-4029-9696-bf10c9807270",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "4e66fcb8-df7a-4e96-bdb4-be1bc2cab6e1"
        },
        "item": {
          "id": "80987dc5-ee29-4ede-b175-9eed3d1cbe76",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "dc8bb477-ed4b-4b19-a1b7-bff9e24216f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "5c70338f-4740-4bd8-b944-c2491edb7619",
        "cursor": {
          "ref": "a6ccea33-992f-4cd6-a11f-550f98630337",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "05943573-37ec-4ee4-bf42-6214fe7a0b7b"
        },
        "item": {
          "id": "5c70338f-4740-4bd8-b944-c2491edb7619",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f57e36e3-3525-4982-8bd3-020cb8a9b7e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "a51f5bc6-4b82-40bd-a1f7-57b46805cd95",
        "cursor": {
          "ref": "f512f597-0499-4b53-a397-b74dbf13402c",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9ec1062a-c662-48bf-830c-922a338c33fd"
        },
        "item": {
          "id": "a51f5bc6-4b82-40bd-a1f7-57b46805cd95",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "73edb8a9-05d1-420c-b439-e66d1dddaf0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "ad5335a4-d26e-45a2-a8a9-adc910c23f90",
        "cursor": {
          "ref": "9f8b7f9f-fde8-4cdf-8c56-c1d39e5a29f9",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a41a3002-a3da-4701-bda3-336cba0ed84e"
        },
        "item": {
          "id": "ad5335a4-d26e-45a2-a8a9-adc910c23f90",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a7e7e35e-7447-42ad-ba3e-737803508d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "9c590ca8-2eaf-4219-96cd-8646bf897281",
        "cursor": {
          "ref": "582a6869-3d53-4647-bb18-fda45a264902",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8a63add4-9c59-4237-86b5-d9a8c8a4b566"
        },
        "item": {
          "id": "9c590ca8-2eaf-4219-96cd-8646bf897281",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "dbbd7830-ab60-4e8e-b803-273122efe46f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "4f9ecbe4-f78a-4242-b862-86ce448c68ce",
        "cursor": {
          "ref": "ce24fc2e-9563-4eeb-b208-983a006fccc8",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "46706a1d-ea59-448c-9036-0ce59dbc7889"
        },
        "item": {
          "id": "4f9ecbe4-f78a-4242-b862-86ce448c68ce",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "885dd2ba-a2f3-4414-a958-98cb0b8ee803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "3282bb34-cc3c-48cd-a887-35a76788db0b",
        "cursor": {
          "ref": "7519591a-7928-40fb-b5be-8e8b16ef03a4",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3f62289a-85e9-4834-8816-ceee19431d73"
        },
        "item": {
          "id": "3282bb34-cc3c-48cd-a887-35a76788db0b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "91bb58c3-7f26-4ce9-83c5-fefef0fbe3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "3caf008c-6fdf-4e22-b63d-1b4a963984e0",
        "cursor": {
          "ref": "397f5b11-64cd-49d8-a67f-8a85d8529879",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c5ea9c52-ec51-47b0-9a05-3d8e7b291808"
        },
        "item": {
          "id": "3caf008c-6fdf-4e22-b63d-1b4a963984e0",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "15f497a4-41dd-4ebf-8a37-ac4d437324aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "7d6b5eb2-9563-4d07-9b48-54c3affc09d3",
        "cursor": {
          "ref": "55f52255-f9d1-4fda-b1a9-f86794368381",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "235bd56b-0e68-42fc-bb0e-819ebb2cfe3d"
        },
        "item": {
          "id": "7d6b5eb2-9563-4d07-9b48-54c3affc09d3",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e615bb42-9489-40f4-bc19-924c4616edd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "60a5d938-243b-44ed-8c6f-90d44f6e21da",
        "cursor": {
          "ref": "1b194478-1868-4636-a89f-6bf96dc8e392",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "de172a3a-96f7-47c6-bf59-b54a8f412af9"
        },
        "item": {
          "id": "60a5d938-243b-44ed-8c6f-90d44f6e21da",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7d77f5b1-886a-478a-85ba-f57432e6c41a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "b99a6782-7aec-450e-8a17-1a46e89381d0",
        "cursor": {
          "ref": "9a088fbd-0b81-4289-a09a-57844425c60e",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "162f8663-dfd7-4ecd-9cd2-a79f14ece2bb"
        },
        "item": {
          "id": "b99a6782-7aec-450e-8a17-1a46e89381d0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7aa50a19-297f-45d4-9975-3f46f52201ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "0defadd3-37ab-43ad-8a2f-bb5b5b462ed2",
        "cursor": {
          "ref": "4f17edcf-21aa-4202-a6d8-0ff2e84b80d8",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9306501d-4559-4c31-b631-fd86276b8d61"
        },
        "item": {
          "id": "0defadd3-37ab-43ad-8a2f-bb5b5b462ed2",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d42a2719-52b9-4200-ba91-cc3a31eec9ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "063bb453-c18a-47c2-8142-c39f48c34d32",
        "cursor": {
          "ref": "0e843184-2127-426b-89fc-2c461522ea7e",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fef87a0f-9f2e-40a9-ad2a-1abfbb5a0ade"
        },
        "item": {
          "id": "063bb453-c18a-47c2-8142-c39f48c34d32",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3eb693dd-6279-4b97-8ebf-5a54becee7c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "b5268eb7-42b9-4571-9dac-9eafa9ce826f",
        "cursor": {
          "ref": "fd6c0bd1-216d-4052-89fe-3ffb730e418a",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0a9004a9-0ed8-4aac-86e7-29051f26ffaa"
        },
        "item": {
          "id": "b5268eb7-42b9-4571-9dac-9eafa9ce826f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "81f04c21-c6f9-4c40-84ad-42330e042ed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "36744a95-213f-4bcd-989b-3fa1efe6a245",
        "cursor": {
          "ref": "5b742797-1838-4f8f-9e07-6adc6864a5da",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "beaa0262-c3ed-46e9-aabc-9733cdf736f8"
        },
        "item": {
          "id": "36744a95-213f-4bcd-989b-3fa1efe6a245",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ff3be629-798a-47a4-a9d7-ffa813cbd425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "f9143f86-805b-4731-a587-0c7ec4049aa9",
        "cursor": {
          "ref": "a557f952-0026-4001-84b1-442a0042cfda",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0b1031a9-4bf2-46a8-8650-e2023309ba02"
        },
        "item": {
          "id": "f9143f86-805b-4731-a587-0c7ec4049aa9",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "91d03ea2-1539-4d28-8c0a-068ee78ad32a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "41c0bedf-f8bd-4ad6-bb04-c798364212e3",
        "cursor": {
          "ref": "5c94622c-44d2-4d57-98b3-bc3b3fdba071",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e88e3264-e812-4aef-b6e5-19efd2aaf92f"
        },
        "item": {
          "id": "41c0bedf-f8bd-4ad6-bb04-c798364212e3",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b49ba94c-7318-46fd-ac30-9f03a9670394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "d4232695-bc7f-4448-84fd-c37aa4f7b27f",
        "cursor": {
          "ref": "5171f2ec-715b-40f4-bbde-6a80814fec63",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e681b3ca-9f8c-4ca0-a565-28e118e3fc52"
        },
        "item": {
          "id": "d4232695-bc7f-4448-84fd-c37aa4f7b27f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4c139130-d1ec-4928-a640-1fb2ada69c28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6f4341-1dbf-4bbb-9e48-90aabbcd7d10",
        "cursor": {
          "ref": "38543cbd-9e7a-4da6-9b43-4995811a0fdd",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "237ae7f6-bb28-476c-805d-5f5c3f9d7528"
        },
        "item": {
          "id": "0c6f4341-1dbf-4bbb-9e48-90aabbcd7d10",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "1ae9fb8a-71d9-4709-a39f-f0239c7c0db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "a37274df-e324-4c56-8ea9-4aa8e65e324e",
        "cursor": {
          "ref": "a92217b7-6b4f-4bcc-ac28-5b719c318a70",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5a66da43-6ed8-486b-ad0a-fe7748168f6f"
        },
        "item": {
          "id": "a37274df-e324-4c56-8ea9-4aa8e65e324e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "970d60f6-e384-4ae9-ad9c-dc8d0fb39e2b",
          "status": "Created",
          "code": 201,
          "responseTime": 369,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea42e26-16bf-4024-9342-9b8f40febd6a",
        "cursor": {
          "ref": "395f549f-847c-4bd5-8da9-9c297988bd75",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6ab99257-e4ed-4b37-9052-6f520f6f960b"
        },
        "item": {
          "id": "7ea42e26-16bf-4024-9342-9b8f40febd6a",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "309f6630-a420-451d-afbf-5a577a1b4fbd",
          "status": "Created",
          "code": 201,
          "responseTime": 350,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "11563327-6778-40b4-ae4d-7b6909983a75",
        "cursor": {
          "ref": "883a4875-1074-450f-8eec-215b3e7b20ad",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "27f2c42b-6fe2-4ca3-ae30-be76c2075ec4"
        },
        "item": {
          "id": "11563327-6778-40b4-ae4d-7b6909983a75",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3fafad40-7a72-448b-a4ef-71d26b3628e4",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab733225-5b51-4da6-b265-bbf03770e6a4",
        "cursor": {
          "ref": "297e2923-bf91-49b1-bac3-007c7b8e53b2",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7cb32bee-e233-43d9-9e5c-3d9a4a098cf9"
        },
        "item": {
          "id": "ab733225-5b51-4da6-b265-bbf03770e6a4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7ef8c6f3-5553-41b9-956b-3b1230722e34",
          "status": "Created",
          "code": 201,
          "responseTime": 339,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "47467dd1-63e5-40d2-ba2f-f8da1c9fe43f",
        "cursor": {
          "ref": "3d344824-e203-4d81-99df-367534b1f085",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "858dc4e0-3482-4996-b298-18081733fc3c"
        },
        "item": {
          "id": "47467dd1-63e5-40d2-ba2f-f8da1c9fe43f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2c74d073-c113-4fdd-9cd7-00455bcda22e",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-07-30T00:40:26.764Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-07-30T00:40:26.764Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "42118061-e6ea-4fe1-ac98-074bf8674985",
        "cursor": {
          "ref": "0368cb0f-9990-43e1-87b7-86c5d34a7458",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2eab3c4e-be0d-4bf5-bbd2-efe9bdfc3a79"
        },
        "item": {
          "id": "42118061-e6ea-4fe1-ac98-074bf8674985",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3e2622ef-3430-4a86-b4ac-f61bce097ad1",
          "status": "Created",
          "code": 201,
          "responseTime": 377,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2216cd42-b94f-4ca9-9a47-ec8e8c3a8d08",
        "cursor": {
          "ref": "4b624efa-ce99-43f8-8257-960cfea0c12b",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c622c67b-8a36-49b5-b7f0-8aa1eb131d7f"
        },
        "item": {
          "id": "2216cd42-b94f-4ca9-9a47-ec8e8c3a8d08",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7fb7a73e-be8b-4abe-ab56-b611a14e7479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "d6e065ef-dc32-4c6d-9122-cab47b2134db",
        "cursor": {
          "ref": "def14526-babb-48eb-958e-9f782d541354",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4bb0a1fb-e05b-4f33-ac11-f0e80cb9daea"
        },
        "item": {
          "id": "d6e065ef-dc32-4c6d-9122-cab47b2134db",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "718a6013-83f8-4505-b07a-060ec1b79087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "c108a602-2193-43ab-ab61-5298b8a3e2cf",
        "cursor": {
          "ref": "069fc73e-4374-4912-892a-5782a238de16",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ebf0e461-6ec6-45b5-9bb1-8a2933a2744f"
        },
        "item": {
          "id": "c108a602-2193-43ab-ab61-5298b8a3e2cf",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "61af6dc2-f725-498d-8499-6c1eb6533c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "9173e428-31fb-4447-b6a2-a50c65f1b79b",
        "cursor": {
          "ref": "7fc71c74-3b94-44ed-a002-18b0bca16472",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "1ca35513-4855-4ab6-b68e-329b49079f33"
        },
        "item": {
          "id": "9173e428-31fb-4447-b6a2-a50c65f1b79b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f85ce62f-05a3-436f-9300-7d7cb2f10fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "9ce367ad-6c1d-4d98-81c9-4e5f8bf8166f",
        "cursor": {
          "ref": "901e6b2a-545d-4b08-a058-1393f42325cf",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "53ec7a86-b522-414b-baee-3e1e060e4f12"
        },
        "item": {
          "id": "9ce367ad-6c1d-4d98-81c9-4e5f8bf8166f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "27cd94e3-18ab-4039-baea-2891ac3be7ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "6458bbb3-3fe1-40ae-a4a3-441136c173b9",
        "cursor": {
          "ref": "88b53c85-287a-4d70-b825-1ea712e33f06",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "9c07d84b-8968-443f-9395-6d0c1c2687d7"
        },
        "item": {
          "id": "6458bbb3-3fe1-40ae-a4a3-441136c173b9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "41b14a73-95e9-40eb-8125-44e7d547afb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "f7565cd6-9a28-440f-a844-b86ec3db5910",
        "cursor": {
          "ref": "fbcf41b5-2aec-4d9d-8ee4-ddffbf78238c",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "dd13af42-45f2-4824-88fb-4ff8847f2d83"
        },
        "item": {
          "id": "f7565cd6-9a28-440f-a844-b86ec3db5910",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ed41652b-4a09-425a-8c0b-336c0150fec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "ee3b1a41-c0e3-494d-a160-73a2f1e7d0de",
        "cursor": {
          "ref": "4643aeda-83a9-4e2c-a9b1-b89bf828120a",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6d8b1b2a-3b57-4ea0-93e3-c5b745a479ca"
        },
        "item": {
          "id": "ee3b1a41-c0e3-494d-a160-73a2f1e7d0de",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2478ec17-e463-41cb-9a05-374fe666c5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "4feebaaa-1723-497a-a014-95a848a3dd30",
        "cursor": {
          "ref": "416d683d-4794-40fa-aa23-453eb7b17f82",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1ebf0dda-fa74-49ea-aea6-28028999a67e"
        },
        "item": {
          "id": "4feebaaa-1723-497a-a014-95a848a3dd30",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0ed9d9a1-5a23-492a-8475-d50e4e1c3f25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "406490d1-7a6c-42b7-a315-0e7c2f6ef9ff",
        "cursor": {
          "ref": "5195f369-005d-4216-9683-7008d5a9f05e",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f422ff52-083b-4398-9d25-f46bfb41b3a0"
        },
        "item": {
          "id": "406490d1-7a6c-42b7-a315-0e7c2f6ef9ff",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e0a62581-a5c1-4915-832c-7bc273b06f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "a9a0eb54-fa8b-443c-9acd-241b878fe736",
        "cursor": {
          "ref": "70c8dcd4-53ba-421b-b407-0f39501b0e49",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ad857782-b4cd-47db-9811-dcbfec5a99f7"
        },
        "item": {
          "id": "a9a0eb54-fa8b-443c-9acd-241b878fe736",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "bf50cda9-93ce-485a-9033-e6e91f79501b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "828e007d-5aa3-47f3-9e91-6a7da6dd9649",
        "cursor": {
          "ref": "4fe11363-9bfc-47c7-ba66-e8ef036ec779",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "bc8533c1-e15c-4c5c-b035-ba8f15c533f4"
        },
        "item": {
          "id": "828e007d-5aa3-47f3-9e91-6a7da6dd9649",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a0a8fa8a-8d3d-47a4-8819-c3408387c490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "e42474e8-cb2c-4434-ac12-308af297d7db",
        "cursor": {
          "ref": "26fb0b98-d7c3-447a-8276-e45473f705f7",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "4e44ba4b-f98a-49c2-ba02-0391a358c533"
        },
        "item": {
          "id": "e42474e8-cb2c-4434-ac12-308af297d7db",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5d8f0d56-875c-463b-bf27-b46c6f8c8c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "be9d3893-4be4-429c-b998-e14c17e8a7ad",
        "cursor": {
          "ref": "001fb78d-b2ef-4f7b-ad2c-66004b22aa7d",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f71a7155-1705-4cd0-8eb8-b0974bef25e6"
        },
        "item": {
          "id": "be9d3893-4be4-429c-b998-e14c17e8a7ad",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3e5b6349-669b-4f97-8306-4542c156e25e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 129,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "862487fa-117f-413d-91ad-65c21ce23a92",
        "cursor": {
          "ref": "56bf5123-d68a-4115-a766-32627515d7ff",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2b2034b7-2837-47f7-afda-a527ef2f6cb2"
        },
        "item": {
          "id": "862487fa-117f-413d-91ad-65c21ce23a92",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "99303a14-2aa8-4a44-8848-5844a409cf3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "ca9267f7-6ee5-4e1a-8166-62c235a42990",
        "cursor": {
          "ref": "5b996628-6164-414c-9e21-fc63e1f1ac61",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8bdf6a38-a659-4c00-bc7e-a2b3cf7035f4"
        },
        "item": {
          "id": "ca9267f7-6ee5-4e1a-8166-62c235a42990",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2848d1ce-1893-4c54-851c-7e8acd0a13b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "01c1e9ba-4e82-4588-92f2-0db6a72be70e",
        "cursor": {
          "ref": "ad556798-650a-4c76-b64f-ffcd9e8df701",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c4a37554-25c4-4ac9-b597-92c0ca555588"
        },
        "item": {
          "id": "01c1e9ba-4e82-4588-92f2-0db6a72be70e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c1647cfc-86a4-446f-aa40-4f8eb4b1b655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "79b05e53-f131-433b-b1ce-8f55da72cc6f",
        "cursor": {
          "ref": "41113a17-bf4c-4b61-ae36-88372fed0f3c",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3db72f3a-4c78-4f9d-a3ea-f18330d6d616"
        },
        "item": {
          "id": "79b05e53-f131-433b-b1ce-8f55da72cc6f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "250ea7f8-3cbf-4bf1-ac0f-c4f82c54cba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "735d639a-64d9-4a94-ad68-85009c3d90ed",
        "cursor": {
          "ref": "62853f95-46a3-4eb8-bc22-3665efc22eab",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "fc0e8686-267d-4756-85d1-a70390ea7332"
        },
        "item": {
          "id": "735d639a-64d9-4a94-ad68-85009c3d90ed",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "86992be8-a93f-49b0-89b4-c4557b92e786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "af21c714-7771-4c6e-8ac5-4d5f34f9e82a",
        "cursor": {
          "ref": "ed59633b-7c45-4538-a75a-1201dd0f6e82",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8e68c367-00a3-4541-9abe-87b6afd85085"
        },
        "item": {
          "id": "af21c714-7771-4c6e-8ac5-4d5f34f9e82a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8d530265-fba3-4514-a8df-9856baeb7ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "1466193f-48cd-4115-af83-4233284832ba",
        "cursor": {
          "ref": "ae6cb9e5-aa30-4287-9b7f-03b646315223",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1cf81f52-cf37-4a08-a577-c75d8b8edd51"
        },
        "item": {
          "id": "1466193f-48cd-4115-af83-4233284832ba",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1e691725-b91d-4771-920f-0010afe5bbc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "836b1794-83a2-4baa-b4d2-83c4dec0f379",
        "cursor": {
          "ref": "290784d8-23f8-4e73-8f5a-950ce7a91d4b",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0649afbc-3936-4779-b9bd-de504ca204ca"
        },
        "item": {
          "id": "836b1794-83a2-4baa-b4d2-83c4dec0f379",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "33db0c3a-9275-46a4-889c-aa8b007b89ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "a064779d-5ec4-4df2-8200-0d58bac9f779",
        "cursor": {
          "ref": "bc2f1a5c-0bb0-44f7-b15a-64f184df8df1",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "88ec725d-3b84-4f4a-88c7-698f278d950c"
        },
        "item": {
          "id": "a064779d-5ec4-4df2-8200-0d58bac9f779",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c6eab256-fbc0-47bc-86da-3b9304fd7172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "3608a665-291d-45ac-93c6-4287108dd2fc",
        "cursor": {
          "ref": "012e5b97-307e-4424-be3e-43c2fbd969b9",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7c6797cc-8120-415c-9756-d40239950b1b"
        },
        "item": {
          "id": "3608a665-291d-45ac-93c6-4287108dd2fc",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d2f3f5e6-8d1b-4048-bc12-bf7ca52a17b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "ab197268-8fb9-4bbe-91a1-521f09a1e812",
        "cursor": {
          "ref": "b4caccfa-b33a-4fa9-b1cd-02d10dd6b310",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "306c8ce8-b737-4469-ae6c-0a14d8c7d65a"
        },
        "item": {
          "id": "ab197268-8fb9-4bbe-91a1-521f09a1e812",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0a28c4f3-6e48-4ede-8b0a-5e83715a2878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "0bd2c357-0a27-4b56-8e96-9157ac643382",
        "cursor": {
          "ref": "5f3513db-dc9c-437a-a983-ab723e6f8ce9",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "408dfb62-1450-4ba5-9243-737590070259"
        },
        "item": {
          "id": "0bd2c357-0a27-4b56-8e96-9157ac643382",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4373d982-bf00-40da-92be-cbb23a339a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "fabaa961-2160-4e4f-9f99-af0f71792a3c",
        "cursor": {
          "ref": "82d0d91c-99f0-4078-984b-d6352ffff93d",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3251c7b2-0011-49aa-ba95-e4053a59ddf4"
        },
        "item": {
          "id": "fabaa961-2160-4e4f-9f99-af0f71792a3c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "46b303bb-2fa3-4937-9fa1-8c7274e62c93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "749aed00-f107-4bac-be8e-da9405eae5f9",
        "cursor": {
          "ref": "7450b128-3a5a-4581-84c0-66cb52e008ab",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "70e7dcb4-6c73-4d53-9c33-1d1b9cc7f315"
        },
        "item": {
          "id": "749aed00-f107-4bac-be8e-da9405eae5f9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "bc9d2300-02eb-4ef7-ac23-b0b1ba078ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "1aca288a-4548-4b52-a452-a7df5f66ada1",
        "cursor": {
          "ref": "29a60dd8-7d7f-42ef-b3e3-0deac2d69604",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "32dda285-5012-44f9-86a0-cdef8b75b47c"
        },
        "item": {
          "id": "1aca288a-4548-4b52-a452-a7df5f66ada1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d264c53f-60c2-441a-8f7f-3e23673f6cb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "eeb4ff55-f807-488a-9721-0d89eb148267",
        "cursor": {
          "ref": "89239d4f-fa87-44c2-bca6-68879a26f77e",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "25ed1fc4-2ce3-4e67-856b-864debc6977e"
        },
        "item": {
          "id": "eeb4ff55-f807-488a-9721-0d89eb148267",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2e2d2688-5f20-4858-9491-41114852ad7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "e7db1239-db22-4f79-8215-09f641985074",
        "cursor": {
          "ref": "33f2109b-626c-42ed-8b2a-7d8b0c55d797",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b1f34074-4c83-45a4-a757-e85c2b6667ec"
        },
        "item": {
          "id": "e7db1239-db22-4f79-8215-09f641985074",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "61b156c9-de9f-4d5f-bf8a-0e509ab87299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "f96fc224-40ca-41dd-b470-0969ca5f8cf8",
        "cursor": {
          "ref": "5885f0c3-f62f-4536-9a35-2953a2828d8e",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "1a42e7d2-fa76-43a4-b6f8-8353a11d1cc2"
        },
        "item": {
          "id": "f96fc224-40ca-41dd-b470-0969ca5f8cf8",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "4335c049-0f4a-479b-a407-4aa354a84b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "6829a774-8c94-46ac-8944-5eae953018f0",
        "cursor": {
          "ref": "52417af9-8ca9-470b-865c-752ad27709f8",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e39084f9-723a-4711-afd5-60235f82b102"
        },
        "item": {
          "id": "6829a774-8c94-46ac-8944-5eae953018f0",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "4ddf48e3-6b6d-481c-ad31-ccc6c0974d02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "d9b2482c-8187-489d-a015-d075ef08bcee",
        "cursor": {
          "ref": "face658a-17c7-46f0-bc54-e9319f17c194",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "36c5df96-bdce-4c1b-b6e9-4f0254ca8bcb"
        },
        "item": {
          "id": "d9b2482c-8187-489d-a015-d075ef08bcee",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "498c5b13-c860-4824-a87b-5ba07021f10a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "5088d6e0-3ab2-4b4f-b585-249c472c0524",
        "cursor": {
          "ref": "a5b36b37-dc2d-4cbb-86d1-398d3a771ae0",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2f001c8e-1cee-4b1d-a763-347de04ce745"
        },
        "item": {
          "id": "5088d6e0-3ab2-4b4f-b585-249c472c0524",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "0dc1de10-a01c-4296-ad5e-140328801146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "f9073b70-7a7b-4797-b7c0-daf49d8e3be2",
        "cursor": {
          "ref": "3e049edd-2621-40f5-9c34-91a02d254943",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "76f17229-033d-4f9b-8a3e-901e2c299fdc"
        },
        "item": {
          "id": "f9073b70-7a7b-4797-b7c0-daf49d8e3be2",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "72eb2fcb-a6b8-4dc0-b049-efa244ff77d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "470d5210-e73a-4301-a796-53066fa42099",
        "cursor": {
          "ref": "03107fd2-6760-45d9-a2f2-03c4ff97e496",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8aa34858-dd42-4fae-b774-66530e68842f"
        },
        "item": {
          "id": "470d5210-e73a-4301-a796-53066fa42099",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "34ca3cf1-d900-4b04-91bf-12efc02560d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "a99fb3a2-702a-4a50-a06d-10c42b1c9286",
        "cursor": {
          "ref": "fb88e151-f400-4dcd-81cf-3281059a8c9e",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1f809fe9-8d05-471e-a8ed-1480240cd051"
        },
        "item": {
          "id": "a99fb3a2-702a-4a50-a06d-10c42b1c9286",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3daa401e-3a8d-46cb-bee0-b39b0c861576",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cce3f4d-77dc-4827-bb88-ca4bb886dc51",
        "cursor": {
          "ref": "66b0e04c-71a9-4f00-bca1-a4d41dce0dc4",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4a01d639-6090-4bbf-9dd4-7c9f04c41ef6"
        },
        "item": {
          "id": "0cce3f4d-77dc-4827-bb88-ca4bb886dc51",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b919f22d-3826-4a24-b94a-5e6c7fc8e99e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "076dc7b1-7c8c-4a28-90f3-cdeff3a3491a",
        "cursor": {
          "ref": "61d67a9f-6345-4817-81aa-b273eda74ed9",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "09c0fb9a-0daa-43a6-9b48-38cd6e434782"
        },
        "item": {
          "id": "076dc7b1-7c8c-4a28-90f3-cdeff3a3491a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0b44c1fe-7d5d-42f1-a7b8-19ef7634628f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "f316ca3c-4f6b-4e38-9cfc-6300c463735c",
        "cursor": {
          "ref": "809971ac-9b27-4f66-b255-7295d821efd8",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "eafefda7-58ce-4dee-925c-64f190759340"
        },
        "item": {
          "id": "f316ca3c-4f6b-4e38-9cfc-6300c463735c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1aaf7cfa-0b36-4343-bf59-72f9eaec20a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "453ab415-dc64-4668-af1b-29d4c758ce38",
        "cursor": {
          "ref": "89984e8f-faba-4b10-9497-acc2cda4325e",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7fa9a3b4-afeb-4570-93c0-2cab9f150026"
        },
        "item": {
          "id": "453ab415-dc64-4668-af1b-29d4c758ce38",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "85e355a7-11c4-4f94-81cb-9ed07328c468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "0bef9f20-fb98-4bfe-848c-f0dbba4f9f93",
        "cursor": {
          "ref": "b9fd1e3f-4a8e-4302-8793-7ead85c24484",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f5bb0097-123d-4a59-b29d-c4c2df44488e"
        },
        "item": {
          "id": "0bef9f20-fb98-4bfe-848c-f0dbba4f9f93",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e5f50847-8238-4d8e-bccc-5e6324ad4368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "b5984dc3-f9dc-46ff-9784-28cba879443c",
        "cursor": {
          "ref": "ebdde55b-7ede-4101-adff-0706deefc036",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ecb592d8-5cb8-4dec-ba1d-4ffc06ddc7bd"
        },
        "item": {
          "id": "b5984dc3-f9dc-46ff-9784-28cba879443c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9ef34c3a-7894-424e-8853-595e83729f4d",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "a72687d3-b8a7-42f4-80e9-740e71d8208e",
        "cursor": {
          "ref": "f9ce9c1e-47ec-4370-8b75-3d115b62ef3c",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "44934569-f9e6-4e07-b7d9-dccc1b5c2d10"
        },
        "item": {
          "id": "a72687d3-b8a7-42f4-80e9-740e71d8208e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "6e43e69e-0b05-4104-9207-0559f6c0748a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "3a90c75b-8ef6-4546-b02e-4349de32a2bc",
        "cursor": {
          "ref": "d7272c1a-8787-4ab5-b70d-96b28b689328",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "283fac98-993f-410e-a633-900378ef4b64"
        },
        "item": {
          "id": "3a90c75b-8ef6-4546-b02e-4349de32a2bc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "dc031e3b-079b-4438-9971-369d24779006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "c0d574b4-d7db-4863-9b61-28cd24235c88",
        "cursor": {
          "ref": "8417dcda-831c-4432-af74-a2f5c9f9477f",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3f2b7ae7-7698-419f-846b-c35eb936c258"
        },
        "item": {
          "id": "c0d574b4-d7db-4863-9b61-28cd24235c88",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "0453f49f-e31d-4d0b-acbb-987630c7f176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "895fa5cf-19da-4a68-8d97-6833e6eb5679",
        "cursor": {
          "ref": "c2dfc5d1-bce2-436e-8a33-1b98b950eb1e",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f9d0313b-b123-49eb-acdf-0c75bb587f96"
        },
        "item": {
          "id": "895fa5cf-19da-4a68-8d97-6833e6eb5679",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8eea0e14-3887-4b7c-9922-d6853d717ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "59616c49-75cb-41ff-aac3-fe2f3740bd1c",
        "cursor": {
          "ref": "148084ea-17d6-40dc-89d8-f995119af848",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ed2b345a-9fdc-4c28-a099-45ecd1b33f47"
        },
        "item": {
          "id": "59616c49-75cb-41ff-aac3-fe2f3740bd1c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "89cb5e21-7077-464e-9177-a391febfd890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "b411e932-6fbc-459a-a08d-8b07d8a8b09b",
        "cursor": {
          "ref": "a3ab2f01-3148-4699-97fa-80c8a23733ee",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a2b79216-e548-4f65-9e5e-8c88e27c83f2"
        },
        "item": {
          "id": "b411e932-6fbc-459a-a08d-8b07d8a8b09b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "eb77ebdc-aff3-44ce-99b3-2d27c6e66ca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "c048c3a4-b87f-4b23-a344-03f6721fae15",
        "cursor": {
          "ref": "af1bd61b-a96f-4f09-80d1-0d13ea763a13",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ab16a9ce-6e67-4e81-9b0b-3bef68ca4157"
        },
        "item": {
          "id": "c048c3a4-b87f-4b23-a344-03f6721fae15",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "bd339c19-d2a6-40c0-82be-13de83fd502d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "1de39cdd-f09c-48fc-9851-4128417a7684",
        "cursor": {
          "ref": "2ca8fba2-37c2-4561-a92f-c3c33edb40c0",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2037889a-6aa1-4d8a-b7e1-b4ae5ac4d4cf"
        },
        "item": {
          "id": "1de39cdd-f09c-48fc-9851-4128417a7684",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d8cdcd61-b42a-44c7-b4b9-c634cc58a39a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "abd044ba-dd3a-4fc9-b140-985d1e298a34",
        "cursor": {
          "ref": "991d817c-37aa-485f-9a80-135c7795aa02",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b6eb5c17-85f4-4617-9cd3-3676f294f981"
        },
        "item": {
          "id": "abd044ba-dd3a-4fc9-b140-985d1e298a34",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2d092903-41ca-4850-9351-2a52794917e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "bf5a3891-0cfa-45d4-8245-baaaa914f428",
        "cursor": {
          "ref": "4a9faa42-2586-4ee0-bfd8-e4a00d3e8881",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5c15bf01-3751-43f7-b3cf-31e15da3a670"
        },
        "item": {
          "id": "bf5a3891-0cfa-45d4-8245-baaaa914f428",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8e4bcfad-87de-4d14-a453-022b5cb090ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "cabe5a27-d748-4754-9781-75b8fc506d52",
        "cursor": {
          "ref": "70d386a8-50b8-4282-903e-72b1b122b942",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1817fc2a-48eb-4aec-ab1d-bb5c5f9743b9"
        },
        "item": {
          "id": "cabe5a27-d748-4754-9781-75b8fc506d52",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ef432eaf-756b-43f2-b410-e058652fde83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "6b3c9db4-bb22-479f-8ea1-5f7f40eeb38c",
        "cursor": {
          "ref": "22d5e44f-6c97-4318-9a59-1c191f9a20b7",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "80e10c05-e216-4d43-b371-a78a562700f7"
        },
        "item": {
          "id": "6b3c9db4-bb22-479f-8ea1-5f7f40eeb38c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2455eab1-27ad-429e-9943-e6c032b8c260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "5e53cf08-cd5f-46db-9a0a-629b4c751416",
        "cursor": {
          "ref": "50f684ff-25e5-4452-9317-02efb73eb2b0",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "547ff120-510e-4f4b-a656-ef57bcfdace5"
        },
        "item": {
          "id": "5e53cf08-cd5f-46db-9a0a-629b4c751416",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "35b94c8e-0104-4b32-aab7-3409090a0472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "7de24c3e-8de0-4941-8508-23becb6144e1",
        "cursor": {
          "ref": "e3d5569e-cb2f-4ab1-96a5-7e9d39016c0c",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6c9d0360-7b38-4a77-bf34-19937f1eedc9"
        },
        "item": {
          "id": "7de24c3e-8de0-4941-8508-23becb6144e1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2e41c1e1-284f-4cf5-bdf3-bf8c4bd493b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "580091a4-bae5-4576-b218-b833fc8b9153",
        "cursor": {
          "ref": "802e24bc-c05e-47df-93f5-361b9c3623db",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "09b341f9-a63c-434d-b8ba-83e23c87dddb"
        },
        "item": {
          "id": "580091a4-bae5-4576-b218-b833fc8b9153",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6667ce24-b38c-4240-bdbb-6118b630b027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "e9c86860-873d-4524-b694-7cdff8661813",
        "cursor": {
          "ref": "163d7d1c-ef1c-4765-a891-bbb447625a28",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d3a169ba-a6a3-437b-a307-96744213ef61"
        },
        "item": {
          "id": "e9c86860-873d-4524-b694-7cdff8661813",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "cf4ce03b-ca39-44bd-969f-1c1add2dd129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "ebb20a41-f485-4acd-a17d-5632898c949b",
        "cursor": {
          "ref": "cde4980b-6448-438a-a9b7-b36873cf4028",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "19762afd-a5e0-4b9c-a585-fdbd7c31ce7f"
        },
        "item": {
          "id": "ebb20a41-f485-4acd-a17d-5632898c949b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b0f80723-5c50-4c3a-9926-40c31f3d4f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "b62f93a3-1b97-4b30-8af5-4a72f53a7800",
        "cursor": {
          "ref": "d30e770e-2fbe-4bb5-bf93-8f17c0dd95d0",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b6302117-e2b2-4679-b72e-fe4bfe35b183"
        },
        "item": {
          "id": "b62f93a3-1b97-4b30-8af5-4a72f53a7800",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a02223b9-0f69-47a9-8e34-1561ff9300ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "e1a32385-7223-4422-987b-f04c9d0882cb",
        "cursor": {
          "ref": "746ca63e-c830-4a8d-bca3-eceb7864d50b",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4f7c2131-6284-4999-a7b4-1975dd875135"
        },
        "item": {
          "id": "e1a32385-7223-4422-987b-f04c9d0882cb",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "be2ac921-1a92-4e62-8679-8823c7536774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "268046da-d8fd-471f-b38b-c619651ff7ae",
        "cursor": {
          "ref": "9042385a-33e6-4309-9401-10e0a97ec4c7",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3aea6c63-4b13-460c-85ce-ab710509b79f"
        },
        "item": {
          "id": "268046da-d8fd-471f-b38b-c619651ff7ae",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "fdf10058-3873-4124-87fe-329c4e819c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "5a1fd1a8-360d-46f5-8a05-737e7909ba09",
        "cursor": {
          "ref": "6009288b-a73b-4b8e-912e-cc9fd74579fe",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ddcc7724-85f6-4620-96aa-ef3671dfa9fe"
        },
        "item": {
          "id": "5a1fd1a8-360d-46f5-8a05-737e7909ba09",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "db48c01e-37eb-4d3a-9bbb-844fca42bc6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "d42b78c1-8538-471c-967e-e4f9c8392547",
        "cursor": {
          "ref": "7af62ebf-013a-4eab-865a-b82cc5400b63",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3c913cc6-98fe-4bae-ad55-1074da7820ce"
        },
        "item": {
          "id": "d42b78c1-8538-471c-967e-e4f9c8392547",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8a342a80-0650-45ce-85ef-ccd0f8e9ace0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "c6c5fc1d-0afc-4c2b-8d14-7792c2af367d",
        "cursor": {
          "ref": "4610daf1-2dd9-4c59-9a7d-f56357efaf54",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "982c672c-d2d6-462b-82ea-9a7e964f0fb8"
        },
        "item": {
          "id": "c6c5fc1d-0afc-4c2b-8d14-7792c2af367d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e89254c9-d08a-4f48-b638-27ea04841efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "fd2fe82c-0bf3-4cf1-9679-09d5c7b3419d",
        "cursor": {
          "ref": "d82aabe7-f32a-409c-a681-b2881d7036f2",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "431375f5-3d79-44f1-847a-e830de11c648"
        },
        "item": {
          "id": "fd2fe82c-0bf3-4cf1-9679-09d5c7b3419d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ef19da33-9d3e-4f7a-9201-11e626f503cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "1d408f8b-5c6d-4ebd-bf45-2f01a8d59d96",
        "cursor": {
          "ref": "eb0e4ff2-cd75-457c-a2fa-f9b8bd2d62f9",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5a27d8ec-c240-4f6a-886d-9ddc34398cde"
        },
        "item": {
          "id": "1d408f8b-5c6d-4ebd-bf45-2f01a8d59d96",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3afa5fdd-83bb-431d-a846-076a254ba299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "b729c9de-1986-44b5-9eb0-9d3d11c10088",
        "cursor": {
          "ref": "84999a4d-81ea-4de5-a14c-c9036ee1bc53",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4baa34d3-79bf-4164-b185-ffa60b1f73f2"
        },
        "item": {
          "id": "b729c9de-1986-44b5-9eb0-9d3d11c10088",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0d647fea-3283-4627-9096-2605c1bc2575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "906d1ee2-6fcd-4b5d-ac4f-700a832e69bd",
        "cursor": {
          "ref": "7917da50-64a6-4d5a-81ee-c8f735b86dc4",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "41ecc2e2-1584-4816-8bd1-1b72925b8c57"
        },
        "item": {
          "id": "906d1ee2-6fcd-4b5d-ac4f-700a832e69bd",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3ba3138a-6095-47e2-a2d0-61706ca2c86f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "1539a983-8e6a-44e3-ab24-60921e49f8bb",
        "cursor": {
          "ref": "80d72a01-483d-4eb2-b7db-138ab45fae14",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d26bd67d-8b79-4662-aa6c-ca0950524119"
        },
        "item": {
          "id": "1539a983-8e6a-44e3-ab24-60921e49f8bb",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "8dae558a-d5eb-4dad-85a0-3244ea2a7ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "b37c1fd5-c26d-4225-ab57-bdffe16de482",
        "cursor": {
          "ref": "ea4c05a9-9310-4633-bd7e-9a3bc8d2989b",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "4b53f50e-7e4e-409a-be30-ea74233886f7"
        },
        "item": {
          "id": "b37c1fd5-c26d-4225-ab57-bdffe16de482",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d2416386-ebcd-4181-97e8-5a9099b751a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "4ba888a1-2dcf-4d67-b224-3d57ee4803e9",
        "cursor": {
          "ref": "74a105b6-f1c5-4938-95f2-2ecd1a5c4191",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "16ae69e3-c368-4c8f-8a94-9d5ca053fb03"
        },
        "item": {
          "id": "4ba888a1-2dcf-4d67-b224-3d57ee4803e9",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c8851432-a92f-4af6-9874-e65f875639d2",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "52d65901-a487-41a5-a653-56e2b3c51a4d",
        "cursor": {
          "ref": "b814c6c4-4a2e-4230-ba52-5502ecba584f",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "00c13b9a-533a-4f95-8960-f56f3009e33f"
        },
        "item": {
          "id": "52d65901-a487-41a5-a653-56e2b3c51a4d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "428ff2ee-3699-4eb5-ba7e-59fc49e6aab4",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "d366af52-ada1-4921-bace-99c770a45ab2",
        "cursor": {
          "ref": "8bb16ee0-a6d1-4b1b-b41f-0120a05549ba",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "397e3621-c09c-4ea1-ab8a-a41d0955fd2b"
        },
        "item": {
          "id": "d366af52-ada1-4921-bace-99c770a45ab2",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "cc64a0ca-2ad6-4b71-8f30-97680a1f6002",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "b5638647-2b68-47c4-b15b-f164a1079291",
        "cursor": {
          "ref": "e10aff6a-983f-48d7-91cd-1d02e7177f5a",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "dfb6ec29-8e63-4183-a776-098a40d2a9a5"
        },
        "item": {
          "id": "b5638647-2b68-47c4-b15b-f164a1079291",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7a742560-8a44-4b8e-ba8c-e369d930c8f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "d3d7fc7d-05f5-4276-82ec-b284b1eea4e4",
        "cursor": {
          "ref": "238601a0-fc8b-4a73-8b81-f65a24c88899",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9c3b0f92-961d-45ff-bfdc-498cd1c78eb1"
        },
        "item": {
          "id": "d3d7fc7d-05f5-4276-82ec-b284b1eea4e4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "63e31d9c-f09d-4fdf-9c6d-041a4169af43",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "de0c7baf-c984-4d4e-a597-1a4a5ae4f5cf",
        "cursor": {
          "ref": "7a9964aa-2a85-4ebe-b4ed-d3d32fefe24f",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b47d3e69-3c3f-4d85-b60b-4561a34ec3fd"
        },
        "item": {
          "id": "de0c7baf-c984-4d4e-a597-1a4a5ae4f5cf",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "912c56e3-d729-4313-a69d-e7315fb1b872",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "f5622349-3bce-402e-a958-7d86c5f87816",
        "cursor": {
          "ref": "1829207c-95ea-4d00-8c70-26903edb8d4d",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "083cf55d-004b-4dcc-b14f-a73a476a5a8f"
        },
        "item": {
          "id": "f5622349-3bce-402e-a958-7d86c5f87816",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d0efcd13-0993-497b-bef0-920e122cae91",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "dbf446ca-198b-48b5-852a-f81712181752",
        "cursor": {
          "ref": "99e660cd-af69-4203-bd35-26a7e9750586",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0f4e4834-746d-43cc-9afe-82c1ba5ecca1"
        },
        "item": {
          "id": "dbf446ca-198b-48b5-852a-f81712181752",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c9d899b1-8eb9-4585-9787-542111b015a0",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "259c5067-729b-46f6-bcfd-38d6c48f4ec4",
        "cursor": {
          "ref": "07d73e62-7ee7-4076-9a8e-c247e50fbb11",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8a6c3907-f534-4137-a998-ecaa836610bc"
        },
        "item": {
          "id": "259c5067-729b-46f6-bcfd-38d6c48f4ec4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c145b695-df2a-42d2-b028-08047da695ae",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "fffc99f0-c1b0-4e9a-8e7b-796d34194685",
        "cursor": {
          "ref": "a17216ae-3d04-40d6-a2fb-11823b820014",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b33c20d2-4203-4c39-b434-570b16b099bf"
        },
        "item": {
          "id": "fffc99f0-c1b0-4e9a-8e7b-796d34194685",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "836d43dc-92ca-44bd-894e-93b9c8e0ba80",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "85cdb1bb-ea5e-423c-9081-c44e0944dd37",
        "cursor": {
          "ref": "f5df64bf-e096-43b7-b12a-0661496f2e43",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "85d4f563-7297-4f09-a93a-615e37382713"
        },
        "item": {
          "id": "85cdb1bb-ea5e-423c-9081-c44e0944dd37",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a03f6a2c-e7ad-478f-9dfc-8ed98c6b14cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "aeaecffe-a066-4185-919b-621b4c038a69",
        "cursor": {
          "ref": "ee226fcd-7858-421e-b5f0-1d9fdd58ce71",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a4ef6b19-a2b1-407d-9f95-b1e845ea46c1"
        },
        "item": {
          "id": "aeaecffe-a066-4185-919b-621b4c038a69",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a3e2c5c4-2bc4-450a-ad3c-3f411396954e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "405620d1-fa9d-4d12-836b-c78c3d666127",
        "cursor": {
          "ref": "bd4ce0f3-ea32-4153-8505-b30fa67154f7",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e6609c91-5536-4108-94de-ce481adcdff1"
        },
        "item": {
          "id": "405620d1-fa9d-4d12-836b-c78c3d666127",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "930098d5-1715-4c73-b701-c133c1ca1568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "7427f033-674c-42aa-abe7-c84c63334877",
        "cursor": {
          "ref": "a98a71d3-7302-4584-93c8-45887024061f",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0cb0e53f-109d-4946-a8ca-cac811e4c235"
        },
        "item": {
          "id": "7427f033-674c-42aa-abe7-c84c63334877",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e22d6846-b124-47cc-a045-8421d380d2bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "30152a51-606e-4468-9ec7-990141f144f0",
        "cursor": {
          "ref": "16f5db7e-ac00-4f9c-a244-3ac83e5be0d5",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "768682d8-fef2-4127-8197-8404207c9fdb"
        },
        "item": {
          "id": "30152a51-606e-4468-9ec7-990141f144f0",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0068971c-8989-4fda-b0a7-1483bf075a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "d3c931e4-619a-4ac9-8921-9ef94261fedd",
        "cursor": {
          "ref": "2eb3e7c0-d722-4014-bfcc-4433e4cf2878",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1996ec33-1aaf-400a-a0af-cae70f4be78d"
        },
        "item": {
          "id": "d3c931e4-619a-4ac9-8921-9ef94261fedd",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f166e647-447c-4b3e-bdea-7bf0d8b4d23c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "6da3f4d4-6c3d-41d0-bbb2-aff6e2bf754a",
        "cursor": {
          "ref": "50790442-09a4-440d-b23b-e6a0edd63498",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8324427b-3f89-4f99-9bab-0bab201a80f5"
        },
        "item": {
          "id": "6da3f4d4-6c3d-41d0-bbb2-aff6e2bf754a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c3f13c20-8545-482f-9fe4-16d15a14275d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "20bd25f4-00bf-4c25-8b0f-ccfce480de0e",
        "cursor": {
          "ref": "3f5c2124-cb51-404d-aaf8-8b481f9d9077",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "cefbd5b6-6c9a-40ec-accb-996402daaefa"
        },
        "item": {
          "id": "20bd25f4-00bf-4c25-8b0f-ccfce480de0e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "95f28a72-ad7c-4c86-8696-411ba7ee276f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "50ea0a5f-d9a5-44ed-84f2-a9648dc74618",
        "cursor": {
          "ref": "38858302-f77b-4eef-aaa3-0c4a24dbf2c2",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7c21980d-b783-4bbf-b4f0-702e95bfd3fa"
        },
        "item": {
          "id": "50ea0a5f-d9a5-44ed-84f2-a9648dc74618",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a7cb6df0-4294-4422-8525-629a81831c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "a9c5c3c9-9a70-4799-9cef-c89886353566",
        "cursor": {
          "ref": "d75921e0-e20b-42b3-acaa-6db442bfb48e",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e07dd7ac-fb69-482a-84b3-86b29ad4391e"
        },
        "item": {
          "id": "a9c5c3c9-9a70-4799-9cef-c89886353566",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "71dfb7bf-4fc6-44a0-b369-8d62b88ff502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "53e87103-bdc3-4e43-b2d6-a3a726e135fb",
        "cursor": {
          "ref": "05b8e6d2-b9e3-44af-8a2f-ba02c6820f04",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e8fd7ed7-ebc2-4198-9e0a-3b7bd0c75ae3"
        },
        "item": {
          "id": "53e87103-bdc3-4e43-b2d6-a3a726e135fb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2bfdecdb-4406-4cd7-918f-0cb59e172623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "ebab7e55-2ec7-4fce-88f8-96d8f7d3d85a",
        "cursor": {
          "ref": "cb54a9ee-ea9d-4d73-adf0-c4d794ce261d",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8f4985e2-8016-4fc4-b2c4-218b8fb76acd"
        },
        "item": {
          "id": "ebab7e55-2ec7-4fce-88f8-96d8f7d3d85a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7f21c915-701a-4217-9a77-68b9c20c3b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "fdccc734-6430-4ca8-beb6-065d6cbe7013",
        "cursor": {
          "ref": "93a08795-86f9-4fe2-9bdc-d2c1d446c075",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b87d9025-68a8-4435-9216-5a2854b39122"
        },
        "item": {
          "id": "fdccc734-6430-4ca8-beb6-065d6cbe7013",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1c66b3cf-e27a-436f-b3da-3d2da14a2feb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "9ccd8820-1c99-449e-baf8-5fd1ac80f6b2",
        "cursor": {
          "ref": "c22d1103-f85c-4f9f-9d4d-2057e3330a57",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "68a116eb-58ea-4029-9fbc-d71ba244029c"
        },
        "item": {
          "id": "9ccd8820-1c99-449e-baf8-5fd1ac80f6b2",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1a25b5a8-50e6-4a1c-a38f-06922946d0bb",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "fb41e4f9-2ca2-49fa-a80e-55f0e8f9ad4c",
        "cursor": {
          "ref": "9debec16-62e6-4c89-9316-62fa6148339b",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e6a35c40-def9-44bc-98c7-f40ac8f5e403"
        },
        "item": {
          "id": "fb41e4f9-2ca2-49fa-a80e-55f0e8f9ad4c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "87005b98-72a3-4001-b782-a1868f406eb9",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "763f95d0-975c-4587-992e-09ce2a265265",
        "cursor": {
          "ref": "57a306db-da97-4d9f-b5fc-9a9d4fb52c24",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9b838a05-b93e-4744-9288-a5ae73309ee3"
        },
        "item": {
          "id": "763f95d0-975c-4587-992e-09ce2a265265",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "59dcf291-e984-461d-8fdc-4a5dae87e90d",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "47ababb6-29f0-48ce-99b8-9f0574decf90",
        "cursor": {
          "ref": "c0861880-850a-400f-a00f-6d62cc1d5dc6",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "055159f9-e9e4-4a84-9871-0e533ef73b44"
        },
        "item": {
          "id": "47ababb6-29f0-48ce-99b8-9f0574decf90",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5d7389fa-8dd9-4d94-81ab-0a6e823c0a88",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "6cf4c36a-3e92-4d81-8762-f017ed4b355a",
        "cursor": {
          "ref": "ca84fe94-15dd-4d77-861f-24be8241abf0",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "27dad819-d96f-4897-8cc3-7c4f495797cd"
        },
        "item": {
          "id": "6cf4c36a-3e92-4d81-8762-f017ed4b355a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "24e7e503-faca-4268-b533-e5cb0c023fc7",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "ef655787-92e7-44ce-836b-3a893d38c4bb",
        "cursor": {
          "ref": "ebfda9d0-dda0-447d-8ed9-85acae148f24",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6bf957a6-73e0-4c21-bcb6-65718cb10a77"
        },
        "item": {
          "id": "ef655787-92e7-44ce-836b-3a893d38c4bb",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "126008ba-9da9-4f2f-aace-a6f6499275a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "e0c5f815-a175-4eb0-9c2c-3c07975457ed",
        "cursor": {
          "ref": "9233e976-58b7-47ac-9900-e10e9cc137eb",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f33ec3aa-6cf2-4277-81b7-ab06219d5268"
        },
        "item": {
          "id": "e0c5f815-a175-4eb0-9c2c-3c07975457ed",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1cee66cc-862b-4edb-8bd0-e6ac513ff56a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "b3c18f86-dc91-43d1-8a76-a48cc9c8117a",
        "cursor": {
          "ref": "1aa551fa-9cd0-4dbf-ae49-c0880ec0d458",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "fc9f5aa7-47ac-4b19-8fdb-327452871498"
        },
        "item": {
          "id": "b3c18f86-dc91-43d1-8a76-a48cc9c8117a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1b96dc37-1cc4-4de1-82f9-2cd07ab2adfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "b462216b-e889-4120-bb8d-975cb619a973",
        "cursor": {
          "ref": "8717b43e-3a90-4377-8617-2d5bf6e1f952",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "86d03e0a-8fdc-4fef-9d73-9d816e6dc078"
        },
        "item": {
          "id": "b462216b-e889-4120-bb8d-975cb619a973",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7e042b52-b7dc-4bf8-abe6-accc56b625b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "89a18c92-2df6-43d9-bd2a-a89a9baa8474",
        "cursor": {
          "ref": "62786db6-028a-40ae-8d68-b45e05f1b9af",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "75adac24-c9c7-4e8f-914b-ba3902fcf76a"
        },
        "item": {
          "id": "89a18c92-2df6-43d9-bd2a-a89a9baa8474",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d44d6237-e563-4abd-bcc0-9f6a86478cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "a9d732ca-d034-4614-8ea6-4939a176f45e",
        "cursor": {
          "ref": "7c038165-067d-4055-b536-33364cbf386f",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "461bc149-b6d5-452f-8bb7-a931e30c6579"
        },
        "item": {
          "id": "a9d732ca-d034-4614-8ea6-4939a176f45e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "07a566fb-9eb6-4e53-8251-f591a7ae38a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d8810233-e400-45c2-b5b7-9e97654342f4",
        "cursor": {
          "ref": "7d52cbec-f215-42be-ab0e-6e5774d781cf",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a2cc2de2-a613-4e36-8dd1-9530d4227c9e"
        },
        "item": {
          "id": "d8810233-e400-45c2-b5b7-9e97654342f4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d799ed91-8424-4380-ace5-c76708e15320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "d07beb8c-21b6-47dc-9cf6-2b34343680a6",
        "cursor": {
          "ref": "2a2824be-6126-4f8b-9138-dd01fb50d143",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a6b650fd-d1c3-4fcf-9bc5-54164e0f51d9"
        },
        "item": {
          "id": "d07beb8c-21b6-47dc-9cf6-2b34343680a6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4e5de81b-e2bf-44bc-b205-9fff340199a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "8f215c1f-f214-4ba5-9912-5a0538b03335",
        "cursor": {
          "ref": "a5bb2425-1745-4615-b9d3-4faca68853e1",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ae5dca92-880d-41cd-86a1-8f2229bca56d"
        },
        "item": {
          "id": "8f215c1f-f214-4ba5-9912-5a0538b03335",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2341445d-3141-4cfb-91a1-eae244ce3beb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "b6d64e2c-13c3-4b39-aeb8-9f5f90c6c127",
        "cursor": {
          "ref": "c813d3a8-139b-4742-9248-223e1c963fd2",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f15e363a-bebc-4150-afe8-fc939012996d"
        },
        "item": {
          "id": "b6d64e2c-13c3-4b39-aeb8-9f5f90c6c127",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "83632591-6155-456a-8528-1388daae73c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "00da145f-d5e1-435b-82ab-72adfca064f0",
        "cursor": {
          "ref": "e8022f8b-385e-4dc9-b352-793879d71259",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "bb532251-836b-4743-a55d-724c3f89d07e"
        },
        "item": {
          "id": "00da145f-d5e1-435b-82ab-72adfca064f0",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3bc4acd8-7b8b-4c5c-8c8f-89877dc5885d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "2d23831b-8616-4990-a915-5acb8008e495",
        "cursor": {
          "ref": "0919af98-19f6-44b2-be4d-69b72cc9bd09",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9b6ea5a4-92ac-4fc6-bb54-302e0f48c4e9"
        },
        "item": {
          "id": "2d23831b-8616-4990-a915-5acb8008e495",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9b3f87a4-a5ea-4168-8ae7-54456cab7186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "cd51a092-b12f-48a8-a2ae-6166d579577b",
        "cursor": {
          "ref": "a0aa24d3-8288-4909-9f9a-4de6ddf9dd87",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "647df2a1-6c2f-447e-b0b3-7a39ae089dfc"
        },
        "item": {
          "id": "cd51a092-b12f-48a8-a2ae-6166d579577b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "31d66f97-ff2f-407e-bdad-3fab053367a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "383fc9c4-268b-48d2-ad77-965c4d3eb264",
        "cursor": {
          "ref": "6dd24800-e8ec-40c2-b66e-d92b8f63de3f",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3245c05c-592a-49d6-a48e-5b06a8f85bcb"
        },
        "item": {
          "id": "383fc9c4-268b-48d2-ad77-965c4d3eb264",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e443e495-e9ce-47df-9c2b-356692878fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "0429415d-8d16-45b2-9a43-c8533e0848b9",
        "cursor": {
          "ref": "dd85b001-60ea-4d2b-bbfd-94cb683867e9",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c6eda92a-e1b0-4045-bcbc-9db2ee819f06"
        },
        "item": {
          "id": "0429415d-8d16-45b2-9a43-c8533e0848b9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "bb71e78f-1584-4deb-bda7-798405958537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "458da20f-606e-4540-bf22-9bc5df35210b",
        "cursor": {
          "ref": "8c6f4bf7-9e1d-4fc0-aa69-423b996833be",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a5728546-5ff0-4af3-996f-fe86ba15cf46"
        },
        "item": {
          "id": "458da20f-606e-4540-bf22-9bc5df35210b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8a6282be-69f8-41e2-b263-4390d1d0be88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "388e4ec8-9ebf-4cb9-84e3-bed8173b3dea",
        "cursor": {
          "ref": "102459a4-9333-43ed-b3f9-ddfd945655fd",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f6026878-c3a0-49ff-93a1-9875434f5f95"
        },
        "item": {
          "id": "388e4ec8-9ebf-4cb9-84e3-bed8173b3dea",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b304e74a-8800-4ef1-a2d6-10a9c7f81d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "ec60a488-66a0-471d-8ba1-2318d181536e",
        "cursor": {
          "ref": "40eb5283-651a-4ade-9ff7-17ae4a39b179",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "221376ac-09d0-43fd-bbe1-c60a908ce2d8"
        },
        "item": {
          "id": "ec60a488-66a0-471d-8ba1-2318d181536e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6bf67a6f-16a2-46c4-925b-c4d931da8061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "5abbe3a9-bbc7-4828-bf48-1b4c644ab94a",
        "cursor": {
          "ref": "90708770-0750-43d8-8980-0ac8535cd86b",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6081f2d5-e1e5-40a6-9384-9989cece2cbd"
        },
        "item": {
          "id": "5abbe3a9-bbc7-4828-bf48-1b4c644ab94a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a4164680-172c-47e4-b837-fbd0815d7cfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "2964ddbb-d914-4ef0-94af-81aa8507fae6",
        "cursor": {
          "ref": "b6636abd-3b76-43a0-b639-6a56c818344e",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "884c3606-c7ae-478f-84b9-d640eb36df48"
        },
        "item": {
          "id": "2964ddbb-d914-4ef0-94af-81aa8507fae6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "330f5289-14c1-4bb2-8b17-6ab0d6fc197f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "9cbfa0f6-e897-4f4e-8665-ed1938d79777",
        "cursor": {
          "ref": "fe58c6de-fbde-441f-8746-ea4b6a2cbadf",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "668abb63-7af2-457b-840f-27d70e1ab11c"
        },
        "item": {
          "id": "9cbfa0f6-e897-4f4e-8665-ed1938d79777",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ab5f6299-eab3-4afd-8d4a-5b4653d76916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "b840e156-12e0-41b5-b0ff-f1de0f4fd7fc",
        "cursor": {
          "ref": "bf6345cb-35b7-4d8a-b021-ec159535923e",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1a8e0887-80eb-4123-9c3f-578acd6b3690"
        },
        "item": {
          "id": "b840e156-12e0-41b5-b0ff-f1de0f4fd7fc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "475d27f0-d387-4218-bf33-f692645d563b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "931b497f-4ca1-477e-ab6a-693f7bb2d12b",
        "cursor": {
          "ref": "b978c91b-321e-40af-8cb4-df5f3b304809",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d8cf4e5a-c4eb-4ab9-b761-23632114f4b9"
        },
        "item": {
          "id": "931b497f-4ca1-477e-ab6a-693f7bb2d12b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "8623f061-e3d5-41b5-a483-0734fcadff8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "2cf63e5a-50ae-4678-bf0f-f22baf385f0d",
        "cursor": {
          "ref": "37263b25-58cc-40d7-ba8a-3bd01d63cb0c",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "112939ea-b7b3-4aac-8ad2-c3d99e192d6e"
        },
        "item": {
          "id": "2cf63e5a-50ae-4678-bf0f-f22baf385f0d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ea8b70ae-85db-4655-88ef-291c12a3bcd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "5022e299-944a-474d-90dd-7c645d3f1a01",
        "cursor": {
          "ref": "26e33e73-82ec-43dd-a3ab-0723aaec9828",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e84d006c-db2b-441f-9dee-4f43e65650c8"
        },
        "item": {
          "id": "5022e299-944a-474d-90dd-7c645d3f1a01",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ac802da2-aa41-4600-a87e-6170bf030ea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "647f37b4-8c20-4927-8fac-40535c7bcde6",
        "cursor": {
          "ref": "beb6ce7b-be79-443d-9ce3-f946d3550eb3",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8bad5b42-adc3-4fb8-b912-142236b704f2"
        },
        "item": {
          "id": "647f37b4-8c20-4927-8fac-40535c7bcde6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "05e8c5f4-57f7-458d-b6e5-5a53a4df03eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "a7720b08-df72-48a0-ac3a-462eb172fa02",
        "cursor": {
          "ref": "deefcf9e-5278-4e6d-9754-68e210a72b91",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "451dedde-97d6-47e2-a6a9-189357074bb7"
        },
        "item": {
          "id": "a7720b08-df72-48a0-ac3a-462eb172fa02",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "15abc5e6-732e-4d7a-8476-6923447e9cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "c94a8610-c92d-4b48-9e1a-3bafc5ece73f",
        "cursor": {
          "ref": "a8d28e71-0cb6-4ec2-b71a-8498782726f2",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d1243f56-3147-40bf-a9ec-cbdb300a1d3e"
        },
        "item": {
          "id": "c94a8610-c92d-4b48-9e1a-3bafc5ece73f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6bff5dfc-98fb-491a-b421-9ffd1ed60564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "f008ac05-e693-43e9-98ab-ecb2e304b579",
        "cursor": {
          "ref": "0ea57d4a-5ef8-48fe-a3bd-fcf8d60ab19c",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a293ad9f-f96c-444a-9253-11b0a332ab8b"
        },
        "item": {
          "id": "f008ac05-e693-43e9-98ab-ecb2e304b579",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ac254a60-d6ce-40da-9879-af6889c97d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "c39e313c-eab4-4a84-9d7c-90aae58d7dd8",
        "cursor": {
          "ref": "21f68ed2-5718-4101-8bd4-43c86896e3de",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c05f8d3c-fbf5-422d-a1e1-cfe1265bf37f"
        },
        "item": {
          "id": "c39e313c-eab4-4a84-9d7c-90aae58d7dd8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f1c1009e-95b7-4ca3-a534-4be88dca018a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "366666dd-56ba-4bcf-97b5-9d1494a4ac1b",
        "cursor": {
          "ref": "a2576205-db0a-491f-9d7d-29286cc0895a",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "fa30b60a-4337-4d82-983c-9a65ef34e391"
        },
        "item": {
          "id": "366666dd-56ba-4bcf-97b5-9d1494a4ac1b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5206fcc9-20ba-4f53-b5f5-eeafb52e13eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "7135739a-9901-4026-8764-3215a86d908b",
        "cursor": {
          "ref": "1b59112c-5812-4c52-a386-75fec24c9e29",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "39f67d5f-d968-4af6-9afb-bd313c800c3b"
        },
        "item": {
          "id": "7135739a-9901-4026-8764-3215a86d908b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "43bd4d3a-2182-44c9-9714-823c040fe092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "53084102-3f42-4844-8368-7323302b74a7",
        "cursor": {
          "ref": "4a6a213a-7b05-4543-b346-373ff8f7475e",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "fe1ad645-0c23-48d0-92a1-c94933925336"
        },
        "item": {
          "id": "53084102-3f42-4844-8368-7323302b74a7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9c5c6b0c-7a8e-417e-9684-09d28d897c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "c1017f37-a950-439c-af11-f4577279931b",
        "cursor": {
          "ref": "bfa7090f-4fd2-4ee1-b682-aaf6652edc68",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a9888d32-33e1-4c97-9ff0-de1f6277563c"
        },
        "item": {
          "id": "c1017f37-a950-439c-af11-f4577279931b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c9098013-5125-498a-a523-193afe08a67f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "622ad6f1-de11-472a-9573-c1ced593f279",
        "cursor": {
          "ref": "6d1d987b-7aa9-4bb2-9e31-1c2241c6e6a4",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e749c079-62e6-4610-addc-9649150b163e"
        },
        "item": {
          "id": "622ad6f1-de11-472a-9573-c1ced593f279",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "784b36ba-4255-4da1-b9f0-fa43d55f0262",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7563d9-f789-45ef-8cdc-72b6da600edf",
        "cursor": {
          "ref": "21fc29c3-413e-44e7-8122-c2b54bf90673",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f3a936cb-9f28-4c4c-9e23-52493dbe1b80"
        },
        "item": {
          "id": "5e7563d9-f789-45ef-8cdc-72b6da600edf",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ee556c7f-4db5-4977-a7b9-6eeac288dd64",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "54b4d31f-786f-40b9-8553-a7d4ee1467e4",
        "cursor": {
          "ref": "c27501d7-e526-441e-b7f6-8f9a7ff311e6",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3b5b914a-fd85-4d74-bea2-c2c62eaeab88"
        },
        "item": {
          "id": "54b4d31f-786f-40b9-8553-a7d4ee1467e4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "09a7fb72-bd5f-4bf8-8676-f660a260e363",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "153fc92a-6018-4788-8cd9-925b846ff20f",
        "cursor": {
          "ref": "28af0a4e-32ed-4d32-bb58-d5c64ccb3ceb",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "bd8b5d79-1865-4cf7-a889-7df4fb8497c9"
        },
        "item": {
          "id": "153fc92a-6018-4788-8cd9-925b846ff20f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c7b95f95-f997-4fbd-b80c-f7a7b1a93fb4",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "174f9910-1076-4707-951f-389a15fed9c1",
        "cursor": {
          "ref": "59192e9a-7bd0-47a8-ab00-2014d7ae41e9",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "cc2f3ec8-b657-4258-83af-ea1b61bd03d3"
        },
        "item": {
          "id": "174f9910-1076-4707-951f-389a15fed9c1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "48b9e882-f227-4543-8358-77392c271c14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "174f9910-1076-4707-951f-389a15fed9c1",
        "cursor": {
          "ref": "59192e9a-7bd0-47a8-ab00-2014d7ae41e9",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "cc2f3ec8-b657-4258-83af-ea1b61bd03d3"
        },
        "item": {
          "id": "174f9910-1076-4707-951f-389a15fed9c1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "48b9e882-f227-4543-8358-77392c271c14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e0ced3-c158-4d88-b108-c680d1de78d9",
        "cursor": {
          "ref": "80166894-1865-47cb-9623-10be00cdf10b",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d0bc0e0b-fa27-4c7e-ab99-53ac443806c3"
        },
        "item": {
          "id": "c6e0ced3-c158-4d88-b108-c680d1de78d9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "213a8b2b-87fd-47ff-8e24-ed31d68ada17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e30a03a4-68bb-4224-9a65-df5e7ae95be4",
        "cursor": {
          "ref": "620b20da-549f-4b46-bdb4-5e50a624f401",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "06fefdb4-d11c-4923-b1f3-dab54f3ab5da"
        },
        "item": {
          "id": "e30a03a4-68bb-4224-9a65-df5e7ae95be4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "dcd69bf0-6340-4b7d-bbd5-696e932ca726",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}