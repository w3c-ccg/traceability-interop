{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "15ef666f-7124-4419-9511-4877debda066",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ba8b888a-8409-4553-a21b-956c70e7fca0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "29d32ff2-d5b9-4536-9bfe-48cee85f43ac",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "91bb9548-386c-47e1-aa57-3d1f6be7b7f7"
                }
              }
            ]
          },
          {
            "id": "0f0a5989-d513-46ba-9b31-3f576431ab34",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cc6ad499-8a4d-4409-ae72-98c8a3581a59",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7582b204-c8ba-43e8-97f9-8ea3ff4be517"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c14c5646-0bd9-49eb-a093-be5fe1570e59",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "42c195c3-94ec-47b2-b2b7-c12d4fec731d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6f60fe27-61c2-42b5-ad19-51a4c21e7de0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2810fd00-40ae-436d-a8ad-9ce0c87524aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "93d0aaa3-48c1-443d-a74a-c8d24bb6a330"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "068d2da7-ac1d-470c-813d-cdd8ee67c738",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "756722ec-6b15-4646-8dc1-7204d5158dbb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c185c042-cf10-43fe-aabb-a7b392227307",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f07643fc-de69-4d7a-aa6a-af2a5a0bc239"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c09c914-c82c-47c9-8e8f-fd9e31c7231a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f9631159-21bc-496a-85e7-d3dab1e48d69"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b5c0d03e-db2b-48b1-8057-5118e3f739c4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ff90f3a-c9f4-4c23-b71b-962041085439"
            }
          }
        ]
      },
      {
        "id": "3265bbac-03cb-40d0-9a6a-b5dee210dd70",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "36317d1e-c19a-419a-abd7-608bdfefd470",
            "name": "Negative Testing",
            "item": [
              {
                "id": "81b99344-9603-4387-8c9b-a3104fc3c2a8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9c167768-4ec3-4e15-8c0c-a7e9094bfffc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7606b3c7-3657-4de2-9073-74902b34debe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38281316-ffed-477c-8c4e-5c331c991efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8684fb1b-6b7f-495d-9e25-afa69d1b2bb8",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "437317cc-32fc-473c-ab1f-8fc700e8afea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7735605-b2e8-4029-962f-b4acb765977a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b204fed5-52d8-4861-a0be-96fdd4dc3a7f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb10d20f-5d35-416c-b892-db8cbfb327d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b32a2b7-d0f8-4ce2-b54b-b3d1921825a5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bf5bbe89-6e35-44be-bfb3-c5324fd30271",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f5809247-04fc-4d6a-b271-efab6c899603",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b1bb78-0b4e-44e6-9d73-35a012e1b525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1d08403-9604-4081-95c7-73cb43558b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b15f3b9c-3bf7-4c19-8c60-08c0e1e19872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd30e297-82da-49c4-85e3-e6aa3bb5464b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4335086-2cb1-4522-8f64-bfed18e37e63",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56334c6f-61de-4251-a498-4adf2765f08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd080fea-24ae-42e3-bea7-c99819901f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd043da-52e5-473b-aa80-a0dd015ef869",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "8c3201ca-aafd-420f-8054-3fb0c745de34"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4fd913e9-ffd8-4d7a-aef8-54adb62f96de",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8d6d56fc-07be-4404-841b-352a31b4a089",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b43cde6-ce13-4bbb-b01a-6a2dbc5d0497",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "72974235-6f79-4958-9e75-746e7c134f91"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f216e8d-6cca-404a-a3b1-84b8df650285",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "6f790d36-fd3e-4af9-8d93-f0d6a08bae8c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c28545c-ab3e-49ca-b44d-5e4a7de6a5ed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6842ee02-93d3-4852-aa8a-9df319523f86"
            }
          }
        ]
      },
      {
        "id": "56a828cf-bb67-42e9-8e0a-9e38aa505549",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c5a26281-b7d4-4c10-8aed-cb8493311565",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b71ac9cc-0eea-431a-9f7a-35bf835673eb",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1803a88c-dc5b-4559-abb4-c36929a453c6",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d2cc59-525a-4573-87c8-1e33798e94bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a9bb2e-1e8b-4fdc-bf72-44e06d81969f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e3b42a-a5e6-4668-9ae5-c4c3fb415ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b38cbc5-77ba-49aa-bda4-da231e77e2b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b0afdf-2fe9-447a-b1f9-f802faab1018",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b308839f-2c11-4d6a-8b1e-1c1738e6122e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8137bcb-1c08-4bc7-9e5f-2e0791232f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f91f91b-e10e-443f-bae6-9c5c78ab4ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b4676da-cd0c-4421-9a69-96cd1b61d06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38318fe7-1408-4c3c-bf2c-3c13e5e469f0",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf336ca-5f58-4822-8861-bd8885a6e2d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3bc7611-26a3-4bce-8e40-a58fb113453a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a234131e-8918-4a1e-8ea5-38eeb8fd9e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc4963f5-0e23-498c-bbe6-a180827380f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86e029d-38ef-47f5-aa10-617a688a56a5",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5dac11a-15fa-4003-8c84-8f7f2614eb9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46107223-21fd-4583-ab95-a6ecd3293f6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719e9bbc-15a2-487e-b082-ea24e17af1a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4ea348c-2022-4fcf-bff5-a93e4c222bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1d29a3-0df0-421e-8960-97bbdf37395e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd68274-905d-4c2d-85ac-ec072351c54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a829db2-1b77-4233-a24a-44583f3a3b7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e91c7ec-ea65-494d-a83a-ffbd01d8fffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22420085-3b67-44f6-a6b8-8183351e55d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb71adb-ff6d-4b39-b898-f6319fde9d8b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e459e241-ba70-4772-ad0d-0d21a688daf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b360c959-07e2-4565-a298-5569988723b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e802d861-fd5b-4536-b30e-3f469fd12906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "945d7586-5870-420f-9061-d73b09b94c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93028998-bb44-404e-9fd1-bd4014dab3a5",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb2d72f-1549-49d2-a22a-2a7abcc8f67f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75150005-1d70-4220-9170-d23657004c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f715008-1de4-4445-b0e0-18e34208d432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ccb10f8d-3ae4-46d1-af3f-7349bcaf5ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91443c52-ebdb-466b-b2ab-128e8c5d54e3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22bb9dea-2817-48cd-a188-40d2767249ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f65c0e4-7aaf-4a70-afbf-e5cb05416e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d684988-f536-4284-a4aa-9cfbb03f7496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16515a72-13db-487a-9481-0d9c167d41bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a0bc1c-c809-4ef4-ba5a-f4a6a3cb2a18",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3caa43-e480-4f9b-8327-5460e24febab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edd9408c-22d8-45d4-9e98-46eead9d443b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340a2c3f-1bb9-4bc3-b515-e16a8f19d249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8aa6f7a9-7416-47a2-af20-121c8b2cfba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74dc1693-6589-4344-b45f-70a015145516",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ca6b3b-407d-47cf-b664-cc69c38057d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63ce3137-fbbd-4148-bf0c-58407f74f258"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e30f7d-608b-4a65-80da-41d014644b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f815631-5b5e-4550-a650-37be404a2a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925635df-2255-4a27-8aa3-c32e47fb9cfb",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df8cbb4-4a37-43d3-b820-75228c0a3abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86cc8881-eaca-4755-95e7-5645b4813dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5925e1f-e337-4e22-b7ac-b9dfb9c741fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18b60a5e-236a-4746-87f2-53a7e154f11c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "677c0cc3-0c82-459e-9616-c759c972e899",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf0f625-f7a6-4eef-9171-ca509c89bcd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6cac49b-2fac-498a-b871-608503cc9209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611fb251-2b07-47c6-bbfe-75fbb906f173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ea8cfe7-7c13-427b-a512-0278c656a8f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d8d529-19c6-43f3-b640-6fa1e36fa404",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a819e8-2590-4cab-9603-8d877caafdf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "498655a8-6392-4767-b67e-c06cf952f724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdfef6d7-e1ae-43c7-9360-51cb43881d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "edda925b-ae1d-4def-a089-f5fee3315ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "880d2570-9769-45c5-ad23-2be68679c4e5",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1f3e27-d5fc-44e6-816e-f0e0c506620e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05fada16-1af7-417b-8338-cb8909a78bf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c3437a-451c-45a5-bd76-e025a2f9e9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07d469bf-3127-4f3d-802e-5656b9c8e5b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a540d1b-d30f-409f-9dbc-775b5d49e357",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aabd259-50aa-4efc-a4e2-37d27447e084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f3a106f-68aa-40d6-be95-2c86318fdda4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5b4b56-f64f-448f-b2dd-a583d329e5f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "705a0227-2a9a-4df7-b22c-c106d374ba5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dae2847-3559-4229-96a7-cdb209f46f9b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a978d6-bef6-4eea-adde-8e580115cd7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10aa5849-b999-4d34-a863-98f0bb3b9cff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d80c6b6-e427-4f74-b6fa-1f7f7367a595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b50e0fb5-ee9c-4182-9b13-5238a63a2181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e9deb8-b072-43fd-8eef-07dd43cad46c",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad7135c-ed26-4a58-a4f2-bfff9a2e10a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deeed2a7-89ba-4751-b4fd-4c3406bd02c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3dc769-6dd7-4b24-ace6-6944fb8b9a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf459340-6d12-4d0b-88b0-1ee3479cf334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1061dc82-9700-4c8b-85d5-fda73b4fda2d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819b15a3-85e4-455f-9f67-40bac2cd33c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4184eff7-d5af-4b82-a294-68c3cd6a553e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c547c6-a396-45e5-976b-a2accea6c065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "99dea7c4-9445-4cbc-9b1f-57bf9a9843a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17cbb80-47b3-4759-8ce7-ed94d688e9d0",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d036ad-9244-4b35-8c9f-98d3ae693a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb2dbdc-a809-46ae-9b6d-e0cce60e0882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b7dbdf-408d-4bfd-9e3d-29b28e13010d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd7116f5-1155-46d8-84e8-412af745dcad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04690d36-803a-4994-b0d5-35d183216cdd",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98b31f35-1417-494a-ac14-123b16162a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25cd673f-c9b3-4afc-bc47-6b66871dd6c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8b84d5-389d-46ad-8f58-507271ff4d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8484945-1623-4d5d-87db-ba7d26d00e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1a0d27-414a-4359-a903-81df214640a2",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ebae82b-99e1-4143-9ab3-56c3ba7a5a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e66c984d-e755-4ed0-82aa-8037a837652c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c52354-23ba-42ee-8bf8-e53aa2127984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2dcc09c0-8b60-40c9-a353-786a00cca9f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed70bf89-58b1-4fc9-b6d0-82e8c5a03fe4",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec0cd95-a97f-468b-a7cf-df01ced3c192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42fe38f4-571b-4613-95a5-5b4b351284f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f030281-59d4-4076-854c-7499d3ad0ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "346e1b29-6764-4bf9-a525-5421fd947fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91efadaa-859c-4c4d-bfc0-e6431e01c1b2",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40180b67-e5ec-43c6-ba94-ff24aa9a1fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afd0c430-ad4a-4fa7-bd2a-7e634524c352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6022eaa-f3c7-4975-bdc2-5f56833873cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9c84b2e5-5665-4876-899b-e41766b692fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2700a398-5a62-468f-a91a-b9d2fb620b50",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05908e4-02e0-4390-92b1-9108e8e2770b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae1cccc6-4378-4f91-b483-f4268a6e06b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da992e48-d5fe-44b3-9546-51db5b3d0dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "21f32cab-2cb0-435b-a6a1-f3f76816b399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e92bb10f-d6a7-4cf5-ac88-f5b7074e61c5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd6649cb-b673-476f-8759-6199429978aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "082b26c8-5a29-4e0b-ac2f-f25d84beaab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f9f676a-84ed-4059-b693-3ecbf52f8921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e1148f3-9b8b-4654-a0fc-100a45e3ab6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589d0453-42d0-4e55-9e11-d39892f54b50",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0289a3-91f4-476c-b338-4f4a1469cef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cbdb436-004f-4743-93f3-c1d04d242df5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56de5d0f-74a9-4721-8132-4e4eccfdc463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e16050c0-cde8-4ecd-9a3b-14340f6d51ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2ae093-cf09-430e-85ce-43824aeabcee",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "840504f7-88e4-4429-8afb-a3ffe545c4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b767d85-2689-4be8-b388-0f23df5ff976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "269e2af2-d908-4f9a-86ee-742a12cd02cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a8dce34-1c17-4316-b32a-2498b4d65b46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02bcb52e-7084-40df-9777-d507da2f3039",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "421cbc57-34a2-40bc-a17e-18c2780c8ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45d8fc00-e596-4700-ac0d-bcc1aff34dd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae7693dc-0a92-4b0a-9978-c41f378b1225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd9310da-2fb7-4623-a02e-44ccf9d6d92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6819cb-529a-4e7f-afd0-667e47351200",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a20da60-80e3-47a1-8ce8-db6046d13852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97624fbe-4726-4db1-bb20-c949a7d8d6f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc77131d-df01-4504-8fc7-eca8fe4c8f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "84b3bf7a-6293-469b-934d-8592c833f996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45a85a2-b995-4881-8c69-404d0a360992",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dfb1225-844b-4ac1-a56f-e848f7d73c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc47e642-7351-4882-a9e9-aeb9d0535fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6e941d-e49e-4806-aa60-e8da5ea4744d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e818a8e-ecf4-42ec-b4d2-51aad2dec964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b548399a-cc99-441e-8b7b-a4e348bdf89f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0561532-7652-466c-a630-23c07cac8648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5747550b-9f5b-4bf8-9d8d-63ca20e807ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ed7edb-8434-439c-bb1f-880470fead36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "27c75c75-205a-407b-a3f7-4a14b656a5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42e4a01-c9ac-4977-af9a-eb36daee4640",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9f52bf-b4e1-4690-b34b-bbd93ee6a6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26342461-fceb-40d4-ad86-09ae2142c717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749baae9-1f12-434c-9886-27c9409f8fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de270694-d124-4868-b2f0-5c432e99384d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac9d094-ae60-43df-b8eb-34124c164801",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a729fe2-c76b-45bb-8169-5d0896402514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b8b6dcd-edc0-4c36-b948-836a58202d81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7547a980-ca9b-4bed-a9b8-fe1fcd1c94e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac5374b1-fb9c-4ab6-8190-e9eda794f738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c29154-618e-48f6-958f-c9fad56b56e4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51fe4ba5-84a1-418d-b998-961dae2b20ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96bc3d83-3f3d-4f6e-9596-d63a9df48f5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e18b67-22a8-47f9-a510-828cc7846c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d975580-b9e9-4453-b5c5-4afecf62bcfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c539d6-ca57-4941-901b-92be8d880264",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6670492-a307-44df-944d-a9358a77f259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "591df932-d3da-497e-ad9f-f9429880ce3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2dceb7-c4d9-4bfd-a759-d7a6a7ce6337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "37a2182b-d76f-47e9-9626-d192738e20e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19692293-0da9-4bb5-9336-2d970c287b69",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5d36e7-8ef8-4889-868d-80af0783be24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a8d2b7f-5eeb-49c8-8767-830068604cb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e17886-1538-40ba-aa7b-cb73c781b7b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b8e6389f-5685-4c6d-b1fd-35e2cccaef7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c50c985-f3de-496b-bd2a-f6219fc45f4f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f891ac43-1ff5-41c9-abf4-921dcd44502e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6591f7f0-5e32-42dd-b31f-8e520d560c26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cbbc0f3-ef2a-48c2-9bf3-6bb4b948d142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "54a118fc-e705-4888-9c27-b932522c1aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f42b1160-b6e5-487e-b913-5eac816d1d4f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6aef89b-e953-4ad3-992a-f53b5f941603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc1ec80-10da-4b07-bae6-be6f0dbc24c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a44a933b-4245-4816-a94f-845049f371f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "354fb772-8277-435e-b684-be9e0a6a0891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb857569-2b76-4189-8c5b-693cedb6c2f1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc29a27-c0bb-41df-b9c1-1592c76ff31d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff9e0e2f-c742-426e-a085-bed83c520ea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f30104f3-3584-498f-9e32-4e2432af8ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5628f7b-6a83-4237-afea-c303c2022649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91753273-0c5e-4956-a5ea-3cfd1097a2f4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0ac3ec-7dbe-4152-aab3-b41e3f9cdb58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d20da13-a588-4eb1-8c07-e707e16be268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1579d3d5-71c5-4e1a-9bae-6820632b1f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a847683-01d9-4187-94a3-1b0548318a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c2c543-fe74-4ee3-bc44-36e5817503a7",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8354b38-49c9-4603-a7a4-7f70dcb008e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c07b8ea9-ece1-48e7-98d9-8c30a1bd684d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1d256f-8f37-4e88-aee5-a6ca5593db92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6836e3fd-7033-4255-93ca-1a525eabb1b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010a8a8d-e758-460f-b109-120dcf89d54f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "900ec1a4-690f-4393-8cfd-ca496625b970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "230e0fb8-587e-44a0-ba3f-0b0fc500a61f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d2e1d2c-1a48-45f8-9a40-f7a63ef25f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e21327e6-7535-4343-a63a-e82d954716a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e35c25-9448-4b6e-96c3-d7096690de85",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "180ce244-e626-4a9e-a20c-1f9891180210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a80ce22-957a-41fc-977d-4d61395bfa98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce500284-1d9e-4d7b-a016-166113d5dbc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "544d69c6-2d77-4e24-b540-2cb3c62ea1ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b79b7527-8cf3-41df-bfe3-0e51889993bf",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "566fca3b-7f98-41ed-87ee-0acdafb1bdeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a42e59cb-b079-46f7-bc41-f30917f69079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "652d9b0c-4636-4657-bef5-bdbacb28008e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9da0185b-1803-441d-bb67-a93c9e4d8371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc54175-fd5d-49b1-8c54-b66e73c0a30e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "406a391c-48a9-4ef6-897b-fbd266d8e481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b240ec9f-9599-4bd8-9318-baf3630fa232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba900957-af67-4c33-8da9-b13724399f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6acb0a1d-9ce9-4b31-a00c-fb00858f54b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b8429c4-291f-4e05-975c-5bc9320964c8",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2719492-405d-4f05-9604-d0ee411f7e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e53f1ae2-5d78-4d52-8206-f2e81f72c09f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7d8a6c-f8d3-4117-a88e-d23657033690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d7ed31e-0b5d-4a6a-922c-7e301c035507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a16e710-9c44-41c4-8e03-381e2542e203",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8a2733-f2f6-4949-8d0e-b5378d4bfa31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dda8ad2-b8a9-46f5-ac88-c746789b90ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1cc5ca7-6881-4cc5-89f9-b9c90685ef5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b872d7c-9e0e-4a86-b30c-0c243157ce58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9abc0ad-a9f8-4087-8588-f8e4830bb10a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7adc9cf-938a-4a3f-b4ed-2e2670fb9c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a27219e-aa57-4ad6-bc9f-65e649753663"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf53c944-b3ab-45ba-95d9-f22e4674d639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad38c694-3bd9-4e15-a7bc-5b9cc5d1e692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbeb2e0-8470-4d83-9e1c-84b21c413b12",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55087e5d-0fcd-4533-ae65-60cc979e5dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "236f7167-7454-4425-a762-22083da432ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58375d0-458b-4c94-b07d-f6439b359240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "37b461cb-937b-4407-987e-e07489f2e4b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0fef44-9178-4d96-903f-cee5d879a1db",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d15b531-8d16-4b8d-ba52-1299ebf1b303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9042902-40db-45e0-9e5c-07cb49779cdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dad0086-fa2c-4a4d-b9ce-e84f3785f3e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b86060c9-bd90-405c-a445-2f4815c36f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32c22241-1fcf-404f-a347-6d15b98ad07b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e911e9ba-821e-4cd5-8588-ad92639715fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2320384f-486e-4d86-9bc1-bbacc9a32262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632a5f40-cda9-41db-b8da-97c268303d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "96682125-1177-4744-bff8-0cb84f0b3489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4afe530b-439f-4b77-9ae7-c8f7bb5ca81b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70436ddc-5dce-4da1-aa64-0a02e2509bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ac44fb0-03c5-4bcd-81dc-d383c36465e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf24c7b1-9002-4c4a-a6cb-5aa1abc84fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "23259607-6022-4b0a-943d-f283df68d027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d3f2ee-2bc9-47ad-95f9-8f2f6835e633",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4617132-c017-41ae-a657-be9b9e7a2f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7de6169-3f97-4c66-80db-e66bea43a4e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb903647-2b9b-4698-81e7-491ac2b816b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b557f116-13f4-4aea-bb64-beb2fce036c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13f2517-b424-441f-876c-ef1814d34e2e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9ec8b3-a4f2-481a-a19e-ae4bffef66ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf2244ba-d992-48e2-9541-3850f1934b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72891cac-be2f-47c6-b69a-ba0a2756d124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1101f54-6055-48c9-8186-0408d00152c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52ca079-e74d-4586-87e2-789d274f38ab",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa78c34e-743e-419f-a07b-6d7199a5c018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a921644-e4b1-4e06-a0b6-199af05605a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8b914a-ecc5-4041-9a04-ad359352f9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5034fcab-fff7-43aa-bcc7-26046f185386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d498f2a1-fb29-491c-bd08-8e8651f875a0",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7fbc136-247d-43ab-9921-92134796f943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "345692c0-69bf-48c8-8c5f-6aee8d130917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234c032a-1dc0-4cf3-b66c-6876eb45c38e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "18017b87-b855-4cf1-bbea-038af2b8c9ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351e5f0f-6995-4f8d-be88-8f948ca89c0f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e75b76b-a27b-4752-95fe-64b1361ba1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e275393-db16-4e24-844c-84d7e6c168dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec25dd1e-df6b-4d41-a926-9aac4b3f89a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8923001-456e-4595-98c1-f5b5c19962d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4cb436-f27a-457d-b5ce-5c784c088ef0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aced3e3-192a-412e-8a92-13f61806863e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4042773e-1d04-4c1f-9194-843bc861b10c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb9f052-c703-4645-8329-2271fc5321a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2296769a-31aa-410d-8d57-db8054059f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb7e0fc-5b0c-4d9c-9f11-14e53f9c8f2e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d136296a-3561-42cf-a1cd-a612d9d48b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f002296-94df-4403-8f0d-47e238be3bc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c0b13d-a810-4f37-a299-1d1402e466e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa348299-a376-427d-b0d5-544103c7b5fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11190602-0741-4138-bbc4-c2c9607ca011",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f914ce25-5f8f-42ea-aaa2-1dcc716bcc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f03a8cb-120d-49d2-8f94-d7a2ffc27411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc02d9e-b7d1-435f-88f3-f9471efd6f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c746bc75-704a-4017-8018-6473eb134dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f361d3-36ea-43f2-a6f4-60574afc7fcc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00cb1d3-95c0-48e2-9855-ab1e3d8fd9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c28d6665-b55b-4d9a-92a3-428a22e806fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8abd565f-0997-4e91-ae7b-8369d7c1b78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "601ec013-68ed-435f-b3d6-97df9af060c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a51e9054-aeaa-4dc1-bf47-d408d80f498f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70e85b6-3cd8-4cbf-ad08-03397618abd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a1864da-263c-4d42-bd9d-63da3841f3f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf23c80d-23e8-434d-8603-db05a682607e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9336ce96-a1e4-401d-96d9-2e150db41213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a74fb26-14fd-4db9-8fd5-fcae566b06ff",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3fefa0-8dd5-4b7d-a8a1-30c9da817bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd5c3e9b-c005-451f-bb21-fc1010ba4bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace1ce4a-a91a-4777-9f5c-9fffe1f0070e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "411f05b2-a686-4183-be3c-a1d66a8a52a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29684d49-4655-4f6b-b7fc-4cc39763b042",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b24b6a-0617-4e1d-9768-5b3b41809d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b39ed5-9732-46af-9402-6fff531e5147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41fb20b-ba16-4ff2-bde0-d4daffb3f76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "018ee2ee-cf70-4113-8aa9-31a7d9a37b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa24194e-9586-490d-b7c9-5d64479d627e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a01f8b-6e21-4811-9f5f-05eb76cb94bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c27e486f-71a4-43ca-ba6f-1123509ccdc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a2193e-15aa-4712-9958-9f5568923297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "982d9ec6-6c10-4447-84b2-9292172411a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7ded78-4b5f-4a1d-b524-19404f980d29",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f883f0a-f4ec-4e5d-a317-fe4d70fbbeb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a377c3b0-f172-49cb-98ae-fa65912d108f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b335b6-6b78-4a8b-8aca-cf10bcf3393c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50e5bd27-392b-4f7f-bbe9-50b3b788536d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6fff12-c354-44a1-8ffe-d76f3cf6bf0f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e9d739-8fbc-499d-aac3-896c09f5422d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13dad3a6-8b9d-4218-b33d-a162b52a07ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51516b1-a279-4296-8ec0-ac9d1a112a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f2b09059-6625-4c17-8e9a-698b8a6d2a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5880cdd-66a2-4b8c-abb3-f5cdf59595c5",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc54bb4-c667-4836-91ff-254589195bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e2843b-66ca-44b2-b2ed-ecac6a3f04ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dab3342-2275-46c3-9047-b673e1103520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "668a5c75-4bc7-4ad4-ac47-fb5019e7179f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6fc6d4-5af9-4ee8-b255-c8848fe66be2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10fd1962-975e-4d10-a40d-8d6e373d3bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caadb1c2-5089-4e5c-97d2-f93c41b3a2f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3904296f-8b2f-4770-be02-683fb99a8b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a72da37-5c5a-4c78-a39c-e448099522f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5636f707-acdd-464b-abb0-2b972c74056b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53446f48-f2f1-472f-beaa-259a93100ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55b48b3e-271a-4585-8504-98b7164a9d11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87c4e02-6f8e-4a77-be05-17af91272951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "78c249c8-d9a9-4f4d-9416-c06261297c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab765cac-14c4-4962-855b-f1d1d57b9121",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4dc73f-0d58-4676-9dfb-9f5ceddf8f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3494d407-a480-475e-ab75-1ea74aae81c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "842334d3-00d7-4b82-aa9a-00c848de5000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f29c87a-1f04-46f6-a247-b60dcbc4673a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21921430-ad89-4130-8fa5-7feda2fb41da",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4676b65-af20-4c25-a566-074728a7474c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5355b07-b1ce-4da4-b8e9-84fca9a59767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db7f5ff-1864-4e06-9d57-9cf8672a2e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bb8ac7b-443e-4130-a482-77b5d04a5e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147bbab4-de6c-4107-bceb-d626e64d1720",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0135f88-6135-4fc3-8564-15be2d2d33b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e317d92-6b33-44bf-b1ca-691d725a2ccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4820ac47-3163-4f2b-a5b2-82a66496961b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d24ad506-f2ca-4af5-9494-9d6d3012bd8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba68141-b6a1-43c4-b226-00f60a4c8ee2",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf6ce5d-0b44-45e4-9046-79ab7966a6b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3d3d65-b575-4563-bf01-cfed683aa986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e25316-171b-41be-97c6-8acf3c139faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d934bf3-b646-4f19-82ef-87bc353d1920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a7bd2c-8afb-4b88-bf91-d23e6a25adb4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91919748-3812-4be6-9c4f-db2c98c1a78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5c5c67a-957c-44b7-b3b0-59fe3115499b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88fa953d-e9c1-4f7d-84da-18e09ce5d968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb506cf1-6ac1-47bc-8fae-dfc11ee7e6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52b8fc8-eb17-4eb8-ae91-ccb941ec7eae",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0723f7fc-ca53-4cd2-89d3-b6095b45d12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "541dc88e-e85c-4746-a551-753c308dad67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "969884e4-2883-4c8a-9d60-8c3385aded41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "932b7d58-79b9-4f55-92f7-2bd9dd83cb63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5705539e-4579-43d8-86d4-9bcdae72e1f2",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612a216f-3e9d-4c3e-bb13-c0f603428d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e391c615-accc-4449-bac4-78a8a294bba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17292bab-5ed7-4811-b545-ba37182178e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d310b931-c3e8-4825-a6db-8ccdad01acec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5d5117-223f-402a-a14d-22d3e546154d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58ee2b1-5f65-4c1d-8936-1e401dcc663e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc916ba6-d920-4a23-8a26-342139a8c85d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e213a1e2-ca8c-46f6-be90-91b87821a1a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "064396ec-a3ce-4848-8771-d3abd5b597b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c18e133-1eff-488c-b849-f71085650e9c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "411744ca-94b6-4c88-bd2a-c0b1a70307ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0999bf20-d00c-4a14-99e2-7e11a9d1700d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5014e30c-272f-4df9-b02f-0b55e3f624ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea8acad6-4c05-4e60-9889-7df369628d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2255df06-1575-40a3-b9ee-8beb3d71da98",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26881a3e-2ac3-4ba7-87b6-0f78edc3e206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d9b689d-6ddf-414f-a544-4737a5cff00f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960127fb-534f-479b-8a85-d0a64e69914a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f7e0beb8-4155-4b60-aeed-75ab852a2bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f44a30b-b5aa-40ea-afb3-388392e99e9c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98dd26e6-5adc-40b3-ae8e-a7b048732138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b34b7ab-7a5b-4e0b-826e-29ce08de3438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67688417-9f35-49ee-ad11-bf6191faeae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "12c199bd-6547-4111-bbee-f534e6807109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f88329-de04-49a9-98eb-6725be0a271a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b127e06e-5e32-40d4-9121-7a1631016171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07720f1c-f776-4c49-858d-3ef2cc2a24c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "decfa442-a71d-48f4-88d0-0dc146b2c481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "924a7d2e-285f-49f1-b909-4452c7f0d300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2ce814-f931-4706-9d10-7e77fb759ae9",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dba8a7d-087f-4b65-8cea-e7d8d2794de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a80e0c-bd3b-4d74-ac6a-aa77bd668a07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2236e127-cf23-4108-b5db-ca482548ebf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c557ed01-7ff0-488e-a207-4b990cd571fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15993f0d-86f7-4529-8193-ba93956868bc",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d1e91eb-fc97-47fa-97e8-b95218c0ea45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92caeb0b-d6ff-4340-b0aa-b9291228a30a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e2b205-0787-4d81-9113-081d8e0da108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbbbe631-8e99-4a79-9ae4-c14f39531f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "753faaf2-7c9b-4d39-a32b-8748afa95467",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fb2f11d-61d6-47cf-886b-eb3a52f5c8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "172df47b-7dd7-4485-ae69-e763ba8eeb11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cead3a2d-3f0d-4efb-b19f-c4fc3ee1b314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d6454e0b-b45c-4af9-96d2-47c9943fad3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ed16f3-fd01-47fb-b369-b788a3a91142",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d32e39b-60c4-4aef-bc8d-d6141bba1b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcee98d7-b3b6-45ba-bb7e-7c69d30b86f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e8d356-f1e3-4c16-bfd8-a13cc3e7f54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec4fe66b-d05e-4369-92db-54f07c58d9b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5fdd971-7122-4743-8d7d-e1b74c213d03",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f5acf5-926f-47f4-b6e9-1c8aed1a998c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5034ad1-7239-4974-b5d0-d15c0a4d2c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e3435cf-0e43-4936-ad6a-37dd07d4bc63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8ed9159-c7c1-40f7-a1e6-863421920957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1341be7d-2739-43e8-9467-ec02f8bb9e42",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0e4279-97e7-4230-bf80-54069782c6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54fcc89a-f91c-4456-a250-9cdb89b591c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f288ad7-d5bc-47a1-a93d-4c6d1dff5d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "36d82bd8-884b-432b-b374-645a86ca87f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3900f9db-b495-45da-b8b4-c45f67eefd83",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c621e3-0d38-43c1-bcba-417f75ad7efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f7fd97b-8785-4ee8-a671-4e744a57ebf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd43a18-3133-4964-bbbf-dd0183a79b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e01d4283-732f-46f6-aaea-f830fb01815e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e60fda15-d76c-4413-b948-9638ff2cd993",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab72fae-01d0-485f-a0a5-85418650438f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3e157bd-0857-4789-b43c-d0692adbdba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ade2a20-2a30-4cfb-b88b-e9138a89ac39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "329e5984-de5f-403f-ba49-7278bdeab15a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f700478f-8ed2-4f71-9a92-e9ce9543812a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab54bde4-222d-4007-b705-1b646400e656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bbb0f13-fd3d-4616-9df8-3bcfbccba878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e041fb61-421b-4520-8f53-b8309f52d209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5550fc6f-c8fe-4e35-86bb-a8dfd009c49f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51c95f0-7b2c-4980-9e31-8c8697f8b63c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce80d45a-e214-4753-8ee5-e5b4cca93a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2da01b73-0ca7-4ac8-b1e6-f9ce4c868f17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4721df0-9780-4a4a-94ac-63cb1a5c6e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f97ef932-ee09-4e24-a693-fe0196abda5a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "245c0b62-3d12-4aa6-a2de-0667e55d4ad6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d62c9c05-d461-465c-9909-b7834ccab551",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73458cd-c12c-4548-9661-4f80623b0f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23c28be6-8aa2-4e72-ac86-45322e2aad64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ae4fa5-a83f-46f5-b28f-6d879521ac1d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70dfbb33-f9f8-45e3-b49e-8efbdb0bfaaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b624dd3-eb88-4f1d-939f-197e7a74be9a",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bfee429-4b53-42e8-b48c-188455e6056f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b12c335-af54-46db-b6ec-d5119c7867ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36509053-1c68-4ff3-b5f9-d42909f71129",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a90084d-b3fe-4b2a-886a-7a712e92155b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56af3bb4-521d-4c76-a122-7b73f005760a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e542aeb-defc-4aac-bc42-a328a8f25e05"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee7582d4-1cd8-4781-99c6-6696ee746822",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5242081-f2f7-4a2a-9d43-524028738f11"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9cbfa6a8-982e-43a8-b2d0-5ce8f6e1f5ab",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f64dc711-99da-47a8-aced-bf207b652ffc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2c7f8d4-cbc5-408c-828f-dad8c0d49c48",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "58b078ef-e36a-4def-b609-e9869d86cea2"
                }
              }
            ]
          },
          {
            "id": "9042e87e-187d-4847-8214-20eab9357707",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ac81f724-4bb9-4dc9-8699-2299fc1372bc",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ee46f62-e085-42b7-b847-c8c15b6bc13f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9854371f-6ab6-449f-b09d-fe150a30fc11"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "375df2ed-ca91-458a-b18a-0699bc36ad92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fbedf4db-aee1-4648-99af-2b1bbcb4b32d"
                    }
                  }
                ]
              },
              {
                "id": "cd10cfd1-88dd-469a-ae2a-e381b0168ca1",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "59d0315c-f142-48fd-ad8c-9cebba8af770",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c7bdeb06-f945-4779-9bc6-1a06d26abfd1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7eff41a-2772-4257-9d8e-8afde944246d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b96c48f6-13b8-4df3-8b22-7c082aa1fca3"
                    }
                  }
                ]
              },
              {
                "id": "bec74b4f-be59-47b9-abee-ebe02a950ccf",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d2be606-0ef8-4cfd-b20d-3722f66feaaf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9d951702-60a8-4ad6-b9ab-1aeeb52810eb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8011958a-9aa3-4aee-a4e8-ff5a52d32b9e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c46f56e0-e8e5-44bc-8fd6-c78278267a48"
                    }
                  }
                ]
              },
              {
                "id": "b10e6d7e-3cfc-428c-94c7-a8f236695010",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cce13eca-16c9-4b2a-9f02-12b3376eea58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3e86de2e-27ed-464c-a0c5-cfd8860c05ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99758fec-3e94-46d2-ac86-eaa1bd6a3267",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "db632207-a637-41aa-a80a-944acd964d2c"
                    }
                  }
                ]
              },
              {
                "id": "115e001e-bb6c-4b5e-8563-ebd2445bab28",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "844eadcc-7548-4caa-9080-b84a1f4d8082",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "abf564fa-05e8-4282-b162-a0676559336f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ee138d0-c8d1-4452-839f-ae10675f0e4f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "af8fbd9e-a6e2-4803-be30-f96486dd9979"
                    }
                  }
                ]
              },
              {
                "id": "0e2a28a8-31c7-4bee-ab27-3705d62736a0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd2844f1-97a0-4074-858a-5ab4e229ecf6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dfb77586-1931-4bc3-9a32-8b41705dae3e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3598c0aa-8c2a-4c9b-8a18-e10928f185eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fc3c943b-2063-4aa3-b7aa-73a1fc26ec55"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b0491d88-b371-4765-868d-9fb1c0b3442a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "26d7dfa3-bc8c-48db-9fa2-94f46b003324"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dba54b42-fffb-4e55-815b-bc7ea9e056a1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "45b8cb41-bffd-4068-acfb-c68ccd733a5e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "47f09119-ded0-44f5-a7ef-6a738f3d4e19",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "6a0a3437-8fac-41c9-aa66-8d1ccdca6a27"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ed474d0c-676d-479b-af09-01d54a5076ff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eef620e2-8277-4cbc-a460-c656da8ea890"
            }
          }
        ]
      },
      {
        "id": "86a8c9fa-fb0c-412c-ab6d-0a20b2a053b1",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c43e598d-6fc1-4b33-a57d-f204b99b0690",
            "name": "Negative Testing",
            "item": [
              {
                "id": "19686195-e8e6-4c4a-ae13-c98e963ebb2e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c5d78d8a-a511-48ee-8299-6e9856181fe8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79eb36f5-879a-4a4b-91fb-b213dcd50e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28738bd1-712b-4acb-8ae2-0ed0568f5146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad2aa52-bcdb-4d36-954c-9483a227f651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1838a121-8fb3-47df-8c0e-77a50e5bb6b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1059016-5e28-4f91-8e90-96cc19dd629e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc91217-a5cd-4318-930c-d61f24a5311c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc466cd-389e-4b41-ad7f-be1d8378dbe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc38f52-ec23-486f-bc64-7b18f7487e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8217af6-954a-416d-a4bf-d6e1aff0c2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c541af94-4cc8-47ef-82f7-864ff1afd2bc",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3cee95-4a11-4b16-bf94-0ff379b3a0c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd2a7c00-7162-4850-9072-956a37d180c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85df3f3c-bed8-4a63-bb81-19fc94d7febc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ededa17d-708a-48e5-98ab-6b0d7541ec1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d414a8e-847c-411f-8e2f-2c5ec892df53",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d07086-64c3-4d0b-8f30-4ab1ac86c96a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe904e6-5311-493e-bcc8-1783ae065b2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaafcd9a-bec2-454d-96c1-d83a42dc74e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdd1fb38-b079-4719-9fd6-2f0a4f70c0e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7fe9d5-18e3-4274-977d-974a7818948d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2079c90-cbb2-4519-9fe0-5f471d299f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb61dc01-875d-4292-9cd2-9839be4c290c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d6c314-a8f0-4253-9016-d76a913d0aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3480a88c-ec59-4938-8a34-19781c6abddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08f96fb-af99-480f-bdfe-51309dc7879d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be060b7-00dc-4052-9a5e-ec976b542024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a6a0c60-cdb2-4419-92af-bdab2b5b3b6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef893e7-d73c-4364-80e9-75a8ddded6d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f131fb52-0d0b-43a1-ab7d-5db5d9997aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f08490-ba9c-4b78-b1d9-534e6a8094bf",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc12166-daa4-4484-916a-7bf3cd4ef947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "663ab3ad-89d4-4bc0-8aea-e5686e95e078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed991cc7-4b61-472f-b5d3-0ff4d36972fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd365967-0541-43ff-9c30-795f752117ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32206510-d32b-4bbb-bb06-3e2eff826391",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af7558e-cb23-4c8d-ad56-ee0c7afde6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef61a59f-5a88-4111-babd-206fc86a7cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce627990-0936-4fea-a45b-da3d65eaab28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e79bd5c0-9b16-4edb-97fd-4f35077f67a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a6048b-c2b3-49e3-80cf-125a8e858e8c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a4c5d5-4f6d-42fa-9d7b-135c20979e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4102278b-8a79-4404-ac85-a5fb02c10cba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def721b0-f72e-41d5-94f3-ace233820488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c2f398c-e7b6-4e56-87ca-a6109d911a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da3e426a-40d9-4459-8263-ccc3a5a918d5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "682bf3a3-e9a4-4207-998d-961af9e5ff0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae0d9c1-3a17-4470-8a08-6b08aa508a28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ec7a2d-2755-415a-9763-7d14acf02dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75f36533-ab59-4b2f-b37a-9197dca0758b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb17e70-5488-4140-9463-0043803c418c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f46bbe-ae58-4f62-941b-b2c260e0ae0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "626b9900-e753-4191-9a52-e5370bc2d8dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c103553d-e887-4ca0-a4d3-5f4b30f90a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "98745d4e-86f1-4f86-838f-0d6dab2c5860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbcadb6d-f2d1-4bc1-9691-072adfb822c4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43971ed6-44cc-4734-a088-f38af07a4de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db35f856-9536-4862-a3c5-b0c0783921f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5063bd28-510f-479f-bd7d-cf8fddb684c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fabaf2fd-8e5d-4cf3-9c3b-b2a6814120ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2e5f31-a7cc-4e38-ba97-ffeaeb14330a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85093729-b6cb-4ffe-8b10-bfca1cc3c429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6388544-7af1-4fa6-ba30-a3b65eed485d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5450b4-5234-43f9-a8f9-e9bb13f1006c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e3975d6-94e0-4fd3-8aef-ff41d2cba04f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "366df85f-b919-4bbe-ba71-715e3beec59a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b95679c-271d-4d17-9e35-5c2886eda697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ee6cb5-5718-4ac6-9858-9995b68b018b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679accf1-6ba0-47c4-a7df-f91727685830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb63e692-0578-45cf-9757-7bb6744f5838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dec1fe1-87b3-4a9d-975b-f875a4789fa9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6fde48d-26f6-42b2-9045-b63ffd0b2f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc52c42a-4d0c-47b3-addf-a8f683bda377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3409b22f-8f51-480f-a94f-ffdea79ee12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1aa9c1f-9c67-4d4f-aae6-184254ee201d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05681e57-538a-404d-b978-4676da619fdf",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e090cce4-b5cc-4740-bda8-95d6b5e3bd75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ab402c-354f-41a4-9306-0bc1f443f38c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "096873f7-92b5-488b-8119-82e13ebf1626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "287a6926-348c-4f84-96d8-10f3bbd06b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "478f1afb-ae9a-4534-8b5a-40a9bd3b6c5f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dbcdaae-63fc-4976-9ca2-cde6a1033277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6cdc0c9-2f10-4473-a7a6-5d084d7fb0e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b99f9a-dc0c-4741-88c4-0a25fb22744e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "17fd7dba-a0e5-4b8d-af59-28ce521f72a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "798ee736-4f7a-47b0-a9a8-cae98fbf4c56",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "765c151c-abeb-478d-b1f1-2c701f13534a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e937d8f-8e4d-4a7c-a27f-33da3859c80d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48778942-5a1b-47a9-942e-8381d3efef07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "57793dc4-1ee5-4ca9-ad1e-156350159932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb302d0-d6df-4752-a900-27e03c24edf2",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53412552-ae32-43af-8e69-feebbf089cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff4e0912-4588-41d2-a5a9-cb394a4b9884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2fd587-bbfc-458d-9557-935833057311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "051a0c6f-b7e8-4772-b6b6-cd7837cc668e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f00d4c7-cf04-472a-91ef-a1d1a6dc15a9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4973f837-ba84-4dc0-80bc-aa2dccc063c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f9b385-e38f-479b-ac9e-428f2c09d930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c04b4a-91c1-4010-82d2-6b76dec408d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ec9c05b-f56f-4ba3-9df8-4707840baae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1053577-fd7a-48db-a4cc-e28ca0b096d3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5de66b5-38c9-4795-837c-f261e4c934d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "378c5c6f-8a48-4068-806e-749e38dce398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0160d8-c755-442f-ba54-7e73c0f877f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb7e8955-f374-4fff-a2f3-d4e8d612f137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c2b393-dbfa-4a11-b463-bc06d1f9fbc2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ad2d01-37b0-486a-8123-bb3b5df286c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b2a331d-ad10-431b-a672-e2b5fb22d6dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7434025-5bbe-4829-94b9-fa8ea7336638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "231b31e6-7f00-4d13-9aae-970e353f8554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c91b30-080d-44d1-92e6-ce22d2dd7a51",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde847b2-7996-4953-aa7d-6e1f082c8cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b9cfcd1-7c62-4c3e-b776-6d2512aacd0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4667a6f0-d5de-43cf-9b84-e465b9651b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c97aad9-9ef4-4112-8493-9b7c16500681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e3f48c-f6da-4712-8bc3-48d1bb03a572",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31670b9b-9b18-4e31-bdc7-6caf02033d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92ac5eae-fac4-4196-8cca-4e02140b91ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195adc20-c75d-4730-be09-7ee9ea750ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4eff2a95-92ef-4d33-93ea-c306c1a46cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c101d44-c6a2-4b14-b3d0-19e99ad646e5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c626a95-83f1-494d-b5a3-a0768e444f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab0ba564-fbeb-4848-b225-3e5dd11f666c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30de697e-86c2-479b-ae67-703c42729e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3f7fa81-96dc-4fc4-b7b3-d0e9e0fb3718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f84423-0077-41b5-b9ca-333ef67bd13b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ff1e8e-a866-4093-9e90-618c595a3c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "208dacf4-5106-4861-9855-d497eb8fa02d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca1d1c8-ee66-40ac-9560-2f0172436c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68d53ea9-3e94-4583-9370-e663f6003d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f502c5-801c-4f51-8f3e-98d542c4e1e1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc5fab0-b8ae-4138-a5b6-25792b5488cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a021de7a-a401-461f-bcae-f7ac6d85382d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db80073-016f-43e2-8af0-8ae9519130c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c27a273-e14a-40a2-8ddb-198081780140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43873371-197f-444c-80c1-715efd5afff8",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ccd23d0-4473-45c0-a772-fc8fd57ab451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "594c00f4-08a8-4058-8773-63d489f7d444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08694d0-0a2a-462d-a71a-11e7b6981121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40c5a240-4d8c-4155-aecf-0a9e5c30cf8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8103ab-0794-4b25-80bb-99e0e071a0e5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ac6dd5-0c33-406e-a8b6-20fc9d601172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49f53eb6-c580-4553-a728-1ab05d034f76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718e6664-60a3-4d6b-be35-dca1c9b9c6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33ae50b2-ca66-4a29-bb65-5df58fbdad4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20bdf3be-d808-47b5-a222-7c6c7b1c0186",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fce56da-230b-4727-a91b-0f893f8e87b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da6dad78-5844-43e0-b8f1-3e6fe7ae47af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd800f45-a38a-4608-bfbb-6541ff1de9a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec062b71-80c8-4de5-902b-c0e667633d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651d6967-bb2d-443b-90b1-18479a243a15",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29681b9-04f8-454b-ade2-15a41a05fc02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceafa034-1822-4624-a4b5-f26ff912ac10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f3f1f8-794d-417b-b044-7f15ca8a3248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "655315e0-7ecf-4531-b217-97130023b018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fba8127-6d1a-4004-852f-15081219ff8c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f59b88-ddc4-47c2-afe0-06beba57740b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8c18d48-d871-454b-b1a2-a35249858bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54390b3d-aa93-401c-9acd-10645f2ffa8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ca53231-7280-40ea-a682-ed2622c492d5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c8dfc95c-9f23-4e56-a9a9-5967cce48497",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0d48045a-b5ad-418f-bb62-aac13ea0a2dc",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e715f14-f56c-4a54-a312-cab14d66364b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8ec24c71-1066-4814-92eb-52c40bd6e0dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f8ae0a-b23a-430a-92a5-5eb254f696df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85e820c4-926b-4643-a016-1b45d96bace6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265820c3-4cf4-4efb-8411-b4b4a5c09095",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab218bc-c1f0-4846-b50f-7eff1dfbf11b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d0467b97-49c6-49a0-a5fa-ea832085cbe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2fe2738-dac9-444d-9bdf-046f5aed9b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b4d8f23-e711-4de2-b33e-c1607ab71d54"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81f340c7-a76b-45b3-93e3-b5bbf973473b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3febd34f-8464-4581-b4ba-b867b6e2ddf4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "09700456-06af-4cb2-93a7-4ce4c1cb1270",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa7993be-0eec-4cb0-9971-d909bb8a9fc2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf41a638-f8a3-4bf4-84a4-1a5bb8a020e6",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b34b120d-a2f0-47ab-b661-c6fe42009ee6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a58f1c26-3a21-4faa-8912-e9e39e00c5ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f1903d77-052f-4f9b-aa4f-8916b09dadb2"
            }
          }
        ]
      },
      {
        "id": "b39bbf8f-9784-4044-871c-5f735bef7eb7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "383df77c-6a0a-4b87-ac51-3f7790158af3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1066911c-9ede-489f-af0c-a6617b366a4c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d5b3616c-7081-4c92-96c9-ee3dc842f063",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9ea971-2234-43a8-9945-96f89c8bdfd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d496face-a2ea-4d42-a8cd-4fd398ea3749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d120a37-02f7-4eca-aa7e-aa2390179cfe",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88371b0c-aa5f-49a0-ac0f-b35aadab5dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "598a634f-54d4-486c-a908-0d8b56e23532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe22dbee-4b15-4c84-ae6d-0dcb23bdadb2",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4e2147-9690-4d8d-826a-a9bf30f83f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36db91c4-7e5c-4591-b5d2-2dfaf41fea71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6debb06-2f99-472d-9f95-dd923476648c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59bbdf92-e7ab-44b7-a9ce-04fde4215e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24a77c21-8b9c-45a2-b0d4-e4c6c2358804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e4b745-1fe3-418f-80f1-75991aba5f77",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98266b3e-9042-43f6-ab52-54c2c79f1c55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c78e834a-c114-4a9f-958d-6d8c565a7d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb42ec65-60b1-4cfc-a3d2-972139435cee",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "141c560b-0efa-4993-9e95-fee0f59e7c19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4341b85-1ea2-42c9-97c0-72e5f035a9b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f28c28b-663e-451e-acaf-b84a4ed1bd1c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bff5e70-90d9-4dbd-8af6-0dba3a875c28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4e3b42b-0411-4723-af15-cf97a6a6a4ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bcccae0-8622-41b6-b10c-348fc18d12c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a1b3a57-87c3-4727-93b4-f50e6a6be48b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d625ca-c655-43cd-bc04-7857420ffe99",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95031136-9ac8-47d7-bd89-5c122d51527f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43e6e371-f6e2-47ea-8c46-dbef126fdfe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9239d3-af77-42dd-a874-f8a826a31364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0841260a-933b-47c8-a18d-f08024149d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "381858d6-bb4f-4b0a-a2ac-dfa27fa58d8e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24eb71a2-7c56-4f1b-896a-bf1ebdfee3a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c4c6b31-b551-4794-9fa3-acdb41a4b77d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25745edd-410a-42a5-8dab-e8dad4550985",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7f9c160-ce31-4c6b-a15a-3ea7f978f520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614e6609-0411-4f7d-92c1-9cda3c6402e1",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac098049-54d3-4b62-929e-8e2b47a07d77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2e359b1-6a5f-4efc-98c3-cc04e6491bcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ae725d-ae5d-42e7-93fb-38cf9183929d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55d2a1e8-5748-40b6-9492-5fe46358d910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae84d93-1ec8-4bea-be04-b1f3006a6d33",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc3064ec-2a02-4d74-9fc0-3f72626af973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40c0010a-8b47-49aa-870d-be12005176d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ff5f08-3b91-492a-a3b9-f766e507e2bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aa1fd81-691b-48e4-a91a-d68c97ae7c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8b8a88-9dbe-4b22-a774-f8ae9b0f91af",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a8a87b-d2c0-452e-8950-43d29bda934e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc960b2-a37a-4ba2-af14-14144d7ba4af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ff4943-76c9-4980-95e3-d6925d7e8ca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fe8c418-0dab-4c42-8b21-d95739155a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da960a1-3342-4a98-93b9-aa31e57a4a87",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5e4722-af64-4a6e-8b77-99ceedbbe79e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76c5dbdd-c1e3-40a4-a6ff-aa0144e3323f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "949a9e35-548a-49f0-b4a4-d9b2e8394f50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e72ef79-7f79-4ded-abf3-f07ff9571520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b97a8924-210b-40c3-8e10-2dac61423f89",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74caeacc-7ef5-49aa-acbc-ad81e57df6e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe223fec-2550-476a-b640-74e25a921be6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6707f669-437b-49cb-a776-92bfcacd6330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b901b113-c6cc-4f78-8f4b-db1526cc9177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228bda10-e92e-4060-8089-764eeeb52a75",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94587409-d9e7-4070-8fef-aa94bfa64699",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a465ed8d-247a-422e-b850-c02bb290d4e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3c61ea-0fec-4bd7-8896-77eaa254c96e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e47661c-1dc8-4af0-90e1-30cddb37cae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad605a0-7bfa-4e1b-9ad6-3c154f4fdf3d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db7fd3a-1c52-408f-9b96-e6c726730eb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59fa4d42-daf5-42d1-82e5-554a289e9d2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d1f594c-b701-40e7-a760-dc35ca158c48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbac6a32-c915-404e-9b91-732aaf13e997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b35c39-de33-4a00-9b3c-f158706819ed",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fad23f6-f11a-4f64-801a-423336117df5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c1cb5c2-b1d0-4a20-bf17-910167f0f70b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a29403b-e824-4721-8838-2db7953644e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9070a2ca-bacc-4209-b6a3-43564eefa887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5e2b3b-aab2-42e9-96b4-5cf3c5a8783d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb4176e-32f9-4a66-995b-1a9e9921ec0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5338af8d-367c-40b4-9d8e-d92413d1e3ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61db5af0-b504-4f02-aa00-1e0176f28152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06975c3d-b72b-46b4-9bcb-bf7c00a6f6f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c2ae019-390d-45f6-b2f4-8a49539fbad4",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba43ad95-3da5-4efd-8d23-ff782a7ca527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "520183ce-dd93-4b8e-be4b-aaaa45c1a709"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39db618b-ddc5-45a6-a7d3-bba90ed4d33d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ebd6543-cae2-4380-a95e-651b0d0c6e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f86866-f075-4810-a266-d86c6041d2ab",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707c3ba4-cfa6-4544-8fe4-3b656814678b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7e4114c-a4a3-4fe8-ad36-3e9e87628275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b827fb9-d5af-47d0-a1f5-87c1464ae647",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e199a636-eadf-455d-ae2c-d3be5a4d370a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493f0005-f35a-4cae-8a66-3f980c986f7f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7902315e-899a-4c29-9b58-06dced2e2959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e1a6bc-f02b-43b5-8356-7e53e2952b2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b063ed0-8b5d-486e-9685-435f1ac2d11c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29fcf63c-2752-4a1f-94c0-6e46e1e05ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27d6a5d-d554-4d84-a185-fc7ffc120acd",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f82ecd1c-a5b2-4ed8-9d03-536a8c198754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5b48526-96b1-4a06-9b4c-3b5bb151c4d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "297513ec-534f-4951-81e9-ff36fb321eba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e01197c-8019-4723-8366-21d081c7815b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b47990-d45b-49d6-8f4b-59724fe416d3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a427de5-1ccc-4332-83b9-7ed1747b3658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baff4299-f4f8-4da6-ac83-2fb5c0002ad5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a06ca9aa-b2aa-47a6-88e5-d937ca2a3d03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "661f016c-1c07-47f3-848b-52a16af4acac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09150031-7d94-4bc1-94a4-4d65baed9677",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794ad9c9-0fef-4dc8-a026-afd7d2d4fdc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e352d807-f0c6-47f3-89ac-68f53c35df17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c8211c-4a99-4d49-ac48-bf0c23ee89a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cd391bf-f5cb-45e4-ba67-2d6acfb4bb7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "499208e0-a864-44df-bf8e-71c4080cdfe3",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3d0ac0-07fa-4651-8c19-a0fa5e34b216",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11b3cfc0-8d81-48e5-a3fb-79b9cf3eafe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "157e93bc-a6b9-4a11-ab4c-b712e5065ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a7072a0-e0fb-4e64-aa1b-7d826c2fb0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f190f2-18bd-45bd-8a85-1c9c687fbee1",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56d9582-80b5-48cd-8cba-610b6b1a9e16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0518c039-5f32-4b87-a968-4f3882a202c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31667a9d-4617-42aa-a5fd-1b9cd520f2ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "564a4789-92e3-4a8d-b72c-010cf37c0fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e583c741-8046-466e-9b69-f50530218711",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b37355-5dfd-4e3d-9a0a-257aa996195d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4265e8d1-5abc-4168-b2b0-2d92c861595b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b907ee0-1555-4161-a305-e053695515c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdaf82a0-c4a1-48d2-90af-5cac94b8ce97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf47daa-76fd-469e-9159-59d9ce25322b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cef952d-e1ae-4ec7-9212-3a8a187d188a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15f33168-8e6c-4a6c-ad0a-ac67b54503e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df247ff0-17b3-4f72-ba5e-dbde2da53964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fd1075a-af6f-4330-ba51-3e1d7d3fb24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "680aecd4-6863-4fdd-9d67-af758f388b46",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afce4d84-6c04-4c30-a0a0-75d140c50198",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9922e941-7176-464a-b293-9ee469fa68f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ac5627-86e4-4cf8-9d15-a002c2c6fa5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e51deb5-8314-4ba7-a3c4-ac67c5b7d7f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa58692-3ab4-49bb-a7fe-f0bca17afd8b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df7db85b-8aac-4569-9237-4efff1476375",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41642512-fed7-4954-9b5b-febcf718fbcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9f4232-8e8a-42c7-a496-74a7142c69e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43d9f800-7455-41dd-bebc-f3a263550587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6394da8-7b2f-45ed-9edd-22f6ace146c4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe711e1-2ae0-4ee4-837d-d0ebd93d63ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8940fe92-5230-433e-ab11-9648166eae2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0596f34-5862-419b-962e-59a8087a9899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "728a3b88-9e63-4fb7-8f4b-fcf0ac23b618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d219310-5706-46c4-9d54-c81873c1ac8c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ac98e0-1007-4d5b-bcfd-0c70ebf5ff46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65109c6f-cd58-4da6-95ff-20ff6c6f675f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99893e28-2df2-407a-8608-bcbf7ae50fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db274f45-932e-4ecd-b243-8b0be6dba633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832b67cd-a2d9-4d49-a2a8-ea4bf4a129e8",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89801f02-c42a-45cb-9d64-2bdf05071549",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74f04a75-e7ad-4d2e-b4bc-c5bb18baf722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5332aaa-75bf-47dc-9d49-5e6e90583589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf4eef9a-a382-4c79-afb5-7dea5d0cdca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70636160-a7dc-4111-9376-196cb76ca3ec",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a50fca-a0eb-4450-82a9-48e75d12bb84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c89a98f-06ac-4125-9303-533650a38cdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ed5e8a-1d47-4055-93a7-a825c97d2c54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e06c1dc-1b87-471d-9adf-84084258dfc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5e3e42-0dca-4490-96bf-84159c118b06",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fbc9974-8866-48db-a87b-a25aa3243f67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "019f9d77-3d64-4579-bff9-2d701fd6082c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f6c49e-8bca-430b-a701-fd70e78277e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c87d7a66-3ca5-47bb-a70f-37886ca0a901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8f6694-7256-4054-91d7-56c811a406eb",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b58d77ec-4861-42a6-8408-ab7b379af479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0970da33-28bc-436c-b1d3-614290b79a24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d269c417-29a9-4644-9f74-051fa85a9cd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69623a93-fea6-4d1c-aa4a-30a2a7713244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd92fab-b2eb-490b-a354-9cce106fbfa6",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47936490-a019-469b-b988-1ab448f7a372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "995a67bf-34bf-4dc6-afac-3850d1fc7cb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9597066-69d0-4a2b-99b9-2d0152c73a3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac5e3978-1dcd-4015-a729-1fc4cc16ab8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a966ed1-d006-4f28-a152-714015975e14",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0daee4-99ac-4fc8-8dc6-b7581fc18aef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac8b54e-d36e-4350-bd1d-5abaa817b962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b36fcc5-4709-4a93-b4a7-2640fe6b81f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d771d298-47a5-4ab5-ae96-16ba2ef0ba7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976133d5-8f72-4ff0-a3d9-ea4ebed793cf",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1193c005-b5f5-4765-bb34-ab4ef03a76fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b06b9de3-6da1-4165-a283-971a88a38f84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fdb246c-1ae9-4363-aa05-c5130cdcc97d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0ee8f72-15eb-414e-962a-f34b8e42fb29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d4090b-14b5-4cdf-843f-a38c8b16e627",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2d0126-5ab6-4f6a-88b2-c78b27ffd1c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7fc608e-d4f4-40ae-9a91-ad00f84fbe96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34feefc-2b82-4747-b5e7-57b01a1fba03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cf46569-9ea6-49c3-b444-00f371d6b628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fafc988d-8a8c-414f-8b2e-2c94c600b827",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b44a1c2-dcc5-44bf-91e9-72a891d53961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbab0539-49ef-4d87-8d09-79f718c37d69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe704f2b-8e17-42cd-a106-d1981d753b71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfc86519-4b7b-4e04-936b-8a809f2d2be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f3c52b-54aa-4131-a4d4-dd7b409c414b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b21314f-8278-4d51-9a2a-4b29c64c8485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d24485a-b762-44b5-8c11-bc50adb96b8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad44872-88d7-4e68-ab2e-11fe48dfa144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cdc4250-7555-486f-bfea-c869db8d7678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e8e34f9-ee93-4ee6-a6f8-a583adc5d3e2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a048f1-b4d5-4057-af27-71e6f6346c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "060a8753-58da-43bd-b098-6ac271595448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16abbfe4-2688-495d-bc74-f59043afe5b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da36a78a-6a99-4a97-ac7d-64ffc1a4e7e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e2f187-3546-43a3-9008-adf3e0f7c365",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f683313-7d13-45a0-af0d-9622c40cc105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ec428d-3010-4b36-827b-a1460a1c833a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3761a9-5a12-462a-8473-fdc93b563a3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d4713e0-dbde-4d48-8973-605dc4d0beaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03de0200-f3d0-4db3-918f-1c5c70452853",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e15d3f1-99e2-4083-918d-af0ee7529252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09ab7f99-b491-4a75-9e99-fbadde208207"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f6df8ba-1eb3-49fa-9f1c-7a9505d7aa2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cabf80ff-78db-40c4-a3ec-6fc654aad527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34dbb9e-5aa8-4e02-b32c-6ff2e779a5d5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef9577d-e7cd-44a1-9b73-dec6ad99d25e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0833a090-284c-4f77-b384-290efabc7d30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "579c59c8-a7fa-47c7-a7f5-2159d3be4581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29a4cb42-5cd0-49f2-8f06-4633053d872f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef6507c8-1d0a-4bf8-b16e-8ac940eba37d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4480c827-4d74-4c3c-9dce-5de686ebb463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be7a677d-a5e0-48ad-a06d-f002b177a1ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1017ad-01ca-4cfe-bae5-acc7415a2ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8297ca90-0993-457e-bdfa-649903c73a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00edfa8d-66a5-4a70-942d-af00f4ea0d7d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf598d4-6a63-4572-93b3-1ad7984339d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd831f47-b579-4238-9bcf-5cba92832a8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17276d1-960e-4b94-9cf0-293398f3d2fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ada28689-5300-41ea-a216-14ebaffa0f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3894c9b-bad4-43d7-adaa-628454175b31",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4341530-6fb5-449c-b7ee-4953e6f91de1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09e7eb1d-7fb7-412d-b450-98f84c144747"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2722b9d-8970-4d97-8bac-5526d42a13a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd16ee53-3137-4e61-b77e-5e35cf014cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f068c5ea-9753-43cb-b302-2904edcb405a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b791240-e0dc-4b12-8bf7-cc6b9edad64d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9a73cf8-1765-4289-b395-c3859032e220"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51da4da3-b554-4b57-8b01-32fb61605210",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d70cb93-ab67-408f-a6e4-c767aa83d9aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b529ccee-7075-4dce-9c2a-723e9cd5c54f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a271639-94ed-4dfc-8aff-a1061d9bcb5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fc22770-4aec-4372-b20c-c4aaf2e574ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3837f3df-2e34-4ca8-bc2a-f2b4a1177b0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a2cb678-956e-4df0-bec0-9111d08b446d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486611d6-6c3a-4aa2-887e-758f7db2b08f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b031c893-b88f-4052-ad9b-c0d9e8dd11d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d57d28bc-6c9e-4960-9177-88967f3401ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e15f06-36ff-4a9c-bf3d-dea09204786c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e446d905-447e-4c4c-afbc-0d318da8d6f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4911478f-5a2d-4bc6-9909-ddbcb59b8414",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1afaba4-8ff3-4e30-9086-e6167d3c86a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfe16fc1-6735-4428-8a66-c43843413073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "471e2d86-b178-4db1-aa8b-9a844af4a7ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8d59750-76b0-4f4d-a4b1-284da6a0ca59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf17f3a-5de5-4803-aa81-801628249676",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba9c815-bed8-41db-b57a-c4bd4ae28beb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4fcde31-228f-41ce-bd79-14c0bf0740d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c72320c-6676-4db4-b14d-76774d6487b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beb09f46-e4f4-407f-b661-e040750c668a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24ffff4-4878-416a-a530-2226fb1cf251",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce7ff39-a8d0-4315-b416-84fec6881000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "913f00c6-ee06-4a7e-966c-22c27e932e6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f115855e-4f26-4296-bb51-32c0c5362906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0edbd153-bdcb-48a0-a3be-3ae20a530585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b274dff-d258-45a1-8560-94965df43183",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f15d9c-f2b3-42bc-9c62-92897683952a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df4eb21f-27de-40dd-b13c-de07ad816501"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0025af39-6545-4f72-a84c-21c55c9b75a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "431218f1-74fd-4c95-81af-0df917c6b265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78db404b-92e5-4a13-a2b2-81348556a6b4",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5089d025-1a04-42f3-9400-ad1677af9436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9324866-44b9-417c-bc09-8e3eca60c987"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb5dc6f2-a933-41b6-a8b0-390a8a3f2511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d5133a7-27e5-4003-82a7-1b3ac855812f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c6690e-4aee-4c22-b083-fe3add30eab9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573bf1b9-d832-4c70-83c9-bf55533b7409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c4365fb-0641-4c73-8325-96acebf6d473"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d6fb0cc-8404-41b5-ba4b-9a0e88cefca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "671c44d4-cfd5-43b9-b48d-fa15ac2c6e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f234413-fd24-42c8-93a6-56eaa380f0f5",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f332348a-d6a1-48ac-8db2-2ab70275ee41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afe9838c-cf5f-4527-82bc-407b2cdd13e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1edacdd3-c148-498c-8f68-b3cb9f2f36b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccbd5c6b-ae3b-4487-b285-c327c30b7e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "105ff7a0-067d-4807-8444-7e2c54364688",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a91a84-040d-4d29-9964-41a55f8c658e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50572f39-870e-437a-b216-15c0067da131"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b1b5f8-de32-496e-8658-15b890b439b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bdf8170-9ace-4974-a0b9-82f53b1b665f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f26b0f5-b2b0-49d3-bffc-44f54cc885b2",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982dacb7-dfe4-4ff3-ac40-48e83a4cb034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aa8c304-0317-42a1-a2eb-c1e53bec6669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c77de60-a2b5-4881-8bb0-1df9d38c4de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0515d12f-f938-430c-8ef5-b8129f334f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a551e3-9806-43b8-af40-4d494d8df221",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8552459a-fba5-4fc7-9ea9-f738ede512d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04e7f6a9-dad5-442d-8379-02cdfed4ace8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aced5f7c-21f4-4539-90ed-d13eb79cb739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66b871a6-07cb-4c4c-ab81-14e8947dd9aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f088354a-ec43-4ca0-a5fc-1d79c44fd153",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1bbc5d-490d-4403-bbd7-ccd42db0abf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4447c1a-6db4-4f64-b0b9-2486630a7773"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f39e10-4c45-4d70-839b-17964cfdfcea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44dfed14-3b55-40da-b27f-25e3e0d0b431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56516697-1148-4138-8901-1855261c6ab0",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d897591-7cc6-47fd-9031-140c83c65dff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16cbe492-4876-42f2-a97a-bf923d522736"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da376264-3fb0-4cf3-b194-8b25ff0dd9c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5902f0c3-c17e-47b7-8730-f5ab945d1f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee40fb2-e7a9-4be1-b892-01b2a736ba49",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a9474d-2aab-4262-b857-a43a92cb622f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ed5bafd-41a9-474b-b307-9643b21d06ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12682f7-061b-404e-957f-a9907d9465e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc81c73e-a366-4335-9899-948dddb466d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89d784e-b1b9-4441-8537-03938e160f7a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ef265f-dae6-4df0-9303-8220b1a990ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bd7f351-7722-4e8a-8442-ec1cd0d3e61b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ceb3294-2f08-4dcb-b2fb-f3cb70f1a1d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5e3337a-d3e6-4f28-9b89-a47cc6a32712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af6953c7-0a2d-42ec-abac-ea4ba3d57351",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b515d76-95dc-432b-a208-1439b820d87c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30f028e1-f9bd-4533-8bb3-9046774fa10c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9660bfc-6de9-425b-9be5-e67e81b215cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0107f7d-278c-4140-b7b1-cba8d7e1e316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a69fad-ef99-40b3-aede-7f3ff01e698e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b00ca56-da96-4971-a870-e7a2c8a138b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83e627b4-f688-4eb6-962c-9ea7caf220b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1dd826-5fde-4b39-9a64-1ce68f1ab9b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1da2c7b-62da-4daf-99a8-bbdc7109a69c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98180c89-3a33-4755-a44b-4b473a6e5594",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f501a6-e76c-4cee-ac02-604da133f8a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd735ff2-a6ed-4a49-b2f5-1d6f08b36e10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f926fe9-6bb0-47e3-9903-2400d14db930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69b66356-8505-43e4-a4d3-9f1ccf65b398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef034af-cf45-4bb3-97d6-9983156b2a9f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "848ba76d-40af-43d4-9bf4-3bb1eb13cbfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51ed4ecd-65f8-44a1-9cfd-1d0634b1609d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31c5a46-b9d8-4e93-a580-be7a44468346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33895c8a-05b3-424e-84b3-c7339813404a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e6a822-09fe-4643-9dd4-82e96a36b726",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ce4e9c-c2d5-439f-b839-11f59638fd9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "364fd17c-d1e6-48e7-89f6-5ef1d4f698c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "460f0778-7c36-4957-b532-69f88df54daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142fedfc-f748-4ecb-8542-c1d853c02a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce4bcfb-5d4f-48ae-8400-4e74c3502b7f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2254f8bc-4934-420e-828d-1566e4dc2fd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82955c7d-3f6d-4969-8164-4f89bf1aa7e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab212a4-352c-43bc-94c8-ea40458527d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d05384c-670a-4d23-a7aa-4e6a10f1ed87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8281de5f-fcf0-45fa-adb7-456f90749ee3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7469f73-2cb8-418c-a006-c3b6bbf541a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a8fef3b-f45f-4344-a1ec-3b3d6fe4fdfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e47b3f-98c5-4511-b8da-668d7b923b06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89338f1d-5230-44b1-b423-22e54b0c5c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8ecfb7-b5da-4d65-b9de-65a1d4a660b1",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85cacef3-f95a-466d-9f83-10919952829f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6b2dad9-640e-466b-a7ca-f648f6f78262"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d3bbbb-e6a3-456d-a267-5278d3892b8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "400784c0-2214-4f2b-b92b-cbe2c41d8ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481f8f02-88d6-47ab-8192-4a893b459f76",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96627abf-ef64-4fb5-a459-d5a669337d63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "924148f5-367f-4b58-9ec7-53afbc36ab1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06359857-6ba4-4c0a-a755-f85cf1922dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d114c28-29da-431c-9854-cef8b56b61d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9d0a73-d3b1-488a-b330-07ee24b6c006",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f823be2-1875-4d04-bdda-f08b83fffdf1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbedf4d1-d886-496f-a146-aa21d4ec4f4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df2a3e4-b45e-49e5-b001-97077b7a1663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5a4a8c2-2ab4-4972-b639-7e17e4eab67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99f0509-ae0f-49e5-8ca8-22218768c624",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f170bf6f-a3f4-4d3e-9e6e-fad645cbec1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb3c437e-7f77-42be-972e-9b747cbfd5db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "169b21fc-742f-4faa-ba28-4b65368ace24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "590b9c27-59a3-422f-8984-887e9a03bc6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf6e760-d174-4e69-8afa-c13dd3611fd8",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43141758-b910-4da2-a319-092eecc64a9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a90981cf-f653-4f08-b14e-e8305d7b5913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb19adf1-6f81-4f7d-83fe-d251a60974b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b70809d-87c9-4543-8087-c432ee2a755e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b874e4a-95f9-4d1c-b9d1-e4125b993768",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05931dd-767f-4fa4-a627-fe399e2f229d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2c3aa44-9ea3-424b-9e01-48dcde66eec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27f2a8f-c123-4abd-84aa-5f4fed48e6dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d2817aa-c5cd-4abd-a2bf-b81e960dc390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52930b2e-fe29-4667-b21e-1cd955f993d3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb7eaf7b-a190-4f41-9a31-d935f781fc65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2150bbff-2880-41f1-8499-827a0028556b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5573ac-c1aa-40e2-9d32-348e3e08d646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2250051f-a457-4d84-98c3-f7d7a9b20b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d902b9b8-64da-4260-8bee-4ab13675ea48",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9700e4f8-5132-46b3-bb33-b8f6bf9c50a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4254e447-3cb4-4353-b705-25843bb55c24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4284c4d-d06a-4f12-b98b-b5a50386d258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1f9b054-5fd5-479f-8c8b-37111fad1276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1852ffe1-a375-4353-8e2f-7f0f487ec228",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ab115c-f8ed-48fd-b968-dbf3d817c1ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53d2cd56-6970-44ef-a61a-c26c6fd48f56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ef8a01-1c49-4bd9-813a-b35523affef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7718b94b-254b-4454-b151-dc260faef844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0238c1f5-7b8e-44c1-a275-a5e0a1428bc7",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f107ff7b-f99f-42d1-ad66-ce0d8990349a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60d3c5f7-b863-430f-bc24-e66e81008f7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad9f274-95f3-480e-bb71-7409ca96d8cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12af793e-e3d7-4967-b438-98e76979e764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efbd5413-eed2-4f92-940e-6453e65587a7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070bbacc-17a1-4f92-aa62-b201028b2498",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce2d6f11-2657-49b7-9fde-6f2c9e7dde15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94bdd5d5-a9eb-404a-8572-dbaaae3a7279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25e68754-fcae-4c57-86ef-e594280f1618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca67e8e-ca15-49a5-b457-cdc62c6dfe74",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e856c1a-91c6-47d3-9827-be1b66e9c278",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a1a42d3-f006-4d2f-a7b4-05baef091918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac366178-4e72-4eae-ad83-aec559af1caf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6e11ae7-9bae-4064-b6be-1419e131712c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51f3c53-508c-4cb9-a229-eb109332687f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd4bfb7-b685-4ed2-b8fd-989cb8388ef8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5235bf4-4175-45ba-8ec3-904d56be6ad9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fbaf0f7-e7e7-455b-9ff6-38654f3c95c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66807578-9072-4966-abef-335f33c4ad4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f1ab58-a80b-448c-85b6-d518e5584c9d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "094adb22-0927-4b45-8ae4-7f6f7b1cc44d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5b7c95f-2fb0-4619-96a0-91338e68d52f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa75f440-3b71-4e87-ab7c-f46bc6d0cf83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a1fb6b1-9126-4907-8163-f89092580cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d333d504-8051-4bac-88e1-487b19ada871",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744f8a87-5ed5-4ffa-8d18-e243312504e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d118f01-c363-4d76-ae1a-f6a966c1cc8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7f7157-f605-481c-9ed4-18a7d5b597d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81606ef0-17b7-4c54-ba74-49e6d4cac780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2208ded9-14b4-4f37-bad8-cdedfd083406",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c04d07-fb9c-4bf7-9163-728b92fac2d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad37cd30-bac3-45c6-85fa-36262d55f331"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d486fdf5-8a6e-4f96-a519-ed248a8b0a7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e22de69-dc0c-4794-bef6-64e7e440f1e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e992af-8f77-4071-8d64-9771a8aff41b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec98530-ff78-481d-a8b6-fd2a0bf5a9f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c976fb15-6a8a-4104-9df8-987681b56874"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ce137c-7ac2-4d8f-b466-49f465f0eee9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3062e3c-a807-4d31-8f15-15f00480afc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c765564-bc36-4319-9fe8-18f3e0c08234",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d5e881b-464e-4cf3-91ea-06aeef45b8ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffc43e7c-cd32-49f6-907b-3b2ad38c9780"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb35bd2e-cec8-4435-b47a-b4f735225c49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66b15c5d-74c6-4bf9-87b9-cf7df7efe226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62ce5ce-056c-46b1-b1bb-1697cc64fa3b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce29a739-1524-4c6b-b2ef-df2861d532aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "703cb5b9-69ac-4878-8233-35e088ec33e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a9b6c9-3bc4-43d5-80a2-ed1b9689d0ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a172c1f-f649-4cc5-9f20-ae0cd0878b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c6cdd5f-8bd3-42bc-8cd1-68a606f46f83",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a903af-983f-4e4d-a91e-8f98000ba436",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef5507ec-5429-4d75-80a4-c95f521f89c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e118432-f8ae-40ba-9cf8-14a0bbde0e27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98e1a538-2c33-43e2-b9e7-bb604329b74a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc07b75-f7d9-4f77-9cb2-fb5ff5af4acb",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a8a9c4-f121-4694-80fb-31e3a6c01d78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99639760-4f6f-4af8-956f-0b12ac579e10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "016bcfbe-4cf4-442e-9cd8-e4780d0962ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25cd4b29-49ba-4313-a62c-f442f612dedd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835b0a91-0fc9-479f-8927-d0efc3e360ef",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977040fd-a368-4a94-ac57-6d9cf38adba0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7daa7a60-da9e-4fb7-bdc5-0b569cd04b92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2181a8e5-7629-4ea6-b335-c7177ded2080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "052bbdcc-4d05-4667-9b85-947dd4041457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3761f7af-3f5b-4f58-8f97-8ed0ef8d284a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b8e3552-377e-4aa3-aed2-fdbfa90fa38f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4891eb6e-c57e-455a-ab62-3043e15e3da8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05f21c4-56c1-4f1f-80ea-155f63a1c3aa",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a457b080-6659-40fb-b709-f7200b7af5c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cf2d87d-d713-46ff-9e3e-a1d853511fb1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0372c2b4-1932-466d-a446-ee12a3beb19c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9557435d-92ca-4808-92c5-2746f7ed1b7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a0cfa1-aeeb-4b06-9f76-75451ae58a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be39dd53-118d-471e-bc11-bf966f077fda"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e76d69e-d75c-4a9d-aecc-4b255e4c0373",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77f06530-99f3-43e6-a787-77f5fc0d4daf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "67b926f5-bee2-432d-843e-5068d329c000",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "822575bf-f640-4932-b2ff-a886074f3124"
                    }
                  }
                ]
              },
              {
                "id": "1658cd02-2bc5-4f20-8c3d-664715b20210",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cdbfee15-846f-4376-be62-bad43f50cbe0",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a3de1a-7df7-4314-9ae2-07ffe819d94a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "28286f50-050d-4798-aa4b-413e619be489"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc0d96d-6f68-4917-8c68-19ec54c4261c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0332f9a-156a-47f0-8a31-d8ba9505f3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c315a46e-8678-4c39-aeed-cad242c2177e",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b202a2b-b8ff-455b-9629-007e230d76d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "18326263-1c9d-46b9-b500-2851a88ed9d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ab1dac-0532-43d3-9157-9650fe87f804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9cba9b37-8922-4c19-917e-9b6d793070ef"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60db2676-4804-48d0-afcd-571aebee36b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bafa7f87-dea2-4878-bb65-1a235b5e2ce7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "19326a15-81bd-43eb-b9fb-cbedfe4d0f83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da8abae7-77af-42b8-b7f8-a4493e017c8c"
                    }
                  }
                ]
              },
              {
                "id": "d2a5a228-1000-49b2-964e-5b64b5aa15d0",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6a31b0c9-5453-4cf7-91f1-d75973266450",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d4812a-7de8-4aa5-9508-d70b745e9ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d159426e-fbb4-4945-8430-7ae801031603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08b883d-a66a-49c9-93f8-50d2a23289cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17e53b43-c1b1-4884-8281-c35db950df43"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "38e9f95d-c01b-485f-9646-01945250e516",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9342c119-2173-4d86-9f70-ab506fa1f23e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b2f72a8-aa04-423c-ae3e-27725f8f78e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1d3128c9-8758-45c9-9ecd-5bfa51713feb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f149a5f2-2161-4c7f-8156-66a42e0c565b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ef3f688-ded6-4310-89a7-5a56ae56c3e4"
                    }
                  }
                ]
              },
              {
                "id": "15cc65a1-ce3c-4b7e-b373-4cc4c5cc4158",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36f127f6-f09d-41a6-8509-4c182b8fe4f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bcf9df0e-f5aa-419e-8c8a-dabca6085973"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc08b70b-cec1-4a7c-b15e-e54a72e639ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e8fcecd-79c8-415b-9aa5-06643798fba1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3245abfa-2f40-4252-ac53-5fd68880b400",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "50386223-c9f5-4c18-8272-d0bf4fe501a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a9e6eb5a-db71-4328-b9bc-04f758f540f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3807ea48-84ae-455b-b9b0-5eff78c163e1"
            }
          }
        ]
      },
      {
        "id": "c6061bda-1b46-4a5f-8d2f-d52dccee4b09",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "20fdd9f0-fbb5-4fe5-8206-078dd6a9686a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "15719e06-3d9b-4ccd-a04b-0a16fb77a907",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5cbda92f-d89d-4a3a-b8a3-5b6a5420da53",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9223c99c-d6ed-4e3d-a1ab-4562a875eb66",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e33b8100-7a17-4f45-975a-8c4829e84ba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb33c50-a867-416c-936f-bf0d46a33364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3d8f650-36a9-4391-8be5-859e500e7f9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d57e2a-a4ee-479f-a4de-1d030d0c94d9",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea02e09b-9ecc-4e6a-a23d-ff949edc762c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dccb7252-f5f3-4b0b-a571-3e3e999c8c71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a6bf82-b159-42c2-a02e-e45132cb8307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a6017d1-5b2e-40d4-8bf1-9d26cc36fba3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc308258-4a26-4801-b9bb-abbbc2ab2f7c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8fb12112-9683-455b-854c-7afce2af2307"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "544d22b2-45ef-4e27-a5d6-cf163ac6c3b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2358dce4-1f2d-40b5-af7d-232f492df4d5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9ea07f50-77a6-4178-b8d3-336df1e96203",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2e47bf1d-23c4-426c-92f4-587561fe893e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "86e4c33e-6760-4754-9fc2-e3556dd4793c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f929a83b-4d2c-4ad4-82c8-05ae0ed4f8ee"
            }
          }
        ]
      },
      {
        "id": "c2447751-7fbf-4a5b-a9d2-121eafcc23d0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3a92acc4-d3d0-49ed-a342-8e3780351cf7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ec71207a-0929-48f6-a162-62e6912b92e9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "642c8cd4-359b-48ea-bf26-d22d2e31470a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c81ac9-dbd7-47d3-9f4c-f240ee902b3b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60e70d42-584b-431c-8e79-05f2360cba8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "601195e0-8740-406a-9267-fa90fed10417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b554dc18-7615-45f1-b32c-6b5a97fe8a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ef2f51-f65b-4e8f-aa06-c693e1967319",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681413e1-00c8-4ba0-9c9e-9f667d9f1ac8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "16e9f2dc-67de-47fd-bd66-2052011937d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b00b30e2-6f24-46ca-bb7f-92ee2e83487e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb71c75c-1a2c-4b4a-9f17-467d896e0022"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ed82d5d-9fb0-4d8e-a000-9ebc9ffc0f1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "245d6f4c-05c5-4713-a58b-49662da6d868"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6b79961-5602-4f66-a6d9-8e4351291ee5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33944f8d-55c6-4cae-b5b6-d93b3131120c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "61d0c3a4-345e-4857-8591-5ba6005e3ec5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4f51a379-c12c-4294-aa4a-98d532e71521"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0ec37be9-3664-4593-8779-98f5b325adb8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "633d3ce1-24c6-44a6-8523-c672833a8996"
            }
          }
        ]
      },
      {
        "id": "1cf0b789-a290-4587-97dc-a427944043b5",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4ccb2733-addb-4a8e-89b5-62649d62f60c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "17654d5d-c8cf-4bbf-91c5-ab1c3ea3e153",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2ea268bb-099d-455a-8952-2646adb2fa3d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e94a2fef-dbb7-47d1-87cc-35eac05799c5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b11efe04-7b52-48f4-98a6-6d15b5aa361f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b5ae85-f8aa-4356-9202-ea8991ff60fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3391972e-f666-4653-9792-df239d7978b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb368b91-43d0-4e2f-8eab-780323d5deee",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdecb7d6-ebf9-4132-9350-be29f9b0d852",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "abbfbc6e-30d5-427d-bac3-0a68f10de45a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1f91a2-8244-490a-b89b-5310ba42101f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "634cf1fe-5b2e-417d-971f-10b5919e9ad1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b86e880f-2c4a-432e-b900-cbad9ce04afd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa30a8dd-4816-480a-916b-21bddb71ff16"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca12ea46-07fa-435c-ae6b-420a4cb6561b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de05e134-f0e4-428d-a529-59b3a169a7a7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6cd6d91-067c-4063-87ee-3483b9875132",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4fc173db-bbd3-489d-a7dc-d89d9464a08a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "64e17c1b-fa74-41e8-911f-9efb53a56abd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1b3feebc-8646-4325-9598-42c84efc02d9"
            }
          }
        ]
      },
      {
        "id": "5292db14-46cb-4f15-bcd8-29394d942cd8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b5410bc1-ee0e-4615-aa4a-25ded94ee809",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f91a4d3-f3db-40f4-8681-28bc77c5a595",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "bbd94354-189a-4727-bb1a-6d1f49d4fdba",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0c5636e-c156-4438-a3fc-24f2a47df9f9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "220b0142-9756-48f3-9c1c-65274c89426d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 391.5038461538462,
      "responseMin": 6,
      "responseMax": 11212,
      "responseSd": 1259.9749860095721,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1679963962624,
      "completed": 1679964078847
    },
    "executions": [
      {
        "id": "ba8b888a-8409-4553-a21b-956c70e7fca0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "700ad582-dd7a-47a1-bf88-cbd5bff5619e",
          "httpRequestId": "c0e7f9ea-5a4a-4db7-b4f6-d7928f28b293"
        },
        "item": {
          "id": "ba8b888a-8409-4553-a21b-956c70e7fca0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "76a9696c-8062-47ab-85a8-c95f2cd1d945",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 0
        }
      },
      {
        "id": "0f0a5989-d513-46ba-9b31-3f576431ab34",
        "cursor": {
          "ref": "a3b21db3-8aea-4994-a152-cd32242a1054",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9ec7f98a-ef69-488c-9b79-dfc6fa945593"
        },
        "item": {
          "id": "0f0a5989-d513-46ba-9b31-3f576431ab34",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "1fa0eea4-c936-40c3-9477-1ad83f553c14",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "6f60fe27-61c2-42b5-ad19-51a4c21e7de0",
        "cursor": {
          "ref": "e245e599-c1c5-413e-a22d-46dd757fa509",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ac92eb00-9ecf-47a5-b325-c361d49e6fd8"
        },
        "item": {
          "id": "6f60fe27-61c2-42b5-ad19-51a4c21e7de0",
          "name": "did_json"
        },
        "response": {
          "id": "b7ed51ae-d43f-4007-a54b-ba2639de226d",
          "status": "OK",
          "code": 200,
          "responseTime": 283,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c167768-4ec3-4e15-8c0c-a7e9094bfffc",
        "cursor": {
          "ref": "675981f9-b98f-467a-86b1-e2af07aa8b95",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "57489328-2bf8-407b-b6c7-39162e4490e0"
        },
        "item": {
          "id": "9c167768-4ec3-4e15-8c0c-a7e9094bfffc",
          "name": "did:invalid"
        },
        "response": {
          "id": "62de153b-b5ed-45ca-b610-f0eb8a769edd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1409,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "9c167768-4ec3-4e15-8c0c-a7e9094bfffc",
        "cursor": {
          "ref": "675981f9-b98f-467a-86b1-e2af07aa8b95",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "57489328-2bf8-407b-b6c7-39162e4490e0"
        },
        "item": {
          "id": "9c167768-4ec3-4e15-8c0c-a7e9094bfffc",
          "name": "did:invalid"
        },
        "response": {
          "id": "62de153b-b5ed-45ca-b610-f0eb8a769edd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1409,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "8684fb1b-6b7f-495d-9e25-afa69d1b2bb8",
        "cursor": {
          "ref": "609efd08-706f-49b0-9c73-14f4ba01ecc1",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b4129c16-cbfa-4a65-8a8b-1d4458e025eb"
        },
        "item": {
          "id": "8684fb1b-6b7f-495d-9e25-afa69d1b2bb8",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "48771b0f-849f-4c22-94ed-e91781c06ff3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 67,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b204fed5-52d8-4861-a0be-96fdd4dc3a7f",
        "cursor": {
          "ref": "05d8ad5d-a0f6-49a2-93a4-f7fc838e9fac",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "75465fd2-aa9c-41a7-a0c1-1493a377a237"
        },
        "item": {
          "id": "b204fed5-52d8-4861-a0be-96fdd4dc3a7f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4f1b972f-0c98-414f-8118-67a05740a646",
          "status": "Not Found",
          "code": 404,
          "responseTime": 61,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5809247-04fc-4d6a-b271-efab6c899603",
        "cursor": {
          "ref": "c635132e-5349-42d8-ab00-4ad06af1212b",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e81d0179-2cf8-45b2-a874-856b91b28d50"
        },
        "item": {
          "id": "f5809247-04fc-4d6a-b271-efab6c899603",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "fe4546f6-6ef8-42f5-9d01-c7a2b617f48a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "f4335086-2cb1-4522-8f64-bfed18e37e63",
        "cursor": {
          "ref": "c2accff1-1bf8-4d15-91df-d23b93f93db2",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d05e2b1f-bdc7-4567-a7a8-9a035bfea997"
        },
        "item": {
          "id": "f4335086-2cb1-4522-8f64-bfed18e37e63",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b5f39d6a-5323-4062-b45f-10d5786c4c77",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "f4335086-2cb1-4522-8f64-bfed18e37e63",
        "cursor": {
          "ref": "c2accff1-1bf8-4d15-91df-d23b93f93db2",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d05e2b1f-bdc7-4567-a7a8-9a035bfea997"
        },
        "item": {
          "id": "f4335086-2cb1-4522-8f64-bfed18e37e63",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b5f39d6a-5323-4062-b45f-10d5786c4c77",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8d6d56fc-07be-4404-841b-352a31b4a089",
        "cursor": {
          "ref": "47f4e29f-5d18-42d7-8e0c-078ab2356e90",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7d5e6eac-8b82-460d-a0f5-3eb890dcd4f0"
        },
        "item": {
          "id": "8d6d56fc-07be-4404-841b-352a31b4a089",
          "name": "identifiers"
        },
        "response": {
          "id": "731d38c7-a802-4bd6-9f8a-4c33410d7147",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1803a88c-dc5b-4559-abb4-c36929a453c6",
        "cursor": {
          "ref": "0b6888ec-4a47-45e9-af13-ddd337d04428",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4efb66c9-8b0f-4e2d-b85c-56313dcfb1d0"
        },
        "item": {
          "id": "1803a88c-dc5b-4559-abb4-c36929a453c6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ad22ef55-e98d-406b-b689-02787c8d8fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1803a88c-dc5b-4559-abb4-c36929a453c6",
        "cursor": {
          "ref": "0b6888ec-4a47-45e9-af13-ddd337d04428",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4efb66c9-8b0f-4e2d-b85c-56313dcfb1d0"
        },
        "item": {
          "id": "1803a88c-dc5b-4559-abb4-c36929a453c6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ad22ef55-e98d-406b-b689-02787c8d8fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81b0afdf-2fe9-447a-b1f9-f802faab1018",
        "cursor": {
          "ref": "db4098bf-1ccb-4dc6-a18a-db3abd811452",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e664c56a-6ceb-4107-ac4e-8882a3b2d35e"
        },
        "item": {
          "id": "81b0afdf-2fe9-447a-b1f9-f802faab1018",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3b524a6f-703a-4b11-ad5b-fb2ce10561fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38318fe7-1408-4c3c-bf2c-3c13e5e469f0",
        "cursor": {
          "ref": "f5d58005-484a-4157-b412-260637d06399",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0c601fe2-b635-407f-84c1-a53bc1cd63f9"
        },
        "item": {
          "id": "38318fe7-1408-4c3c-bf2c-3c13e5e469f0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "489eac17-f58d-4be5-a1f9-3881613dab4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86e029d-38ef-47f5-aa10-617a688a56a5",
        "cursor": {
          "ref": "2e309a9d-b4c5-45a7-9812-8c95124a6326",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "53c09664-b70b-461a-8aac-1672644339c1"
        },
        "item": {
          "id": "a86e029d-38ef-47f5-aa10-617a688a56a5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "6267c95c-4e84-4c03-a09c-37917f53ca56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1d29a3-0df0-421e-8960-97bbdf37395e",
        "cursor": {
          "ref": "de415838-9c5a-476d-b9ea-948ae5f2086d",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b3da1d1b-6dc7-48a2-87cf-22896e571177"
        },
        "item": {
          "id": "cd1d29a3-0df0-421e-8960-97bbdf37395e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ee648c2a-1c29-4bb7-ae4b-2640dc322daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb71adb-ff6d-4b39-b898-f6319fde9d8b",
        "cursor": {
          "ref": "97648006-c32d-48d7-850d-d5dd5c1c4506",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ec29f98a-84b1-49e0-8d36-68cce696c113"
        },
        "item": {
          "id": "6cb71adb-ff6d-4b39-b898-f6319fde9d8b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "23fb318d-ee97-4922-bdac-94b4a9aa9a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93028998-bb44-404e-9fd1-bd4014dab3a5",
        "cursor": {
          "ref": "91638fe7-0d2f-4105-9eb6-fe29f081f991",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6a760600-deee-4828-8118-5ff73fd9813b"
        },
        "item": {
          "id": "93028998-bb44-404e-9fd1-bd4014dab3a5",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "14919903-c95e-4029-8e14-a54c68d10980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91443c52-ebdb-466b-b2ab-128e8c5d54e3",
        "cursor": {
          "ref": "7c698841-0639-49c9-8688-01d36e0c3a1b",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a4317d73-e1b3-43e9-97a3-492467b49121"
        },
        "item": {
          "id": "91443c52-ebdb-466b-b2ab-128e8c5d54e3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0c15c3cb-8170-450f-aedb-f72b23c42350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a0bc1c-c809-4ef4-ba5a-f4a6a3cb2a18",
        "cursor": {
          "ref": "4606e31a-f029-4709-a2d0-56d75a82d954",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "37647147-fdc6-44ab-961d-3b7cb448c087"
        },
        "item": {
          "id": "f3a0bc1c-c809-4ef4-ba5a-f4a6a3cb2a18",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a6334d39-0c1a-4a63-8d1a-d87a22c735c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74dc1693-6589-4344-b45f-70a015145516",
        "cursor": {
          "ref": "54592300-410b-48c9-b4fc-f813b45d7d2e",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8ed901d5-e6ec-40cb-b0f4-41b3a9f14626"
        },
        "item": {
          "id": "74dc1693-6589-4344-b45f-70a015145516",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "df4af067-2ecd-4915-bffc-24a7bdac5986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925635df-2255-4a27-8aa3-c32e47fb9cfb",
        "cursor": {
          "ref": "86a47159-a480-4aee-b229-f21bd9ed8e6c",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c8fc5f5b-8bf2-4d5e-8363-0e5d5c0f08bb"
        },
        "item": {
          "id": "925635df-2255-4a27-8aa3-c32e47fb9cfb",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4f21ab61-8e04-42de-ad30-f49d4ae55f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "677c0cc3-0c82-459e-9616-c759c972e899",
        "cursor": {
          "ref": "23c8e8f4-6a22-4305-a119-81f2a3cfec80",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1e3bb5fa-b545-4d99-b1f3-321d2a862d98"
        },
        "item": {
          "id": "677c0cc3-0c82-459e-9616-c759c972e899",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "49b90e31-6e67-4a39-b5c8-d4ea7f28c7cf",
          "status": "Created",
          "code": 201,
          "responseTime": 2055,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "87d8d529-19c6-43f3-b640-6fa1e36fa404",
        "cursor": {
          "ref": "45f0b170-0bc4-4cff-a9f8-342866c159b9",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d547c59c-1312-4b46-af29-e0735cd10da0"
        },
        "item": {
          "id": "87d8d529-19c6-43f3-b640-6fa1e36fa404",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "08ce2f20-14bf-4412-83ab-a1d76df8ebe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "880d2570-9769-45c5-ad23-2be68679c4e5",
        "cursor": {
          "ref": "5fb4ca09-fa4f-4f4d-ad76-a9d31aad2b48",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "898f91b2-8e23-4d5a-8f44-164e68aa5677"
        },
        "item": {
          "id": "880d2570-9769-45c5-ad23-2be68679c4e5",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6e3c7bdf-55d4-4dae-80d5-fd5bc3b0996f",
          "status": "Created",
          "code": 201,
          "responseTime": 11212,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "8a540d1b-d30f-409f-9dbc-775b5d49e357",
        "cursor": {
          "ref": "da5ec5c2-6ba3-43d2-b575-110ccdde7b36",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d62d15e7-c572-477c-8995-bfca82f8a8eb"
        },
        "item": {
          "id": "8a540d1b-d30f-409f-9dbc-775b5d49e357",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "600a3400-330d-479b-86eb-234bb624d9ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dae2847-3559-4229-96a7-cdb209f46f9b",
        "cursor": {
          "ref": "cfb64824-ed6b-4066-8228-4680bfacc4a9",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "82522328-f913-4253-802f-3421fc32f145"
        },
        "item": {
          "id": "7dae2847-3559-4229-96a7-cdb209f46f9b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2be44ab8-eac0-48bb-822b-7a333631fbe4",
          "status": "Created",
          "code": 201,
          "responseTime": 3528,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "73e9deb8-b072-43fd-8eef-07dd43cad46c",
        "cursor": {
          "ref": "775a6a61-ec5c-43c5-8c4a-ed7c75a8adde",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7da41b3f-1131-43ff-b5e2-a407a4983c61"
        },
        "item": {
          "id": "73e9deb8-b072-43fd-8eef-07dd43cad46c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d98b2ce3-481b-4901-97b5-8fb6da5f6c5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1061dc82-9700-4c8b-85d5-fda73b4fda2d",
        "cursor": {
          "ref": "802a5f6d-5054-4ca2-b56f-4b23e5dbb0de",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e4bbf18a-fb05-4f4a-8999-b735a4422462"
        },
        "item": {
          "id": "1061dc82-9700-4c8b-85d5-fda73b4fda2d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3ab8cb0f-0566-4c58-8faf-530796bd0945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17cbb80-47b3-4759-8ce7-ed94d688e9d0",
        "cursor": {
          "ref": "46f63f96-18fb-4a4d-a8f8-58b17fceff6c",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a7117b68-e8d7-492c-9c38-96b9bfe457c5"
        },
        "item": {
          "id": "a17cbb80-47b3-4759-8ce7-ed94d688e9d0",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a34a3479-fd22-4c74-8308-0d7abf839ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04690d36-803a-4994-b0d5-35d183216cdd",
        "cursor": {
          "ref": "13304efb-278b-416d-9424-728544ef00dc",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "67cb8db7-aae3-42e0-918a-bcd10cc25676"
        },
        "item": {
          "id": "04690d36-803a-4994-b0d5-35d183216cdd",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a4aa70e7-f39e-40aa-b259-68f1b0ff5627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1a0d27-414a-4359-a903-81df214640a2",
        "cursor": {
          "ref": "6607af3a-d404-4749-9374-2b6d259eb1c7",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7855c56d-8def-4a98-a934-0e81bead6e63"
        },
        "item": {
          "id": "3f1a0d27-414a-4359-a903-81df214640a2",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "eb79d3fb-7af5-4029-bcf7-9a3b650f66d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed70bf89-58b1-4fc9-b6d0-82e8c5a03fe4",
        "cursor": {
          "ref": "7b820235-f124-461b-ad5a-605a5a8f3d94",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "397bf65d-611f-4979-a2f2-a0d7d64dea7f"
        },
        "item": {
          "id": "ed70bf89-58b1-4fc9-b6d0-82e8c5a03fe4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "67103fe9-ad37-4489-8375-5b0c3bd42fec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91efadaa-859c-4c4d-bfc0-e6431e01c1b2",
        "cursor": {
          "ref": "0dcff759-d837-4463-a958-a2f788d57099",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cb33118d-869c-4058-86ad-9a8ea236742b"
        },
        "item": {
          "id": "91efadaa-859c-4c4d-bfc0-e6431e01c1b2",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7e388a0d-0878-4c49-9bb2-cf66a2f538ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2700a398-5a62-468f-a91a-b9d2fb620b50",
        "cursor": {
          "ref": "b34073a3-f108-461a-a883-cfa0ab4d57b2",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b01366d4-0fdc-402c-b0b2-47bfa1ec6448"
        },
        "item": {
          "id": "2700a398-5a62-468f-a91a-b9d2fb620b50",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e4578be1-1123-444a-9cf5-0e8c19692b51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92bb10f-d6a7-4cf5-ac88-f5b7074e61c5",
        "cursor": {
          "ref": "296f734f-d7e6-429e-832d-cbb50c6c749c",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "dbf9de58-e1e1-4999-bab5-59d6ec340660"
        },
        "item": {
          "id": "e92bb10f-d6a7-4cf5-ac88-f5b7074e61c5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "cb040947-d792-42eb-9e19-c4cc7daced0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 792,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "589d0453-42d0-4e55-9e11-d39892f54b50",
        "cursor": {
          "ref": "d402a714-aec7-41a9-ac9a-fa616c10ac48",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4a650340-c895-4d1d-b660-ea64c141cf99"
        },
        "item": {
          "id": "589d0453-42d0-4e55-9e11-d39892f54b50",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "fa29b922-cd3c-4105-9829-228b495cab8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2ae093-cf09-430e-85ce-43824aeabcee",
        "cursor": {
          "ref": "33bbb8d8-aeca-435a-a622-f52021826f3a",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1216283d-3bc5-4949-96cb-09c03f904872"
        },
        "item": {
          "id": "ae2ae093-cf09-430e-85ce-43824aeabcee",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d42210d4-d54e-4534-935e-c96008c1264e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02bcb52e-7084-40df-9777-d507da2f3039",
        "cursor": {
          "ref": "fc570bcb-352e-4f17-8b20-e797a9166ec4",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "db0b8ea7-265e-4773-b39f-2cf9fbb42df8"
        },
        "item": {
          "id": "02bcb52e-7084-40df-9777-d507da2f3039",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "045009c6-8e4e-41a1-827a-46ba11de6615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6819cb-529a-4e7f-afd0-667e47351200",
        "cursor": {
          "ref": "956e7934-83e4-41b2-8ef4-34459eb94ea2",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2a7c3a2f-7511-4a13-a0c7-03eced0cc6bf"
        },
        "item": {
          "id": "2c6819cb-529a-4e7f-afd0-667e47351200",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3bd5694f-8c94-4d6f-83d7-aba74b9822be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b45a85a2-b995-4881-8c69-404d0a360992",
        "cursor": {
          "ref": "0a6a6e91-9ca1-4285-83b4-17f30dcdba80",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0b1fedcd-9a57-4c56-8419-6e82b3dc6d6f"
        },
        "item": {
          "id": "b45a85a2-b995-4881-8c69-404d0a360992",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b1217857-df3b-49ac-bbed-2a0cd9f55ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b548399a-cc99-441e-8b7b-a4e348bdf89f",
        "cursor": {
          "ref": "1f94d6f3-dea3-4f3b-ac47-314aed78d12b",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "de83af4d-9b79-4465-bbf8-12b35f3971a2"
        },
        "item": {
          "id": "b548399a-cc99-441e-8b7b-a4e348bdf89f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "7359c3ed-9a12-4d82-a2b6-d7055a4b48bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e42e4a01-c9ac-4977-af9a-eb36daee4640",
        "cursor": {
          "ref": "5de406b0-67d7-4acc-afbd-8518e8b89baa",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d5284b8c-0595-4073-a71a-55a33ce5d6dc"
        },
        "item": {
          "id": "e42e4a01-c9ac-4977-af9a-eb36daee4640",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "eb3d075c-fdb9-4ca8-8579-2a545ec40dd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac9d094-ae60-43df-b8eb-34124c164801",
        "cursor": {
          "ref": "0291b8cd-8190-407f-8cb6-c1eb66fbd8ad",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3bbeec21-d651-4933-a64c-c6a28deac110"
        },
        "item": {
          "id": "cac9d094-ae60-43df-b8eb-34124c164801",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "02a804be-d2d9-46b4-a99b-5757ee2feb4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c29154-618e-48f6-958f-c9fad56b56e4",
        "cursor": {
          "ref": "cf8cb0ec-a4dd-4b41-8156-a86a85229803",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "75ed372b-5a21-425f-8559-fb0636007898"
        },
        "item": {
          "id": "36c29154-618e-48f6-958f-c9fad56b56e4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "58d4ea36-9765-44af-9095-c070655e0b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c539d6-ca57-4941-901b-92be8d880264",
        "cursor": {
          "ref": "58f74c4f-04e2-486f-bb6d-89b2fb1df25d",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "edd10129-a4f2-4c5f-80ae-fdf10efb288e"
        },
        "item": {
          "id": "e0c539d6-ca57-4941-901b-92be8d880264",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "05715c56-f86c-429a-9908-4ebebbf42614",
          "status": "Created",
          "code": 201,
          "responseTime": 2593,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "19692293-0da9-4bb5-9336-2d970c287b69",
        "cursor": {
          "ref": "f2ed138a-7b8f-4cec-9566-65a8e350fe56",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "23e916be-a468-4954-8331-9c755c2e5b96"
        },
        "item": {
          "id": "19692293-0da9-4bb5-9336-2d970c287b69",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f13f9fd3-b618-40c1-908b-be92070e7588",
          "status": "Created",
          "code": 201,
          "responseTime": 2646,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "3c50c985-f3de-496b-bd2a-f6219fc45f4f",
        "cursor": {
          "ref": "e98081b8-7bf1-4b8a-adcd-8ffeeb40798a",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "76fcb1a0-deee-4ae8-92a8-26fe72db7acd"
        },
        "item": {
          "id": "3c50c985-f3de-496b-bd2a-f6219fc45f4f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f456a43b-1f2f-401c-b3ed-88efc0e6a740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f42b1160-b6e5-487e-b913-5eac816d1d4f",
        "cursor": {
          "ref": "a6389032-a3f8-4007-a5e4-2d5ed095f6f7",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "900f9c63-d06d-4edc-9070-11ef29c9df43"
        },
        "item": {
          "id": "f42b1160-b6e5-487e-b913-5eac816d1d4f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e12e6a75-5ad5-48ea-a0d6-162f920618d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb857569-2b76-4189-8c5b-693cedb6c2f1",
        "cursor": {
          "ref": "d820e146-c513-4668-8781-21f2b652d847",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7d307eff-1fe3-43bc-adb1-41962f852740"
        },
        "item": {
          "id": "eb857569-2b76-4189-8c5b-693cedb6c2f1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "4cb69509-8eec-404d-a640-31e0c61ffca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91753273-0c5e-4956-a5ea-3cfd1097a2f4",
        "cursor": {
          "ref": "e2436780-ac69-4eae-83b8-bc66fab83596",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4932c5e3-8af4-42f8-a6aa-37c86c9d1a3c"
        },
        "item": {
          "id": "91753273-0c5e-4956-a5ea-3cfd1097a2f4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2e3222d5-02e8-48fb-8d80-31698b090971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c2c543-fe74-4ee3-bc44-36e5817503a7",
        "cursor": {
          "ref": "ddc8e033-782a-458b-b845-75cd9ba2b31c",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1d04d78f-53ba-4d48-a855-72ac8292ed67"
        },
        "item": {
          "id": "01c2c543-fe74-4ee3-bc44-36e5817503a7",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7dcd97a1-7944-4d85-9674-479d3791c074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "010a8a8d-e758-460f-b109-120dcf89d54f",
        "cursor": {
          "ref": "44b0548a-0c95-4b11-ad74-37e6eed56e35",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "61356297-c753-46b5-997b-a46e75965d24"
        },
        "item": {
          "id": "010a8a8d-e758-460f-b109-120dcf89d54f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d696262f-4729-45a0-84d7-2aee6c674c06",
          "status": "Created",
          "code": 201,
          "responseTime": 2482,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "79e35c25-9448-4b6e-96c3-d7096690de85",
        "cursor": {
          "ref": "95c42021-e4e5-4ec6-b83e-8f9947c23dc3",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a1601fa6-135f-4e92-af38-c706bf6c012f"
        },
        "item": {
          "id": "79e35c25-9448-4b6e-96c3-d7096690de85",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "58bcaec4-f095-4ead-a842-95609a91cefe",
          "status": "Created",
          "code": 201,
          "responseTime": 9941,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "b79b7527-8cf3-41df-bfe3-0e51889993bf",
        "cursor": {
          "ref": "b0161b7a-f7f3-498c-9166-d6bc4c455778",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6fceb5c5-48a0-4c23-b961-ff56e4aa3839"
        },
        "item": {
          "id": "b79b7527-8cf3-41df-bfe3-0e51889993bf",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6d890caf-55eb-452c-afd9-4f418c9e8703",
          "status": "Created",
          "code": 201,
          "responseTime": 3866,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "ecc54175-fd5d-49b1-8c54-b66e73c0a30e",
        "cursor": {
          "ref": "d70703f8-c018-4a08-8d60-4baa965e6952",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "41683e8e-3bb9-40c8-b741-b5a0a8231264"
        },
        "item": {
          "id": "ecc54175-fd5d-49b1-8c54-b66e73c0a30e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1c97a241-aebe-4f22-8677-6f71fb0b2e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b8429c4-291f-4e05-975c-5bc9320964c8",
        "cursor": {
          "ref": "3a393999-4f35-4a1d-a857-0f347eb6694c",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c2449a85-b53e-455d-99c8-64f8d3cdd36e"
        },
        "item": {
          "id": "5b8429c4-291f-4e05-975c-5bc9320964c8",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "dbdd5f5c-652e-4dfc-9596-4ffe28e0c810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a16e710-9c44-41c4-8e03-381e2542e203",
        "cursor": {
          "ref": "264fead5-1f63-4f04-91e2-48a3b320e001",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5c2d37ea-3e9f-49d3-a949-854ee04098a4"
        },
        "item": {
          "id": "9a16e710-9c44-41c4-8e03-381e2542e203",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a63c7aff-28de-4067-a1bf-9b27ac43a967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9abc0ad-a9f8-4087-8588-f8e4830bb10a",
        "cursor": {
          "ref": "ea8946cf-41ce-40f0-b417-1fa38d22f00b",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7bab0cc0-d603-4e40-822c-8e6b567e607a"
        },
        "item": {
          "id": "c9abc0ad-a9f8-4087-8588-f8e4830bb10a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "afa8cbb9-9897-43de-9049-a10441a6228f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbeb2e0-8470-4d83-9e1c-84b21c413b12",
        "cursor": {
          "ref": "ed17a98d-fdd1-4262-8240-4f09a5b2dd7a",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e5db586d-9fa0-4552-9c99-cb22e5dfb5ea"
        },
        "item": {
          "id": "8cbeb2e0-8470-4d83-9e1c-84b21c413b12",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4852af14-9004-4a54-8fda-07c37f5f8958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c0fef44-9178-4d96-903f-cee5d879a1db",
        "cursor": {
          "ref": "2834ff50-5f59-4e53-8309-4c46a51d7132",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9cb62099-b5c3-4c23-930b-1f23f5dcf542"
        },
        "item": {
          "id": "4c0fef44-9178-4d96-903f-cee5d879a1db",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e1fdb181-07e7-471d-8a6e-cedad738c783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c22241-1fcf-404f-a347-6d15b98ad07b",
        "cursor": {
          "ref": "eb82ca87-3e21-4025-8a73-099c8ff0b536",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b45dd6e4-5706-4e54-9a5a-d033a76429bf"
        },
        "item": {
          "id": "32c22241-1fcf-404f-a347-6d15b98ad07b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "786b4d45-0cd2-4f96-915a-6d835c51c06d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4afe530b-439f-4b77-9ae7-c8f7bb5ca81b",
        "cursor": {
          "ref": "14dabbb6-2dc8-4eb7-b658-8c946aaa8ca9",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "15aec6c3-65e1-4fb7-8ac5-f1ee42d556f2"
        },
        "item": {
          "id": "4afe530b-439f-4b77-9ae7-c8f7bb5ca81b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "184b923d-76fb-4c17-9856-0628b844fa8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2031,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d3f2ee-2bc9-47ad-95f9-8f2f6835e633",
        "cursor": {
          "ref": "2072ee64-7e7b-48da-93c7-5a6197405d28",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "31b2d60a-0d42-4547-aca0-2f0afc0af85d"
        },
        "item": {
          "id": "71d3f2ee-2bc9-47ad-95f9-8f2f6835e633",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "c3905d5c-3e53-4cac-92cc-3b7ff2bb6c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13f2517-b424-441f-876c-ef1814d34e2e",
        "cursor": {
          "ref": "04914cf4-12bc-4b36-accb-49a15a73805f",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "62824f6e-b100-4b10-8e2f-baba2a52b3dd"
        },
        "item": {
          "id": "d13f2517-b424-441f-876c-ef1814d34e2e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5f82a349-e164-441d-bed3-482835814f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52ca079-e74d-4586-87e2-789d274f38ab",
        "cursor": {
          "ref": "0345c44e-d9ce-4bf5-bcf4-8d88d65f5b6e",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "31f248fd-e918-4d35-86bd-7d470fc971bd"
        },
        "item": {
          "id": "f52ca079-e74d-4586-87e2-789d274f38ab",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "08a3744b-40d4-4548-a51f-2832e2e73b1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d498f2a1-fb29-491c-bd08-8e8651f875a0",
        "cursor": {
          "ref": "4d0b2d99-446c-4fce-bf8e-9b06b33d9e07",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "33a2a0b1-2b2d-4074-b997-0ca8e21e65b5"
        },
        "item": {
          "id": "d498f2a1-fb29-491c-bd08-8e8651f875a0",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "36022356-02a4-40d9-87e1-e56ab373b485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351e5f0f-6995-4f8d-be88-8f948ca89c0f",
        "cursor": {
          "ref": "d40ba6f1-6b9c-477c-9dd1-387c93db96d3",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e2477486-d9f4-4ed6-8e7b-3dd1e8d55bea"
        },
        "item": {
          "id": "351e5f0f-6995-4f8d-be88-8f948ca89c0f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f8e2e8b6-c927-4b84-8f2f-66d82f68cf14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca4cb436-f27a-457d-b5ce-5c784c088ef0",
        "cursor": {
          "ref": "4db59f92-79af-4c39-b3f9-be81ac618ad0",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "df9a699c-d660-44b1-b4b8-30a32e65ef1d"
        },
        "item": {
          "id": "ca4cb436-f27a-457d-b5ce-5c784c088ef0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "55c49c4d-1694-4436-ac85-11effd74bf5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb7e0fc-5b0c-4d9c-9f11-14e53f9c8f2e",
        "cursor": {
          "ref": "fd726643-99b1-40c1-92c1-57f0419d75d5",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7a29e477-e4c9-436b-b98b-dc40f115d551"
        },
        "item": {
          "id": "fdb7e0fc-5b0c-4d9c-9f11-14e53f9c8f2e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4422ae2b-0e2f-4f9e-a415-9d1a97ebf768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11190602-0741-4138-bbc4-c2c9607ca011",
        "cursor": {
          "ref": "30682bb2-d35e-4e07-b4d0-7e55c3591f2f",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "21783595-3240-46f5-b67f-01a7ab7e61ef"
        },
        "item": {
          "id": "11190602-0741-4138-bbc4-c2c9607ca011",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ec4667bb-33b6-4e0c-928f-d79be7ac7b60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9f361d3-36ea-43f2-a6f4-60574afc7fcc",
        "cursor": {
          "ref": "5849487e-dea1-466b-be9b-464f9dce46aa",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "fa65b963-f1e0-472c-abf9-25253f93ec9a"
        },
        "item": {
          "id": "a9f361d3-36ea-43f2-a6f4-60574afc7fcc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7bce848b-d7e6-4afc-be47-9bdd8a75d192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 309,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a51e9054-aeaa-4dc1-bf47-d408d80f498f",
        "cursor": {
          "ref": "33ba919e-3dd1-48a6-8921-f3b909fabd18",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "88186029-1cf9-4c72-b825-711da20a8f62"
        },
        "item": {
          "id": "a51e9054-aeaa-4dc1-bf47-d408d80f498f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "853fd99e-0bca-4004-9abf-2bb066665aeb",
          "status": "Created",
          "code": 201,
          "responseTime": 3550,
          "responseSize": 976
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "8a74fb26-14fd-4db9-8fd5-fcae566b06ff",
        "cursor": {
          "ref": "8f1296bc-946b-41a1-bff3-d446406c0f65",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "17af8ba0-c7ea-446e-88ac-7d729a68e41e"
        },
        "item": {
          "id": "8a74fb26-14fd-4db9-8fd5-fcae566b06ff",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d5168768-4e9b-465b-adb6-b4b0f725d7df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29684d49-4655-4f6b-b7fc-4cc39763b042",
        "cursor": {
          "ref": "7b9f8392-b307-4a10-9752-5d0919b1e5e8",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ce853bcf-85af-4fac-a799-7e9b53032699"
        },
        "item": {
          "id": "29684d49-4655-4f6b-b7fc-4cc39763b042",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c6f29851-de5d-41a4-86c3-0cfb8cd72ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 150,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa24194e-9586-490d-b7c9-5d64479d627e",
        "cursor": {
          "ref": "5511aad9-236e-40de-8f5c-0168eda99b14",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a8f97556-9548-434e-b434-1ca1ef111dce"
        },
        "item": {
          "id": "fa24194e-9586-490d-b7c9-5d64479d627e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4d797a1d-848a-4b83-b58e-582e0947a9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7ded78-4b5f-4a1d-b524-19404f980d29",
        "cursor": {
          "ref": "6cfbe123-5a17-40c0-9ba8-b37ff89dd2f8",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a99790af-7bfb-478c-b94e-5fae4b9e1db8"
        },
        "item": {
          "id": "5d7ded78-4b5f-4a1d-b524-19404f980d29",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "3b19c977-137d-45ea-8f2c-8858892c037d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b6fff12-c354-44a1-8ffe-d76f3cf6bf0f",
        "cursor": {
          "ref": "bed9ec3a-8266-44dd-9375-7b61b0d227b1",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b6148866-816f-42c8-9ef5-4168a1c72af0"
        },
        "item": {
          "id": "8b6fff12-c354-44a1-8ffe-d76f3cf6bf0f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "70c6a80b-e29a-4005-a669-0a93f335a4f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5880cdd-66a2-4b8c-abb3-f5cdf59595c5",
        "cursor": {
          "ref": "373021c2-6f85-4229-8d05-8eecca0cc456",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "84408de1-e9d1-4b57-8212-5454ee9f18dc"
        },
        "item": {
          "id": "d5880cdd-66a2-4b8c-abb3-f5cdf59595c5",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a8c90d9c-584c-47db-a9db-ee53b78103d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6fc6d4-5af9-4ee8-b255-c8848fe66be2",
        "cursor": {
          "ref": "4e8d346e-579c-4b0c-af40-d09a507b5451",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5d9ba505-d77d-4082-8160-60ae053bfb6e"
        },
        "item": {
          "id": "4d6fc6d4-5af9-4ee8-b255-c8848fe66be2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ffc95513-6738-49a3-a275-7aea47efa0a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5636f707-acdd-464b-abb0-2b972c74056b",
        "cursor": {
          "ref": "a3d7d726-4a6d-4fce-b013-20ca4fc61304",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "1aceb26d-cb2f-482f-a0e6-ad93740a5310"
        },
        "item": {
          "id": "5636f707-acdd-464b-abb0-2b972c74056b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a19cba08-4469-4a86-bff3-efa4e4931d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab765cac-14c4-4962-855b-f1d1d57b9121",
        "cursor": {
          "ref": "4109ff22-33f4-44d0-b4c9-9990e7b1c0c5",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "aeeacf98-d8dc-45f4-82f4-86565395ebc4"
        },
        "item": {
          "id": "ab765cac-14c4-4962-855b-f1d1d57b9121",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e6e11f68-a1ee-4f60-9678-60255881560e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21921430-ad89-4130-8fa5-7feda2fb41da",
        "cursor": {
          "ref": "2fd6d017-101b-417b-8d2a-e377f6a8aa64",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3c5f9834-8926-4694-ba53-df3fc7f6d729"
        },
        "item": {
          "id": "21921430-ad89-4130-8fa5-7feda2fb41da",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "27ff85cb-f807-4e9c-a081-5fc557537491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147bbab4-de6c-4107-bceb-d626e64d1720",
        "cursor": {
          "ref": "63794955-66db-4445-839a-d8fba10489c1",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "39d16463-f34c-4c0f-9c97-08d65cfb7a02"
        },
        "item": {
          "id": "147bbab4-de6c-4107-bceb-d626e64d1720",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "808277ed-9b8a-4d3b-ba9f-3a568512613c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba68141-b6a1-43c4-b226-00f60a4c8ee2",
        "cursor": {
          "ref": "db639155-6f12-40d8-b565-9314f0b0ddab",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "02cdf0e4-dec2-4446-80b4-6435017bc20b"
        },
        "item": {
          "id": "2ba68141-b6a1-43c4-b226-00f60a4c8ee2",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2a37e81b-ff35-4703-a1dc-02e0548a9ba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a7bd2c-8afb-4b88-bf91-d23e6a25adb4",
        "cursor": {
          "ref": "ee155d02-709f-4fd2-9915-726ef0747f26",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "72e419e3-e541-46cb-87d6-b77769b8cb3b"
        },
        "item": {
          "id": "30a7bd2c-8afb-4b88-bf91-d23e6a25adb4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8e68ed6f-0ef5-48c8-b66a-532ca4cd1b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d52b8fc8-eb17-4eb8-ae91-ccb941ec7eae",
        "cursor": {
          "ref": "001894b3-f00a-49c5-acf0-c1c1cbae9a76",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "47a962da-c8d8-40bf-b9fd-c134283518bd"
        },
        "item": {
          "id": "d52b8fc8-eb17-4eb8-ae91-ccb941ec7eae",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b1be19f8-6b3c-4e04-b837-ebca6ca42a81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5705539e-4579-43d8-86d4-9bcdae72e1f2",
        "cursor": {
          "ref": "d559b23d-1061-4fb6-a970-e6495da2eb47",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5fd98978-74c6-4520-9d61-c1355a9f5503"
        },
        "item": {
          "id": "5705539e-4579-43d8-86d4-9bcdae72e1f2",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e31c6275-5bfc-4cba-a843-b39753bdf992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac5d5117-223f-402a-a14d-22d3e546154d",
        "cursor": {
          "ref": "c9f9c9e5-4896-4033-977a-34b3865959bd",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "79dea86b-4a87-4177-aa4e-e0e0618ebf10"
        },
        "item": {
          "id": "ac5d5117-223f-402a-a14d-22d3e546154d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5848afcd-b695-49c4-b239-800a22fea486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c18e133-1eff-488c-b849-f71085650e9c",
        "cursor": {
          "ref": "ab77023e-a43d-420c-9ee5-4dedb1939b2b",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c794512f-ef0c-4df5-8996-5e46a7de4d58"
        },
        "item": {
          "id": "3c18e133-1eff-488c-b849-f71085650e9c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "84784fa5-c979-425f-a09d-50216fec16f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2255df06-1575-40a3-b9ee-8beb3d71da98",
        "cursor": {
          "ref": "da1f66a1-25ca-4dd8-9889-338c435c1c94",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0aceaa27-ce20-4c03-9eab-b355ca5a8938"
        },
        "item": {
          "id": "2255df06-1575-40a3-b9ee-8beb3d71da98",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7b2a7891-64ee-49ea-86eb-bd857771e745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f44a30b-b5aa-40ea-afb3-388392e99e9c",
        "cursor": {
          "ref": "5168b600-8473-4474-934f-f72a7b53ac04",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "83237362-9497-44da-8473-447bd34b5814"
        },
        "item": {
          "id": "4f44a30b-b5aa-40ea-afb3-388392e99e9c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6b7cfbc3-4b53-4592-ab24-7a11b33fe532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f88329-de04-49a9-98eb-6725be0a271a",
        "cursor": {
          "ref": "32372d78-f717-4c67-8734-b40a0deff815",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "150d2ec0-d39c-4394-af68-cfe5a611f519"
        },
        "item": {
          "id": "e0f88329-de04-49a9-98eb-6725be0a271a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "080297c3-bc79-4263-a123-e80e1779d4a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2ce814-f931-4706-9d10-7e77fb759ae9",
        "cursor": {
          "ref": "8f327aee-3ee6-4b3e-8c63-c03c0b86ce02",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a3a163f3-2b93-419b-9f3e-647f23efa45b"
        },
        "item": {
          "id": "2f2ce814-f931-4706-9d10-7e77fb759ae9",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2bf15733-9deb-49ce-8f30-02fa52eff25d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15993f0d-86f7-4529-8193-ba93956868bc",
        "cursor": {
          "ref": "2d4f8a97-53b3-4f92-91b6-84ec9c3d11cd",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5cc67798-754e-4de6-b0c5-3787003ed131"
        },
        "item": {
          "id": "15993f0d-86f7-4529-8193-ba93956868bc",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4902d55c-3fb3-44b4-9eb0-8477cb0f2e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "753faaf2-7c9b-4d39-a32b-8748afa95467",
        "cursor": {
          "ref": "613c61b1-45f1-4c1d-91d2-9140bdde6805",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c8b8bf37-a156-46b0-b901-79f1c7f19720"
        },
        "item": {
          "id": "753faaf2-7c9b-4d39-a32b-8748afa95467",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "39c38866-98ff-414d-9d95-04535466ebbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ed16f3-fd01-47fb-b369-b788a3a91142",
        "cursor": {
          "ref": "76fa86e2-27b1-4fd0-86d0-ed93bdf181f5",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "5e8a8702-1da1-4a0a-a28f-8698b9dce5b6"
        },
        "item": {
          "id": "d6ed16f3-fd01-47fb-b369-b788a3a91142",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6ee0f6b5-c297-4414-afa6-77cb21ef4f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5fdd971-7122-4743-8d7d-e1b74c213d03",
        "cursor": {
          "ref": "0818caae-0f61-424c-b89f-3395ce36f3fe",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8d6c5493-5ffb-45fe-a795-7bf80bb17883"
        },
        "item": {
          "id": "c5fdd971-7122-4743-8d7d-e1b74c213d03",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "86fd9caa-776c-4bc1-aca2-9d932b918193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1341be7d-2739-43e8-9467-ec02f8bb9e42",
        "cursor": {
          "ref": "13d2e680-dad9-4bee-9e1a-9783fc1770ed",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4162433e-e959-4f82-96d0-0fd02843afdc"
        },
        "item": {
          "id": "1341be7d-2739-43e8-9467-ec02f8bb9e42",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "74cfc215-6178-4bd6-abf7-660f7fc62e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3900f9db-b495-45da-b8b4-c45f67eefd83",
        "cursor": {
          "ref": "9b6b7889-b59e-4905-9a9e-5547ed83f1ba",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7d004280-4faf-4271-a0a2-ffd87eb05947"
        },
        "item": {
          "id": "3900f9db-b495-45da-b8b4-c45f67eefd83",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "41004525-608a-4746-81f0-436c8302a632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e60fda15-d76c-4413-b948-9638ff2cd993",
        "cursor": {
          "ref": "483d745b-0e04-4b0b-8a91-58d611d0babf",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2970895f-281d-4c7c-a4ba-d551906f67c8"
        },
        "item": {
          "id": "e60fda15-d76c-4413-b948-9638ff2cd993",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4486f004-d315-4a13-92ce-0e21fcea668a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f700478f-8ed2-4f71-9a92-e9ce9543812a",
        "cursor": {
          "ref": "16dd4d7d-6080-4915-b7d7-43a7d5d4d3e3",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "11256739-47ad-4859-be8b-a0e52df2aecd"
        },
        "item": {
          "id": "f700478f-8ed2-4f71-9a92-e9ce9543812a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b0cefdf0-4380-43cf-834e-fb1d3b1267c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51c95f0-7b2c-4980-9e31-8c8697f8b63c",
        "cursor": {
          "ref": "03526bab-3f0a-4bcd-8e60-a01961398786",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d7c645b1-5477-4110-80d1-35c0a9ca40bf"
        },
        "item": {
          "id": "e51c95f0-7b2c-4980-9e31-8c8697f8b63c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "944ca638-e20b-4f92-a920-9144971403bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62c9c05-d461-465c-9909-b7834ccab551",
        "cursor": {
          "ref": "7fe9617c-5734-4fd4-ae21-bfe65ab8b310",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "2cbf1d14-d49e-41c4-bce1-480689735403"
        },
        "item": {
          "id": "d62c9c05-d461-465c-9909-b7834ccab551",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "88bb013d-4906-4164-8ea4-8c472f734cc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "1b624dd3-eb88-4f1d-939f-197e7a74be9a",
        "cursor": {
          "ref": "44abcf02-4668-4e49-b44a-a02890ce3592",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "93f3c7d4-7d9c-44a1-bda2-5fd6e4ccccfd"
        },
        "item": {
          "id": "1b624dd3-eb88-4f1d-939f-197e7a74be9a",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "7c50d314-dd06-4b98-8d18-c1d7c32b6707",
          "status": "Created",
          "code": 201,
          "responseTime": 4227,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "ac81f724-4bb9-4dc9-8699-2299fc1372bc",
        "cursor": {
          "ref": "a89b2c73-fcb8-4ee1-8c2f-35ce466036d5",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c6f803e3-2d81-4a1b-81b1-e83cfaeaae80"
        },
        "item": {
          "id": "ac81f724-4bb9-4dc9-8699-2299fc1372bc",
          "name": "credentials_issue"
        },
        "response": {
          "id": "5aae5a8f-18ae-4162-bbb3-c2e6536c5ac7",
          "status": "Created",
          "code": 201,
          "responseTime": 5376,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd10cfd1-88dd-469a-ae2a-e381b0168ca1",
        "cursor": {
          "ref": "26fc4515-3185-47a6-82a9-441529b78fc5",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "fa1f4740-0d7d-4831-8b05-5bf627256acc"
        },
        "item": {
          "id": "cd10cfd1-88dd-469a-ae2a-e381b0168ca1",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "61db159a-cf61-44ae-98da-cc2c7aeef1ab",
          "status": "Created",
          "code": 201,
          "responseTime": 7917,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec74b4f-be59-47b9-abee-ebe02a950ccf",
        "cursor": {
          "ref": "9b9234ab-01dc-4f2b-aa8d-f2a484f8ac9e",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4dcfa19f-e6e6-453b-93c0-9b2186dff0a9"
        },
        "item": {
          "id": "bec74b4f-be59-47b9-abee-ebe02a950ccf",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5e6fb1ac-cf14-4786-a00a-561c4ff45f07",
          "status": "Created",
          "code": 201,
          "responseTime": 3044,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b10e6d7e-3cfc-428c-94c7-a8f236695010",
        "cursor": {
          "ref": "d7ce55f3-964d-4247-9d76-6e4e3a58cf11",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3cd0dc50-571b-49c1-a47a-b21abc0c33c0"
        },
        "item": {
          "id": "b10e6d7e-3cfc-428c-94c7-a8f236695010",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b29a4c42-8e26-446c-b0f1-88d1c99ab167",
          "status": "Created",
          "code": 201,
          "responseTime": 2670,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "115e001e-bb6c-4b5e-8563-ebd2445bab28",
        "cursor": {
          "ref": "408c8d8e-128b-488d-bf8b-de9c93a60d38",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b3becc79-0f11-425d-afc3-52f282e52b79"
        },
        "item": {
          "id": "115e001e-bb6c-4b5e-8563-ebd2445bab28",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a58571ac-bd60-4cfa-a9d2-5bbc87a7b05e",
          "status": "Created",
          "code": 201,
          "responseTime": 2444,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-28T00:40:49Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-28T00:40:49Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "0e2a28a8-31c7-4bee-ab27-3705d62736a0",
        "cursor": {
          "ref": "aeb5f59a-8e5c-46f9-9cb5-bd1262b6fdd4",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "36c9aa5d-cfd8-4e2d-b868-907d996cc336"
        },
        "item": {
          "id": "0e2a28a8-31c7-4bee-ab27-3705d62736a0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6bf1e60d-6c1f-4aea-b078-4b40293f6b3f",
          "status": "Created",
          "code": 201,
          "responseTime": 2584,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d78d8a-a511-48ee-8299-6e9856181fe8",
        "cursor": {
          "ref": "9a34c1c0-a7d7-4794-a606-1451016bd523",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "349fd550-1b7c-4f95-9151-cf137c4e56a6"
        },
        "item": {
          "id": "c5d78d8a-a511-48ee-8299-6e9856181fe8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "39bddae5-dd74-45de-b770-7c796c984ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d78d8a-a511-48ee-8299-6e9856181fe8",
        "cursor": {
          "ref": "9a34c1c0-a7d7-4794-a606-1451016bd523",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "349fd550-1b7c-4f95-9151-cf137c4e56a6"
        },
        "item": {
          "id": "c5d78d8a-a511-48ee-8299-6e9856181fe8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "39bddae5-dd74-45de-b770-7c796c984ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1059016-5e28-4f91-8e90-96cc19dd629e",
        "cursor": {
          "ref": "c0110289-b78a-4b74-8551-d6cf61bbca22",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4147f2a5-8875-4d10-aa0c-38c97238f765"
        },
        "item": {
          "id": "b1059016-5e28-4f91-8e90-96cc19dd629e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2b1f1538-e690-4a7f-98a1-8a43d1aa3c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c541af94-4cc8-47ef-82f7-864ff1afd2bc",
        "cursor": {
          "ref": "7a76b575-cb88-479b-a8e7-5c5259bec984",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8168e5dc-9417-4c1d-9ec8-d2b7eda8c558"
        },
        "item": {
          "id": "c541af94-4cc8-47ef-82f7-864ff1afd2bc",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e69cce11-bdf6-4b17-9da2-818df2dc4c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d414a8e-847c-411f-8e2f-2c5ec892df53",
        "cursor": {
          "ref": "5fe5998b-c29e-48d3-ae1d-61ea8e6e644d",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a2fcf010-a9d9-4551-b94e-2d3d76f276b2"
        },
        "item": {
          "id": "1d414a8e-847c-411f-8e2f-2c5ec892df53",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b926fdda-13eb-4f18-9ff5-1238e4795f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d7fe9d5-18e3-4274-977d-974a7818948d",
        "cursor": {
          "ref": "329807bb-159a-446a-9a6f-5e29d9c431c6",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "eb3a06d2-1e66-45e9-b4fe-f013928113c1"
        },
        "item": {
          "id": "1d7fe9d5-18e3-4274-977d-974a7818948d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "774529cd-8fab-4b43-be34-788ae3a9e188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b08f96fb-af99-480f-bdfe-51309dc7879d",
        "cursor": {
          "ref": "4c6e5de3-63eb-425f-9dcb-caa22fb43045",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "88aecde9-4df6-4358-bb5d-ddcede55995d"
        },
        "item": {
          "id": "b08f96fb-af99-480f-bdfe-51309dc7879d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "278f5ff0-89ce-422b-896f-b6e64d78c014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f08490-ba9c-4b78-b1d9-534e6a8094bf",
        "cursor": {
          "ref": "bf679b30-fde8-467e-96af-6f3958ce4c1d",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8d772c4d-d7af-4b5e-b651-b3e01f610a28"
        },
        "item": {
          "id": "37f08490-ba9c-4b78-b1d9-534e6a8094bf",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "718354a2-92a1-43dd-860d-6f0541b74561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32206510-d32b-4bbb-bb06-3e2eff826391",
        "cursor": {
          "ref": "0a2e7301-76b1-44c1-9b9d-6943a03af7f3",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "cd77e3a9-7404-46ea-94c9-a7305f15cae6"
        },
        "item": {
          "id": "32206510-d32b-4bbb-bb06-3e2eff826391",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3bf6b8e0-fc0f-4b5f-800e-f08725a36cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a6048b-c2b3-49e3-80cf-125a8e858e8c",
        "cursor": {
          "ref": "24c85540-b443-4fc7-b278-0bb37a5ac2de",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1340c47f-d923-48e6-a72d-c549e53f91cf"
        },
        "item": {
          "id": "f4a6048b-c2b3-49e3-80cf-125a8e858e8c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a3769934-238b-41e4-b902-3a295a80aa99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da3e426a-40d9-4459-8263-ccc3a5a918d5",
        "cursor": {
          "ref": "bff8048b-47ec-4432-9c85-e169a79c518d",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b869715c-9a7c-49b8-a76f-3a271780bec1"
        },
        "item": {
          "id": "da3e426a-40d9-4459-8263-ccc3a5a918d5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7a44fe5a-6777-44b7-a225-0595695eee40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceb17e70-5488-4140-9463-0043803c418c",
        "cursor": {
          "ref": "02392baf-a6aa-4e3f-aec2-3fc147b62abb",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3da8bba4-26bf-4eea-adc4-dfb2b223c3ab"
        },
        "item": {
          "id": "ceb17e70-5488-4140-9463-0043803c418c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "841e1594-cfbd-4818-97f6-1ce7a071ba8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbcadb6d-f2d1-4bc1-9691-072adfb822c4",
        "cursor": {
          "ref": "40da9a7b-d683-41ce-90a5-39f49c9ffeda",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3226c8b2-dbc5-4c41-bf35-8ac678bab45f"
        },
        "item": {
          "id": "bbcadb6d-f2d1-4bc1-9691-072adfb822c4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "15c165cd-e356-4369-bd58-d3bea677eee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e2e5f31-a7cc-4e38-ba97-ffeaeb14330a",
        "cursor": {
          "ref": "de5a5a46-1432-4ab4-8e33-4e074fda8d76",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3609173a-f8f4-4ff9-a6c7-571d79d8cae8"
        },
        "item": {
          "id": "9e2e5f31-a7cc-4e38-ba97-ffeaeb14330a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "37cf19d4-08dd-422a-b31e-c51ef7211155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "366df85f-b919-4bbe-ba71-715e3beec59a",
        "cursor": {
          "ref": "a7c70982-d177-4266-8de2-aacc5b842748",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b1ede2c5-f383-4a7f-bc99-faca06c07e67"
        },
        "item": {
          "id": "366df85f-b919-4bbe-ba71-715e3beec59a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "87d81bcf-f3d6-4581-8b95-d936791fce3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dec1fe1-87b3-4a9d-975b-f875a4789fa9",
        "cursor": {
          "ref": "fcdc4156-172d-440a-b0c5-4c7541d7b9e1",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7604c32b-d29d-44ad-800e-e273c1ed4c62"
        },
        "item": {
          "id": "3dec1fe1-87b3-4a9d-975b-f875a4789fa9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2bc771f2-8edb-4dea-8513-ad07be257b45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05681e57-538a-404d-b978-4676da619fdf",
        "cursor": {
          "ref": "85b61250-0985-47bc-8a37-85d094932dda",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5aa89339-57fc-4d90-a56a-870cdd99b1a6"
        },
        "item": {
          "id": "05681e57-538a-404d-b978-4676da619fdf",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ab9639d6-000b-479f-8df9-755717a4a728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "478f1afb-ae9a-4534-8b5a-40a9bd3b6c5f",
        "cursor": {
          "ref": "a708693a-e50f-40f9-9590-d4b4fed9a680",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b1600f71-6d60-47c7-a988-3ed023867f2f"
        },
        "item": {
          "id": "478f1afb-ae9a-4534-8b5a-40a9bd3b6c5f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1518f599-c876-41b2-af80-e12fd9ce4594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "798ee736-4f7a-47b0-a9a8-cae98fbf4c56",
        "cursor": {
          "ref": "32ded2f5-01f3-4438-b29f-c384e5eedaab",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "885a88b7-0a2b-438f-baa1-3e38d5d3da61"
        },
        "item": {
          "id": "798ee736-4f7a-47b0-a9a8-cae98fbf4c56",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a9bbe1a4-1e89-4198-a915-cf502bd07b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb302d0-d6df-4752-a900-27e03c24edf2",
        "cursor": {
          "ref": "0af04c3d-9ab3-467e-87f2-bb2d63417cda",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "77988583-5b70-49fe-bd97-f8982c8fb0c7"
        },
        "item": {
          "id": "3fb302d0-d6df-4752-a900-27e03c24edf2",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "75c78e23-03c2-4785-a36e-37704bb11d82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f00d4c7-cf04-472a-91ef-a1d1a6dc15a9",
        "cursor": {
          "ref": "28aacdf1-ecc9-4e6c-a500-96eb4015e44d",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "00ae17e7-d3a6-416c-9b38-30da14c9519d"
        },
        "item": {
          "id": "8f00d4c7-cf04-472a-91ef-a1d1a6dc15a9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "bc46ef58-3c32-48ef-9199-a903a1851822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1053577-fd7a-48db-a4cc-e28ca0b096d3",
        "cursor": {
          "ref": "ab13edd3-cf21-4548-9b0a-57eb957d3452",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6d5433b3-9554-4881-ba96-c48f6a73bbe1"
        },
        "item": {
          "id": "b1053577-fd7a-48db-a4cc-e28ca0b096d3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9bc380d4-bdf9-4d10-a115-1fee4168453c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c2b393-dbfa-4a11-b463-bc06d1f9fbc2",
        "cursor": {
          "ref": "e03cd728-65ca-42f4-a41f-22a17ad10b79",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9cec4683-b9fb-40df-bcdd-006c049fc577"
        },
        "item": {
          "id": "c9c2b393-dbfa-4a11-b463-bc06d1f9fbc2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "be533c92-ea42-424d-91ad-83d3dfba6df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c91b30-080d-44d1-92e6-ce22d2dd7a51",
        "cursor": {
          "ref": "df6d71db-8ca5-4802-b8fe-af176dabde53",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "fd0eeac4-0f1a-431b-9a26-3d7c4342bf11"
        },
        "item": {
          "id": "30c91b30-080d-44d1-92e6-ce22d2dd7a51",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1ccac341-8ff5-41f3-b791-d8765ecc6096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97e3f48c-f6da-4712-8bc3-48d1bb03a572",
        "cursor": {
          "ref": "9bdfc649-b01a-4766-809f-8caac6af57d4",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "047d49c9-0833-45e4-8de5-7d62dcb776c5"
        },
        "item": {
          "id": "97e3f48c-f6da-4712-8bc3-48d1bb03a572",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "50cffcfb-c36e-4fe6-8470-b94973a98da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c101d44-c6a2-4b14-b3d0-19e99ad646e5",
        "cursor": {
          "ref": "5a4a33f3-74ce-495e-85e4-527d4ed3a146",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f7703c76-d669-4410-be2e-1771e7c1dec2"
        },
        "item": {
          "id": "6c101d44-c6a2-4b14-b3d0-19e99ad646e5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "eb36ab8f-c8c1-48f0-8c96-011526beff0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6f84423-0077-41b5-b9ca-333ef67bd13b",
        "cursor": {
          "ref": "a04fc6dc-4e4b-40d4-bf45-fe992425484d",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3b6dd5a8-5de0-404c-a242-5a677fe8ab60"
        },
        "item": {
          "id": "d6f84423-0077-41b5-b9ca-333ef67bd13b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "dcd3164e-455a-4848-8106-86a5ea24628b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f502c5-801c-4f51-8f3e-98d542c4e1e1",
        "cursor": {
          "ref": "5472e053-77dd-449e-a937-f9f3021d4c21",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "8dc3c7c3-006e-4ea2-b024-63907515d450"
        },
        "item": {
          "id": "29f502c5-801c-4f51-8f3e-98d542c4e1e1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9308ab60-fb1e-4dca-ab38-ebf02df66be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43873371-197f-444c-80c1-715efd5afff8",
        "cursor": {
          "ref": "0ec199c7-d79c-4060-8a76-26b343bcb7e3",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "43496391-36eb-4b66-b87d-09f0c1129534"
        },
        "item": {
          "id": "43873371-197f-444c-80c1-715efd5afff8",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "babc341e-2e92-422f-a070-d65c21c61309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8103ab-0794-4b25-80bb-99e0e071a0e5",
        "cursor": {
          "ref": "bc6e60da-e50f-421c-a820-447e9b7c1070",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ab7034be-bd56-428a-9eb6-637f571d1a79"
        },
        "item": {
          "id": "ed8103ab-0794-4b25-80bb-99e0e071a0e5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1c794bae-504f-4120-92b0-3e598303b432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20bdf3be-d808-47b5-a222-7c6c7b1c0186",
        "cursor": {
          "ref": "dc481141-9167-4e04-b660-50e29a21938e",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ee1ffa10-2759-4bc6-a077-2f1debee4c25"
        },
        "item": {
          "id": "20bdf3be-d808-47b5-a222-7c6c7b1c0186",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bfbab8b8-aa84-452c-ae23-4fabc84e06ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651d6967-bb2d-443b-90b1-18479a243a15",
        "cursor": {
          "ref": "07a355de-575b-4a8b-98b0-a4f489e44233",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "498a7637-7986-4abd-9efd-61585db1654c"
        },
        "item": {
          "id": "651d6967-bb2d-443b-90b1-18479a243a15",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "defb0d03-e429-4e82-a0b4-62423a17a8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fba8127-6d1a-4004-852f-15081219ff8c",
        "cursor": {
          "ref": "ee078e37-df59-402b-8c13-272050bfd45d",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "cca7733e-d30f-42b2-93df-a6b930f8f99a"
        },
        "item": {
          "id": "4fba8127-6d1a-4004-852f-15081219ff8c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f8ed7baa-53cd-4e3c-bb96-49a2cccec8d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d48045a-b5ad-418f-bb62-aac13ea0a2dc",
        "cursor": {
          "ref": "800b80af-59a0-47f7-9d2c-6151007e06ef",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9c92af58-c269-4158-aa29-8d2677432370"
        },
        "item": {
          "id": "0d48045a-b5ad-418f-bb62-aac13ea0a2dc",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7524a81a-bce8-4e1f-a6fc-6abe1f5bd836",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "265820c3-4cf4-4efb-8411-b4b4a5c09095",
        "cursor": {
          "ref": "d6094395-0fe3-4901-a38c-2faaf00e0bef",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d93091e2-2e18-4a27-8694-19bfaf797d32"
        },
        "item": {
          "id": "265820c3-4cf4-4efb-8411-b4b4a5c09095",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "a256749d-e1c4-4b7d-beb6-1bb1539bf560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "d5b3616c-7081-4c92-96c9-ee3dc842f063",
        "cursor": {
          "ref": "91e0d792-fef2-4cdd-a6d5-0f5d4171a2cc",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "21bc9465-cfdc-4623-9135-e693958226cb"
        },
        "item": {
          "id": "d5b3616c-7081-4c92-96c9-ee3dc842f063",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a67eb91d-7c31-4c7a-a8d3-416b31ef6b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5b3616c-7081-4c92-96c9-ee3dc842f063",
        "cursor": {
          "ref": "91e0d792-fef2-4cdd-a6d5-0f5d4171a2cc",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "21bc9465-cfdc-4623-9135-e693958226cb"
        },
        "item": {
          "id": "d5b3616c-7081-4c92-96c9-ee3dc842f063",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a67eb91d-7c31-4c7a-a8d3-416b31ef6b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d120a37-02f7-4eca-aa7e-aa2390179cfe",
        "cursor": {
          "ref": "bfff3485-56c9-4dec-a292-b57e92c6498f",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9e10862e-baaf-44d7-a4e7-86c357836fac"
        },
        "item": {
          "id": "8d120a37-02f7-4eca-aa7e-aa2390179cfe",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9f7faba0-980c-4eec-a3ba-d2c448c7f1f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe22dbee-4b15-4c84-ae6d-0dcb23bdadb2",
        "cursor": {
          "ref": "ed60fd95-3c96-4f77-b11b-6da6cab1b084",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "117a1158-39e2-4810-8b52-00c3d387a0f6"
        },
        "item": {
          "id": "fe22dbee-4b15-4c84-ae6d-0dcb23bdadb2",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0909f8ce-0e0c-4e6c-b6a3-2b57bc5b174f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6debb06-2f99-472d-9f95-dd923476648c",
        "cursor": {
          "ref": "97e6a1f4-9d93-4b58-b502-8a82537c04c0",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0cace446-0052-4b05-be89-1f5d2403557e"
        },
        "item": {
          "id": "d6debb06-2f99-472d-9f95-dd923476648c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9941f66f-49ff-462c-ac4f-22a2635d3529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e4b745-1fe3-418f-80f1-75991aba5f77",
        "cursor": {
          "ref": "6ffe9561-e76e-40d6-a17b-bf3e68d3e39a",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f146773a-15a0-41e2-a93e-4ff50b777a8f"
        },
        "item": {
          "id": "b2e4b745-1fe3-418f-80f1-75991aba5f77",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "3f51ac6b-6cd1-44fc-858c-abae8c7770fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb42ec65-60b1-4cfc-a3d2-972139435cee",
        "cursor": {
          "ref": "33ce1f34-dcb0-45ca-ae1b-ae654fc1f023",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a6b6ecb6-12ee-439c-bc8f-e1497935b7ec"
        },
        "item": {
          "id": "cb42ec65-60b1-4cfc-a3d2-972139435cee",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a9c53a55-9545-45a3-aa82-237148ce9895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f28c28b-663e-451e-acaf-b84a4ed1bd1c",
        "cursor": {
          "ref": "bf2ff70c-e040-48ba-ac22-6aa411eadfde",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4895882e-a1aa-4fbc-bb15-c4923102df57"
        },
        "item": {
          "id": "7f28c28b-663e-451e-acaf-b84a4ed1bd1c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e3b2586c-f8de-4fa2-afa0-61e00b68209d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d625ca-c655-43cd-bc04-7857420ffe99",
        "cursor": {
          "ref": "75e6a5f9-0748-41b3-b345-e92069fe02a8",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "374ad2b9-d533-450a-86e9-208b080f2aa6"
        },
        "item": {
          "id": "30d625ca-c655-43cd-bc04-7857420ffe99",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "124fb584-509e-4a76-8864-29944167e370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "381858d6-bb4f-4b0a-a2ac-dfa27fa58d8e",
        "cursor": {
          "ref": "19fe271b-da8b-4954-93fc-ef4d4b6c384d",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0195975f-42c6-4122-a2e8-22f90ea0a77a"
        },
        "item": {
          "id": "381858d6-bb4f-4b0a-a2ac-dfa27fa58d8e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a165f654-9038-4a24-8ef5-cd838cd7d222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "614e6609-0411-4f7d-92c1-9cda3c6402e1",
        "cursor": {
          "ref": "45a810a7-60d4-4610-a45c-c4ccaaa401ab",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "fdb06a8e-f107-4454-8bb1-cad7408cfb00"
        },
        "item": {
          "id": "614e6609-0411-4f7d-92c1-9cda3c6402e1",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "818268ec-854e-4438-b79c-7353da481da2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae84d93-1ec8-4bea-be04-b1f3006a6d33",
        "cursor": {
          "ref": "741901a4-fdcc-409f-9d0a-4aef1c0ece15",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d0c5ac18-f74b-4eb4-9977-bd099c2ad7e7"
        },
        "item": {
          "id": "4ae84d93-1ec8-4bea-be04-b1f3006a6d33",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f998000a-fdb4-4380-9aa2-f4dd1380dcab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a8b8a88-9dbe-4b22-a774-f8ae9b0f91af",
        "cursor": {
          "ref": "31a6cf04-8d50-40b9-a09f-1fc1030bda74",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0ee7b794-4b23-4447-92cc-60d705f89bd7"
        },
        "item": {
          "id": "1a8b8a88-9dbe-4b22-a774-f8ae9b0f91af",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8ddc1fad-c0b9-4167-a46a-babca3d2190b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da960a1-3342-4a98-93b9-aa31e57a4a87",
        "cursor": {
          "ref": "6cb446bc-6607-4cc2-9133-f4cb2cea6fa3",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1667d2a5-678c-4aa5-88d6-65a2bf20da2e"
        },
        "item": {
          "id": "9da960a1-3342-4a98-93b9-aa31e57a4a87",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "040aa19e-8e40-4043-adb2-9b9b6927c3eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b97a8924-210b-40c3-8e10-2dac61423f89",
        "cursor": {
          "ref": "a4b3de60-992c-48c6-bb1a-1412a2198688",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c98369f4-66d6-4e59-8fd2-199999c3bc87"
        },
        "item": {
          "id": "b97a8924-210b-40c3-8e10-2dac61423f89",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "14b3a979-fb9c-48e6-b73d-ec8495728006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228bda10-e92e-4060-8089-764eeeb52a75",
        "cursor": {
          "ref": "d633fca1-7730-4211-aa50-3a6b2225013a",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "937ecae7-ba9d-41cf-a6ed-7dc4bf02c88a"
        },
        "item": {
          "id": "228bda10-e92e-4060-8089-764eeeb52a75",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "695607a9-4535-4a45-a6e6-ace2c462c053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad605a0-7bfa-4e1b-9ad6-3c154f4fdf3d",
        "cursor": {
          "ref": "f13dfedc-45b2-4aff-8d6b-8c9d42e27375",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "96ada2cc-6ebd-4031-8fed-7eb4ece1324f"
        },
        "item": {
          "id": "bad605a0-7bfa-4e1b-9ad6-3c154f4fdf3d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "158d5403-c76a-4128-ab53-b5d8f9ae869d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b35c39-de33-4a00-9b3c-f158706819ed",
        "cursor": {
          "ref": "99b1dfab-f40f-487b-93a7-41911f3e3387",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4cf4b27d-4638-46ce-8ccb-04f226acd2e5"
        },
        "item": {
          "id": "66b35c39-de33-4a00-9b3c-f158706819ed",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "facb6576-c033-41cc-8d92-2fab16e8b518",
          "status": "OK",
          "code": 200,
          "responseTime": 381,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "3d5e2b3b-aab2-42e9-96b4-5cf3c5a8783d",
        "cursor": {
          "ref": "77bc7828-ed91-4976-b5b2-892fb4bdcf49",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bf558d41-681e-4dcd-a4af-1b17cd7a3804"
        },
        "item": {
          "id": "3d5e2b3b-aab2-42e9-96b4-5cf3c5a8783d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5d8a70f0-1d68-4423-9a78-8079f6eb75fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c2ae019-390d-45f6-b2f4-8a49539fbad4",
        "cursor": {
          "ref": "4b65a062-c6a1-4e7c-81da-8715d77d2718",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2aa662f9-96f3-487b-bb97-434a3c33130c"
        },
        "item": {
          "id": "4c2ae019-390d-45f6-b2f4-8a49539fbad4",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "03108aa8-bed7-4fd0-a9eb-0d7a5a8a32d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f86866-f075-4810-a266-d86c6041d2ab",
        "cursor": {
          "ref": "406dd94d-f0e8-40d8-a7a9-96cfbe7cc2f0",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b3ced174-23e1-4caf-811a-2b9ce769f76b"
        },
        "item": {
          "id": "34f86866-f075-4810-a266-d86c6041d2ab",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5c4cc0e4-739f-4be4-923b-0ca836b27a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "493f0005-f35a-4cae-8a66-3f980c986f7f",
        "cursor": {
          "ref": "8342677a-5080-4459-9968-147f1c0e6423",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "24f91876-6614-414e-bad9-daca20608472"
        },
        "item": {
          "id": "493f0005-f35a-4cae-8a66-3f980c986f7f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b35e0e1b-ebc5-424c-ac47-ffd874f11a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27d6a5d-d554-4d84-a185-fc7ffc120acd",
        "cursor": {
          "ref": "ebbccbf2-9f03-4299-a9f8-65b5f69b5c11",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5e9f0a63-3eb4-489c-b7b7-b1d064b21267"
        },
        "item": {
          "id": "c27d6a5d-d554-4d84-a185-fc7ffc120acd",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d5aaab3a-7252-46d1-96f8-07abc0c1ca9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b47990-d45b-49d6-8f4b-59724fe416d3",
        "cursor": {
          "ref": "1c90ce1d-0b06-4b3c-84ca-fb2814727f48",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "358accf6-da76-4adb-b25d-3a072fb3d2d2"
        },
        "item": {
          "id": "55b47990-d45b-49d6-8f4b-59724fe416d3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5ab267d0-300a-4e86-b387-f430872c6072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09150031-7d94-4bc1-94a4-4d65baed9677",
        "cursor": {
          "ref": "7509c52c-dc69-4553-b971-ccebcfe76dbf",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ae3d673c-9412-477d-ba1a-6b59cfb14e73"
        },
        "item": {
          "id": "09150031-7d94-4bc1-94a4-4d65baed9677",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e40ed074-719c-4785-9c09-a5bb5ae1dd61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "499208e0-a864-44df-bf8e-71c4080cdfe3",
        "cursor": {
          "ref": "99aa0296-a34d-4318-9542-a3938d3c0b6d",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "fed894c4-fa8f-4684-bba1-09aea3a3f879"
        },
        "item": {
          "id": "499208e0-a864-44df-bf8e-71c4080cdfe3",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f8b9c1a5-1756-4799-a945-d785c1ea701c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f190f2-18bd-45bd-8a85-1c9c687fbee1",
        "cursor": {
          "ref": "94ecaa9d-0365-43e9-a890-e4a0ac7400fc",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "18e1d3f1-9faf-4489-8247-9aa4166155d0"
        },
        "item": {
          "id": "48f190f2-18bd-45bd-8a85-1c9c687fbee1",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d1992ba6-301a-4852-8165-71084c11a074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e583c741-8046-466e-9b69-f50530218711",
        "cursor": {
          "ref": "c23002eb-ff4d-40e7-8593-d39233f7a4ac",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e1bff140-33a0-4d9b-a96f-8ba572a69190"
        },
        "item": {
          "id": "e583c741-8046-466e-9b69-f50530218711",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "38f7dfd2-afc2-4e5f-8738-93c77c84cdf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf47daa-76fd-469e-9159-59d9ce25322b",
        "cursor": {
          "ref": "64731ae6-6e0a-481d-b832-aae2c21dacc7",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "f3319f55-dc06-4333-9f97-9d895a0d1c16"
        },
        "item": {
          "id": "acf47daa-76fd-469e-9159-59d9ce25322b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "43ac8a32-02b6-4d82-aefe-fddf159c732e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "680aecd4-6863-4fdd-9d67-af758f388b46",
        "cursor": {
          "ref": "36cf25a6-206b-4141-a2f3-c7f4ab3aaf9d",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3f8ef26d-d9c5-4a0a-9d18-41b0872c624f"
        },
        "item": {
          "id": "680aecd4-6863-4fdd-9d67-af758f388b46",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "540a78cc-a09c-4f9f-80de-4e7bb9e36f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa58692-3ab4-49bb-a7fe-f0bca17afd8b",
        "cursor": {
          "ref": "33b834b1-2870-41ba-8234-751d54df8acf",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1e67ff5f-2381-459c-8319-1f8c9d99bb59"
        },
        "item": {
          "id": "faa58692-3ab4-49bb-a7fe-f0bca17afd8b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d96e9e87-c00a-4517-960c-33366fb9735e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6394da8-7b2f-45ed-9edd-22f6ace146c4",
        "cursor": {
          "ref": "a6540f6d-5439-44a3-94b5-3247d629d6e0",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c43b925d-18ec-4721-9b10-0a2ac37cf420"
        },
        "item": {
          "id": "f6394da8-7b2f-45ed-9edd-22f6ace146c4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "95a3366a-3ca2-4803-8017-8503cd6640d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d219310-5706-46c4-9d54-c81873c1ac8c",
        "cursor": {
          "ref": "d27cb179-e15a-4caf-995b-619bd8ff37ac",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "56cecd8b-60aa-4dd0-a946-4b97b9ba876a"
        },
        "item": {
          "id": "3d219310-5706-46c4-9d54-c81873c1ac8c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0e2eec16-809e-433e-88cc-2dbad27ca8aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832b67cd-a2d9-4d49-a2a8-ea4bf4a129e8",
        "cursor": {
          "ref": "6cac9e7a-f17a-4b9c-ac46-2d519e514404",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "406a75fc-598e-4a09-ac05-ea7c2ec733ca"
        },
        "item": {
          "id": "832b67cd-a2d9-4d49-a2a8-ea4bf4a129e8",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "65972a65-a89c-4005-81fb-81fe5a1c12aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70636160-a7dc-4111-9376-196cb76ca3ec",
        "cursor": {
          "ref": "44672b12-5052-485b-8cce-02b7e2267998",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8831c881-113a-4076-af94-780747d68432"
        },
        "item": {
          "id": "70636160-a7dc-4111-9376-196cb76ca3ec",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6f5f25c5-a856-4079-88af-954d72466ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd5e3e42-0dca-4490-96bf-84159c118b06",
        "cursor": {
          "ref": "31d1bd68-1755-4eab-b924-b2ebcf933a79",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "2f6a7573-73c8-45fa-ab6c-038b56ff1829"
        },
        "item": {
          "id": "fd5e3e42-0dca-4490-96bf-84159c118b06",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7abc44cb-c9e1-4be3-930e-c169d8f4a9e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e8f6694-7256-4054-91d7-56c811a406eb",
        "cursor": {
          "ref": "4ac62e30-a6d6-47a5-92e7-90a68d54bbab",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a78796a2-c177-45f1-9042-53167d5ff4f6"
        },
        "item": {
          "id": "6e8f6694-7256-4054-91d7-56c811a406eb",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e5c776f1-64ee-48d7-9ee4-f717d3270709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fd92fab-b2eb-490b-a354-9cce106fbfa6",
        "cursor": {
          "ref": "cad462f8-c42f-416f-8665-b83f5c90bd2e",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7c288b78-1526-4ef3-bf18-5d99a5e239ca"
        },
        "item": {
          "id": "0fd92fab-b2eb-490b-a354-9cce106fbfa6",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1c90d298-458d-46e8-9970-55d54f86ff45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a966ed1-d006-4f28-a152-714015975e14",
        "cursor": {
          "ref": "8c03047b-3b3a-49a5-80b6-5a4593d35192",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "51457a78-b4dd-4b1c-9198-b1759ce381f8"
        },
        "item": {
          "id": "4a966ed1-d006-4f28-a152-714015975e14",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ca02283d-1741-4a9f-8cd7-886326ec3ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "976133d5-8f72-4ff0-a3d9-ea4ebed793cf",
        "cursor": {
          "ref": "fe7fb7c9-ca47-4f1a-862f-717463d003e9",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f9974d8a-ba44-427f-8e1a-be19ee2a1507"
        },
        "item": {
          "id": "976133d5-8f72-4ff0-a3d9-ea4ebed793cf",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "81d3a7fc-df6f-4897-bc03-358e3005a5f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d4090b-14b5-4cdf-843f-a38c8b16e627",
        "cursor": {
          "ref": "41380bd0-a08e-4bd0-a9d9-9854c0b825fe",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b9d23100-4ead-4537-9e8b-1a6d383ef37c"
        },
        "item": {
          "id": "41d4090b-14b5-4cdf-843f-a38c8b16e627",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7a0542fc-ab05-4113-a960-3f04b911c077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fafc988d-8a8c-414f-8b2e-2c94c600b827",
        "cursor": {
          "ref": "ea079edf-ac88-4c32-bcb7-faed9ac0674f",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c51ccf88-1b08-441b-8a4b-2d138d8bda17"
        },
        "item": {
          "id": "fafc988d-8a8c-414f-8b2e-2c94c600b827",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b05e8ae7-ef0c-4f3c-829c-ae3580b341bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71f3c52b-54aa-4131-a4d4-dd7b409c414b",
        "cursor": {
          "ref": "91534416-7243-430e-92d3-d7dad5ba721b",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "bda07337-0c8d-49b4-9763-8f8788a0fd79"
        },
        "item": {
          "id": "71f3c52b-54aa-4131-a4d4-dd7b409c414b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0120c604-8f26-4552-b07f-22224cc32e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e8e34f9-ee93-4ee6-a6f8-a583adc5d3e2",
        "cursor": {
          "ref": "e737f239-603d-457a-bf6c-99e04064256f",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "bd706bc4-a0e8-43e0-b34d-0b1be91f66b1"
        },
        "item": {
          "id": "1e8e34f9-ee93-4ee6-a6f8-a583adc5d3e2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9c5fdeca-890c-45a2-b901-d6515276d6a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e2f187-3546-43a3-9008-adf3e0f7c365",
        "cursor": {
          "ref": "88a00ff2-07ef-47e9-b643-bf9049ea4027",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "dde7c7f5-4b7e-46eb-ae32-a439563cc50c"
        },
        "item": {
          "id": "15e2f187-3546-43a3-9008-adf3e0f7c365",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ba3f1e51-eebd-4d3e-bc77-8933ceb2a99e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03de0200-f3d0-4db3-918f-1c5c70452853",
        "cursor": {
          "ref": "b01d1d75-5fb1-4164-ac0f-07cea61c1d74",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a80f60e6-90c9-44d0-b7ea-3ad340a93807"
        },
        "item": {
          "id": "03de0200-f3d0-4db3-918f-1c5c70452853",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "16b48ced-d25b-4518-94e8-39d4e45a435d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34dbb9e-5aa8-4e02-b32c-6ff2e779a5d5",
        "cursor": {
          "ref": "6997a776-e9f0-4c7c-bce4-77529227cd25",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b80f43c2-35d3-4502-8f70-b31e396b5d72"
        },
        "item": {
          "id": "e34dbb9e-5aa8-4e02-b32c-6ff2e779a5d5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d09c81d1-c6d6-433a-a2aa-d9e9c19da56b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef6507c8-1d0a-4bf8-b16e-8ac940eba37d",
        "cursor": {
          "ref": "a85b30b0-e73c-4b3d-9adf-5a9d6a2600d8",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b53c81a5-89e9-4d86-91c6-a3614387472f"
        },
        "item": {
          "id": "ef6507c8-1d0a-4bf8-b16e-8ac940eba37d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1febc422-c318-4eb5-bcfd-3eb57b930fe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00edfa8d-66a5-4a70-942d-af00f4ea0d7d",
        "cursor": {
          "ref": "c855b3d3-8357-4c0c-b846-898751c6cde3",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "72b2d32f-e585-42a3-8fd8-740435b3f9bf"
        },
        "item": {
          "id": "00edfa8d-66a5-4a70-942d-af00f4ea0d7d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9a261ad3-52d8-4fcb-b1aa-263dfc1f8b1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3894c9b-bad4-43d7-adaa-628454175b31",
        "cursor": {
          "ref": "cef8736f-45d2-4071-9d7c-63a114c5db33",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "75bb2c77-f77a-4d4b-b1b9-d10af5b254a5"
        },
        "item": {
          "id": "e3894c9b-bad4-43d7-adaa-628454175b31",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f807a109-0243-49e1-babe-670e511648c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f068c5ea-9753-43cb-b302-2904edcb405a",
        "cursor": {
          "ref": "6d13db9d-871c-4274-a60e-ecf9cb805a34",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "afdace24-582c-4445-8e33-0f478bc72753"
        },
        "item": {
          "id": "f068c5ea-9753-43cb-b302-2904edcb405a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5c6f5513-f166-4536-a250-32b0d06aaf45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b529ccee-7075-4dce-9c2a-723e9cd5c54f",
        "cursor": {
          "ref": "652498f6-18ef-44ef-a908-af991b103b2b",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "38a5f0ea-8b02-4f78-ae89-e5b72715a170"
        },
        "item": {
          "id": "b529ccee-7075-4dce-9c2a-723e9cd5c54f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "30a444d8-2bdb-4696-ac59-e818f5e87783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486611d6-6c3a-4aa2-887e-758f7db2b08f",
        "cursor": {
          "ref": "e7a528c5-a69c-45a4-ab54-b41f31d173be",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "edc73263-3bc4-468d-b8d5-54df574ce681"
        },
        "item": {
          "id": "486611d6-6c3a-4aa2-887e-758f7db2b08f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c7db117b-6671-4ac8-99be-d75f77a18cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4911478f-5a2d-4bc6-9909-ddbcb59b8414",
        "cursor": {
          "ref": "e3962c29-d8e9-45f5-9600-fae0c864835c",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2cb0621a-6504-4d08-a34e-d2ec09dc4384"
        },
        "item": {
          "id": "4911478f-5a2d-4bc6-9909-ddbcb59b8414",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "037970f0-9b65-48ed-9fad-95f1d9cb969c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf17f3a-5de5-4803-aa81-801628249676",
        "cursor": {
          "ref": "91bcf625-39d6-43f0-9336-1a6d416f8726",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "67ef2140-ed23-4b4e-82d3-30e410cedb83"
        },
        "item": {
          "id": "0bf17f3a-5de5-4803-aa81-801628249676",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "480e358b-f36d-4856-910a-768e5a1631b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e24ffff4-4878-416a-a530-2226fb1cf251",
        "cursor": {
          "ref": "67ac1429-518d-4e4c-803a-63d5f26a6ab4",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "eebd2aec-ccb0-485e-a2fa-1611f58bb450"
        },
        "item": {
          "id": "e24ffff4-4878-416a-a530-2226fb1cf251",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "37108b9f-9806-438c-946f-09c73c4a34f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b274dff-d258-45a1-8560-94965df43183",
        "cursor": {
          "ref": "7e1e73fe-f4ac-4fec-ab11-3d75b7caa5bd",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "1fdb48a8-6d66-4b9f-8e11-6ac4aa7f314f"
        },
        "item": {
          "id": "9b274dff-d258-45a1-8560-94965df43183",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "470061f3-de0a-4576-aacd-07b07959d914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78db404b-92e5-4a13-a2b2-81348556a6b4",
        "cursor": {
          "ref": "51a04530-e46b-41ac-9ab0-8f4273a75b61",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "676d78cd-4a43-43a0-a97c-41d225f06729"
        },
        "item": {
          "id": "78db404b-92e5-4a13-a2b2-81348556a6b4",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f58dafd2-ef58-471b-a1f7-afe26c3c8f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0c6690e-4aee-4c22-b083-fe3add30eab9",
        "cursor": {
          "ref": "ae62c7a5-a61e-42ad-87f0-4651e25f2944",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9cdcd864-90c1-4fba-aac9-982a84b58c99"
        },
        "item": {
          "id": "c0c6690e-4aee-4c22-b083-fe3add30eab9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "60934804-51c1-432f-a307-1487c206584b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f234413-fd24-42c8-93a6-56eaa380f0f5",
        "cursor": {
          "ref": "354231e1-082a-44c2-b1be-bb791328e70e",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d4235968-0669-4746-a3bb-97189ae12ab8"
        },
        "item": {
          "id": "2f234413-fd24-42c8-93a6-56eaa380f0f5",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c5e2ef8a-f6ea-4946-bc57-67cc320828fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "105ff7a0-067d-4807-8444-7e2c54364688",
        "cursor": {
          "ref": "7aa06f9f-e5c6-4098-acfa-d4584c4f92d3",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "395c5bc7-87ec-4ca2-ad2a-3d3ba41b8e74"
        },
        "item": {
          "id": "105ff7a0-067d-4807-8444-7e2c54364688",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "09a01d30-0e73-4045-bf60-53e261ff627a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f26b0f5-b2b0-49d3-bffc-44f54cc885b2",
        "cursor": {
          "ref": "9e376289-2862-4826-be99-679d3e468af4",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2c426798-1213-48c2-8823-39cc63f6c68f"
        },
        "item": {
          "id": "7f26b0f5-b2b0-49d3-bffc-44f54cc885b2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4ca879e2-aebb-4ff4-a25b-c1cb6bf2a5d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a551e3-9806-43b8-af40-4d494d8df221",
        "cursor": {
          "ref": "288e0677-fc27-46c5-8589-eeb4eabdcb77",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d4c5a67d-70c2-4263-8ddc-0b64343df9d3"
        },
        "item": {
          "id": "68a551e3-9806-43b8-af40-4d494d8df221",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9f7f51fc-0f12-4733-af8b-6ddade44bc87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f088354a-ec43-4ca0-a5fc-1d79c44fd153",
        "cursor": {
          "ref": "f33d8e49-329b-45a8-b573-0ce2b7ff1e2b",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2a230036-9f9e-4b18-892d-ae1bb499bf06"
        },
        "item": {
          "id": "f088354a-ec43-4ca0-a5fc-1d79c44fd153",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3ed6619c-0aae-4495-9691-cfa88a5fd16d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56516697-1148-4138-8901-1855261c6ab0",
        "cursor": {
          "ref": "29c1695e-9769-459d-b8ca-a17dce07441d",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0123eff1-b264-41a2-b09c-4fb51d50564f"
        },
        "item": {
          "id": "56516697-1148-4138-8901-1855261c6ab0",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "814d4753-faae-41f6-b5f7-5c9b5bc1d550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee40fb2-e7a9-4be1-b892-01b2a736ba49",
        "cursor": {
          "ref": "08e7f8d8-7662-4979-bcbf-9b899b848df0",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0e097d74-0978-49ce-85ec-334085807c17"
        },
        "item": {
          "id": "8ee40fb2-e7a9-4be1-b892-01b2a736ba49",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "36a48019-2898-47af-bfd0-07f9bb11ea92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89d784e-b1b9-4441-8537-03938e160f7a",
        "cursor": {
          "ref": "4f0a8c1f-928c-4a22-9b17-95383daf42e7",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4c99d87a-0824-4fe1-a6fb-e896546b327a"
        },
        "item": {
          "id": "e89d784e-b1b9-4441-8537-03938e160f7a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "0c234c21-ce3e-4595-9f1a-e3d63c32fb20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af6953c7-0a2d-42ec-abac-ea4ba3d57351",
        "cursor": {
          "ref": "01153f08-33ea-4bdd-a2f9-68752f6837b4",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d5b769a7-96c4-4965-b661-eff677c36645"
        },
        "item": {
          "id": "af6953c7-0a2d-42ec-abac-ea4ba3d57351",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9ef9c775-77e0-4423-8cd9-f645429c7a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a69fad-ef99-40b3-aede-7f3ff01e698e",
        "cursor": {
          "ref": "6f2bb63f-ace2-49f3-b31d-c44230f90b97",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b5ac7e2e-2a1d-4493-8a34-de6cd712709b"
        },
        "item": {
          "id": "d6a69fad-ef99-40b3-aede-7f3ff01e698e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "fd9488be-b34d-4dd6-815b-3ee10c5755cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98180c89-3a33-4755-a44b-4b473a6e5594",
        "cursor": {
          "ref": "1ec13e86-6ca2-4bba-8f7f-f20653294462",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f1d8737f-b6ad-44b6-8412-19825e576200"
        },
        "item": {
          "id": "98180c89-3a33-4755-a44b-4b473a6e5594",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "3f2d0a9f-f5a7-4480-8ee0-62480d38c4ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef034af-cf45-4bb3-97d6-9983156b2a9f",
        "cursor": {
          "ref": "5f7166cf-1db3-490c-9cb3-b593a9c2506d",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "50ef9769-b325-4a85-8081-2a89b21d1cbd"
        },
        "item": {
          "id": "bef034af-cf45-4bb3-97d6-9983156b2a9f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2a143ed1-7db5-4759-a47f-29924e148cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e6a822-09fe-4643-9dd4-82e96a36b726",
        "cursor": {
          "ref": "a5f6a7ba-78c2-4067-a603-3ab2bd38fb40",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "cf46aa93-eb4b-4285-a500-b19034d61c57"
        },
        "item": {
          "id": "c9e6a822-09fe-4643-9dd4-82e96a36b726",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b6f0d29f-3b25-4eb1-9988-8013ae16cec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce4bcfb-5d4f-48ae-8400-4e74c3502b7f",
        "cursor": {
          "ref": "eb1284a9-a8de-43bf-8087-3054feede67f",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ffb85621-f5bf-4ef0-ac8e-8ad0017b3b7f"
        },
        "item": {
          "id": "3ce4bcfb-5d4f-48ae-8400-4e74c3502b7f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "110df312-415a-4216-b134-0add7427b5dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8281de5f-fcf0-45fa-adb7-456f90749ee3",
        "cursor": {
          "ref": "4e6265ef-3df4-4b07-aa8c-a3e1a36e4e58",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a9364cc6-71a8-45ea-b3bc-08291a1b0040"
        },
        "item": {
          "id": "8281de5f-fcf0-45fa-adb7-456f90749ee3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e1deb3bf-a57f-4d79-9024-2dcf38693781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8ecfb7-b5da-4d65-b9de-65a1d4a660b1",
        "cursor": {
          "ref": "c58fd0e5-c949-40cb-8e9f-671add55751e",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "636c346f-9ed0-4c1e-a460-3e480a257c5c"
        },
        "item": {
          "id": "ca8ecfb7-b5da-4d65-b9de-65a1d4a660b1",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6623d57f-11c3-402e-9a7a-897203853534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481f8f02-88d6-47ab-8192-4a893b459f76",
        "cursor": {
          "ref": "71ac9a1f-18dd-4181-bd6f-e8afb869e2f9",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "07ed7b83-0193-4a69-a59e-44ec83f5e330"
        },
        "item": {
          "id": "481f8f02-88d6-47ab-8192-4a893b459f76",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6966c728-dab8-4839-b057-07af1ca88424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9d0a73-d3b1-488a-b330-07ee24b6c006",
        "cursor": {
          "ref": "870dfe03-be2d-427c-b9ea-fe7d44497bf7",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "cd0116e2-e05f-4188-960c-19c3ad0c9d06"
        },
        "item": {
          "id": "6d9d0a73-d3b1-488a-b330-07ee24b6c006",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "33a9bcbc-0568-4766-b2f9-be3cb933de02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e99f0509-ae0f-49e5-8ca8-22218768c624",
        "cursor": {
          "ref": "2e5cd8bc-2783-479f-bbe8-ca6a5b50f578",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "94d763ce-e58d-4e83-9796-a53e49d48520"
        },
        "item": {
          "id": "e99f0509-ae0f-49e5-8ca8-22218768c624",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "064ce1de-d6fe-471e-a4f4-3bb3a0ff0f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf6e760-d174-4e69-8afa-c13dd3611fd8",
        "cursor": {
          "ref": "4802294c-54ef-4976-9953-186551c977a3",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e4a71a6b-9738-4944-81d2-c37eb68c35f3"
        },
        "item": {
          "id": "8cf6e760-d174-4e69-8afa-c13dd3611fd8",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "23749979-0eea-40d7-aec0-7c85170a98ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b874e4a-95f9-4d1c-b9d1-e4125b993768",
        "cursor": {
          "ref": "82b20ccc-21a5-4996-ba13-14fcb7b5c3fd",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ba7ac477-6abe-463a-baaf-549c4a7530ab"
        },
        "item": {
          "id": "7b874e4a-95f9-4d1c-b9d1-e4125b993768",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6f50c67a-e9bc-49ac-9804-4dc0e244d015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52930b2e-fe29-4667-b21e-1cd955f993d3",
        "cursor": {
          "ref": "fd13d3ec-5ea5-40e6-aed3-2a7340dc6c1e",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "7410ab9d-f0c6-4dda-ba89-3f7d16c60f7e"
        },
        "item": {
          "id": "52930b2e-fe29-4667-b21e-1cd955f993d3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2f807902-c49d-40ff-8a18-14d4c303ae90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d902b9b8-64da-4260-8bee-4ab13675ea48",
        "cursor": {
          "ref": "ae58436c-c071-43aa-b9a1-d55305dbec14",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "abfeb989-6a48-4dcd-8e06-35637495248a"
        },
        "item": {
          "id": "d902b9b8-64da-4260-8bee-4ab13675ea48",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "613775d6-632b-4f39-98cb-2c72c532543a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1852ffe1-a375-4353-8e2f-7f0f487ec228",
        "cursor": {
          "ref": "ff44e6e1-7872-4a22-975a-6c5deb4e3060",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "83cb62ff-24de-4e93-b2e0-f1d03f8117d4"
        },
        "item": {
          "id": "1852ffe1-a375-4353-8e2f-7f0f487ec228",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4e471186-6dad-4bf2-8e0b-b2f6184c6e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0238c1f5-7b8e-44c1-a275-a5e0a1428bc7",
        "cursor": {
          "ref": "e8be708b-9577-48d4-ac70-300d9fc266e1",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "78b65cc5-b561-4c91-89cf-3e2e6c395b06"
        },
        "item": {
          "id": "0238c1f5-7b8e-44c1-a275-a5e0a1428bc7",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e5ae4f16-876a-44e3-b2bb-e748c08763c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efbd5413-eed2-4f92-940e-6453e65587a7",
        "cursor": {
          "ref": "0d54b4db-5262-4665-af91-21bea8d626de",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f3b19a92-9113-4034-b3f5-cdbbd653b56c"
        },
        "item": {
          "id": "efbd5413-eed2-4f92-940e-6453e65587a7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "30c5d108-55ed-4f08-8409-8ab44e97298b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca67e8e-ca15-49a5-b457-cdc62c6dfe74",
        "cursor": {
          "ref": "bf79298f-0fd0-4191-8517-dbdd5897dbbf",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "499b78a0-55f7-4547-898e-5997f71cc8f6"
        },
        "item": {
          "id": "4ca67e8e-ca15-49a5-b457-cdc62c6dfe74",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d74e989d-a0e4-41d6-aa5b-c70138478f28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d51f3c53-508c-4cb9-a229-eb109332687f",
        "cursor": {
          "ref": "2ebeb06e-6c78-4ed7-8b5d-ffcbfa430671",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "99d768ab-bd84-44a7-b4c9-38246d9b06bf"
        },
        "item": {
          "id": "d51f3c53-508c-4cb9-a229-eb109332687f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d90d661f-736e-4589-b052-3ccb4e29c52b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f1ab58-a80b-448c-85b6-d518e5584c9d",
        "cursor": {
          "ref": "5a9babc2-b240-4db6-afe4-36c4e1a6d5f1",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e897ba23-68ef-4200-9181-6ee175b323da"
        },
        "item": {
          "id": "14f1ab58-a80b-448c-85b6-d518e5584c9d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "25e19097-d586-4e73-bf76-5752953d201d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d333d504-8051-4bac-88e1-487b19ada871",
        "cursor": {
          "ref": "0b625de9-c9cd-4a2f-ae61-527cf8319b4e",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "98efbc0b-d520-453c-a9cb-4b09091f5e06"
        },
        "item": {
          "id": "d333d504-8051-4bac-88e1-487b19ada871",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8b7635d3-2d46-43c8-93eb-561156ba43ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2208ded9-14b4-4f37-bad8-cdedfd083406",
        "cursor": {
          "ref": "b11949ca-cd81-46ec-b3b9-f4e92ec6988e",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "252d7672-56cc-4ef6-9bea-ee4b7064cbcc"
        },
        "item": {
          "id": "2208ded9-14b4-4f37-bad8-cdedfd083406",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2fb60f69-c83c-4023-a975-7d635414ce54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e992af-8f77-4071-8d64-9771a8aff41b",
        "cursor": {
          "ref": "bc2ce462-4de5-4e92-9d30-4f875b48e376",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e9ad5fc4-6a20-4165-ad35-794f49e87503"
        },
        "item": {
          "id": "11e992af-8f77-4071-8d64-9771a8aff41b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6190a479-b3c3-402d-85c6-76796a49670d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c765564-bc36-4319-9fe8-18f3e0c08234",
        "cursor": {
          "ref": "86157c19-9522-4483-a927-6d65b4ad1e57",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "586e2ad3-f8ad-42dd-b775-39c4ba16ff9f"
        },
        "item": {
          "id": "6c765564-bc36-4319-9fe8-18f3e0c08234",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2729a3ed-2510-4d61-950e-963372b8ce1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b62ce5ce-056c-46b1-b1bb-1697cc64fa3b",
        "cursor": {
          "ref": "9118d01c-f997-4897-a060-d9952588cdd6",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5c1cf415-a447-4957-a200-a8496ece6b0e"
        },
        "item": {
          "id": "b62ce5ce-056c-46b1-b1bb-1697cc64fa3b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "dfb51518-a859-4fda-be6a-34bc74b9f02f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c6cdd5f-8bd3-42bc-8cd1-68a606f46f83",
        "cursor": {
          "ref": "07ad98cb-7322-4c4e-a8e9-de57b8db4aa4",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "098a35cc-1cd7-4b8e-8d72-7530e2962b21"
        },
        "item": {
          "id": "1c6cdd5f-8bd3-42bc-8cd1-68a606f46f83",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "0a1561c8-e4d7-4fe8-9d74-efd5528cf68a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc07b75-f7d9-4f77-9cb2-fb5ff5af4acb",
        "cursor": {
          "ref": "55299af8-7be3-482e-a121-b27eafe50da3",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5d32589c-b5ce-4ed5-b413-1c90bec48b18"
        },
        "item": {
          "id": "ddc07b75-f7d9-4f77-9cb2-fb5ff5af4acb",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "982cb176-99d5-4e5c-83af-3ad25dc919f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835b0a91-0fc9-479f-8927-d0efc3e360ef",
        "cursor": {
          "ref": "625eae73-aa40-40ca-ac8e-053c9529178c",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c3eb7b9a-0fb3-49ab-96c3-556bb1c27f90"
        },
        "item": {
          "id": "835b0a91-0fc9-479f-8927-d0efc3e360ef",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c996eaed-4a54-4cf2-87f9-db5704c4865a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3761f7af-3f5b-4f58-8f97-8ed0ef8d284a",
        "cursor": {
          "ref": "346baa23-bb00-475f-bc97-34cd0600cb39",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3f196bce-3989-4fe7-97bb-4670154e9b97"
        },
        "item": {
          "id": "3761f7af-3f5b-4f58-8f97-8ed0ef8d284a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "00a7a5d8-7ca0-4260-bd59-7fb296b2f197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cf2d87d-d713-46ff-9e3e-a1d853511fb1",
        "cursor": {
          "ref": "acd2b512-dfd9-4d5e-8ae7-1bc8c4131199",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "12d58144-f14f-4cd3-a76a-5ba719c28956"
        },
        "item": {
          "id": "1cf2d87d-d713-46ff-9e3e-a1d853511fb1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "31f54882-9644-491c-9f62-83d80f403836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdbfee15-846f-4376-be62-bad43f50cbe0",
        "cursor": {
          "ref": "2c64fe7b-029d-470b-b7fb-5ca5cb99da5a",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "359888a7-4297-4836-b7af-3015a2ab6477"
        },
        "item": {
          "id": "cdbfee15-846f-4376-be62-bad43f50cbe0",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b0cb2808-399d-4c58-acad-90e9e76840ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "c315a46e-8678-4c39-aeed-cad242c2177e",
        "cursor": {
          "ref": "dcc7de9a-a05a-435b-92fa-0c1fe3156410",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8e3a8723-57ed-41cf-9e2c-6b7efd79c6f6"
        },
        "item": {
          "id": "c315a46e-8678-4c39-aeed-cad242c2177e",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "06046f0f-94c3-4fd6-99f6-65619168be99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "6a31b0c9-5453-4cf7-91f1-d75973266450",
        "cursor": {
          "ref": "a3831f44-a5ee-4f79-bd0f-e06eb221e794",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4f389451-4d43-4142-959d-f29313aa55ac"
        },
        "item": {
          "id": "6a31b0c9-5453-4cf7-91f1-d75973266450",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "49f38d1f-edb5-4f51-9aa1-a470f206e2ef",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "9342c119-2173-4d86-9f70-ab506fa1f23e",
        "cursor": {
          "ref": "2474b00a-f626-4607-ac91-a9078de7b055",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b30fe45e-da40-43aa-8a42-83d466523e68"
        },
        "item": {
          "id": "9342c119-2173-4d86-9f70-ab506fa1f23e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ec909ed1-676b-440e-92fe-62e18ef395aa",
          "status": "OK",
          "code": 200,
          "responseTime": 2602,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "15cc65a1-ce3c-4b7e-b373-4cc4c5cc4158",
        "cursor": {
          "ref": "2e2210fb-3cd4-4872-9d46-26b0d3347b8d",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "aeb0bedd-ff39-4544-bdb9-856e09f055aa"
        },
        "item": {
          "id": "15cc65a1-ce3c-4b7e-b373-4cc4c5cc4158",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5429ff8c-76ba-42e7-b9ab-7ede6fb89323",
          "status": "OK",
          "code": 200,
          "responseTime": 2359,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cbda92f-d89d-4a3a-b8a3-5b6a5420da53",
        "cursor": {
          "ref": "84ef64fa-a740-4586-9a79-1f95f59dc753",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c26a06e0-c168-424b-98da-a707bbb7f4ce"
        },
        "item": {
          "id": "5cbda92f-d89d-4a3a-b8a3-5b6a5420da53",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "41f9656d-a677-4673-8970-b431f8ba1549",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "5cbda92f-d89d-4a3a-b8a3-5b6a5420da53",
        "cursor": {
          "ref": "84ef64fa-a740-4586-9a79-1f95f59dc753",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c26a06e0-c168-424b-98da-a707bbb7f4ce"
        },
        "item": {
          "id": "5cbda92f-d89d-4a3a-b8a3-5b6a5420da53",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "41f9656d-a677-4673-8970-b431f8ba1549",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "5cbda92f-d89d-4a3a-b8a3-5b6a5420da53",
        "cursor": {
          "ref": "84ef64fa-a740-4586-9a79-1f95f59dc753",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c26a06e0-c168-424b-98da-a707bbb7f4ce"
        },
        "item": {
          "id": "5cbda92f-d89d-4a3a-b8a3-5b6a5420da53",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "41f9656d-a677-4673-8970-b431f8ba1549",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "86d57e2a-a4ee-479f-a4de-1d030d0c94d9",
        "cursor": {
          "ref": "81ecd258-ddb6-4b5b-b1bd-4e2aa8439620",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "9a056a59-a88a-46d0-b0ce-cd099f2406a5"
        },
        "item": {
          "id": "86d57e2a-a4ee-479f-a4de-1d030d0c94d9",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "2d042c62-156f-4205-9a83-f72d5e37f71a",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "642c8cd4-359b-48ea-bf26-d22d2e31470a",
        "cursor": {
          "ref": "1d392f52-9d54-4634-b42a-c0253a5bd4cf",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c6d22650-fa77-4233-a0bc-2d0ca2a5a5b3"
        },
        "item": {
          "id": "642c8cd4-359b-48ea-bf26-d22d2e31470a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b4bcd659-9fdb-4f79-96fc-4ff43e79eb9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "642c8cd4-359b-48ea-bf26-d22d2e31470a",
        "cursor": {
          "ref": "1d392f52-9d54-4634-b42a-c0253a5bd4cf",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c6d22650-fa77-4233-a0bc-2d0ca2a5a5b3"
        },
        "item": {
          "id": "642c8cd4-359b-48ea-bf26-d22d2e31470a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b4bcd659-9fdb-4f79-96fc-4ff43e79eb9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "55ef2f51-f65b-4e8f-aa06-c693e1967319",
        "cursor": {
          "ref": "2501b0b1-f5b4-4e3e-89b8-f187929bafb4",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "55337d67-d35a-456a-8d5a-58b5dccd6256"
        },
        "item": {
          "id": "55ef2f51-f65b-4e8f-aa06-c693e1967319",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "cb6150d4-72a3-41d3-9876-701a47deb8a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 168,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "2ea268bb-099d-455a-8952-2646adb2fa3d",
        "cursor": {
          "ref": "5d57b1a2-ade3-4fcb-a15e-16dce689e87e",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "cde72594-0a89-4693-9346-fdbca29bd63e"
        },
        "item": {
          "id": "2ea268bb-099d-455a-8952-2646adb2fa3d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "17dacf57-3129-45ae-a869-57a178e60ac8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "2ea268bb-099d-455a-8952-2646adb2fa3d",
        "cursor": {
          "ref": "5d57b1a2-ade3-4fcb-a15e-16dce689e87e",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "cde72594-0a89-4693-9346-fdbca29bd63e"
        },
        "item": {
          "id": "2ea268bb-099d-455a-8952-2646adb2fa3d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "17dacf57-3129-45ae-a869-57a178e60ac8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "fb368b91-43d0-4e2f-8eab-780323d5deee",
        "cursor": {
          "ref": "963ad04a-b2f4-4593-9b5f-8296106373c2",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "61dfaafa-9ec8-40ff-9c46-e4677b94612e"
        },
        "item": {
          "id": "fb368b91-43d0-4e2f-8eab-780323d5deee",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "eb693d36-32bd-4b72-b2cd-25d65f4f9b6f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 108,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}