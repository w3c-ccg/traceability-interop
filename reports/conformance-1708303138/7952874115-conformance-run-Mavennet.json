{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5ce48f7f-0d43-43be-911f-3123f261900a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f518c8f1-d726-4077-9c31-50e2d414fe39",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b62a5929-8361-485b-8833-23bcaf3f0119",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e10f0fd4-feb9-42b8-8614-e67be21ec659"
                }
              }
            ]
          },
          {
            "id": "b102feb8-114e-4c42-8e01-ce7ec388cd9e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ff3f1a71-574d-4e45-bb05-cb57b2bd5527",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "165c7d62-9f14-4ac1-9137-844ddd42e6a3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "054012b9-bf0f-4ed4-987c-cf38a4a0034c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1c3e538a-7962-4df7-9b24-52bae248876b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5ea357e6-2944-4552-9add-fb73e91f2d21",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "45fc9cb4-9c2d-4c3d-bf8e-159903b25aee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9fba6c1f-2796-42a2-b3bf-e6d712cb7db1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "377deb19-e1d1-4bcf-b7c5-0909c05b15e8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "40705671-2c4c-4058-9dd6-1a85e4b95ab7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3cbfe873-bf5d-40fb-8788-52428cfeab30",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7aec9f1c-a767-4017-b4b5-ae118c37156b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a9caf69d-688a-4cb8-81b5-a46a602ceacd",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "49df9610-3828-4f69-8c5d-6f8307e2cab7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0499faad-b804-4f03-b07f-3bf74b199742",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d942c98e-cabc-4a38-98d2-288cd317f89c"
            }
          }
        ]
      },
      {
        "id": "f35c0aa2-684f-4e7c-b2e3-6e50a40a10a2",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "62635706-eea9-4494-9305-ebf9ea0516d7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7623675d-d1cc-4715-ba44-50bdc776ba1c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7c1f626a-d912-4054-b550-4e8daa186159",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5580bb9f-ecaa-4a6f-bcd2-e18c87d923d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92522fd6-c3d9-431d-91a8-1c1f8f491417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fae1fad-1bf8-465d-9d50-28cb303546c6",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "328071a5-5ae6-4d3e-bd71-59cd463d7782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5706341f-c3fd-4ecf-bf20-73cae3711e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c1aabb-8bb0-4404-90b0-e79495a500bf",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ccd131-647e-4386-85e0-095ff9b1ce21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "edd47602-2d65-42c3-b1b6-4b4a64c8c813"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bf70c88d-60d1-4b25-a0c5-ce078bb961ff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47163309-0091-4296-a5b0-e1bbf5fc3c72",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1ed58d-4bfd-463d-9e55-802c7b00a605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "54b83b9e-c360-4b0c-a781-93b85f9e4955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2ca946-0578-4f6a-addf-5dcee2ce1254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8978c629-fdda-4295-a066-75983ad81113"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "64ba2394-8ac0-4247-90ca-dd8610d69fb5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d540e868-d11e-4a98-8c9e-626dd6464cd5",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f36615a3-0185-459e-9f57-2b2e2b5209b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "64bd4894-9e05-4dde-a341-4255c78d96b5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9c1bd81-2dd1-4088-8369-cad7a89635ba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "44dc9afa-1907-47f8-97c8-da0a71d6a39d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae720dec-94a6-4070-b289-869c216b46d6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e9eedb83-c600-4159-b3b1-5e9285dc6896"
            }
          }
        ]
      },
      {
        "id": "673c827d-eae0-4528-ac90-bb7a77afca99",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "50541e7e-0e2d-44a6-b90d-f4b1e9dd59cc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "220decc0-aea6-42b1-9609-d7a065a01044",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a71e061f-d0ae-4fc8-8c26-331cdfcc3793",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "781f598d-2ea3-4080-8ee3-885b49e18df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a03ac9fb-2cf3-46dc-9885-e134c805d5bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443cb549-852f-495b-82f9-d59f0a829fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99c5c580-f85a-4ca3-acb4-28270731f0cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57ab5e7-dcc8-40a3-9efb-49a0fc8b94f8",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dcd7c8d-58b5-4672-94bb-759bf325d154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fc50beb-e720-486d-ada5-9d1476e0da1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47eebfa0-359a-475a-aa9f-1e99dfc2356e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68774a44-7f0b-405d-91c7-c609c631a79a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84887bc7-b5b5-431e-9415-ea3a5acee795",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6794ed19-7b58-428c-b384-fdf8c3439cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "620499c7-3325-4a37-9d94-30913e82cd2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf0b9d5-6caa-4a07-9694-dd4c01831d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "affc36a6-180b-41ca-855c-ba6c495b0d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5409c9-5f40-4b35-8521-341fae54651f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "accb2868-f1a1-46ad-968b-45989c9eed60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1251158b-e6ed-48d9-9416-79184605b0b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07525870-4e69-49f9-8ab0-06cf2870340e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42c6b4f9-4ed2-4244-b5be-ecd4543162b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261a6a51-fd4d-4bb7-94e5-014af1f3f46b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e6c74ea-657a-4186-9747-5b849cb6775f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1bb11d5-4ca8-42a5-b60c-0516f8f8e0c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf59c5b-1f06-4fff-9eb5-e9cefd1e24b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5aee3ee5-fccc-419e-8af6-165385ea014b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14bcf048-f208-4704-ab55-99a18fc2c48b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f6287f-1e5f-4ca9-8950-a9470ea29466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c89f39ae-2dac-4b6a-8445-8917aa5d4dd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119223e4-9998-42c5-bd5f-33b311aa8124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "693e373e-a2ea-470c-92b0-f9ee9de7b190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426a377e-292d-44c9-a0e5-54bf9d1f4372",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9c91bc-2e6b-45b5-83d2-8d8ca3c8084b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43a6202f-8f23-4bd2-988a-1d98ece80ec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c4f4de-f5f0-424f-8753-d37d3fe1882b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e47d7dc2-6d52-4ff1-a927-535cd4feebe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d460b4b8-69a9-4dcc-85fa-4223f0302ef4",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98e76d6-5afa-47af-9e89-a453faabd2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d665d1b9-5329-4f96-9223-7301bc9d82cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4a61b8-a6a0-41be-be76-6558eb967d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0caf4115-1471-41eb-982d-948ebfac68fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a3988a-fbb9-43e5-a21b-72603ae62fd6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b590bf1e-670b-431c-b2e0-fa355e01476c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a8c75ad-8f1e-4cf2-b8ed-d6a741f17860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c0e47a-8d39-4d90-8611-c31399c2eb26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50733752-b9fb-40ef-b7ea-4a96a202e9ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "982adc95-93fc-46a1-b25d-c37d64877787",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7854f076-1f1a-4b7b-b4c1-259da8ee143a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e988f663-2ccc-4707-8ffc-26eff242c3e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71a4e20-f105-4d67-95d2-7b0d3249ebe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6be825f-eb61-4de1-a2ba-49bab073f522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66770183-d342-4f6f-99df-6737bb8b777d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33621caf-7e7c-4ca0-813c-5104a94acfbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e18991e-531d-47d4-b8d2-3c7010c0c89b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1125f8a6-197a-4533-8b46-79ed32bc0edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0376f94-2047-42f0-82e1-e36e44eb5b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c70b04-9201-4439-a692-6c5646aafed3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a496a5f5-74ae-403f-aac1-a03d69223975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a663697-8d8e-47ce-a7e8-f0eca80138d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1442704-4610-44d1-9b7d-0ede957d4ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a197404d-cb84-499d-bc19-480883c0e9cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "768badf7-a6b0-4c8c-b5d2-3561b4367d04",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f209bfe6-bf8f-4cb9-83d8-c8c315ff29f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f677671a-3dd5-4851-b627-3a1f997abfcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f9e99d-6b66-4056-a07c-fe5ccb1429d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "364696bb-5f79-4fb8-bfb7-5247c4d4a498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc2cff8-2fd0-4343-bbd5-7f49dbbdb32c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff012f6f-d512-44f2-8f30-c7fef3fb4802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "595678aa-4770-42ab-b50a-297cb7736582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47116cf2-11f8-48a6-863c-6ed55d42d3c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5486a179-89d4-46ff-95e7-cca180c17376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69ad81a-fe37-47bf-9ab3-8e7e53379596",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b3b3e4-9ee6-49dc-a972-f373341e0220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf0b47a0-791e-47a8-ab45-e55e5fbf8c2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca6f43c0-78ab-4650-9bd9-7d28e15f0aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6a0025a-bff6-41f8-beaa-f578328e6191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a36f413-f061-44bc-84f4-569940c9fcbc",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f68609-a8c2-4a64-b938-455157ec80a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23e19402-2e9a-4315-aa30-ff2104d49f2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "783891a9-ec84-4d5c-ba2f-8aa91b4b1bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2305efec-f9a6-45f2-ab57-bb00c9797737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18d70e8-f416-4b44-852d-52b2b0ceda1d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f39bbb-839b-4ca0-a095-868e4f6644ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74bf38bd-1333-43d7-a5aa-b5579bd2bf92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2215904-a0db-48c3-87a4-0c1a5c83cfce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ee1bb02-01a9-441d-97d7-ecc283ba5784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33693dd-6df6-4cd0-b9a9-ab632db47eec",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "149d7710-d8bf-428e-afa1-8229b7b67b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "404efc89-a76f-466d-8e42-878e1b6a9aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb31a2b7-5065-4a91-a028-e076d66ba6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "21064dcc-472d-4bd1-85ee-1a40c3605300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d78f6b-1737-4726-9210-5c48d26c3206",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be56fd9-b65f-4456-a5bf-e688e264bde9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1457a1db-27c7-4b0a-b58c-1031c9d0927e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4848d35-c67e-4ad2-afa9-3c8055ce7b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fe7e875-ecbf-4bf8-9a81-0637f90eaca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18dc6980-b9bc-4ba6-893c-994fa5a14d49",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5fb5df-7e4c-4d48-9765-b0c0d94ca7b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1373dfa5-f677-4e3b-b730-a66062ec95ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ed0f0b-8788-46ed-885e-8349342c92e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90fc1ad6-e727-4317-8f40-80ed4fb4bd4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9cbe3f-3e4b-49b7-92bf-f5e8a2f3b29b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f815f612-3324-430d-87d7-852f4d8a6477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3cfe9e4-f05f-4dd7-af79-39462e57b831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220c8f39-bc9b-48c4-a688-77433a6291a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b8170ae-241d-4528-b2a1-70b494473d75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90f5ca9-c3de-4af5-ac04-487f741755e6",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c97187d-7798-485f-879f-933e0767404e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "686d2f14-064c-4f4b-a9a4-ed892acc5d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd99c9a-7fe8-47f3-9cf8-3fd9cdc5dac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af9a4aee-309f-408c-8839-542b1e515df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c3f991-839c-4449-8713-96829e800ee5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e5192e-9aaf-457d-8543-5f2dcb4a718f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcb6f8c6-1766-406a-8c29-8a17c02f6a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df199e48-99e5-46a9-a668-6a6017d21730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0a70c034-04e1-431d-ade2-16f8bdf4c834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "677901e0-e4b1-4330-a320-35be2b1f571f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bcbb1e1-006a-4b21-acb5-2cbc75af40d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8e89796-409d-478d-9c6b-b0b95943e0f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40af29a6-8838-49f9-95f3-7f630a9a9002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "10e5ef66-ac59-4dc0-8b19-a8d742cc86a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827ebb42-e6ca-4a38-97b2-e42752088893",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7578e182-1e5e-4801-af95-8a62f3ff7375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ef08852-27ef-4349-9d54-c421001acca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f3e145b-d406-423a-a295-1e263f2c63aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "acd3aecb-1d58-4790-b1a5-8fb52fb34a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65f4454-6b5d-42a6-9999-51194ed37010",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ac739b-5146-4f88-a4d7-7ba1ff4d1786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df138b2d-0b04-487f-b5f7-d241762d755c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd4fcce-477a-4bab-a249-51d1daba7603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d79cd740-c7af-4f12-9cce-b4b2f19abbf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eba2239-da52-427b-850f-bac39c690ee3",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a660769-17a7-4621-83e2-8177f51293f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d189f0a1-29e3-4160-808e-92e3f1dd1b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f930d605-b9bb-442c-af2f-0efde1794ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "92ff8f8a-ac04-4bb9-83f9-e46446691d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e0e454-9252-408d-a231-fec46d67ead7",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd5ff7d-bdcb-4eaa-b789-ed58c801c0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a209eadd-d642-44d1-b55d-4901e22a063e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ed00ef-50e4-484f-b35e-958dec38d533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b07dc5f-3e9c-46b1-a42a-21caf43c1b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e015a95c-b01a-4564-b99d-5121f71af6d2",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea17685-16b7-483b-9b61-0922cf5c79e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bf71667-9f54-4926-89ea-64d7d0bf2c4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfcfd00-8811-49c8-949f-21057e4e75c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3c2c402-5cde-4e65-8e30-f6908c1f49b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d47c61-32b8-4242-8869-bb28a0cc8d3c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0837f91a-ba76-4c81-8f9c-270e3fb7868b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02d71b13-5b7f-424a-8f9a-2a81fea1256a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "699670fd-a7ec-4f5a-b1a9-1fcdbd527de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "33f91578-b27a-4965-bf18-c53e9bf5deab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845ed9cd-e2a1-4c54-a315-2c7f699617d0",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83bd5ac7-1ffb-44de-b900-8e2d754610d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "158e7042-aa65-4842-999b-fb422279ce25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac22e28-1a01-46aa-8c90-a96f650b6cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c17366b2-799a-4acd-9d87-2195b3df6f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "489fb04c-d843-4914-8643-20fe85f9fcd2",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e8ad9f-30e6-4d5e-88ed-d0b5fbcb8198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3522414e-32dc-4c88-aba5-91a8fb97fa7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33bb217a-eae1-471d-bd85-2b271a6ecde1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5eb7a14-134d-4c45-8e11-2b6ea3592e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee86c9dd-7b7e-4237-94a1-a94abd3d971f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "715c84c5-36b9-4c0c-ab81-f8f8b67793f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5edb35-2787-4d24-af33-e5c9c10f6882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b415f111-7a03-4e5d-83ea-7a9106ed10c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "02e16753-dea0-4a56-ac6c-eccfa1e25450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d25860-03c6-48eb-86ec-92f4e80342ce",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7925231-8aef-45b8-9c78-ea009d71cfc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30ec7b02-8650-4268-9904-df08d23c3062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a13c195-6994-40ac-997a-47714ef04b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "58a19eaa-e6ee-4842-84b4-19559afd45cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87cf2a48-d4ee-41a1-8c90-f6ab5c913577",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b874c7-b716-491e-a526-4f2b957db880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "456655d7-9509-42e6-9761-0938779cb19a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bda4d19-1a7f-4fb7-b7df-b189dba0aa92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7793847c-26b7-4815-99d0-01604b13629e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed243818-b885-460e-b4bd-309438baa1b4",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa45cec-09bb-40ae-9b90-d1e5703e2819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49086748-04ec-4922-86b2-cfa3a903703e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2704473-a6df-45b1-922d-c85b61cf1be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0bd7f7c3-3e20-4d8d-ab37-816be30f79c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c58acd-b34c-4b69-b9b1-fd0c30ce529f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f768735d-6b01-4bde-adca-5d0d0371f1c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7540c16-81e9-4461-a26e-f31994dba882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96562f10-6cea-4903-9500-8e4f76620f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "57f1693b-4ddd-41f5-b93f-5b2a7135acec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67274876-5973-4b76-babd-bc2fc5fa1601",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3e7b34-a2b8-4214-a551-fcac653fcd36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f3fd002-c965-41b9-a6d8-9225244d9612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538b1ef3-534e-4366-909b-d3a6873318bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4d8fa15-1098-4d97-8255-ded80d769839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7179561b-13ef-4e79-ab42-1e5d36fd9185",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a56b689-3ead-4c54-9298-586170c4b9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1547470-1f29-4c50-81cb-9af6f2b8b74b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6c4fe5-9c4a-4574-932e-584fd8b6174d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dadaae9a-413d-4c4e-826a-5cc5bb9f01e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a163cc6-37a5-4bbb-8ba7-be595e6ab279",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9b06bc-d808-44db-b074-6bd34ba10a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f35b6d0-63c5-48f6-bded-3959d5ab3b03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7ac6cf-0a41-463a-a2ac-b2fbe08b0c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a29b838-ac77-4110-a123-93f564c3b3df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08941a7-ef61-479a-9304-1c214a5d0de5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7128b9b-636b-4717-9a9b-7d89fadfaed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b99d521e-aa11-486a-a4ef-1c27f7ac5991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa31f761-6e8b-48c6-8043-9c6224b2a1d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "500f2a7c-4b00-4a03-a8a4-72bb2019ba12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839b798a-16a9-4afa-87b4-ed197ac63eaa",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "429c969d-13d7-4838-9dd5-945a62d4f528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "816d7286-788a-487f-8e4f-3713c7401857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd652dc-ae61-4254-882b-c73e42098fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7a9a370b-c12c-4bb0-8339-854305de3e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd0e4e0-a96d-464f-b561-539a6672d24e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a106b5-321d-4293-861a-33aa82825612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "123d028d-ca6e-47d6-a2a7-a2a369c74ba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a3ce57-00d6-4cf9-9c66-97c0c0687fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b53a1442-89d2-4d42-bbea-b1e7021c71e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e527668-f86c-4294-a34a-b419b48b13f1",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0e896a-2011-45d5-9953-eee6fe923575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4d88f6a-6e52-48d9-98c5-f233128a7ccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "353e3f88-bfb2-4d3a-9b19-cffb5765fa3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d44775e4-7a7d-4962-a180-69206e6040d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c33a2d38-d7fb-4f72-aae6-d33f5ed4d793",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40392031-536a-46f2-a05d-0cc42adfa185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19e0be56-3d18-45ca-8068-3cddcade80c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c268e87-15af-4eab-936c-7bcf629a056d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9465c412-8552-4151-9f0c-7447dd276a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e65fc7f-af67-415e-8f3f-bda19968ee83",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17efd18-c2d1-4281-a448-68d0da727320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c557750d-2203-4d2e-ba92-311965fd863a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb07e43-1efb-4e3e-b915-ec308322ae07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "852c1d9f-efd4-4947-babd-38b6ead15c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1870524a-b340-40a9-9ace-fa2216e94e6f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a03d9d4-24ff-4530-ba2b-a4ba8b0e24ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4d8d1d4-449c-4b67-8e1d-2b1ea42cf035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450c1457-9619-4157-9bb8-59d0a8517523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0558a99f-1d73-4e96-a7af-6914e608cb7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00059f21-eea1-4e35-bb35-85c4a7b53bc4",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb465c45-ff4f-44f7-a7d5-14c666842c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9233524e-f2f0-469f-9128-4746bf83ffc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9887ba9a-1e2e-4b07-bf64-6521f084fcd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e94a7601-aa8f-40d9-99a6-24a5131fe187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb63afd3-dc75-4871-81d1-b6a53fcf1b21",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bee58c4-5ed7-4efe-8547-d3092e5a20fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdeada63-0016-4e03-a967-a38ea7bc227e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66355a45-104f-4f48-af8f-6b6cad5c0eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e27dd3a4-d250-4fa2-b418-9d91730050ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ebcb94-a5f1-482d-afe6-1d2de85038f9",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b6e3b5-9349-4ccc-9251-592523a6e155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06cbce1f-1d4e-4873-8cb7-5f4164059666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf85c88-9236-4348-8af8-d494e52f188d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "73ac050c-aafd-45e7-8e38-689d58688887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae57799-d602-478c-9b19-a47977c85c6a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d50454a-470c-4c75-9f0a-c0dd20e49774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e20fa7-7aac-49b1-aa66-0aa220026595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4af8ab-5e2c-470a-8ac7-0dea3535c9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "28404c49-a7ac-4cb9-b94a-361dadcfbf1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a4c54b-18a4-4403-a88b-593ac7bc3073",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a181bbf1-d04a-48c0-b57e-298039962cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc78204-7e9e-4c69-ae85-b977cdbcaa8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326d184d-e21a-492f-adab-6f076444db10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1715297-5497-40d8-a9fa-0f7e10643e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7344f1da-ad6c-4d3e-88c9-5c638b036653",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb8e4ac2-1a2f-4176-9327-7e02900407bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0074f9d7-b990-40dc-8e9a-9b41a176b34d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f4d152-30aa-494c-9924-14de6b009416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c328615-d477-4d93-918a-c91807dca40a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e9fda7-c85e-41a6-ad37-1c0c138ed4bc",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "873dd391-95d2-4481-aa7e-1e2df8e40833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2db84826-1a3c-42d0-a752-4e3477b06779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7854b0d-76d6-4aae-9106-c28ee7d037b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e712c51-c30a-49f4-9b03-43fa204b150b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f07d4296-791b-4930-9792-4ba8f0a40b6c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6875065-50b7-4dfd-9621-2815f3a461ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf11b14-15e5-45f6-9cc3-745c272bb48c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd991ed-901b-4551-b5fa-8fd3e3d3a09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "baf4d92c-d1ba-47c8-bfa0-85e271a5bb84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c23cf2-7bb2-4227-b0e0-b1f28e7aa23b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c467ab-6fab-45e9-a10a-cb79ed3d8751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b539962-2856-4792-9bd7-56d88a5c01ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b52047-a762-48c2-aba5-9b138576629a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1756a085-9aed-444d-b01e-c5b9f09c2a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c4976c-8585-4916-aea8-c463ed9465c1",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be288fc4-01c8-4cb7-889f-2f1856001d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ed57d9-83d0-4d70-b6e0-b5784170cf6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff1dbae-061c-45d6-ba7d-c78bc57cc0fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5fef569-bb55-46f1-8039-08afd2bb7588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb54111a-0aa2-4e83-9867-a563a9e90544",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff2a633-9a53-4dc6-86e4-60350d7e63a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6d6b092-47cb-4ff0-9e31-e4970d1af34a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861280ca-4644-4024-9fdc-41acf2335259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "eac625a5-af51-444e-9e0c-44d9500ac210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bbf0584-601a-49a1-b66b-bb9231b944e7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9f12a9-59c6-42be-85da-8f0335bbcae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7899ddc5-52f4-4342-8355-ce0174b9f01a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa25a6f-7257-4957-b1c6-2073fa89cb3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "99338ba8-b912-4854-8618-77401de7fb21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a6e801b-8b11-4aa7-8886-f88783afd102",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23ed55e-68ec-4012-97a3-3112be5de9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1143981-9259-4bd1-9581-ccf1c4d6057d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eacaa02-e356-49d2-a7be-4012318ffec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c7d2c18-4681-4a20-8c2b-b34e0853168e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0aca762-5390-46f6-886e-0a6363e6258d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90dbb63-374d-4c2a-bfe9-6bac65ccf4ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb035484-1925-4583-8413-e43e08f5e3be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9f7424-b73e-4b92-a223-6e07574024db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8036411-45b1-472a-aa32-7a927a0f66ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2298e6e-db54-4a42-8c28-23b51a5d3761",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4c1d37-ed46-4a1f-bd87-8ec746be9660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "759d29f0-2709-4152-b788-56f99fca6000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c4ef93-fe0d-4776-a50c-310b846d9ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4793cff9-0073-46bb-8199-a98d40a207fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2698deb-09b0-4ee0-bb10-774a9eeb6c63",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "661558b1-2f65-4722-bbec-0378461afb15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c37ec5d-69f0-48fa-a8b9-5869b74fce15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c60eb2-d685-4c96-8c1f-6834eb40425e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "627d3489-01bf-40f1-9660-27c5f8df9756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fbe1454-cce5-4721-90ba-fab21bfc07b6",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "719aa4dc-1535-46b3-8b27-a414b4a0eb2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d72fe76b-8296-4ee3-a2c6-d93cc2429c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b6cbd8-b5e6-466b-8a77-f9b97d919956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f922983-3aff-4406-83a9-d75ebfedf2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8545c05-76d4-4492-b04c-3ca205f63130",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e207cc60-f8d8-45d3-9ad7-d020ff25116e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ba7a830-3ae0-40f6-8af9-883602314741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb1d03a-d30f-4040-a5c0-a8085360e935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc0af7d7-cf54-4081-9cc2-0453c91e644a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583493c1-66f4-47bb-9b15-245126644b59",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e639b5-5307-4dd4-ace8-ef6ed1e07df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "147e1e5c-d086-4cbc-9784-02cde15ca3c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94b52b51-81ba-4b7d-a63a-80cdbb1f4807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf94f901-47db-4dea-9e29-bfdb1278905f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "474b765a-b640-42df-9d51-e20e6404a261",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6306a8d5-ce36-46c1-9c11-9b438028cd9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58dad89c-869a-457c-9a5a-1d525de9c785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9424b6f3-c49e-4c1d-a5cc-e32b32da0cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8f9be2aa-88de-4d56-bf38-3981ae68f076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00025dd5-c20b-4b27-921b-866d2d01cced",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d91d60f-7e0d-4b84-b4db-2c2267d7cefd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72769c9a-83f3-4627-bf6e-313674206198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be039b3-ce5c-4f34-95bb-caa8110f173e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dced625b-85f2-47bd-8e42-bab563b0f653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e8f0131-aae8-407a-8b04-d03b1133e09a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7430cf25-e9c5-4761-a624-3ee0b488467b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88e2675b-3bf2-4fe4-be5f-3ea96be3d044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13b6c8a4-d136-4893-88f6-71f3db4139e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "84beb31c-efe7-4634-bc8d-b657a5c755a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1932a0-5082-4127-a179-d8d17a61b460",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d394184-62a4-495e-a661-23bd34860e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb62e2c4-a800-470e-93da-fbfb0894f613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1db7932-7c5e-4fea-8edc-a738d7779184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b7bd717-eefe-4bc5-b65a-c768a1f6f29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9c3399-16dd-41d6-8e3c-83ffc838615a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e5e38c-d725-4fce-b38e-15350f0c6ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed5f44e7-88ee-4468-a53a-46bae0d5a946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb34a3ae-e6cd-4298-83a0-7fc9f023a167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "35b7634b-bc55-42f0-85b9-1d03e90c5e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12feae77-81ff-4f6b-b727-57909ac9ae10",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db58c2a4-d58a-456f-a9d7-3d45d342ba23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a3e4edf-e254-4d76-9b1a-6e9ce7add49c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3877615c-6946-404c-ae6e-b43b1560f7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35bf757c-f73c-44e2-899b-773e75ec80ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2360a1c6-6be0-41b6-804e-c4d38492a63a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f0f6c2-2371-4d9e-bef8-090bbe44aacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82a6974b-1aca-413f-a390-8afbe9800742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e41ce5c-6091-453b-8c97-825af6cdd501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "97365b9a-81f7-4b3c-a36d-92c79a68e686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a55889d-257d-4f42-8fd7-270ad4cd6f3f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b566160e-fe2d-49ad-9ddd-cb989f9bff39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3322b8a-11c0-49e9-b085-36f28d64d256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec6e960b-583e-40f5-9485-f324e1c36a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ae90cbd-3967-4bf8-b52d-796821e7a86d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91d658e-2578-49f9-968b-a9db9d48f4e0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "866d9833-875d-4248-b211-0c987e352e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edd49c99-6990-4436-83fc-4137d23198ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5872350e-e5e6-4049-98c5-bc29442c7f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7323505c-b75b-43f6-98a5-9d66af5d0cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a605a9-f819-4958-9978-793c7df38414",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c217ca10-fc9d-4a35-9499-6d373657eede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a009eb50-f855-4de4-8ee0-85a4043bdf48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e3fa84-c55f-4acc-bbf0-3b5da814511e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ae82823-657e-4192-a35b-1b8a105a1912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff1e971-1a16-498b-9d04-9e85d69b7c42",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1007447-8c05-4560-9d6c-6672d0c803f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d03f9ac8-9a36-4542-bd8e-84964690c0aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c793f2ab-cd35-4ad7-896d-2abdebdcebd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "48e11ba8-2f33-44f4-b878-4134762da19d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f6f8da4-59f8-48ca-9496-635d873a1224",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfecd3fd-9c19-4f19-9a60-ce0ed0ca708f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb6b0f83-b6fd-45c0-954a-9f0f85a2e691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04f725e-5590-4078-a1fb-27c7e2d47928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88236967-ef52-448c-9e0e-42c099a6476e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3890b27-8f6e-4741-a671-6ae808eb9e66",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb18bb6-2c15-4294-8cb3-116ba100d94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13fb18d8-35b2-404f-b86a-7aafe8521fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae03d203-4340-4f73-a96d-6daba26529c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbdea792-3a0a-4934-8de9-e8468a186f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b256cfff-1d5f-41f8-921b-0b2ada5d30c0",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e659e9-cbcf-4d32-b162-047f474a9ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db85270d-8d55-4d81-978a-4a24508a8372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254b8794-c39a-4a8a-8d9e-57bec95acda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "26add6c1-6812-409d-9acd-19b18de4121d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def95de8-01f9-4a7c-8e61-38d1a0654f0a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "508a9ad1-5bf6-4fce-8008-08e168088479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c94189d-d531-4862-a06c-a05dafaa8942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46c51ef-e087-45fd-9557-187f51a626d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c624f20b-9a53-493b-a61a-02fc2d3e0294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93856f3-0cd1-4fe2-bbde-bade0727447b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00187e54-a3db-4cd5-8bf3-4b01b25285c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "890baadf-e2ca-4e48-85b4-3deaffd825af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "613943f1-7148-42d4-acd4-56254e081206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "477afa87-4f0e-4ead-9d8d-2cd12ab5348f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cccf01f-f012-42fb-9245-d05081e3deab",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec93283-486c-4141-b3b2-3373b2af464c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9c1f83d-f9c8-423c-b8c1-7019bdbb8420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeeffc8e-d078-431b-a14b-781a51d76560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb67866d-0bc1-4858-a561-909bf2778d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cca3328-4733-4ca9-b4a4-c2b2b53bfff5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b449c7a-f019-433b-8a59-415cba34a1a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56935c37-81cd-4587-84a7-1fd4f4baebb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48dd6f4-d6c4-4b47-8e3c-e043b23e3c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "864fab70-3d15-4832-9785-abc4a8706e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc36ea02-df29-491b-8072-a385b04457c1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4925b91c-30f6-4243-80aa-123b3a4aea49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa077c5c-fbec-414f-80b1-7bf55c445d4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58455e34-f4d7-4a62-9259-cc816dd46e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5542e659-f580-40d7-86a4-00cf50d557c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4279c64a-068d-4e21-bddb-eb4592f9252f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9d4c00-0860-4ac0-9444-4ebbb04db34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f3fa6f2-5d82-4558-8078-d0855eb8e590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2c6477-d889-45d0-ae65-545ab625df47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "260ec92c-614c-499b-bbf4-0dd08c32f2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78cd4006-e3b0-4be2-af62-a1f8eb4134c4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e65658-53db-4f19-83d2-18cd408130e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83002363-b76c-414f-891f-90914d1a2b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64454cb0-70db-447d-9b66-52c2ce44703c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa86d58-7df6-4e88-a0c3-dc65a341d611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa0c719-f0b3-4a3c-a3b4-35d28019e055",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "760ee411-882f-4618-8b6c-67daa5d309ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cc0ac86-da44-484c-abef-49be2d26286a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29f1ac5-c1a3-41a1-b500-6a4cfa43c883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1471aa2c-9f65-4e0d-b058-4ed314e7acbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82bb003b-451d-47d1-b34b-8da4812fa941",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04af5e01-ae95-4131-be91-fd897fbadb2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bacc998-db74-414f-a265-8f902f3e9878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd8d5de-c689-4d7e-af4a-bbac14695783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a210458-058c-46fa-9e77-9a4bf5fcf215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2d7506-1329-4a85-ad93-12dae0b0ba07",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d49906b-baaf-4f08-b599-0381de2caddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a39682-1751-4309-b3c0-b51ec596fbf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec136210-c34b-42cc-810f-ab3956a9b73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "488c418f-da8c-420d-8f9b-244b7c0412ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb3a790-47ee-4f35-86cc-58b15d188fc6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eccfdbc-77cf-46ae-9391-90df0d4895c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03db8389-4c20-4d8c-ab13-d07cceba3433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ed46de-af3c-40ef-b3d8-e5d3ea9f5f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a830597-ce2d-483e-b61d-cd29cd7c55a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc675b9b-767b-47c1-8a74-546dca6e1d10",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d003c86-4124-4454-8177-1bd917d2d7ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c2a5ef65-dc85-4248-b5d0-f828b025c412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb16d78-857b-497f-9f58-a4908f08638a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b0a1aa0-d5de-465d-b44e-2c47d7ddeb89"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "06dbf4d0-2a6d-468a-bcc8-bebb87052d61",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7b910e95-bf33-4b87-8f0c-b11e5d4ddcaa",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e6a321-6197-407d-bcc4-0bcf81f7e0bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2e896bf-4f4c-4409-8fb3-e97d9a9dc12d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e309a2-9c9e-4862-a755-052aa2c34d2d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68d2bd2f-41de-4601-b972-9e4c279bebe6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2aa1cf3-9a8a-40dd-a893-3bcfacb375ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91d1dc04-a093-4b73-b595-2d5528439d02"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c972d53a-55fe-4cda-8c4b-5586deb2e357",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4b7ec9c-f4cc-483c-9423-6a0eedb0d1c3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "79b65a3d-5d07-4cec-8aeb-19110ebf5d31",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "efe8e31b-1fac-46c1-9705-6ac8f4c48cc3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "db073bd7-4ffe-42e4-b77a-f85ecb06de44",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f4916325-57d0-42e1-96b9-642473494cd6"
                }
              }
            ]
          },
          {
            "id": "440fd70b-d4d6-4d23-9491-7ff8f8cc26f8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f2303898-ddae-417a-bcf7-0535e4cb1d6a",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "c9c0e365-b4e3-4593-aa1a-d6ab0db76665",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbac9230-175b-4201-ba7d-652f344d6297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ebe0b373-4edd-4f6c-b7d3-c83870c393a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc805df5-d2f1-44fe-a85d-e6899e6e354e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36dcdb00-e870-4a72-b28e-a6245ae2c7a8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b9c47b43-9450-41d2-a2d7-931cd73665b3",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6d981fd-a570-46d4-8250-4b84ee4d3c49",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "03ab7176-4eee-410d-82b3-24adc14b75ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90de8856-8318-4da4-a9ac-e65edd0a4cef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3bc3b219-833c-41d6-85b7-695b8f7aeb2c"
                    }
                  }
                ]
              },
              {
                "id": "5973f5d8-54ae-4954-83e9-1ff8dabe7a87",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a15f526-d19a-468b-894a-f4472ea31a2e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3684610f-3795-44d2-a9e4-9dbfa4cb246a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ab29ea6-4499-40a3-938f-b91aea29073d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e1037687-05e1-4526-aba2-386fc10f5daa"
                    }
                  }
                ]
              },
              {
                "id": "8976742b-4835-42bc-b52f-5aec775d710f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "41a64374-55ad-40ad-bd51-8202dd5a1f43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9cbdac8b-b3ac-4d27-835f-5aeccae2e90b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f727fdd7-4cb8-482a-b36f-26f1e5f4629c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "73c059f1-394c-4f7c-922d-8689c8c54e71"
                    }
                  }
                ]
              },
              {
                "id": "d97b05bd-77ce-4b5f-9250-0271e003df09",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dcfecba3-9eec-4259-bff9-eaccf8440d08",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d93d4852-2b83-45c2-9f39-6be93214cc8f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7fe3b060-2b24-4bf1-882f-2f84512b55de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "28153a2e-4531-4d18-822c-301482cddb38"
                    }
                  }
                ]
              },
              {
                "id": "77afd9b9-084b-41fb-925f-da41026483d0",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "14d3b3c7-fa91-40f3-8a5c-01d4a3cc6168",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8dd454d3-832f-498e-9767-b4e5537b9d8f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4eb14d9-88f4-4ec8-aad0-2d765074a871",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5b75dea5-a994-46d6-a639-af02f8d73c20"
                    }
                  }
                ]
              },
              {
                "id": "c0312174-3053-4002-88c4-5448b3a944bc",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cbf5ef26-b6b7-47d8-9df5-acf8636cde6a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "decab1bf-d904-4bb6-8429-eb605d5c352c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "789ad66a-5ce3-42d6-9d04-6c74dc16e554",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e92ef336-47a2-4819-a377-7fb19e3724d5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "433d58c2-fc6c-4e24-a518-71696e432f93",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2b446ebf-b6b2-4ac9-a3dc-92bd9f74b26e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "af5ef022-0a21-485b-b197-ca4fd5cccf8c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "abf34085-55e4-4983-b23c-4f609fb40743"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "16ec0fd1-e549-45d6-bf49-2471f96661cf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d9e0eb28-53cd-40e1-a1f0-e32292cc4e60"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0300139a-d1d6-4ade-b181-81c5b628ce4b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19d31550-f2cf-4373-8179-533d145e91a0"
            }
          }
        ]
      },
      {
        "id": "ac135f4d-c5fd-48ee-a2bb-f508e86b93ed",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5dd369bf-3061-462b-8d4b-489eb0d69af5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d4a72663-d73c-4d10-a822-386b347b3bc7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f7f6a29e-e4c0-43cc-aeaf-cf4b03846e3a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e02c84e6-a522-4753-b724-fea20a8ffe8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d65b501d-0364-4106-bbd5-ae461eefefd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "469c10bb-9134-4cf2-a740-d4951fbe732a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2a81367-6d85-465b-b61e-cb6a48fd993f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01556b1b-3b99-4c93-af98-f3cc40b337c0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4752060-7179-4c87-b6c9-e50b6a8390a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66dc6795-a6f6-4a5d-90b8-e044a9980ce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a8409d-badc-46fa-beeb-c8ab9b647a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "06428dab-64b5-4b7b-a909-ddf4fb7ceea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59cd75a-bc55-4bbc-a4b7-c868e85d3721",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41bca982-700f-46c1-96b2-9b90ff49921a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a13059a1-7ce1-492e-8fc8-9baed3ef5d16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3707b2fc-a3e6-4409-80d9-62fb3b9dc10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c166cd8d-3d70-433e-8b9a-e820c5b034b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5163c6a3-68ef-4fa3-a240-efabf3e8d3fa",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "075404ca-125e-4aa1-9dbf-7286d982db9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "118150d3-9d19-4a12-8c00-33a04f136458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad9be03-6a35-4583-a9e4-f1e95e2ace52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fe7a519-b0a2-4bc0-b62d-a8443f2f6804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db30e532-a31e-4dd2-888e-40a261361014",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5160546-9e61-4883-a280-cfd386646973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05179d4a-34e4-4429-8311-d5192d6d1278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32672cc-6bfd-4dba-8460-724b6644777e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bbfa247-df43-4de0-aa41-e21dd7cfbd54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c5610a-0ea8-43d3-ab58-97c58763e6df",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75689f87-183d-463d-b48f-08dec959fe88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8492e758-8f79-4392-8b06-57b52a58cbfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e268b54a-e500-4a55-81d7-198570686979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1adb204-b0fa-4d78-aa4f-699247c23be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f64fa9-1522-404d-970d-ab615468f4bb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee5146e-b43b-447b-9158-027596028424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73055685-02d7-4d5f-96f8-f008dce4a83b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba474d7b-e516-4465-b556-8304969c3fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7aeb9e5b-62bb-4263-ad62-0aa5274214d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0edf73b6-2a33-4587-950a-65b3610fcef5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8abda2-0f22-404a-bcdf-84357e63addd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "574fdf67-be9b-4afe-b77e-cd622e6f1959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec6261bc-242f-47e1-9e94-4dc5125451dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "db9a37ba-28ac-476b-9f43-1a8cc100fc90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41038265-d9b0-4007-a62f-7ebff00fa752",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1a5339-f543-43d6-bbc5-437a27938c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3411781-97c1-43d8-802c-d5a81c7cb9fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c486076a-5d42-48ce-aa8f-04f3c35928c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f4cb0ce-112b-435e-9352-2f535e4156c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b0026c-54c5-4d90-bc73-3e59005f077e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "117eea89-cf73-4fc5-a35d-9281987d7529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f3f4309-7396-447a-a74f-9bff76c6b4c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e558be-717a-4f48-8e7b-5dd43166f213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bafc291f-bfce-4fd6-a203-3c8f79c86883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6abdbb35-ca36-4cc0-acb7-783f1d1f90a5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c77c43-0d8d-40ad-a26a-ad8f6415b662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba2bafd-1493-4ac3-8059-65bb4b78fcb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6387e1cf-a697-40c5-8dcb-c7e11288e9cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b51ad2ea-7d11-4849-b14b-ef5c93c2e34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab86583-20a2-439a-9f74-f0a31b9e30f1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ca25bf-0321-4964-a745-27ce615963ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8050ff7-0b17-47ee-b922-8eb0c52244f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d37694fd-f744-4817-93aa-3315a7a2f0e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "51354b26-b1c9-40a4-9591-bec91e82b31f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed50be5-7854-4fde-9359-a3653f63290c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "601470ed-aaf9-40ac-832c-81ae80bca407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bf4bffb-e5cd-4b97-bcea-6a3f32bf57f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8100ab37-8c60-4412-a212-e48135017134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "654aa14f-525c-4359-aa3a-f1743fee3016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a37abd-f4e2-41bb-bb40-1c5924f5d150",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a988d034-c765-4450-92e3-3e651f383bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99da7e80-61cf-4459-8a32-ab65783d0239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3526440e-a893-4bf2-b041-9daf8e81a506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "af84c325-0d0c-4b4e-96fe-c4e47a3005b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994c4f87-7b24-4f55-86d3-2732b09809f6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0b825f-d397-4423-b5b6-3eb51ac78665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fb21794-059b-4500-b1c5-13d2a83ebd97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f736f0ad-0d55-4d7e-9f9e-b98f1c157997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f5d13d8-74e5-4680-ae1e-0b9d89509fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9424bc54-de11-43f5-bcf0-bb917e336467",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8f6931-5c82-4964-a825-52f6004b062c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b93ae89-d29f-493a-9527-1cc74fa3c2e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ffb6cb-c2c8-43d3-833d-151f95996b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d264eb80-4466-4228-a87f-23776829e81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b7e930-3295-46d7-9914-d2aa567e90ad",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4e5483-0054-4464-9030-3666ef7b62f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd3f77c8-efbd-4c31-8270-7cac7e0d3aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38fe324-ced6-4925-ba4a-1a123e235907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0c5cf5b-bedd-4d94-9ce7-95d274dab4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5375e21f-6970-48dd-a848-427c39b4f257",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2100db-3b81-42cc-8072-c55765d32224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95efd0d1-ac28-49e9-a5ed-338c32da0102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b761fdfa-5ce0-419d-a29b-e97443890936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa640389-3fb6-4f90-b3e8-7b4b3300b09b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d99f1af-dd20-4207-b27b-0256f73e35e6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bdf8210-8bff-4760-a63a-506debd46740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5627db08-288d-48c8-b8c1-a01d6e069f37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0b3198-7637-469f-a100-53ad36057515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11f3325b-a13f-4fb1-a2fc-7098bcbca4ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc97c43-14f4-4a54-956a-076aefd2ba5d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eadd253e-1c0c-4ef3-84a2-f4bdbbad3a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c288897e-c000-479e-8c36-89ff7c9ee464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff65ca6-9b33-46aa-95f7-1db940c315b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c082e1f5-362f-4a51-9025-50ebc84b2257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06eff1bf-272f-41b6-ba3e-a699e6bb4d05",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "393fce3b-813a-4bff-8c37-1abac1b544d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3aef8d9-6246-4d8b-a0ae-4766775af36d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56bb344-d10b-4f32-99ac-1cd6d2b6f309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2262998-cda6-489c-bcce-4f996489bda8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d61f7370-4066-4879-a1a9-5680a1d16a81",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f420621-5df8-422a-a1e4-58ae8b353ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0211457e-658f-4924-b749-278d7e1d4c8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea53563-52b6-49fa-9c36-c2fbb30a4ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73183774-3e40-4f0f-a3d2-4f9fb29fe6df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1987809-c4ff-4fe5-b9d7-444f65fc4f3d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04635b3-ca85-4d81-b9f6-9fb345d124ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0946018b-d7d6-42ec-a250-d25f9061aa7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5891d9-a070-49d4-8c8d-930fef0d620c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "809237e4-91a7-4b34-b47d-f2985a976823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ea1f91-a4ea-4e81-b637-c4394e0c5fd8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4fc51f8-4773-4d04-a8b2-40df5fe2cf61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a49602f-0637-49b4-ba52-18711fe96079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db93d668-df11-48ba-bed6-91849f46961b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5100aae0-a295-4b94-9391-71bff68363c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3835d1-7d67-478d-8fc7-a02ac4f5dcfa",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18b8660-4a66-4bee-a22d-805f5fb0086a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4ee0255-29f6-4c42-ab52-6cdd1ca5ad52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f94771-1eb2-42b7-a635-60831b60b931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eaf2b853-2f2c-4153-a75c-af3fc385ed47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68627b08-e65c-4741-ba44-c529bd8b3544",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90e0608-d48e-43c7-b809-ee94955ed5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f15dbd48-40e1-4d83-a5be-3f50fd03a12e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd95340c-bb2f-4827-a012-42be07ee54d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4a46fb7-cfc4-43e2-b1be-a60c936a1a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba34c530-2f71-470b-a049-64135d29e971",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6924419-7b18-4833-a8d9-0f146d2b2996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f78519-d165-43a6-bdf3-e9e238becd7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97157261-1afe-4c1a-b060-55036e2f2491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f756eca1-7748-44df-8f68-67775efb1c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "208b4870-f087-4c28-b213-89203bed260b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af3be04-77ef-438c-a0fa-005392931b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7931dd4d-9c82-4f12-8eef-6bbea9e41100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343077ac-7c1c-4f8d-8633-aa23371a397e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "066d86c9-70b2-4d6b-adf9-e8b8d7a0b5a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "392eacb5-e7b2-467e-b398-7d2ee7e12732",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937e328d-b6f4-45eb-ae1e-60c57318e3ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "246b036e-abe2-4399-9490-a253c59c6c9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96be7c8-a5d5-4f8d-beb3-7cca84ca191f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "801fd4c5-67fb-425b-b702-87194891d925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8582b48-3eb8-4f0a-8fca-c3a64621e41f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2217d18f-5a16-46b8-a1a1-a941eae926e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38adcd24-ccac-497f-b0cf-e55c8f9c5aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2799d9-2b46-4235-b720-de7215ed34a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "263f7dd2-0b9b-4601-8835-ee5d5c8476e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc65415-bf7c-44b7-89ad-f3b5c671665d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e97d6f4-27d0-4efa-9aab-5015e4b4a5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc974231-e4be-42b1-a346-a0457c26667d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c3ec8b-2cf9-46ea-ad4a-2ea5ee9e9b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b60b125-c92e-4f06-910d-b7f5131bd821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a0f483-2a8a-45d0-87c0-9c43a7c4e39d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beeda31d-a499-457c-9005-4cb671402155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "070feb1f-aaa9-4e9b-a760-22e813d71877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc418271-30b8-49c6-b646-29455c039967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87c94bdd-3af4-4507-9561-cada4410e73e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fedaf650-243e-4f9e-b439-0805cb014602",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc9524f5-cf65-4478-8d22-e0854c0275e5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a34de1e-022e-42dd-be00-6fe81cc23c30",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d286bd60-4e44-430c-b623-e86a39687dce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d7cf6d-5234-4711-a29d-8c3604db9d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d650bd29-d1a7-46a5-9142-2f45dd297fe5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d233fe1c-a008-497a-87f6-76d48bb04540",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7099eab7-c7d9-427a-80d2-88f333288d80"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "15d78fa3-7d98-41df-aa19-0cf149807660",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ab772c6-476e-4b91-8646-95c9e178de5c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ceb967b-5bba-490d-aab0-6f4f38e804d1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f8619319-967b-487a-94ad-ad9242364641"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fe3c28e7-10ce-4317-8cf3-4614f2b24735",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0c0baa48-4dba-475a-9608-b38e540937a3"
            }
          }
        ]
      },
      {
        "id": "740f7f92-1692-44e6-af44-dfd25e309c51",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "e7223cde-bbd0-4afd-9443-3622c9bc0c05",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b960046-d394-49ea-8d23-604f1669bcaa",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "10969dbe-7452-4a3d-84dc-ecc2de099024",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa875c7-a9b4-4f10-8b19-3e41d7d0bd91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e5f401-fbc2-4b12-99da-b89212978673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb1872a9-9066-473b-a974-2853c950f8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "92c13c26-b7ef-4bbd-85c8-99475ea41e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec99ff4-52d4-4758-83cc-17803a9b359a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "673c32d4-64ba-4117-a9a8-d35b547b09b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c932820a-9687-4390-a44a-0dfeb5fa4fa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a01f59-c35b-4e11-9b42-3c438380bbc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "385b9074-74fa-4c2d-b987-3f210c4e19af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa92683-7a8b-49c0-9a66-9690c4394e2f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6acebe18-cbdd-4f10-8e50-d451e04278e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4b7491a-3b15-418c-b4f4-812326e89956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1479374-04fe-4ac6-9325-1aebce8960f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e3dd269-87e2-4f7b-b779-29070aa66419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8ec08f-edc1-4181-8b4d-bff903176a88",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa65819b-752c-49df-84aa-222cabeb4569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52e86d63-fa93-486d-bea6-99d9c3d59b8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efdfc1fb-6072-4e3f-8854-31a33d0b6b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be014838-9bca-464a-9a16-7171565f8ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6d0f73-8ea9-46f0-93df-91ac1d9b0b11",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c1ca55-0bf1-4708-b69a-886f7e085e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4b25aa5-52fe-49ab-bcd6-5fbdfe47d269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b044ee-48be-4243-b58b-23cd78023a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a57bebc-3bf5-44d2-b00e-4d48665a5ded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d5338a6-eacb-44ab-a293-11955780bfec",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a2445c-6345-40ca-9eba-b8c473a90aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ae975be-41c3-4f20-805c-31ad6b9979ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702f0116-cb02-49c3-9167-75be3b3c6caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc35622a-5b01-4926-903a-1186eff80614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4b836e-405d-46a4-a0e3-09cd1ab42a98",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7590d811-3a95-40b8-88ed-70d875daef9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17b02496-ca18-470a-b440-48077d28d064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ab0a0f-1987-4cfe-8a3b-39f894dc16ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb9b02a5-d322-431c-acf7-031ef87a742a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ced25ef-5e51-40e8-9770-1b25e408ac02",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "537ff5f7-e824-417b-b45c-b686d0003371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf845856-79ca-44f6-8d38-0c9dab4b9d27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed319bb5-2f1d-4b0a-ba4e-1cd77e882524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72088a15-9e0c-4508-a1e9-868e7ce6b327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a6e2e5-47ba-4700-908d-29d3615328fc",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "180b85a1-2e04-465a-b924-bae4e31ddddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "000c9280-149e-496f-bd54-1444dc7b6f9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b60984-4bcf-4897-92a2-48665f287ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "47057a9e-1c9d-40c2-83e6-f48a957faf72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6c9ed4-10ff-4f04-9c0b-aa3169c168b3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9742ce-c8bb-4caf-a570-78a896feed24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad4d3b39-f896-4169-8ae8-c7ac2114c341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81b1607-944c-49ad-8938-ca68058c399c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "34f8d42e-88da-4fcb-bd67-3b66c8e2978e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea18b97-9856-4442-9d20-9c7d1d848685",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29bcacd-d2ac-4886-b091-2f26056feed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "985d1d52-7d4d-47e9-b8a8-98da898f0150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f84f70-ddca-4e41-84d9-e7f6b6a7be75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "053d6a34-699b-4ad9-8c7c-6bb957a2b61c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274031d9-23ec-48a6-bb0a-21e6958fed25",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a330ec-b46a-41bf-b2dc-6904e31fde84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8da74ecc-5103-48e3-b691-7f32a97114fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f69fe6e6-b413-44a5-b518-6828193202eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a1b9d384-d638-4c5c-b197-498aaa3db43c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25a84e4-469c-46fb-9ade-0ebb3b745e7c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0202c4eb-282a-4160-8a5d-813dcd95439e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4743c4c4-1780-49ae-b37a-c40746f59da0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66782c47-d292-4ed8-bd15-9742ad9f02c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c78942ce-523e-49d7-a76d-5d33475bbde6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb05ade8-b747-4534-a9d9-3938e1a14ed3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c24f9ef-39f5-4760-bd05-fa33c99bbdd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "858cf46e-e587-435c-893a-328844b68410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c394cc4a-371c-4b4b-878a-95922f32e2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba5f0585-7631-4caf-b01b-278e9705d7ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4792683a-7249-4dad-b651-84e317e6272b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c614bb5b-8da1-479c-b4da-2bca35fe16f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41cb6767-262a-45e3-b227-311436e5cbaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812547bb-03be-4e19-9a36-e7cd814f7710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7f311f7-db55-40c1-b42a-c77f9663317f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b015c596-ff11-40d0-a91a-1ba9579a4c19",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a73e218-73e3-4170-a929-65a70765b34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d117593-9259-4af9-9e37-56302ce17850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49b0dbd-6135-4685-a5b8-2bb22f8e6a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8661466f-f123-4f85-b583-a265ed2933d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce1aa310-afda-491d-87aa-92282c08dbc6",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceca7a55-0193-49cb-87ec-4e8cea7a04a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6ae041a-be8a-4fe9-9ffe-a8fe15ec3c54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9435f06e-fb4e-4b20-9949-097ac75efede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "66718fda-ad72-40b5-9aa3-7b10b8017f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed9b4cf-a23f-424d-857f-d5d0c536f101",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13fdc5db-6803-4359-bb56-f6beee4b437b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b180b80-cbc4-4e45-88d1-a0ef655c2048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c68662-a47b-41ef-b8dd-adf3d130e0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e0cbf69-f52a-432e-b3b7-d1bc32a8785b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12fecdc-0443-44b1-a73f-81cf3fb1e795",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33634d53-8e0a-4fdd-ae5a-667c719d28cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69f6da1d-2acb-43a3-b98d-eac5752b520f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c7cef9-697e-49a6-8722-8f2c3b5ef483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b46382d9-0b22-4c67-869a-7798a3954e70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f19f2fd-c5cc-47ff-970a-b85db25bd8ff",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b93d3c31-cec5-4544-acd6-571e23d38361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19a051e6-1773-4734-8230-3673594ce8a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019ddb99-a88c-4b35-a143-33988ba93425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a931552-f3d1-4bd2-ad3d-6b82aaf8e13c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24821e3c-4348-4250-9a26-ca51c8900c1e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc555ca0-dc39-4258-9fed-c8a4315fef48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70fce32a-49c2-4481-801d-9bac0cf850bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5256ed1-28fa-47d8-8948-7efe9918c7cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "836b2a96-1aba-4483-a566-dc75fffbf948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c454a26-f924-46a9-88c2-6f3881e97ea0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da4ac99-8abd-4a25-a839-5e62dbb4df69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "806a477a-1b1b-4c16-8561-18e927f83d57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d665ef32-fe77-455d-8210-5ed949d13e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3fa05b7-e6b7-43fb-848c-1945816e9811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59a9c11-65fe-4034-97fc-9fbe45c08014",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9865d6-a920-4124-9571-65a384dbd104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cac3c5e-fd9e-4c99-ac14-28ac273de88c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e737449-9973-4f02-9e62-b1f0288327d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c144eb3c-9c91-4674-95e5-70c2b446adcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "329bdbf9-7970-4237-bc41-c12f56b78ebd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5762ab82-3519-46ef-b6c6-056256887a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc60096e-50e7-4fb3-8409-aa524949f422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324894ce-f2c4-42bb-9be0-0de77b6c4263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e31ba10-fe67-47ba-9490-61dba75ff48e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d981d0-d12d-4f69-bfe2-a88ef9e63cf0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "956f405f-81c8-4fc4-bb1b-9ff016d1f158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d8beebd-1f6a-43eb-8d4f-35a29161c107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4eed854-b4e4-4d37-9f6e-a442715cb64c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c3cb054-c6de-4a49-9ff4-60ebe31349a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b66a4d-ac08-4f40-9f33-2092af91aad7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c03fcb59-5ce3-4a72-9e8b-391fadd7cf4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "480c8cd6-d881-4835-9588-68c64d3782b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c0c758a-7805-40cf-85cd-4e046ed78f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "529b6bee-ded0-4423-97c1-56b568c33a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec253c2-23bf-4a3c-97bc-91ea8507ed80",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb77c20-3282-4e46-8d9e-d3444d836f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99543ebf-e947-4cbd-a139-c7725ad941f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43689f36-1fec-48cb-ba72-d32efe13c6a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0ae4fb1-76b6-4d0c-8d82-6b493298549a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2251e66-a2aa-42df-94c6-d0ac2c88aaf7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe08bb93-00d6-424e-a44b-51a7c4214acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "effb5dc5-a09d-4276-bca9-0949a5984b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b364c3-528b-4770-a1c7-e85100b2ee76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67c9ed62-f987-45e3-ad5e-d684e477d5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599aa4aa-5db4-4dc5-8497-b52bcfa7e023",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab062790-e4de-4271-b056-3e5eb2b3199d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3eee149-10be-4223-84e1-28c425d3efd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4fd4ddf-4e71-43aa-9d97-79bc59938081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12af8b1f-67a8-4ea8-8c72-25f4a690925e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f07b8211-650d-4a6d-b122-8d95c2b25fa6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac372df7-fe92-46b8-b830-8bf09a08f119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc4f3bd9-84bd-48e7-bb9d-331c127b98ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c75d2c5-ffe6-426d-9a05-b2b2a0b7bd8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95d876c7-59f0-4908-9aad-857dcf583b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f8f7e6-61b4-4429-808d-f1252b71c365",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "447bf3ea-caf3-41c8-9584-aa2631965709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba358e35-6c53-45c4-8975-049aa66a37dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc032651-3ac4-4d85-a6f6-78808cd93995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93a3eb98-0253-4c31-8785-1c8586836f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11bd769-1fee-45c3-945c-0c11de1cf632",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5885668-2ce9-4d30-8768-5f0966763787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "289a9fea-7f58-4ac0-bd5e-fba4d6728d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e1f84f2-c9bd-4b0b-ac91-99b38259cb3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7c94179-7fa4-4211-8251-9efc59c3d8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5b0e0c-56de-487b-82c7-2efa084f7e92",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf1de6b-47bf-4238-b847-05135b03d2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61a071f7-2bbd-40be-a673-5d5d0bec7372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ca9cc9-32a9-4f28-82bb-ae6dba4e06dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bf59cf6-17e5-4ff6-8105-1858e0c0a345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82034216-cf25-4359-a7d7-70e0ab99a59b",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "418809e0-d002-4490-93ca-59cad5b37f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "485ccee2-60ff-47a4-8d38-d478be336b2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4c9b34-8a8e-4f8c-90cf-8414a0719dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a9ca8b3-2451-4789-9d1a-12149a3fd3b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bbcee11-2692-445d-b89c-d829966d0a2a",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b34318-1dd7-4c66-a2f9-ec7acad11e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3322269-e596-46d2-b5c2-851950103f42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e1536a-574f-47c4-86c4-ba31b1f6b7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e7b886-220e-4ed3-b1e6-5d7d80dd4d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac0a20dd-1b7f-4d81-ac4c-0362c7855194",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "357d2568-8086-4894-8695-afeb73158d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5727780f-1c1a-4f05-b1fc-cd9a3df0da57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80128334-17e0-4c0b-a5e4-8f5a8beeb529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0c5a154-1efe-42f9-a818-7983ff2353a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe8fe3fc-97b9-4b94-8476-9496a4bd9c4c",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d0b593-499b-45e5-90c0-71e2e2341352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba8622f1-29dd-413c-aea7-b2db843721c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b70a63-6760-4006-90dc-569c84c390de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36eabf04-e1bc-493f-9164-dc880fbd9116"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ff5bffb5-2861-4838-9516-ab6fc904c71f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bb884701-d55e-4708-b2f2-768c713ad85c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00485906-e27b-4fdd-ab6d-07814d0479f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e85bad1a-38fd-4634-9f90-1a2e5ff15b3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be7d866-9533-42a2-a4ce-1d1851e0d56c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8599e81c-74df-436f-90df-346dbb7dd493"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9de4f956-8979-408f-b1c7-c0adb974416e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1a6b35e-1f88-439b-a6d1-3c4b3d3e078c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7be5e87b-ff70-41ed-b62b-f2b26a7a1c9f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19c18c0e-1e9e-4638-a53c-e08b6ef75660"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8f464822-a8da-4564-b1bf-db08a82d7dc9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e475278f-d9a3-4c6a-8688-04592acc70fd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "340f3ac1-182e-4bd4-94ff-93ed8fa0f437",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4f168ea0-4512-468f-b93d-532b62b012af"
            }
          }
        ]
      },
      {
        "id": "05d2cce5-5069-4f99-9cbc-97462e80896a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8a5668b5-d879-4079-9d7c-3aa4df4a418e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "88ab01f8-61e4-4079-bb9a-0101932d6b6a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "799dcb29-5f82-49a4-8528-003f150c20de",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03685a21-6a43-4e4d-a590-823b0acc4d58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "865b410b-1602-431a-86f1-49b562df1de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eea0b95-ad90-45b9-9572-57896793d921",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "271b1271-cb28-476c-94ab-9764d5b7a1e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "074dd811-e8a9-4abb-8a34-036dc8f70afe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f88293-5804-4ba1-864c-39b56269b194",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c55cc79-b6db-4474-9cfd-2a1034f1e3f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb78b22c-5fb8-4cc9-a2fd-85320c81f14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b854b4c-2f63-46a2-9f63-a0f61f94674d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19a6128-f8b5-4431-8180-338644df1281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e307777b-2d6a-4c1e-a3c7-a175e0f9e27f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e887cd00-cae2-4071-ba0a-2be642731f9a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c4d1f6-6278-4d7e-9f81-53eaec7bbc0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3807c848-90b4-4541-aef9-081732bb6c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12e22eb-d931-492a-b82e-343d0db1e413",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a25dd7-f028-4b0e-81ae-091a3a92fae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ada99b0a-f721-4887-81a3-bef1ba880806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1597147b-cc8a-4a97-ae40-b19af236adac",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019795a5-3590-4a26-9d05-9ba2da005135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48c3fbab-a4ef-454a-8333-694ee7703a02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5fe51c-dedd-431c-b5fa-39a11bbc6743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e8406dd-0b75-4c6e-afbb-5dac14c6a6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5100970e-d41e-4b24-a784-890021ea3131",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7ecd43-cd42-429d-8d85-566b0f210fad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87aadcc8-5d85-4eff-9937-1376d8cd8e57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "998f7660-674d-4acd-aaba-0ae93dc54687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23769a1e-aeb8-4749-b9c0-0151a1371ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9619cb85-d5ad-49b7-b3cd-fd5df42d0673",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490af7bd-3bf3-4a74-8fc7-3b54d7dbe69d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0bd8155-1454-4888-a3b1-1e4247c0fde6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "911972fc-1d8c-4c45-b0f0-d9402b0c183b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4034500-8fce-4555-810f-87ded9ff1a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44bb1f3b-a321-4db6-962e-e20ee6d803be",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80c4468-c0cd-447b-8e0a-1322fd40bd9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53a9b46e-403d-43ef-8a4a-c01bde691bf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a1e0886-8bca-4af9-8696-27e2d7d28b78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f7c0c8-0bb6-4653-8956-9f07f2989670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca53cc21-3bf7-4af4-9d80-e33b3c8bdb4a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d225c0a0-b538-4d55-b6a9-be87284c47a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c0ed67-c1c9-419b-a19e-013f998dac71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f3ec44-e744-4c0f-b386-e804bb69d906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17604cf1-17bf-4994-98c3-aa4a17b81684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38dd9245-6027-4909-aeaf-92eae434f0c4",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8d2000-0f8c-47a1-a1ce-39464b47f09d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c8f888-542f-4a62-b7f7-c41654e0f65b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b775d2-8db7-44c2-a81c-f1d42e745b3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f8a6f55-49f8-4350-b999-e52ea76dcf3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e79162-e57b-4e22-b061-e986ea81b39c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c44a4ca-380e-4d21-9321-33af37d45a48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67511afa-6639-4f84-926f-1ff54ecc0306"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8dc7a3-9226-40da-ab8e-a05fa848e87f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fa0a859-661f-40e0-8ce0-183b56914903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a902d8b-27bd-4e20-ae41-67c986898d84",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6afdd64e-85d2-477a-b27d-f64991909671",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f28a63d4-2d5c-4566-bcab-9bd366d76a9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6cb85f7-70db-4ebd-854f-b3eeb7348ce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7c61716-95c2-47e7-a3ac-b5c413ae3c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1101120e-b4f0-48a8-8bb3-d144915a5220",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2696e2f5-6c39-4d1a-b345-44b5844d576d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cf4a443-1eac-49d6-b2d0-9a32eb84a12e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b7db10-ca11-46e9-86f7-1852d083d9f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a16204d-2343-4dba-bae8-f5ee7b14fc26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7dbcd6-a4ec-4b8d-91d5-272bb3bc63b6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4102e9b-c2aa-426c-ac56-c1b349ff37e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d12a9aa-bed1-436f-bbf0-609dcc5e2c90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61cbbfd3-92cd-46cd-94d8-835ae0279622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4639d117-558b-411a-a1ec-a57f3824ae1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120f13c7-1bce-4721-9d54-52954fc0b439",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f002f91-a4f0-4e29-a92c-bdf153a6ec45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf637f32-23d7-43b5-bbf4-fa615990a300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "759ac43a-f103-4b3f-88c3-bc3e7ac86b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f0cda74-05b3-454f-934b-121370a9ccd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ccf826-a533-49be-b1b1-1906ddeea658",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02492be8-a323-49fe-9011-4127ba6852b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da21781e-3eaa-4801-95f3-dda6deda1ef4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea30c1e6-4115-452e-b5a8-b33532dc711a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad18336a-bdb0-40fc-85df-e26663af1252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddefd2fa-8fe6-4d61-a151-ec596e389c80",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea65ce94-2f89-461d-b305-0be0d0fc8725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "639664d0-0b86-4e76-84eb-5e951cdbdf3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8022dd0a-3f1a-4f96-bf17-84e664999af9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1803ad18-4efc-401b-b0b6-b96be42b4954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d630136-e152-47be-a233-60e34bbc53f8",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e10bd3-7f90-42ca-bd21-a3b73edc7d29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dccebf4-28b3-44cd-b140-3e5c06c2f65f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb5e72f-c0f3-4ce0-9ee6-60eac77552f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d970703-6cae-4792-ba47-d37b2d7ad355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afcf4f75-6a2d-4a0c-85ef-830e7ced2ffc",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5afa1195-da0c-430d-a8e6-bd8815570f4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a06792fe-d1c2-4d55-9f9e-46ba8f1c4c74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb373af-298e-419a-bbaf-498ff7b3003e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73074732-6217-4970-aa74-f5cbb77a34bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2054213-be84-4b32-91b2-b42971f24fcc",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a6048e1-374e-4390-b5b7-66f3169363a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a07f3b9a-2f3a-4a09-8b4e-0a0b6150bd5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc11df6-e2ce-4df7-b9ea-dac823d65601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13430b68-20f4-44ae-bc2c-ed28ec994c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2cf8ee8-7690-4af6-982e-d838c33c4f46",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e457e982-69c6-407a-9508-ef9308c48df1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2abcfb29-0382-45cb-a2ae-363b59c92b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "481449cd-ea5c-4ded-8337-c7edaae4bb55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c41b77d8-3146-4c12-b29a-6bf650f8ded6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a6715f3-c393-4166-8418-3238edf378dc",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d81dc92-08b6-4454-ba36-9a312d28a6b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec949f10-c84b-41aa-9bbd-4d7f2b198375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27328086-5524-4ccf-9f97-0c8139950215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8290a908-961f-4f5e-ab6b-bf869df7873e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a4ee480-2e0b-4c4d-a2d9-54d37da5605c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6634477d-c9f8-4b86-95b2-887afb1631fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a50c6c6-ca6a-4c6d-834c-e12a1faf49be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b9b7df-2312-4af8-bbe1-2168d3ab62be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be385c0a-1f7f-40c4-bf52-7e37776954c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ae4914-5506-4d93-860d-396102a2c902",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a8c2db-1b59-452e-96f9-f431c814b397",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "186d2d9e-7896-4790-9a5c-cafb4653ba92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc26b2b-6ce4-4af1-bbb0-33deba75213f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "867cb759-b137-4c99-b029-b1cb987da42e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "894f32ba-74cf-4cc3-bc16-0cfe3de7835e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd746e04-a6a3-4c16-b3ac-cae0712fb5cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1076048a-cdb4-466b-8ff9-3e505359d030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "168e9678-f1fb-4fd4-a1a9-55cb0b7e101c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bf4ca37-f6b0-4270-bb44-95cfa225ca05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693594aa-ff22-4fa9-bdd8-ed177d33722d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb952880-6b60-4096-99d3-230423e8d63e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0007346-5b8e-4fbc-8ced-e07aabec5de4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa890a0d-511d-4edd-a18f-eafd734340f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6e4893e-f41a-4461-855f-ce71636e71a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efbf324e-05b4-4368-9949-eca67f8bc9ff",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8bdc414-0fa0-4e22-b227-2258ecc75787",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27ef22ed-3b86-4c96-8891-d97b10cd005a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e31fce-15c2-4d0d-a50f-4bd3e4dc6fa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c3f2126-3168-4b88-9919-2be0be965ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "130af40c-9588-4bde-83af-3b64ccd6966b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd90d8bc-a820-4f01-bb0b-d38d91dc047b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29d618d9-c71e-4dc0-9122-67e81f7a5770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e436bab-8c5c-4dfe-a148-35bae4b5d6c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a16dc75-a10d-4dbc-bee7-afe5ed94b5df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f3fbc4-3379-423a-a9cc-13f4fa7fcfda",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b1f66a-4bf9-48a9-9a59-d5c93867117d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ea39946-8d78-4f9c-bc87-cfd8674a08b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7e8976-7d0c-4287-83d3-22c14c2f9f96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87c84c68-e1f9-41fd-9c2b-2813f69f9013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ab9f87-2392-405e-8151-711b117911f3",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c17fefc-b07a-463a-9742-060cd97c4dd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "372e6101-f452-4322-87a2-5725667b115a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9ebb65-a6ab-4893-92af-67bd1600862b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab2ca8f1-0802-4756-907a-782746424baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c62cbd-9c58-41f4-bc05-0197e85cccfa",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0757acdb-aad6-4ed7-8221-6096de1617de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5938898d-a32c-40f8-af25-f03871456bc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c77c789-5736-429d-a5ed-7213c282c07b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddd5f625-0626-4a91-8b83-d2e38af0f3ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00892a7-3c66-41db-99b9-a0b87caf7534",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ce7144-b06f-4eae-8ed9-169362be2838",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6e12bd6-1ccb-45c8-a350-6f1fcfbafcb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29a5eb1-6ec2-4200-98a4-bfdc677e3cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17a72fdc-85e8-4412-bbbf-46893a5b317b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a75fde5-e823-4894-a3e3-baf6515e2b46",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a636f9e-f8eb-44a6-919c-05a108d593b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d672f9a1-685b-4ca3-89f5-8224fabf8b6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16964a1-5f72-4645-9df5-3e8bb544feec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9063c0e-a1bc-4300-bc7b-303b61be6ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cfe4f41-5990-43db-aaea-e3380d4bc26f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9f162d-2f49-47d6-a7a5-da8e2dbc2f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e95cac-145a-4cc8-aeda-f1f114bff730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72315c61-fe88-4102-953d-a9189aedb045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d156a476-ed5a-4d5e-ade2-f4418f49be68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda438d5-d4ba-43f9-88d7-b9c3add205bc",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc5abad-d639-49dd-85cb-1ca5116384f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1496e71a-a999-47a7-a927-13b852e96e41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cccfe557-f94e-4991-bea3-95979a25bda3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71dd6daa-7ec8-4f21-af8c-7b7405e1bbd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78cd821-9657-48cf-a6cd-8b37f0003179",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9fb1c73-966b-414f-901c-83f8ce71756b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2793b248-bcf4-40e8-b433-a2726c06c796"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee9eaba-d468-41c4-affd-d95430ec8ba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ec4d245-3d8a-4338-a15a-6587602d7e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efffe0b-d31a-4955-a51e-dfd7082027c7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2256f509-3345-460d-a995-b7cd2e8395d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b0410ee-e839-413c-b6a1-2b1b60128972"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af74189-53e3-449f-898b-f4dc3fef4d96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb869942-87c6-4a0a-b11b-e9762debb665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9117132f-7f61-4970-a606-da5953e70af9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fbcf4e8-aa5f-4802-a1ad-cfa6170c63f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb80d0af-9d32-4a48-8b60-8212b894d912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35de7a15-dbd0-41cb-a7d2-292537caf3ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0ffa8f5-12ab-4b4c-b881-2ab437929659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb04654-e5a2-40b9-b016-eb180136f4fe",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae97434-e727-4098-916d-1a35d9ecd3f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c953cc50-62a3-4908-b9ad-51ce630ebe0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f61fabbd-6aa4-4ff7-948d-a41396ee9151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84086b58-1e13-45c6-a6a9-8b64039855cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f888843-4553-4b37-abfa-9a83115faf28",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1133b48e-6374-4b0e-8a07-6c49d3077078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56d72a24-1886-4661-b9ac-bc577af1df91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36408cbe-db61-40b8-b38d-fb22ed3e457d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a8c7750-a968-460f-a96c-328cfef9aeca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80cb7c8b-cf4c-40a6-99b8-30a7838311db",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4799a0-59f5-4da2-a9c5-757684be6701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4636907c-130b-4a75-9b83-3b791e950bad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de461a9-0b27-4a0a-9e93-9dd7684666d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0327dd5-775a-4d74-9813-610c4fb7e8ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea0cb92-c943-48f1-ac94-914b5f506030",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a829f458-caeb-4631-807c-4f558c73aa84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89928ae2-db61-4679-a55c-9852e40b1d31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19912eb-f73a-48a8-90dd-6fd2b0027ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d0d70a7-eeba-457c-a2f1-6521c882205a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca285d5-034f-4f9b-bdf6-f4c5644ed3e5",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15577c37-91e6-4f3e-8a0f-ef2f64320fc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed7514b6-673c-42ef-810b-f80ee8bbe204"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7816ebba-1089-4a38-b268-1e7da4850130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b759cf71-258e-4d88-b6c2-e5d771b6ea32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "888b350e-d07f-4fc4-855f-882d40c87b06",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448e7896-4e59-4ee4-8d87-58816f487b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b199e77-8678-48ec-bb16-8459c3538343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c14c6c-c4aa-4379-af69-62f55bf58e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f118a855-c3f0-45f0-a62b-b1ef3b3cc804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9494558c-3764-4d66-a739-8330281bdcba",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6651fdd-be6d-43f0-9bec-e4e888dc119a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64906c60-be2c-42cb-b0c5-ef00997026f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f887d5b2-3c04-43db-b6af-8f68a032747d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a9494fe-77fe-4917-b30c-784018e79d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de30d8f-8b0a-4e09-ba30-a949823cecad",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28868208-002a-4c28-94f4-e18a205c1f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81715036-44fd-4667-83ef-83ce3012376c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "362396b4-9dd2-4f99-b8a4-e9eb54ee7750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c98a05a9-ff26-4443-afd8-33779c3fc58f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b13bd07-dbfb-4dcf-95dc-16f8ade11c52",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff39a7e-bc56-40a1-ab4d-190cea26903c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d34bcc1-0e08-42d2-ac56-2b01a563d83e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb35d66a-6ff6-4aa5-a7f0-c7f381c62897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80f00b26-bbda-49ea-bcaa-a6840b3e0797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b3242d-255f-48ac-a7cc-6848abd3555f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc4464c-8b5b-4b7c-8040-e1982f5fa409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11690e94-5cb2-485a-ba32-41c238ca33f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2159d931-3c7e-40a3-9e6e-ce0f24501401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29efbef2-15fd-41dd-8dc0-82f7a5c5c092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f4b5836-44f3-4a09-98a9-0fc3a75c54d7",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96c92bd-fa85-40cd-abc8-f25bbcdc342c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "673792f6-2e7c-46c2-9858-da74ac7ae8f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe7bf69-3362-43ba-826b-71f79a7a214c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8893a29-d337-4d7a-9158-5d4e4a6e373d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f16a11-7028-4daa-b39c-07d1743ee719",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa71011-a2ef-4a94-930e-68f4670bade4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7efa58be-5b27-4765-9a56-e7c8774a4706"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d43a7479-40fd-4527-9a30-da01ccfa2020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c781ad6d-e7c2-446e-a66b-c5ec8ffd2285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c1d1c0a-2eab-409b-8a71-0e0cab5a9d48",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70aa029-59d3-4737-8963-e6d1bd4a4d71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ff3a852-92ea-4dfd-89b2-5ad5e48bd8f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81e5db0-60af-4033-83c1-b8bba7732602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8db6dbb6-506a-4a4d-bab7-f20ae637e903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a61a50-1cee-4388-a6f2-80b21a7902f6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec6c841-d4d2-450c-860a-c94ee2d00f09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "043e0132-413a-49ab-bc6d-98f15519baa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b41874-46a0-4306-b4d0-20bba954e5f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e21dedca-5e6c-41c7-923a-2b70d81770fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e12e58-ec5a-4b7a-a88f-6a06c193d198",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c5c70b-8b98-48ed-9a00-7dfd8f784584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b64fe47-dba6-4a27-a269-4afdd0404ef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05a8213-1cec-45ae-ac99-29169449a614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86a11209-2ee7-48f5-a308-4635ef841f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a175f77-edfb-404f-80ec-2d794d300bbe",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083a412b-3e95-4b24-8832-99b76b37b15d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de3ba81a-2045-4b26-a0ac-9e5d8aa22a95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11802cad-644f-4302-884d-89697d90a509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff066327-1b76-4778-b5c0-fa5cfb3798b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee9d2885-9ed9-4d14-81a6-62b36672d57b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60ef50f-2d3d-4278-a63d-eb7561a2c337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e67ff94-5e22-4526-b191-c67b92f62205"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a457c5-3b2a-4752-a9d1-8340f1e86765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d27db7f-0083-4c12-a01d-076c0d89199a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01927e6a-907d-4fc3-a60b-9d9bb714c49f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a4dc9a-4e00-4839-abfa-ab13bfd11d9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f87fae35-29ec-450e-8d64-21c2254d7da0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcbda038-fd11-4d85-b415-3cee30deff75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40d2bf1f-3f30-41a1-b11a-9d625ff99492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a780f0-affa-4873-b958-8e93d546892f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05aa2a4a-ff44-45c2-a0d9-cb194fa3eac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "448e589e-04fc-4750-b4cc-cb265f3f8d7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da5c9f1-e51f-42b8-ac2e-217a71ad6e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "980b10fb-651f-4c1f-bbb8-0e5ac0d568f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258ecaec-ce18-40ce-9fe6-0782b29e1482",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587fb7f2-04fe-41a7-9d44-af832ecac130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c6cd05f-831f-4da7-9e2e-67e9b8175058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e6bc77-f677-4c80-b517-ffe391ad92c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fef0b26-eea8-45f2-87be-cc533a4eebd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dfc7e2e-3c6b-4810-b807-fe04d79d6048",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16b68b7-ca40-4543-95b6-027a3c71a4c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80fedbd4-1560-4e88-8962-dba55bfbd427"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8eed32-a0fe-4f49-a456-b6632099c98b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaaba2f7-42de-483d-bf51-b05bb7df8eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259a9502-c79c-43ca-80e9-9dd9fa0fdb44",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f7c494-d523-44e4-8e2d-43b2fa93f79c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8739a27-4b2b-42e1-a70a-91ff1a03d8f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6f9658-f603-447f-82d5-445ad7f41ca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb11cb3-c557-4f97-880c-fe5f35a8168d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3b0876-0d3d-4c81-88be-5506d59e8365",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1041cd7-8ed3-40fa-93df-1c043b31f858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97ce0268-1728-425d-bf6d-55ec1004bbe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d206c8f-d9f6-4f73-a218-0641fdff38ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba2a4f20-3964-4f3e-9eb1-8bb66aebd60f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f42f0214-503b-48d6-af3c-47309165aba6",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "157249ef-08e1-4164-9e46-14fc845c66b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f506d5d5-f02d-4925-82d6-92ff9b20e790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27433038-997d-4ea4-8a5c-adb4e44a4580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb03d003-d0af-4151-bbf5-b26f65b0a23c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7626fed6-a019-43a7-8b15-7ed8562f7635",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348e925e-8c21-474e-89a0-6cd1b9bab15f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd9bbdd9-dfa9-43f0-81ac-863eb0b75a32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08f9cf5-d47c-4eef-a665-1dc04c18da29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcad674c-2b0b-44a0-aed8-3245d39a0093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414ea217-5bc7-485c-bf7c-1bbd27f75baf",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aaf4dd8-7b7d-40fa-bb5e-4e411d6efe1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "126c115b-4dad-4762-b3c4-1e7000b61e92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb90c59-53d4-4aa7-924a-82f508d671e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec1c4e2-9502-410e-870a-ccff10ff66df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f71f5c-fea0-4c11-9482-80e52e6d4d49",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "996e42c8-246f-4a21-ad20-abdd7dc92949",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7060d54-a2a7-460d-934d-0b2b5c85a67e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b2403c-4332-4b72-9b97-3b0d77b9ec7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a567a8f-046d-4746-a386-e0210ef434c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1935e6ef-15b9-40fd-bff4-b810b1df2351",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c91d4f1-ad42-45b4-8216-b9ceacfab6c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca35f4e9-ffb9-4fea-af0d-9e1a712442a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f04701-2195-40f7-abe7-82c092b80e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b4942f3-a5d2-436a-aef8-6333a15dcaa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a24d11-3bc3-4bc7-a0ec-1a6d2ebb9e63",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab11f1c-7914-43d0-b33b-2baabdcf3018",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ac21c84-5646-48c1-89c7-3171e4d16cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "370b5d03-a190-406d-a36e-09e1247c008d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61d3f4ec-d6c0-48e9-99a0-3b73a96ba466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88058e88-b7f7-4b23-a10f-de02b91d35f8",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5032c2-55ee-45b7-8c44-170e227baf74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d6f2c8c-c566-4c2a-be3b-05589619cf98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "684debba-c717-4f39-bd55-f06e37532492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c704ba58-8482-4f52-b98c-59d6e6d03af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b6b6c29-b457-493c-8cf2-2ff663507933",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e71a9ee-04f7-47f9-806f-974d932b27cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cf54d84-ec28-485d-8a4f-3701469d0bdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc86071-cd5f-49f1-a79b-8749ec312a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f992adb1-1fa8-46a9-a7d9-8cb2851a8c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e71dd5f3-3ff8-43ab-8d28-b968539ee3d4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a50067-4c5a-4ad5-8c7e-28549b77b9ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e005badd-b94b-404c-aded-1aec26123bc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac99a00-b374-4f5d-90fc-d7c13de55ed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a3c0db2-4f6a-407a-8a0d-da4d1a9feac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a6ff44c-50a1-4b38-a8ca-fe080a1a59ae",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8ad3ea-8e7d-4b1c-a7ae-4963518f151e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef5a79bf-0540-417e-8059-6a30522ac202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e3a9dd-3401-49a5-8afc-dd1576d7f396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69ccb0e6-e22c-4618-9cc8-06866b703424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f9d399-6520-404e-a7a7-5b83739b4fbc",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "560becc9-5539-45e4-b4f4-e774a42ffad4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cec0671-b942-4b73-a192-0335c5c45d99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e274ef-320b-4ae3-be32-6c8a3f65d243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a633a699-ef02-40d7-846c-12772344377c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1a0414-9242-4c06-adef-3bdbbe7d4505",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32926fc4-61ae-452a-be3b-358f2a329b1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0b59a42-1b7c-4018-af88-1aaa1a63e4a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19cbba74-fde5-4c23-b544-5c90123ef8a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93c6c4fa-d216-4c6e-96ea-1bccd163eb01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4dc6ce6-253c-4bae-8ff8-4d71f4b93647",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283d7fb0-4fed-4cbc-a997-4f0c4799ab7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62976266-abe4-4535-8948-7568cf058f4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e6bb8e-3709-443b-a540-5dc67d17c24f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b82ef14-e5a9-4c98-a821-a79415187974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "298b1bde-ba29-44e8-9691-0939990f4733",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fbbae74-882b-4844-9ae3-983b5294a54c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4a3d4b3-7959-485e-809f-117660e002d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b0b5507-b562-4bd8-8833-0199fbd762ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eeeb59c-cb29-4f36-85e7-276dac098679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67f5cad-5a22-493e-b80d-3ffde1be75f0",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a66490d-05f5-496e-8d0d-40d0ac15d0fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "505e3611-2411-4731-be63-0bf2333d97ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f40e59-4260-4f0b-8440-5b3899052783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2216785-16e2-4ba1-8850-fd4d4b7013e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd02b218-0d67-4a8f-9674-e4153ac24236",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b26e338c-088a-4634-8a3d-337b9ec35400",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95adcbee-4a74-4d92-bcb3-ac51c9e15290"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d73fb0-2f2d-45cc-90f8-bac85fb5c789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d3bb5c4-0d25-4516-90d0-ed4b3c069fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d97669b-fef6-4ce1-bbf8-7aa4f18af213",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9f5ac5-572d-4d1d-8be7-f089c2fa7269",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99fb6bba-27fa-4a4f-9c3c-1d25f043bd4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34140d9-8146-493f-b7fd-34576599fa34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32269619-c7cd-4bc0-8b3f-139025c1d307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbb6e96-f6aa-472c-9bd6-5cd3f03b8149",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34aee810-6753-4dd8-ba7d-57df5e9346ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c81bc3f-8fbf-42e5-94af-74133c16662f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c1be3f-33a9-49dc-8e97-5dc920c3fdf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "020815f4-4240-49d7-9c24-3cad8f997b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a455321e-323d-4291-a568-bd750ea7991a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a36e5ba-dfe4-4a5c-a2ed-d45e586be86d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab73bf3f-6503-4215-a993-fee1d1e453f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fefd42c6-eeba-4af4-9a03-13ca43405f09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07fef440-cbc8-4b2f-afde-02e28795ec3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4885325-d9de-47cd-ae3d-4d4fed7ae39c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90a8baf-e980-4c7d-b42c-324369032748",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50db1f9c-9158-4313-884c-753f1060913f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c8dffa-a5d3-4e37-a8cd-f88415101d61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd88a18c-211b-4d1b-b99d-55d9c14cdb59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c0e7b6-e110-4ea5-b186-1cc679e3937e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68865cad-005c-4696-a8af-e45a86b38eea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d7ce87f-fba1-4027-9d89-8b5caede6822"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84649f16-58b8-4b21-a992-24ebe7eaab0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7564d1f2-6e91-462d-9b8d-178ebf089da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c1e344c-789d-42e1-8ceb-7904ae6d2eed",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c85f3a6d-c6bf-4692-bef9-cdf9f9e04293",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87d6e62e-f1ed-437a-9588-f3c499241eb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ed4555-2a92-4c8c-9604-9bfcf55ee883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b50b1cf4-58cd-48dc-9a5b-04351adbc7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12dd19f-8e17-498f-b0b5-4e031f8e4f26",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d00c77-b098-4e39-93f9-b59d33979773",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba46d4ac-10c3-4cda-83fa-85bc0f14851d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58501d84-5acf-42df-8b42-9f66e7936c2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50774b30-ea77-4e5b-b2c8-f1593c2aedbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4035ca41-3a18-4f3f-8b91-aa0d0390b2ac",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b816e626-e7de-4059-9d47-902e34043321",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11210e7e-e249-4684-ac7c-04a3590d53d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee868b9-09ae-46dc-a72d-a03d9249632f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67652944-41f9-4d45-bcaa-1689e98fd921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "781e3359-5541-4e67-aba9-cb85bde8141c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "652a289b-403a-4a85-9711-b42ca576e49f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6c88aaa-1716-4440-985a-aa92d728f5d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ad7b0b-6fc2-4a87-8297-8e079f032b4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "418a5000-12d3-4198-8843-0a7ddf3d26f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ab1754-4ec9-4810-9eb0-064c04364276",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107761cb-1381-4ff8-ac28-c5ad1f742c80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f970fd34-2929-4f26-96ee-caeb540efd28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "065c7abb-4f89-443f-935f-093b4758340e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa15b8be-9ba5-46ff-ae55-6e2813d08fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7bcd066-f184-4dac-974c-a7c8b69e9846",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e56f7336-a3e5-4767-b7b0-0354f9f1c576",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81941682-9d1d-4984-ae09-02fea99bed41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d302b8de-e56a-4029-a84c-03e8d6b1704e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c52e7ed0-7773-4db3-b5be-12c5c2035acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ba3fdd-07f4-4463-af0d-ff59aa87fb6a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df718eb-262f-4cff-974a-a7ab6a5e2b4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c741302d-df7c-4173-a498-969b96751d6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bcc4d47-7198-4693-b3d1-28b1545dcba7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46660947-c135-4c34-b7ba-43813ec978a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3533add5-180d-4433-89f3-8d3302d2aa76",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13672be-eec1-426d-b703-76296576db75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6015c4c-cd9a-4b5b-9b4d-3ebd85b20a87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d829d90-ca52-4910-976d-5a680128f70f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98cf8f3e-f773-4e13-9478-2441747e69dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b545ebf5-b39b-4216-b24d-0529bb0219d1",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74689b70-65ba-484b-8c6e-42b1918bb768",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "220777ed-940d-45e6-af87-a294af7e64f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82cacb78-994a-47bf-bd2d-a05ca67a18c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e50452b-da84-4ee6-a528-955b55dc2ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f3d8227-3de2-41b0-ad2b-3ae9d509aa0b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ee92c5-0ca2-413f-bf7d-2396cee903e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "458d2588-cbaa-40fa-aa5a-41025eaa18e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "006d15dc-1ac5-4a90-94bc-e174722b2780",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bebc5ea1-f8bf-45ae-818e-1f0fd1284545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee58f7f-4a72-4afd-aeee-416d199c9fb6",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9bf6b5-e9a8-413e-911d-aca6caa6cc4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "793c3859-42b1-49bc-99cd-22f18f2e5a84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6781996-f96d-4688-8067-f8285206f8a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c699f91b-ddfa-4928-a44f-4a8fbbfea856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7810409-7eb8-4566-938a-c94c3bc2ef32",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae468b1-55c2-42ad-9969-bbe896dec5b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cca06075-4cc7-4d3e-a4ac-65b203d64639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5be2bb-7c72-47c5-a80a-43b9b636e95f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a116dc10-ab89-4d9d-91ea-224b7c748616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019af306-2bb1-4dd9-b24f-07f91d2ea171",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d46748-32a6-4fb3-862d-be6a2915425a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16bee3ab-641e-4afe-9645-708168ea1673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68f80c5-a9c2-4d64-8b03-2017ff1a368d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f95ebe-1d1d-4c04-a6cb-6107bb73dcf4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7aaaa54-5a32-4a59-ac75-e144e2f258a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c6b9d75-b381-4e90-9fd1-307dd96415af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3cb830c7-f7ce-4b71-99fc-bb6ade7d8c85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0f006a19-ba91-48d4-ba1d-0349732d796e"
                    }
                  }
                ]
              },
              {
                "id": "5846498d-cd33-4c99-bad6-8f94e247dd90",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3b234231-8c9f-468c-b4ee-34be30daeeca",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ad50aa-73ae-47c4-ac90-00bd1bff738a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "493955bd-5116-4ae5-b55c-d6a1e2c10923"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c869ebff-2e4d-4ac9-9c33-e3cfb39e1e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f4c3a76-be0c-4513-bcde-b3b9e89c31ef"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1bc3405b-5e81-4f1c-a2b2-86f13ccc8b2d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "264fc9b0-c5c2-4850-b5d8-049fef6bcfe3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8caf546a-e0fe-4e4a-ba5e-f7f5ae3683e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5dfcde70-cf8b-406e-8556-35f10013cfd3"
                    }
                  }
                ]
              },
              {
                "id": "c26cac2e-1737-4578-9b99-64eeddcfd4b1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a0ff0f68-bb13-4269-a7be-8e43f48db89e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0218c3fd-f164-4242-a13a-352f859365a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "62a37620-106c-4a34-938a-b3fe7909a026"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb912b8-86a8-4c81-ad29-fc4a8dd3eb4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1455a04-9c4a-4dfc-8ddd-5e20b3433e07"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fb1feb47-6b13-4f0d-92f0-10e068a9d721",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0f4a1f5f-384c-49f8-9ce1-0eebd41b1e7a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "adf071f2-62e0-416b-8b53-68f1e1b6d85f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7a11ca22-c10e-4cf7-a89c-404e22f8acaa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b3475fc-8d89-4cab-9f2e-21c86a585d62",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c099705-4122-47ca-9f3b-15be8761e7c7"
                    }
                  }
                ]
              },
              {
                "id": "e86d92fc-df8a-4d71-8b0a-2e4f845c0e76",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ac698ba-16c5-4181-a185-cb8a8b3b56c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ed80aa17-8e69-4855-8fd8-5baebb62fab7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1378297d-f6c6-480b-8796-b05930c8e5e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39df3873-c12e-47e9-ac82-22776c60b768"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "56d9c92f-925a-4b3e-803d-3056888cb948",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e3611875-e9b9-4322-a894-ee16bcf4cd38"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "425d28c1-de43-4f0c-a620-57e43839ff60",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2035b84f-d3be-431c-ac03-63b8507a1444"
            }
          }
        ]
      },
      {
        "id": "d7af7077-b1af-458b-a78c-de882c6a0b5e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "bb3b3384-8613-45fd-97ee-dcb6d7146a97",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5769037f-b7e3-4664-a3c4-ef525db8a9cd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6a7ad905-cd54-4c73-b98d-b8ec7a72931f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9486d4e-0236-41db-88d0-b2dcb00eaf4f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6d35a3e2-4ff5-4ddb-b115-190dfd1491cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9337bc25-89f2-4a96-bc84-4b621bf154ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7c7da26-fbff-4de1-b69e-888225c5202f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "865e9c30-780e-4431-916e-1ab3d65dc639",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77edf073-b54b-404b-9705-09ba860d453a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e0e5a99-f72a-4d3c-a3d4-04f65b127955",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8cd0b196-857d-4d1a-8b06-a8749cfb91ea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad6cf55b-ecfa-4be9-ab2c-72b5e7e3ebdd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e32df363-755e-44ae-864d-4056a4d3e3db"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ebe200f6-d6f2-4a07-88cb-c917978be180",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ad82b47a-574c-4600-a606-5dea0324ff22"
            }
          }
        ]
      },
      {
        "id": "34ac944b-f595-4f8e-9a7b-15503fb07b01",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "64a7a390-d85a-4d86-8c35-ae13f8f165be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "332e0e4c-3dfa-480c-9de9-89e28bcdc592",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "62d507c0-4432-4840-9666-8b2bcb798878",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c20457-46d1-432d-8698-171272ae1d96",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "255e879a-7cf4-421f-9c71-c41fec5b0ccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ccda995-22e0-47f8-b814-32c458d632f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4b81450-5f90-4a5a-afab-d5730bcd7f0f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a47eec11-2007-4593-8d26-a13476b8fac6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5af7bad1-a83f-4746-a2c4-550ad3d0d6af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb88a2f3-87d4-4a4b-8df1-f91a736f3991",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ffe62a14-3d59-4a20-90d9-e4981e057e86"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "13240f66-c2fe-4567-b738-c094b5621e93",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "970bcc4b-f96c-4c1e-9982-3737448fb171"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "990481f8-9cc2-4521-878d-8ccb586cbe14",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e39ca966-8f1a-41ff-9f06-00371119eba5"
            }
          }
        ]
      },
      {
        "id": "9b28152c-3dd6-4185-93e2-7ba6c3d76825",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3757a363-b9ba-4b1a-8eb3-6904987ca4f1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0ec47db4-527d-4b43-ba00-e9167f3d6049",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a6ea8c80-946b-424b-9a86-59069fde3279",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f5c16a-ef60-4abe-8c54-1b994b603b56",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0da4dc74-7518-4c51-8d61-eb0b32fb393f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6fe37c-4c7f-44e1-b581-3acc62b33075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "957fc98e-aadd-4c3d-b3c8-2441d6bd9fa1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "985c3338-35be-4927-b9a2-5aa6244f1869",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be661790-4a2d-4f49-bc80-ff712018bd99"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dee1fb82-b215-4cb5-8d3c-ea59834dedd4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "297759e8-f1d7-418e-a1a1-ee4d6977a922"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9abf91d4-a43c-45de-badb-6e5dd55d0e19",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7a95d2f9-042e-487b-a3de-9e419382b439"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0d701242-8b16-4c93-a3fc-4d715b9024cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "860c55fd-6019-40ab-a420-5831e1dcd380"
            }
          }
        ]
      },
      {
        "id": "6ff42dec-3c73-4911-acd3-765d36f5b5c7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2db4abe3-acf5-415c-9623-eb1332eef0be",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e537f40-2675-4f61-ab80-1722941681a5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4ae075d1-bb7c-4649-8f5a-a3e07d2cc814",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81b4ecad-5d8e-411f-9905-fad55d9b4534",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "17c121c4-1f7c-4087-8fe3-29e3d6b014a0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 65.49473684210528,
      "responseMin": 8,
      "responseMax": 593,
      "responseSd": 81.06032499372704,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1708302917117,
      "completed": 1708302945310
    },
    "executions": [
      {
        "id": "f518c8f1-d726-4077-9c31-50e2d414fe39",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f096f035-a7f7-4ec8-afac-788fcf13cfb4",
          "httpRequestId": "9b3bc821-34aa-47a0-bc4c-4d376888385c"
        },
        "item": {
          "id": "f518c8f1-d726-4077-9c31-50e2d414fe39",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f27dd7db-14c5-482f-adba-f5b1bd81bc17",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 0
        }
      },
      {
        "id": "b102feb8-114e-4c42-8e01-ce7ec388cd9e",
        "cursor": {
          "ref": "96e33f52-1803-49e0-8c03-49bec67abd94",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2aba1e36-3c84-4ed4-8820-d346be41e9be"
        },
        "item": {
          "id": "b102feb8-114e-4c42-8e01-ce7ec388cd9e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "efd89bb7-3135-4b42-add1-83ffec147e5e",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "5ea357e6-2944-4552-9add-fb73e91f2d21",
        "cursor": {
          "ref": "631d9a36-fafa-4c15-9c6b-865d60f98d22",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "080223cc-a13c-4b1a-becc-acaa6673ee9f"
        },
        "item": {
          "id": "5ea357e6-2944-4552-9add-fb73e91f2d21",
          "name": "did_json"
        },
        "response": {
          "id": "c3c28173-4d25-4c0f-a441-5a481d6cb785",
          "status": "OK",
          "code": 200,
          "responseTime": 309,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1f626a-d912-4054-b550-4e8daa186159",
        "cursor": {
          "ref": "ce557b1d-bde7-4005-934c-095fc6082a21",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c579c1a3-f7ea-43ea-88df-30e0fadc80d0"
        },
        "item": {
          "id": "7c1f626a-d912-4054-b550-4e8daa186159",
          "name": "did:invalid"
        },
        "response": {
          "id": "d0d03d8f-83e2-4388-b178-2b8325adf799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1f626a-d912-4054-b550-4e8daa186159",
        "cursor": {
          "ref": "ce557b1d-bde7-4005-934c-095fc6082a21",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c579c1a3-f7ea-43ea-88df-30e0fadc80d0"
        },
        "item": {
          "id": "7c1f626a-d912-4054-b550-4e8daa186159",
          "name": "did:invalid"
        },
        "response": {
          "id": "d0d03d8f-83e2-4388-b178-2b8325adf799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fae1fad-1bf8-465d-9d50-28cb303546c6",
        "cursor": {
          "ref": "4cc58e22-a4ba-426d-9c08-abe758542735",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "cb729532-909e-4d57-9cfa-bc349b786504"
        },
        "item": {
          "id": "7fae1fad-1bf8-465d-9d50-28cb303546c6",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d5e0719b-9ed0-4ad9-9540-0a9bdb5b1511",
          "status": "Not Found",
          "code": 404,
          "responseTime": 93,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c1aabb-8bb0-4404-90b0-e79495a500bf",
        "cursor": {
          "ref": "ba750d2d-eec3-433f-a4fc-ee3625aba58a",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4f11f361-fb82-4cfb-8f1d-95953f806c99"
        },
        "item": {
          "id": "90c1aabb-8bb0-4404-90b0-e79495a500bf",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3f35395d-9d0b-44eb-b3ba-482f2f863277",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47163309-0091-4296-a5b0-e1bbf5fc3c72",
        "cursor": {
          "ref": "0a285700-8cea-4b04-b7f2-af67e9885024",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "105d71ba-858d-4807-a8e6-1ee80767e08a"
        },
        "item": {
          "id": "47163309-0091-4296-a5b0-e1bbf5fc3c72",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "afb7c3e9-0968-4f72-8ff7-388b556fb767",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d540e868-d11e-4a98-8c9e-626dd6464cd5",
        "cursor": {
          "ref": "03ee7a66-07c0-4bb4-a055-6c7e80d98c6a",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3d87f841-6df5-4389-8e88-af7c47bbd54e"
        },
        "item": {
          "id": "d540e868-d11e-4a98-8c9e-626dd6464cd5",
          "name": "identifiers"
        },
        "response": {
          "id": "6537619b-48a7-4e6d-9fe8-095e80a679a6",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71e061f-d0ae-4fc8-8c26-331cdfcc3793",
        "cursor": {
          "ref": "ef7dbd30-9cfd-4c87-9d66-55de4ba73f3a",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "23550e5c-36d8-4141-9e27-146e5316eb92"
        },
        "item": {
          "id": "a71e061f-d0ae-4fc8-8c26-331cdfcc3793",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "71996d4e-8ff7-43fb-9dfe-7f5b41b4f3b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d57ab5e7-dcc8-40a3-9efb-49a0fc8b94f8",
        "cursor": {
          "ref": "0c38133c-3f9d-475a-8674-6bc68c8f1192",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "781f2b06-1e86-4add-a66f-da1ae58c0e3e"
        },
        "item": {
          "id": "d57ab5e7-dcc8-40a3-9efb-49a0fc8b94f8",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9037f480-adf1-43dc-81e2-d6a3c59c8280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84887bc7-b5b5-431e-9415-ea3a5acee795",
        "cursor": {
          "ref": "1f1af940-313d-4af7-98cc-7956a1825433",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "90744e98-22f9-4e87-a284-817e11fd5a97"
        },
        "item": {
          "id": "84887bc7-b5b5-431e-9415-ea3a5acee795",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "bf43f96b-ff75-43af-8f1b-9fc58b92452b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc5409c9-5f40-4b35-8521-341fae54651f",
        "cursor": {
          "ref": "e6cd0719-fdd1-4aa2-8098-0608b82b4913",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "26523f65-1ca5-46d1-9c90-2c8112b02632"
        },
        "item": {
          "id": "cc5409c9-5f40-4b35-8521-341fae54651f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4c4e9796-0917-4605-8bb9-7a88420dd61c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261a6a51-fd4d-4bb7-94e5-014af1f3f46b",
        "cursor": {
          "ref": "9ea20d61-2f67-4e0b-baaa-72002e8e35c5",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e13a3062-93fa-45c4-9f01-3e6c30c5ae28"
        },
        "item": {
          "id": "261a6a51-fd4d-4bb7-94e5-014af1f3f46b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "640b2888-3459-4c83-9f4f-92ec3705879d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14bcf048-f208-4704-ab55-99a18fc2c48b",
        "cursor": {
          "ref": "25fb0462-1c75-4e92-a6dc-b210cc7025d3",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4c84b3fb-bb5f-44ac-a49d-1625b13144c9"
        },
        "item": {
          "id": "14bcf048-f208-4704-ab55-99a18fc2c48b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a5ab4004-64ad-435f-8c4c-50158190390a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426a377e-292d-44c9-a0e5-54bf9d1f4372",
        "cursor": {
          "ref": "e0b96e4f-0c7e-4710-87ba-ff23f78e1097",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f56ce58b-3e99-4bbb-b3e4-2d031819ab3b"
        },
        "item": {
          "id": "426a377e-292d-44c9-a0e5-54bf9d1f4372",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "dfa5ba71-7ddc-448e-b04c-cb960740243d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d460b4b8-69a9-4dcc-85fa-4223f0302ef4",
        "cursor": {
          "ref": "71f7f4ae-f0ea-4415-b1a3-e39b88932f85",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "413d2ed6-1c17-4ca1-9c94-05d820db8717"
        },
        "item": {
          "id": "d460b4b8-69a9-4dcc-85fa-4223f0302ef4",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5903b69e-439a-4971-9ae4-648b3ecfeb3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a3988a-fbb9-43e5-a21b-72603ae62fd6",
        "cursor": {
          "ref": "fc542e0c-1d9e-4bf1-bb39-9eed2aff04ff",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1768ba64-9479-4de8-92c4-c862c2796ac0"
        },
        "item": {
          "id": "a5a3988a-fbb9-43e5-a21b-72603ae62fd6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "36a54583-d53a-4c52-ae6d-65653b5f3662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "982adc95-93fc-46a1-b25d-c37d64877787",
        "cursor": {
          "ref": "5d019f96-4990-41a2-9958-55b60b929963",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "bc18d3b3-7f15-46e8-9fd3-cfe16f24eda9"
        },
        "item": {
          "id": "982adc95-93fc-46a1-b25d-c37d64877787",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6c3871f0-fe63-40e3-81f0-2282c525337d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66770183-d342-4f6f-99df-6737bb8b777d",
        "cursor": {
          "ref": "94f4a4bb-84e9-4d07-8a93-e75427c70631",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b86b2388-e22e-4729-8896-71e985f24ba4"
        },
        "item": {
          "id": "66770183-d342-4f6f-99df-6737bb8b777d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f4a8912b-129f-4a01-8a52-72b46fb837bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c70b04-9201-4439-a692-6c5646aafed3",
        "cursor": {
          "ref": "e11f2ba1-b6e3-4da0-91f6-39ab8b0d97f6",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2d5b7fcf-e895-4bcd-a896-31cea080780b"
        },
        "item": {
          "id": "23c70b04-9201-4439-a692-6c5646aafed3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d099a163-c496-4b2d-a4ca-7001f12681f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "768badf7-a6b0-4c8c-b5d2-3561b4367d04",
        "cursor": {
          "ref": "aa630de9-be8b-4f14-b3c8-2fed953823e5",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9bb2f50e-bf4e-46b3-ad48-87b1e5a520a0"
        },
        "item": {
          "id": "768badf7-a6b0-4c8c-b5d2-3561b4367d04",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "132e7a24-3889-49f8-877b-69be11359c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc2cff8-2fd0-4343-bbd5-7f49dbbdb32c",
        "cursor": {
          "ref": "71ad89e1-6a5d-44b0-9d69-a396a8e32399",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "216f2e6d-6dab-4764-815c-ce3a0619c115"
        },
        "item": {
          "id": "9fc2cff8-2fd0-4343-bbd5-7f49dbbdb32c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e1ce0abe-0cf8-427b-a2f2-6e360bc1b38b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69ad81a-fe37-47bf-9ab3-8e7e53379596",
        "cursor": {
          "ref": "7524e7c1-6105-4d09-bd6a-e2210daa91a2",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c75179df-5932-4b72-89c5-6bdef55db3d1"
        },
        "item": {
          "id": "c69ad81a-fe37-47bf-9ab3-8e7e53379596",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "22e5ecf8-2a4c-4e38-b039-da02914b9cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a36f413-f061-44bc-84f4-569940c9fcbc",
        "cursor": {
          "ref": "e74fcdc9-a2cd-4c47-bc28-9b82601947c0",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "39e99713-268b-46d0-a4bf-b6e6bfdd8465"
        },
        "item": {
          "id": "4a36f413-f061-44bc-84f4-569940c9fcbc",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7f1afa9f-e083-4291-942f-2abbea32a446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f18d70e8-f416-4b44-852d-52b2b0ceda1d",
        "cursor": {
          "ref": "73fb9947-2ce1-4a36-85ba-83bacae00e30",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8a9a0696-f31f-4c5b-8ece-847f3a136d2d"
        },
        "item": {
          "id": "f18d70e8-f416-4b44-852d-52b2b0ceda1d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "81880091-87c1-4cc6-a804-c693ccf69428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33693dd-6df6-4cd0-b9a9-ab632db47eec",
        "cursor": {
          "ref": "acb25f6a-93c3-494e-981a-16258f58dc30",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d20b8123-53fe-4ab8-9946-6668184a8f8f"
        },
        "item": {
          "id": "f33693dd-6df6-4cd0-b9a9-ab632db47eec",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e597c982-fb28-4246-95a8-b2416f26b6d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d78f6b-1737-4726-9210-5c48d26c3206",
        "cursor": {
          "ref": "b1bb62e9-0dc4-4dc2-b798-87a39715fdfa",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "46f95f06-f23b-497c-800e-66ba9f310bed"
        },
        "item": {
          "id": "b7d78f6b-1737-4726-9210-5c48d26c3206",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "bf861448-a2ff-4a17-bd40-0cc280a7690b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18dc6980-b9bc-4ba6-893c-994fa5a14d49",
        "cursor": {
          "ref": "0047054f-a7c9-463e-ae0b-6a5e0aeebf2f",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "dd33a4c1-c878-45a0-bdd6-301f9336aa21"
        },
        "item": {
          "id": "18dc6980-b9bc-4ba6-893c-994fa5a14d49",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "82c95cc2-e43c-4125-a558-d6a6a62640b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9cbe3f-3e4b-49b7-92bf-f5e8a2f3b29b",
        "cursor": {
          "ref": "9409302c-d8e3-420c-a56f-d1fe29d597ad",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "84f5bc9a-eab3-427d-a9bc-dea72dade11a"
        },
        "item": {
          "id": "be9cbe3f-3e4b-49b7-92bf-f5e8a2f3b29b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4e589d3f-acf3-4b2e-bb35-01b8340d6536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b90f5ca9-c3de-4af5-ac04-487f741755e6",
        "cursor": {
          "ref": "d98b9e2c-7b26-4c41-9bee-2c7257c7a173",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e06eb84e-a1b3-4ec4-81bd-f9334cc6f37a"
        },
        "item": {
          "id": "b90f5ca9-c3de-4af5-ac04-487f741755e6",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f57a7af9-c95c-4029-b3ba-2bc2882612a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c3f991-839c-4449-8713-96829e800ee5",
        "cursor": {
          "ref": "0cbf4242-4d5c-429e-8430-918178b9694a",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4a505a4c-2da3-46d4-87cc-c93ffddc457f"
        },
        "item": {
          "id": "d0c3f991-839c-4449-8713-96829e800ee5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "afdfab12-09d4-439c-bd88-cfab8b466968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "677901e0-e4b1-4330-a320-35be2b1f571f",
        "cursor": {
          "ref": "c5da3905-17a1-461f-b1b4-8caff4c060ed",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a1efe5fa-fa16-4905-9350-55d842ba9f6c"
        },
        "item": {
          "id": "677901e0-e4b1-4330-a320-35be2b1f571f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3f2cf8e7-4ecf-4604-b43f-b4bb18ffb74c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827ebb42-e6ca-4a38-97b2-e42752088893",
        "cursor": {
          "ref": "d1e7529e-513e-4427-9762-4f1f8b1c336e",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "850334eb-9858-4bbf-9aab-30c0945755ec"
        },
        "item": {
          "id": "827ebb42-e6ca-4a38-97b2-e42752088893",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d6c55e55-35dc-41ce-8809-f9f2a511bf2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65f4454-6b5d-42a6-9999-51194ed37010",
        "cursor": {
          "ref": "f309bc3a-c84c-43c0-b102-72fa47aa97fc",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c630b498-7bd7-4872-bded-0378951da7ab"
        },
        "item": {
          "id": "d65f4454-6b5d-42a6-9999-51194ed37010",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d3285d39-972a-4b9f-84c5-73cc3edb590d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eba2239-da52-427b-850f-bac39c690ee3",
        "cursor": {
          "ref": "50c0c533-8d01-40dd-85e4-d43c4b21cfee",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1a32835d-b90f-4711-bbf2-f29c16fe6db9"
        },
        "item": {
          "id": "0eba2239-da52-427b-850f-bac39c690ee3",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "540ca766-f507-4bd4-9ace-9bd3b8784a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e0e454-9252-408d-a231-fec46d67ead7",
        "cursor": {
          "ref": "5c2e7cac-accb-44fc-9228-06444ef4a69b",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9cf71031-972b-4efd-ae19-bf705be0a4f6"
        },
        "item": {
          "id": "51e0e454-9252-408d-a231-fec46d67ead7",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ee74ca69-64f8-4f2f-9348-c16df6c61536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e015a95c-b01a-4564-b99d-5121f71af6d2",
        "cursor": {
          "ref": "27307a53-ad4f-4856-8cd5-9e7287f1c158",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4c3307d9-5ce2-487d-a3b3-5a76da51af58"
        },
        "item": {
          "id": "e015a95c-b01a-4564-b99d-5121f71af6d2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0572bbbf-db66-4ff4-9ee9-95509f84abcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d47c61-32b8-4242-8869-bb28a0cc8d3c",
        "cursor": {
          "ref": "14880704-0097-4c7a-9963-05dea077ac09",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "014d431f-6f26-4022-bb74-060b8dceae7d"
        },
        "item": {
          "id": "27d47c61-32b8-4242-8869-bb28a0cc8d3c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3dfd3cce-32b2-43fd-b933-e7ed5a41db1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845ed9cd-e2a1-4c54-a315-2c7f699617d0",
        "cursor": {
          "ref": "6b3fac94-90be-4ee9-958f-74c247d9dd04",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a6e54d15-8086-4ba2-9e53-7b98570fd71a"
        },
        "item": {
          "id": "845ed9cd-e2a1-4c54-a315-2c7f699617d0",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2137d8e2-3ed1-494d-af89-425adade08e3",
          "status": "Created",
          "code": 201,
          "responseTime": 593,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "489fb04c-d843-4914-8643-20fe85f9fcd2",
        "cursor": {
          "ref": "795b4eb2-9992-4a26-a165-1d4d9a63b258",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "264f2f0e-1704-41e3-8380-8c6dbfbb3259"
        },
        "item": {
          "id": "489fb04c-d843-4914-8643-20fe85f9fcd2",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b2fed404-3816-4eb1-9eb5-3431f2bd27cc",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ee86c9dd-7b7e-4237-94a1-a94abd3d971f",
        "cursor": {
          "ref": "e4ca4c8b-04f4-4c24-987f-af7f19f5a837",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2c3f0242-d6cb-4f8c-a81c-945e16525ff6"
        },
        "item": {
          "id": "ee86c9dd-7b7e-4237-94a1-a94abd3d971f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "72b27ed7-ff9d-4a8e-937b-0cb30a15c1b2",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "d0d25860-03c6-48eb-86ec-92f4e80342ce",
        "cursor": {
          "ref": "ce1538e0-569f-4fdf-9773-1ed7b29e9f07",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3128db8d-49b0-4db7-9005-1da41c152dae"
        },
        "item": {
          "id": "d0d25860-03c6-48eb-86ec-92f4e80342ce",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0c493168-5d4f-4341-9d48-cfba2b29e7eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87cf2a48-d4ee-41a1-8c90-f6ab5c913577",
        "cursor": {
          "ref": "8ba16557-b7a2-4fd2-b910-21f916aa1232",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "db162bda-1652-4dc1-981c-2a28d3ffe2aa"
        },
        "item": {
          "id": "87cf2a48-d4ee-41a1-8c90-f6ab5c913577",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b0399a48-20ee-47ef-8aa2-9f2861756365",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "ed243818-b885-460e-b4bd-309438baa1b4",
        "cursor": {
          "ref": "cafd7efe-3b09-4fc0-a78e-1d5f4a61533f",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "39debf2c-ba0f-4194-a771-8cf69227eab7"
        },
        "item": {
          "id": "ed243818-b885-460e-b4bd-309438baa1b4",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4a7cf182-43b1-4fc4-b145-2e17fca7323e",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c9c58acd-b34c-4b69-b9b1-fd0c30ce529f",
        "cursor": {
          "ref": "aa3c80cb-e546-42cf-bc68-3e801064ec86",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4a2f4d2c-3fed-4f66-bebc-03a58b4983ce"
        },
        "item": {
          "id": "c9c58acd-b34c-4b69-b9b1-fd0c30ce529f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6f156ef0-5555-4189-904a-ae9ba3b137da",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "67274876-5973-4b76-babd-bc2fc5fa1601",
        "cursor": {
          "ref": "c55f11db-d4cd-455c-a313-da8086049cc2",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "39cecd1e-e87c-4192-a23d-255812e5e9bd"
        },
        "item": {
          "id": "67274876-5973-4b76-babd-bc2fc5fa1601",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "dd6701a1-4e94-474c-ab1b-74aef19f9849",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "7179561b-13ef-4e79-ab42-1e5d36fd9185",
        "cursor": {
          "ref": "f642b540-37b9-4d96-8761-bcf7ecc65e5f",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e117c563-4852-4282-b554-3a2d9e35c2f9"
        },
        "item": {
          "id": "7179561b-13ef-4e79-ab42-1e5d36fd9185",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "bcf3221d-1f84-4cec-a911-198f8689948d",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0a163cc6-37a5-4bbb-8ba7-be595e6ab279",
        "cursor": {
          "ref": "ed9772a6-e756-40f3-be77-59a4a9ee80d5",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "633f07cb-0147-41ca-8574-91e667f1a21e"
        },
        "item": {
          "id": "0a163cc6-37a5-4bbb-8ba7-be595e6ab279",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "70fb0b26-79d2-4479-a2b1-eba908951540",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e08941a7-ef61-479a-9304-1c214a5d0de5",
        "cursor": {
          "ref": "9eae4ba4-bc87-478c-b895-890ef52eaa98",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "785364b9-65d3-4fe4-ae9e-d460868a9151"
        },
        "item": {
          "id": "e08941a7-ef61-479a-9304-1c214a5d0de5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2da4fb44-4432-4ebd-83b6-72bc27764457",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "839b798a-16a9-4afa-87b4-ed197ac63eaa",
        "cursor": {
          "ref": "2cfb7ebb-1b5c-48f9-98d0-e9744560f5fe",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "56323e2c-3673-46a0-b76c-1e155a277f5f"
        },
        "item": {
          "id": "839b798a-16a9-4afa-87b4-ed197ac63eaa",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a6267c0e-921c-44a5-9c1b-e5d8da94b263",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "6bd0e4e0-a96d-464f-b561-539a6672d24e",
        "cursor": {
          "ref": "115d733f-e68e-478b-9533-7d043220266c",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "913e45d6-f271-403f-a35d-de5ec449c369"
        },
        "item": {
          "id": "6bd0e4e0-a96d-464f-b561-539a6672d24e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "622fdaa7-3fca-46b9-9d10-bd33506eddb4",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "1e527668-f86c-4294-a34a-b419b48b13f1",
        "cursor": {
          "ref": "4be0f0ae-4d9a-4df9-83ff-b2f1cf9aa25e",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "46f73041-6a6b-43a7-b319-535717c55d15"
        },
        "item": {
          "id": "1e527668-f86c-4294-a34a-b419b48b13f1",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "254102c7-7d20-454c-8d92-22176fc80815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c33a2d38-d7fb-4f72-aae6-d33f5ed4d793",
        "cursor": {
          "ref": "e59e10c5-2a7c-42ae-921d-2cdc31f9acfd",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1d27abae-04d4-47bb-91d9-c385d2e45e99"
        },
        "item": {
          "id": "c33a2d38-d7fb-4f72-aae6-d33f5ed4d793",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5cc76f32-98c4-40e6-8a72-e160400a87e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e65fc7f-af67-415e-8f3f-bda19968ee83",
        "cursor": {
          "ref": "35c76c97-8309-49e9-b436-39c029a81905",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ef9880f7-46e2-463b-90b8-d0cd23090c7d"
        },
        "item": {
          "id": "6e65fc7f-af67-415e-8f3f-bda19968ee83",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0bef5fe5-4221-4bd0-b9df-0ea298751d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1870524a-b340-40a9-9ace-fa2216e94e6f",
        "cursor": {
          "ref": "5ebe9bef-22ca-4f6a-a3f9-e44f5a2ea0f2",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6f1d3de9-618f-4af7-b4b8-db1638fcb1db"
        },
        "item": {
          "id": "1870524a-b340-40a9-9ace-fa2216e94e6f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "fc00c8c7-c32e-4a81-b95a-fd4632ab90ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00059f21-eea1-4e35-bb35-85c4a7b53bc4",
        "cursor": {
          "ref": "1910b02d-9f02-4af6-9fc6-5fca63b529e3",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "631853da-5733-4b2f-a58e-c054ae79ffe0"
        },
        "item": {
          "id": "00059f21-eea1-4e35-bb35-85c4a7b53bc4",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "18154230-db40-4f4a-98c4-56c37bb20d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb63afd3-dc75-4871-81d1-b6a53fcf1b21",
        "cursor": {
          "ref": "37f9374c-e3db-466e-aec7-29e38dd8bdd8",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a7904f02-5fca-43e0-a172-5606aa8cd5fa"
        },
        "item": {
          "id": "bb63afd3-dc75-4871-81d1-b6a53fcf1b21",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0892010a-4d96-427f-8509-7517553370d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8ebcb94-a5f1-482d-afe6-1d2de85038f9",
        "cursor": {
          "ref": "30c09767-8096-4d84-aed7-6dd902689b29",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1cce2187-d5a0-4b1f-b9c1-a2a090220527"
        },
        "item": {
          "id": "a8ebcb94-a5f1-482d-afe6-1d2de85038f9",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "400f6ce3-ad55-4e6b-a22b-b1af6db320a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae57799-d602-478c-9b19-a47977c85c6a",
        "cursor": {
          "ref": "fe4d1f93-454a-4597-84d8-fe27b64b5b5b",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "68afce54-36ca-43ca-a73b-ea9c0977891d"
        },
        "item": {
          "id": "3ae57799-d602-478c-9b19-a47977c85c6a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5a42a8e4-e5bc-492a-afa3-6bccc1aeec37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a4c54b-18a4-4403-a88b-593ac7bc3073",
        "cursor": {
          "ref": "353e44ac-9317-4ddd-ba0b-b9e9dd12ef32",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "52bbdf62-e5d1-4951-bd8a-13f64c1f6f3c"
        },
        "item": {
          "id": "b1a4c54b-18a4-4403-a88b-593ac7bc3073",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "fe25f332-7e00-46a1-a2c3-e11f3efec36a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7344f1da-ad6c-4d3e-88c9-5c638b036653",
        "cursor": {
          "ref": "b059d46f-b455-427b-9737-ec62186e9b37",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "53d0a926-a72a-4986-b081-cc2234802283"
        },
        "item": {
          "id": "7344f1da-ad6c-4d3e-88c9-5c638b036653",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "05162d7a-95b3-408c-9d30-262b4c448c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e9fda7-c85e-41a6-ad37-1c0c138ed4bc",
        "cursor": {
          "ref": "1a10a94b-a546-4198-b77d-6e5ace67a14b",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a3be936f-2cf1-4208-9360-161a35d27b5f"
        },
        "item": {
          "id": "53e9fda7-c85e-41a6-ad37-1c0c138ed4bc",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6646ce15-8939-429c-8c82-d0b66a26315f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07d4296-791b-4930-9792-4ba8f0a40b6c",
        "cursor": {
          "ref": "09f5a990-be5d-4c05-b9a0-1cee00038202",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d9407855-46e8-495b-b833-4dc9d382fdc1"
        },
        "item": {
          "id": "f07d4296-791b-4930-9792-4ba8f0a40b6c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0229db53-f7f1-492e-9bff-95c38126b4ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c23cf2-7bb2-4227-b0e0-b1f28e7aa23b",
        "cursor": {
          "ref": "90ce7582-d880-4d78-aaac-8acbc6c381f3",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "313d87c1-8923-4fc8-a029-746a00b4a720"
        },
        "item": {
          "id": "e1c23cf2-7bb2-4227-b0e0-b1f28e7aa23b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f36498d4-9ca3-4fa0-ab25-00a87570fbde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c4976c-8585-4916-aea8-c463ed9465c1",
        "cursor": {
          "ref": "2b3a838e-e59e-4c42-866b-a752110b8206",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e59f52ee-8dcc-43bc-8e22-e827c21b0817"
        },
        "item": {
          "id": "75c4976c-8585-4916-aea8-c463ed9465c1",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e0785e44-6bc1-405a-b1fc-5c8480b6ab82",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "fb54111a-0aa2-4e83-9867-a563a9e90544",
        "cursor": {
          "ref": "6c544e93-7652-458f-aded-f2fe550cee6b",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "45288cd7-cbdc-4b44-9ab8-936fd70ed292"
        },
        "item": {
          "id": "fb54111a-0aa2-4e83-9867-a563a9e90544",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "a921e9db-9b85-42ed-bc6d-a3234e9e5989",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "1bbf0584-601a-49a1-b66b-bb9231b944e7",
        "cursor": {
          "ref": "a385b932-e8f8-46d7-8838-0aee7440e4a3",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a765b926-4c58-44e5-804d-5bf387cb1128"
        },
        "item": {
          "id": "1bbf0584-601a-49a1-b66b-bb9231b944e7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "530e9d64-4795-423f-a7c9-7940bb7befa8",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "0a6e801b-8b11-4aa7-8886-f88783afd102",
        "cursor": {
          "ref": "a279e320-26d8-4d06-9afc-49fe3c370cef",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d9e5bbfb-0fcf-48b4-9854-2553829e15df"
        },
        "item": {
          "id": "0a6e801b-8b11-4aa7-8886-f88783afd102",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "792124d8-a091-4e64-b91d-4de9fe5e5d60",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "d0aca762-5390-46f6-886e-0a6363e6258d",
        "cursor": {
          "ref": "e95d649f-dffc-4c7b-b252-40784500d956",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "fac147a9-6c86-4adf-af94-d5d649324e82"
        },
        "item": {
          "id": "d0aca762-5390-46f6-886e-0a6363e6258d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "392c7bd1-eb47-4da5-8061-bd874cd4fb5f",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b2298e6e-db54-4a42-8c28-23b51a5d3761",
        "cursor": {
          "ref": "f1f099b8-9322-481d-8b0c-43c79239d9d6",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f51fc3d0-302e-4dfc-89c3-2d50f2ccc942"
        },
        "item": {
          "id": "b2298e6e-db54-4a42-8c28-23b51a5d3761",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e2c772c1-7e47-4101-9fe2-abcf4eedf642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2698deb-09b0-4ee0-bb10-774a9eeb6c63",
        "cursor": {
          "ref": "c8c4d008-26c8-4f08-b1fa-985d7d6532a7",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3b7f868d-cd71-4abe-b777-d9847dadb949"
        },
        "item": {
          "id": "b2698deb-09b0-4ee0-bb10-774a9eeb6c63",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5a15d429-4fd6-4c0e-9a1b-1ca1d8498db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fbe1454-cce5-4721-90ba-fab21bfc07b6",
        "cursor": {
          "ref": "a9b58cc5-b32d-4855-9c60-a0a82030c862",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "cf3e3cea-0167-4860-9a33-da57fa3f0e62"
        },
        "item": {
          "id": "4fbe1454-cce5-4721-90ba-fab21bfc07b6",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5cb8c09d-00fe-43a9-8545-4f5fb7c6cb41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8545c05-76d4-4492-b04c-3ca205f63130",
        "cursor": {
          "ref": "1ee6fa9e-e825-4404-87fe-6f84955d300c",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8a991aa0-91f2-4af5-be35-4750186b0cd4"
        },
        "item": {
          "id": "b8545c05-76d4-4492-b04c-3ca205f63130",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "bb6b1934-ed25-4efe-813c-9fc73c56a9cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583493c1-66f4-47bb-9b15-245126644b59",
        "cursor": {
          "ref": "164b09d5-0e4b-42e7-8fbc-6f662fcb1c17",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "94370cce-f82c-4f7d-b997-c4a68328cc89"
        },
        "item": {
          "id": "583493c1-66f4-47bb-9b15-245126644b59",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "5d4e32fb-300b-4499-bf31-abfba813353a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "474b765a-b640-42df-9d51-e20e6404a261",
        "cursor": {
          "ref": "fe03b764-edc6-426d-96f6-dbbf9bd10c97",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "af019066-405b-4a25-a973-281c5f3d9c3b"
        },
        "item": {
          "id": "474b765a-b640-42df-9d51-e20e6404a261",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7a6a78d1-4c64-4c69-8b14-b104a0547caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00025dd5-c20b-4b27-921b-866d2d01cced",
        "cursor": {
          "ref": "9c6fe800-7dc1-427c-a487-487c0c617220",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "1a530ad0-77bb-40f4-8719-4255ddb791f4"
        },
        "item": {
          "id": "00025dd5-c20b-4b27-921b-866d2d01cced",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f32ac682-71f1-4762-9e17-66e5a1158800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e8f0131-aae8-407a-8b04-d03b1133e09a",
        "cursor": {
          "ref": "fdf5d697-3941-4d79-a606-34e257d513e9",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "348c1d48-7dae-4c7e-bb81-7bbe6f39228c"
        },
        "item": {
          "id": "7e8f0131-aae8-407a-8b04-d03b1133e09a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d9150cb5-ff66-4a16-947d-0363bbd458ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1932a0-5082-4127-a179-d8d17a61b460",
        "cursor": {
          "ref": "b7a60a83-5935-4096-9f27-eb775a78179b",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4b9bdcb4-d7e8-48b7-93a6-8dea05b94077"
        },
        "item": {
          "id": "be1932a0-5082-4127-a179-d8d17a61b460",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0ea22c7b-1488-468e-ba06-ac7b430403ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a9c3399-16dd-41d6-8e3c-83ffc838615a",
        "cursor": {
          "ref": "aa445a63-0b34-46ca-9a38-410893b60536",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "33f888a4-44ad-41b6-8a3e-c8e5b545396b"
        },
        "item": {
          "id": "8a9c3399-16dd-41d6-8e3c-83ffc838615a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "02ac538d-095d-4124-bd7e-22753284634d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12feae77-81ff-4f6b-b727-57909ac9ae10",
        "cursor": {
          "ref": "3e084756-1d7c-4969-850e-8f4c1d4b4a5b",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2b1db3bc-f57d-4a93-a60d-dca200e28bef"
        },
        "item": {
          "id": "12feae77-81ff-4f6b-b727-57909ac9ae10",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "cf444ae3-1741-4228-bce7-c191d2bc2643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2360a1c6-6be0-41b6-804e-c4d38492a63a",
        "cursor": {
          "ref": "bf279c16-ea68-4ceb-8c4b-149bbc2d5851",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "19ab0fb8-9282-44c7-990c-09a14afe62f3"
        },
        "item": {
          "id": "2360a1c6-6be0-41b6-804e-c4d38492a63a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "60c6d205-382a-4cfb-90e7-30efb52cf776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a55889d-257d-4f42-8fd7-270ad4cd6f3f",
        "cursor": {
          "ref": "bfd1bc53-74ab-4887-b036-7f444554e8a9",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "74daa4e9-a781-40fc-a2f5-0d2c4f070175"
        },
        "item": {
          "id": "9a55889d-257d-4f42-8fd7-270ad4cd6f3f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3ecce8a6-73f8-4d6e-a6f6-180bcbb7634d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f91d658e-2578-49f9-968b-a9db9d48f4e0",
        "cursor": {
          "ref": "16d46cbb-ec34-4114-9176-67195a414100",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a9867141-5e82-4111-9842-1633a9f271e7"
        },
        "item": {
          "id": "f91d658e-2578-49f9-968b-a9db9d48f4e0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "31cca4e0-588a-4345-9742-b85c802ad5c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a605a9-f819-4958-9978-793c7df38414",
        "cursor": {
          "ref": "abbad346-1ae5-4b0f-9ff9-b8d2efa80b23",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "bf5cd3c4-d236-468f-860e-9004e856efb1"
        },
        "item": {
          "id": "d7a605a9-f819-4958-9978-793c7df38414",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "643329d1-74d4-4459-b63b-55ecf46fccdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff1e971-1a16-498b-9d04-9e85d69b7c42",
        "cursor": {
          "ref": "c29bdf59-3edd-452f-afd7-81dc24b9c5b0",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4b74caf2-d310-4e67-aa60-0bf4e9bf088c"
        },
        "item": {
          "id": "aff1e971-1a16-498b-9d04-9e85d69b7c42",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4d194557-637e-473e-ba7d-503a3c43a0ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6f8da4-59f8-48ca-9496-635d873a1224",
        "cursor": {
          "ref": "49a7aa81-aa45-4170-ae60-dfe3470871e5",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "cfdf089f-6585-4e30-a1da-9061606e3a94"
        },
        "item": {
          "id": "4f6f8da4-59f8-48ca-9496-635d873a1224",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a7badef2-85fa-4f8a-869d-90f9c6e07eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3890b27-8f6e-4741-a671-6ae808eb9e66",
        "cursor": {
          "ref": "6e82d774-9055-4b4c-a4c2-8b5f336bca99",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5c5fafd3-bd3b-49fb-a12b-cf82ae844d84"
        },
        "item": {
          "id": "b3890b27-8f6e-4741-a671-6ae808eb9e66",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f08bb02f-a86e-4274-8fcc-f652355aebfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b256cfff-1d5f-41f8-921b-0b2ada5d30c0",
        "cursor": {
          "ref": "9b8d567b-3250-4ba8-97bb-5811f7761326",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "92e5fe52-d5bd-4107-8e91-35a193911b9a"
        },
        "item": {
          "id": "b256cfff-1d5f-41f8-921b-0b2ada5d30c0",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8d2c79e0-bd85-4f73-9684-88b909588ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def95de8-01f9-4a7c-8e61-38d1a0654f0a",
        "cursor": {
          "ref": "862cb1af-bafd-40b3-bc67-445dcbaacd8c",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7c4c1fa9-8227-40c2-acfc-749df3faa387"
        },
        "item": {
          "id": "def95de8-01f9-4a7c-8e61-38d1a0654f0a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c119be11-0b25-4352-b09a-6e006acc8cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b93856f3-0cd1-4fe2-bbde-bade0727447b",
        "cursor": {
          "ref": "4e7a47fa-287c-42c2-a8df-2bd61c5a5972",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "cb487038-2934-4b2e-9544-372e65d48a3f"
        },
        "item": {
          "id": "b93856f3-0cd1-4fe2-bbde-bade0727447b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f321b1a8-6a2c-4be2-b73d-3dcf3d4b6d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cccf01f-f012-42fb-9245-d05081e3deab",
        "cursor": {
          "ref": "a71c3a7b-9e9c-4d1a-a00d-8caa326c1efd",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2b5e5efb-69b5-48d6-be64-f2c3d0089e70"
        },
        "item": {
          "id": "2cccf01f-f012-42fb-9245-d05081e3deab",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "987797b6-35fb-4146-888e-aa0c290108c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cca3328-4733-4ca9-b4a4-c2b2b53bfff5",
        "cursor": {
          "ref": "c18ca3ec-a813-4c50-b3fa-3d196e9d4727",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "dccb559b-eeaa-4490-8cd1-07611821f02f"
        },
        "item": {
          "id": "2cca3328-4733-4ca9-b4a4-c2b2b53bfff5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "3dcdf983-ff4d-469b-b9fb-1c49bf3b16c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc36ea02-df29-491b-8072-a385b04457c1",
        "cursor": {
          "ref": "2ecce6f2-10c8-4e7f-bf6b-a9cbc41c1ba4",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3d18d4e9-d0ab-4998-b8b8-e86b194a8b5b"
        },
        "item": {
          "id": "bc36ea02-df29-491b-8072-a385b04457c1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "bc4d9257-9edb-403d-81f2-ffe0e83afcf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4279c64a-068d-4e21-bddb-eb4592f9252f",
        "cursor": {
          "ref": "b7fe5fe8-f63c-414a-bb4a-6962624e245b",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f7ffa27a-dc56-48d5-a3bb-f29e6f3af5c2"
        },
        "item": {
          "id": "4279c64a-068d-4e21-bddb-eb4592f9252f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "42b293a9-0cb7-4d08-a2d7-0c07fe15e4e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78cd4006-e3b0-4be2-af62-a1f8eb4134c4",
        "cursor": {
          "ref": "f6fd3148-9dcb-4951-a77b-f76c6ed3b074",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "396c9168-9436-4572-9bba-dfa426c9c3fc"
        },
        "item": {
          "id": "78cd4006-e3b0-4be2-af62-a1f8eb4134c4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "4a923a37-be2a-4d1f-871e-cdcfc9e64b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa0c719-f0b3-4a3c-a3b4-35d28019e055",
        "cursor": {
          "ref": "19e30c24-ea66-4911-bb52-d90710f17c15",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "bb4b99fc-8d0f-4dc5-bbc9-231d336ae47a"
        },
        "item": {
          "id": "0aa0c719-f0b3-4a3c-a3b4-35d28019e055",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "429ce7f2-33bb-4b75-a3fb-e6b925b1a443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82bb003b-451d-47d1-b34b-8da4812fa941",
        "cursor": {
          "ref": "1c160776-de48-421d-9377-b24a09f52c3f",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1293ff3f-c230-47b1-b627-928be3d42bc1"
        },
        "item": {
          "id": "82bb003b-451d-47d1-b34b-8da4812fa941",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e6c3a256-0978-4374-bec5-685199ae2a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2d7506-1329-4a85-ad93-12dae0b0ba07",
        "cursor": {
          "ref": "ed8d4f73-9c39-4794-8472-e3e7cc71eb09",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a0656527-06c0-494c-a40d-ccd612b8af10"
        },
        "item": {
          "id": "eb2d7506-1329-4a85-ad93-12dae0b0ba07",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "32c747bb-e890-4b55-a651-63258d57a891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb3a790-47ee-4f35-86cc-58b15d188fc6",
        "cursor": {
          "ref": "cff58692-602a-4311-ab50-0cc3fb33cf61",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d37d8eeb-4afc-41f7-b563-f3e28afc495e"
        },
        "item": {
          "id": "beb3a790-47ee-4f35-86cc-58b15d188fc6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6efa7867-463d-4a6d-80c7-eb91b1727057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc675b9b-767b-47c1-8a74-546dca6e1d10",
        "cursor": {
          "ref": "4221ef08-e3d8-4879-badf-2f2edeaebdb0",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "15e00a30-aee5-4315-a8b5-bb928b418273"
        },
        "item": {
          "id": "cc675b9b-767b-47c1-8a74-546dca6e1d10",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f033e04d-cc6b-49ac-bfce-d9f32ac8d24f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b910e95-bf33-4b87-8f0c-b11e5d4ddcaa",
        "cursor": {
          "ref": "94df4ad3-06a7-4589-bc76-8a1f78ac58d3",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "30b22ff0-7f50-4b13-80b1-8c105c35b4d6"
        },
        "item": {
          "id": "7b910e95-bf33-4b87-8f0c-b11e5d4ddcaa",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "071af3b1-203d-45da-bacb-d9cb86be9175",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c0e365-b4e3-4593-aa1a-d6ab0db76665",
        "cursor": {
          "ref": "6823290b-c20c-4452-b63e-475806a2fbfe",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a40de3fe-1d6c-473a-9481-e5ba783739d5"
        },
        "item": {
          "id": "c9c0e365-b4e3-4593-aa1a-d6ab0db76665",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "6e6f7259-9fd7-44c6-a318-6167715b7384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "b9c47b43-9450-41d2-a2d7-931cd73665b3",
        "cursor": {
          "ref": "62538cf9-5286-4f68-98c0-7d6accb9efe2",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "fb58ec78-ac53-4c8c-9bf4-e90773d0eecb"
        },
        "item": {
          "id": "b9c47b43-9450-41d2-a2d7-931cd73665b3",
          "name": "credentials_issue"
        },
        "response": {
          "id": "21411606-f2e5-46d1-8cc7-a162494c82dc",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "5973f5d8-54ae-4954-83e9-1ff8dabe7a87",
        "cursor": {
          "ref": "09e9ad68-b4f6-4573-91a5-f7293d712b22",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ff9ac454-a2c8-49e5-bc4d-990019cc8760"
        },
        "item": {
          "id": "5973f5d8-54ae-4954-83e9-1ff8dabe7a87",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "52339144-37ea-4ea5-bdc8-2223c3cf30de",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8976742b-4835-42bc-b52f-5aec775d710f",
        "cursor": {
          "ref": "c023f6dd-baa2-4b10-9ddf-a368464b22d1",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3ca66b33-3f41-4027-9dc4-d947a261c05f"
        },
        "item": {
          "id": "8976742b-4835-42bc-b52f-5aec775d710f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1d87ea05-2224-487f-a282-4cc2d11e7154",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d97b05bd-77ce-4b5f-9250-0271e003df09",
        "cursor": {
          "ref": "9132ae82-e3fa-4db7-92be-2eaf150f8bf3",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4f31eef2-ef30-4e09-af40-a534f92a0088"
        },
        "item": {
          "id": "d97b05bd-77ce-4b5f-9250-0271e003df09",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "98cc1434-ea31-4fc0-b694-f950bb269c3c",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "77afd9b9-084b-41fb-925f-da41026483d0",
        "cursor": {
          "ref": "aed6e6f5-1799-4cd8-8084-0ca8758b84f7",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0dc29fba-f071-408b-8980-ff50fbbb97b4"
        },
        "item": {
          "id": "77afd9b9-084b-41fb-925f-da41026483d0",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8c25a481-2d73-4d1d-aa9d-3cf2a6295221",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-19T00:35:31.267Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-19T00:35:31.267Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "c0312174-3053-4002-88c4-5448b3a944bc",
        "cursor": {
          "ref": "df3f9d4c-bbf0-4b56-b8f2-1b872885e93d",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0aef2b42-02cc-4057-9db9-ecd75d283270"
        },
        "item": {
          "id": "c0312174-3053-4002-88c4-5448b3a944bc",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "9186b158-6fef-4f4c-bfe1-05ab8477d7f7",
          "status": "Created",
          "code": 201,
          "responseTime": 349,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f6a29e-e4c0-43cc-aeaf-cf4b03846e3a",
        "cursor": {
          "ref": "8e6cbd1a-33d3-4974-bb8d-7744e8a0c9a3",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8596f125-9a9e-411e-b084-9a97df35835b"
        },
        "item": {
          "id": "f7f6a29e-e4c0-43cc-aeaf-cf4b03846e3a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c2c5c3c4-d9a2-4c25-bad7-6e9ed24b614f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01556b1b-3b99-4c93-af98-f3cc40b337c0",
        "cursor": {
          "ref": "4d6750d7-c915-4e00-96e0-306fdd99ad8c",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9ed27ae1-f883-418c-8cbc-a1794830c0d3"
        },
        "item": {
          "id": "01556b1b-3b99-4c93-af98-f3cc40b337c0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3eac8d2b-62a6-4d98-8373-b27942e6689b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e59cd75a-bc55-4bbc-a4b7-c868e85d3721",
        "cursor": {
          "ref": "f815c3f0-7915-4102-8cb8-06c02899f9a0",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "61459a78-eb22-4c42-8661-b7129068ae29"
        },
        "item": {
          "id": "e59cd75a-bc55-4bbc-a4b7-c868e85d3721",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "acf05e8e-6cc6-4dda-835c-7e435cc3c62b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5163c6a3-68ef-4fa3-a240-efabf3e8d3fa",
        "cursor": {
          "ref": "4bdf1529-5d78-470d-b080-b4576bf6e422",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ad9d4594-c693-42de-8c00-7bc09cc5632b"
        },
        "item": {
          "id": "5163c6a3-68ef-4fa3-a240-efabf3e8d3fa",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "959c0043-f146-45da-8a9b-dca39143ae3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db30e532-a31e-4dd2-888e-40a261361014",
        "cursor": {
          "ref": "5388f59b-8f14-4dd7-a12c-c7a15087b300",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d4d2c5ec-0873-4bd0-8d21-82ed5cee9f37"
        },
        "item": {
          "id": "db30e532-a31e-4dd2-888e-40a261361014",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a07b3ed2-341e-463c-9fb5-3f171d4adfe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c5610a-0ea8-43d3-ab58-97c58763e6df",
        "cursor": {
          "ref": "41cb84c3-cbf9-448b-9cbf-afcaf6fd0e9a",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3477a38b-0e0c-459c-818b-9c83f99cd9bf"
        },
        "item": {
          "id": "c3c5610a-0ea8-43d3-ab58-97c58763e6df",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "58cb6257-cfa6-422e-8191-e10aec319235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4f64fa9-1522-404d-970d-ab615468f4bb",
        "cursor": {
          "ref": "6f27e668-3c1d-46ce-b42f-e8826a1a5b63",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d888016d-1493-4265-a870-8a4d2f07cfe3"
        },
        "item": {
          "id": "f4f64fa9-1522-404d-970d-ab615468f4bb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "244ffa9f-763a-44a7-8a14-7263c449372c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0edf73b6-2a33-4587-950a-65b3610fcef5",
        "cursor": {
          "ref": "0c86fc91-78b9-402b-b8ee-12dce92c4c6f",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "edd459c2-0db3-4780-b0dc-795cae19fa15"
        },
        "item": {
          "id": "0edf73b6-2a33-4587-950a-65b3610fcef5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2b707212-6fd3-4df8-a4cc-e976b35d5233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41038265-d9b0-4007-a62f-7ebff00fa752",
        "cursor": {
          "ref": "fb399010-7499-4be7-804e-426b2fa07ad6",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2c6fc625-4c2e-4f88-bcf5-1385ab2d7983"
        },
        "item": {
          "id": "41038265-d9b0-4007-a62f-7ebff00fa752",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a3708682-b1e0-4503-9576-4228b5314e41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b0026c-54c5-4d90-bc73-3e59005f077e",
        "cursor": {
          "ref": "1bd88cdd-4701-4c30-b556-34efa291fb6f",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "24891c81-30fe-4286-ba1d-43b3fbadf69e"
        },
        "item": {
          "id": "79b0026c-54c5-4d90-bc73-3e59005f077e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e5933bfd-59bd-4624-89e9-44d14146488b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6abdbb35-ca36-4cc0-acb7-783f1d1f90a5",
        "cursor": {
          "ref": "c41f1f0c-ed2d-476b-9b1e-9e37c86971d7",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "15e9fb95-7bcf-474f-a0f0-9efa7cf4f077"
        },
        "item": {
          "id": "6abdbb35-ca36-4cc0-acb7-783f1d1f90a5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "284fa1d4-0fb8-487a-b25a-b7e3250bd871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab86583-20a2-439a-9f74-f0a31b9e30f1",
        "cursor": {
          "ref": "d6bac01b-2d72-4a40-ab45-b815e5283b92",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8cba07f7-2560-4996-99c1-cb7bd93e2219"
        },
        "item": {
          "id": "6ab86583-20a2-439a-9f74-f0a31b9e30f1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8d032cd6-2cc8-4d5e-9850-425305070798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed50be5-7854-4fde-9359-a3653f63290c",
        "cursor": {
          "ref": "47fd1d7d-db93-4d0e-93d0-00f15a3ab7f4",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "0aebe604-6418-4e25-9877-a21335175957"
        },
        "item": {
          "id": "4ed50be5-7854-4fde-9359-a3653f63290c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "989339ae-1884-4be2-9771-4b3f1f552820",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "92a37abd-f4e2-41bb-bb40-1c5924f5d150",
        "cursor": {
          "ref": "06f6aa92-40a4-4629-a85e-814859325b36",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9f6f5e84-a87d-4d5f-aaf5-12865a406538"
        },
        "item": {
          "id": "92a37abd-f4e2-41bb-bb40-1c5924f5d150",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8fa9f6b4-d85f-4d37-b338-2e83b9c4caa4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "994c4f87-7b24-4f55-86d3-2732b09809f6",
        "cursor": {
          "ref": "4bde40a8-6116-45fd-9add-bf84409f6b79",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "70660ac8-f9f2-4e9e-89d8-5e9858d5a21d"
        },
        "item": {
          "id": "994c4f87-7b24-4f55-86d3-2732b09809f6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5201f1e0-12f0-4e79-a084-d45af2d771bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9424bc54-de11-43f5-bcf0-bb917e336467",
        "cursor": {
          "ref": "d065d290-077b-4023-9147-d3771afd1d1a",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "43686101-dafd-443c-b334-b5620388f184"
        },
        "item": {
          "id": "9424bc54-de11-43f5-bcf0-bb917e336467",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "52ad542a-1dd8-4628-a09b-eae880cb1901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b7e930-3295-46d7-9914-d2aa567e90ad",
        "cursor": {
          "ref": "02fffe97-77ec-4e60-9439-769123489a65",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4113a6be-5e4b-45f4-be3c-d3231b6f1d61"
        },
        "item": {
          "id": "10b7e930-3295-46d7-9914-d2aa567e90ad",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2a7763f2-540f-4488-a641-49858f012ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5375e21f-6970-48dd-a848-427c39b4f257",
        "cursor": {
          "ref": "41860c05-70c3-481a-b655-65300fc534a9",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "97fcf5bf-dac7-4415-9666-c3a072a06a0a"
        },
        "item": {
          "id": "5375e21f-6970-48dd-a848-427c39b4f257",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "48fd4ae3-c297-4ec5-9b12-a4bbaf9012dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d99f1af-dd20-4207-b27b-0256f73e35e6",
        "cursor": {
          "ref": "9f898427-3c88-4767-8087-142d4bf29264",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "bbc96c4d-8628-4140-9e2a-22d6c40d575b"
        },
        "item": {
          "id": "8d99f1af-dd20-4207-b27b-0256f73e35e6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "052a504e-92c8-4b09-92fe-58d170f3b0fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc97c43-14f4-4a54-956a-076aefd2ba5d",
        "cursor": {
          "ref": "97c19ac4-ddf1-4139-aba6-c789040965b8",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "066a0608-afbf-4097-960e-306b8571958b"
        },
        "item": {
          "id": "fcc97c43-14f4-4a54-956a-076aefd2ba5d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "36437c66-e86e-4bf4-8148-d1fb95d567ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06eff1bf-272f-41b6-ba3e-a699e6bb4d05",
        "cursor": {
          "ref": "48789cb1-65f0-414d-9ce6-45abd1a34cca",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e001c9ff-79fb-4869-ac5c-9f18e994c61b"
        },
        "item": {
          "id": "06eff1bf-272f-41b6-ba3e-a699e6bb4d05",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a5b6caeb-b5ce-4951-a4ea-18121a44554c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d61f7370-4066-4879-a1a9-5680a1d16a81",
        "cursor": {
          "ref": "e7c3a487-fb8c-48f8-91b0-0ca22c4f8b3b",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a2db7629-2a18-45e8-889f-abb81010db51"
        },
        "item": {
          "id": "d61f7370-4066-4879-a1a9-5680a1d16a81",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "76b7d0de-a032-4116-961d-8a48c15cfcf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1987809-c4ff-4fe5-b9d7-444f65fc4f3d",
        "cursor": {
          "ref": "7004aff6-ecba-451a-8abe-aac2850f02d8",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1c49c2fc-211a-47bf-b831-670476ec6400"
        },
        "item": {
          "id": "e1987809-c4ff-4fe5-b9d7-444f65fc4f3d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "849b3b59-d34d-4d1c-a075-41ef09315f00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ea1f91-a4ea-4e81-b637-c4394e0c5fd8",
        "cursor": {
          "ref": "37f381bf-b6ce-4a1c-9d98-7185bd9ddfdc",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "374c6d4f-9dfb-4543-bda9-5efb3b730319"
        },
        "item": {
          "id": "a4ea1f91-a4ea-4e81-b637-c4394e0c5fd8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c0780ef9-5a84-4ec0-8c43-f43e8aa865cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e3835d1-7d67-478d-8fc7-a02ac4f5dcfa",
        "cursor": {
          "ref": "b7a7ca5a-8723-4285-a3f3-3b8b6cd57820",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9f950c19-1c68-44bb-8001-8b58dad8a1d1"
        },
        "item": {
          "id": "6e3835d1-7d67-478d-8fc7-a02ac4f5dcfa",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2dbf8394-736e-464f-9af8-9b33fb45543b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68627b08-e65c-4741-ba44-c529bd8b3544",
        "cursor": {
          "ref": "f62219de-51b2-4650-95a4-c3d05e7ff980",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f78d990e-e999-4ad3-86eb-ab6dcba5f672"
        },
        "item": {
          "id": "68627b08-e65c-4741-ba44-c529bd8b3544",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4f77a891-b817-468e-b70d-c46653446160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba34c530-2f71-470b-a049-64135d29e971",
        "cursor": {
          "ref": "cc71f579-a1ad-4a02-9e01-759aea91f025",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "01732256-89d5-4896-a55c-5e8c46b7f4c0"
        },
        "item": {
          "id": "ba34c530-2f71-470b-a049-64135d29e971",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "dcf9d188-ff0d-4c07-9c0d-5bdf8abff52f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "208b4870-f087-4c28-b213-89203bed260b",
        "cursor": {
          "ref": "32f998d1-2ab7-42c1-a5c6-c30f45ca4402",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "36138f82-30a7-43df-aafb-06d02daca46c"
        },
        "item": {
          "id": "208b4870-f087-4c28-b213-89203bed260b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "61d72986-e128-4ce6-b5f7-32a4a2976d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "392eacb5-e7b2-467e-b398-7d2ee7e12732",
        "cursor": {
          "ref": "66f460c2-c88c-4603-8233-8d9f1e521e10",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f584953e-1ea0-499f-8fe2-b9849a934adc"
        },
        "item": {
          "id": "392eacb5-e7b2-467e-b398-7d2ee7e12732",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6b879a56-e62a-477d-8cf1-df58f15d8e16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8582b48-3eb8-4f0a-8fca-c3a64621e41f",
        "cursor": {
          "ref": "a2de694c-bec7-45c4-8d59-267998333cc9",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7fa5a29e-9a89-45aa-82d7-bc6ebf6d8601"
        },
        "item": {
          "id": "f8582b48-3eb8-4f0a-8fca-c3a64621e41f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c8ebb2de-fbda-433c-9d77-7ee8a541dd66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc65415-bf7c-44b7-89ad-f3b5c671665d",
        "cursor": {
          "ref": "91fbd5d7-1355-4aaf-ab3d-5ecfb16b8431",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ee41adef-38b6-49a5-9ea0-3012498d8663"
        },
        "item": {
          "id": "6dc65415-bf7c-44b7-89ad-f3b5c671665d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f9ca1776-4a94-49a7-8552-415b806b9bfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a0f483-2a8a-45d0-87c0-9c43a7c4e39d",
        "cursor": {
          "ref": "445deb97-6a95-4bcb-b482-8f08ad22c16d",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6f720c47-2ac8-4f79-bce2-818757332471"
        },
        "item": {
          "id": "42a0f483-2a8a-45d0-87c0-9c43a7c4e39d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "783b5b5b-68a4-401c-a269-3e3b8d820864",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "cc9524f5-cf65-4478-8d22-e0854c0275e5",
        "cursor": {
          "ref": "03149204-d7ca-4b20-baa5-e8cd3d8e9481",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7aed76dd-613c-4623-8bbb-c94c5832ffaa"
        },
        "item": {
          "id": "cc9524f5-cf65-4478-8d22-e0854c0275e5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "23e28e59-ad0e-4d6d-a490-2299f3a1f83a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10969dbe-7452-4a3d-84dc-ecc2de099024",
        "cursor": {
          "ref": "1fe16c77-083e-4cc0-aa1a-7ea3b3984da1",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6538600c-d4d8-42c7-91d8-9ae92ac13043"
        },
        "item": {
          "id": "10969dbe-7452-4a3d-84dc-ecc2de099024",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "60ff2aae-5bc9-4d4b-bddb-1c4c1278963a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec99ff4-52d4-4758-83cc-17803a9b359a",
        "cursor": {
          "ref": "e5a3da37-995a-4ef1-82d9-7ed5df80b481",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "61eb1639-d121-4e40-8f1e-b6c673bc5454"
        },
        "item": {
          "id": "aec99ff4-52d4-4758-83cc-17803a9b359a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c3fbc20d-4530-44f7-b80b-67911c3f12f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa92683-7a8b-49c0-9a66-9690c4394e2f",
        "cursor": {
          "ref": "6045d305-5721-4f61-8228-c8bb95a662bb",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8a82356a-3c0f-4c45-ac99-75c9d2770382"
        },
        "item": {
          "id": "7aa92683-7a8b-49c0-9a66-9690c4394e2f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b9c69475-eb30-43d6-a106-aa70d0fc98b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8ec08f-edc1-4181-8b4d-bff903176a88",
        "cursor": {
          "ref": "177110d6-6e15-4364-b083-d69d56c8ab71",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "19708fda-8eac-430a-8db5-bec1baa128f1"
        },
        "item": {
          "id": "bb8ec08f-edc1-4181-8b4d-bff903176a88",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "04f2ab2c-b652-47ea-994b-f113a1f22a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6d0f73-8ea9-46f0-93df-91ac1d9b0b11",
        "cursor": {
          "ref": "81ffdee3-07c4-47ad-9ad0-6dcd36123b7c",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7317d1fc-c687-4cc2-9a3f-f71e34c4fb7d"
        },
        "item": {
          "id": "ce6d0f73-8ea9-46f0-93df-91ac1d9b0b11",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "bb0047f1-54db-4c88-8c4d-92721f0f0ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d5338a6-eacb-44ab-a293-11955780bfec",
        "cursor": {
          "ref": "6e30eae7-bd74-4a27-80f4-038a32f84f57",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "709bb9f5-f856-4155-9d60-b877bd97984c"
        },
        "item": {
          "id": "4d5338a6-eacb-44ab-a293-11955780bfec",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "53a06e06-2b87-46cb-8c27-c1df82989686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4b836e-405d-46a4-a0e3-09cd1ab42a98",
        "cursor": {
          "ref": "b0785837-603d-4903-a6bc-4e1f51533b22",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "21b2c7d2-61f4-4bc7-b469-e0da314e37b2"
        },
        "item": {
          "id": "0e4b836e-405d-46a4-a0e3-09cd1ab42a98",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "48c57714-a66e-472f-a5c5-ddc3a3f517c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ced25ef-5e51-40e8-9770-1b25e408ac02",
        "cursor": {
          "ref": "bbed2314-78cf-4653-90de-919d5641933b",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e8c3a4ff-992a-4c6c-9eee-08bddff12570"
        },
        "item": {
          "id": "8ced25ef-5e51-40e8-9770-1b25e408ac02",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5f419b23-6734-4cd1-aaf9-c10a3a1c80b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79a6e2e5-47ba-4700-908d-29d3615328fc",
        "cursor": {
          "ref": "59312599-1a68-43b4-afbe-2a1e9cbe85f7",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f02581c0-016f-4552-9e12-a25abe716540"
        },
        "item": {
          "id": "79a6e2e5-47ba-4700-908d-29d3615328fc",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8eec62a9-2f0c-4c11-a292-f5c0c838f570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6c9ed4-10ff-4f04-9c0b-aa3169c168b3",
        "cursor": {
          "ref": "28b6b350-ea4f-4d63-bc6a-48dac6643aa2",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9f61a336-dec1-4384-a457-53449236d181"
        },
        "item": {
          "id": "9d6c9ed4-10ff-4f04-9c0b-aa3169c168b3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "82e49797-af39-4753-87f4-da638db0c943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea18b97-9856-4442-9d20-9c7d1d848685",
        "cursor": {
          "ref": "4522b94c-3738-4671-89ce-ac73987f2461",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "25799760-2d9e-49a4-841a-d3ba252934b3"
        },
        "item": {
          "id": "bea18b97-9856-4442-9d20-9c7d1d848685",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "dc499a94-066a-4cca-8ecd-7a98626f0f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274031d9-23ec-48a6-bb0a-21e6958fed25",
        "cursor": {
          "ref": "35a039f2-ddc5-4f9f-9cc4-1bfd9708d37e",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e8c2f209-0bf4-407a-bbfa-d9f88bb26bd5"
        },
        "item": {
          "id": "274031d9-23ec-48a6-bb0a-21e6958fed25",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7debcfbe-36e1-49d5-a257-0b6b504ea835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25a84e4-469c-46fb-9ade-0ebb3b745e7c",
        "cursor": {
          "ref": "ca673712-dc13-40a2-9048-a2849cdd228a",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e759f371-0572-4eb6-a9ee-1541769f7373"
        },
        "item": {
          "id": "c25a84e4-469c-46fb-9ade-0ebb3b745e7c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1ac1b2c7-ebba-43ae-b033-5cdd8ead1cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb05ade8-b747-4534-a9d9-3938e1a14ed3",
        "cursor": {
          "ref": "42202a22-60b0-4b3e-a265-bfd5753bd2ba",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "18c3ef5c-32fd-42f7-943e-9a74bb7e24db"
        },
        "item": {
          "id": "cb05ade8-b747-4534-a9d9-3938e1a14ed3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "42c6696d-a415-42b2-ac5a-f1e6b065a9e1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "4792683a-7249-4dad-b651-84e317e6272b",
        "cursor": {
          "ref": "f9e6c93c-a664-4822-8ff3-c28a3a23cf61",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "90a18b6f-3c1e-4a87-b745-bc2ee369a795"
        },
        "item": {
          "id": "4792683a-7249-4dad-b651-84e317e6272b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1fa15f73-ede9-43d5-879c-d88f1f7a6477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b015c596-ff11-40d0-a91a-1ba9579a4c19",
        "cursor": {
          "ref": "f58ce90b-f90e-41a6-a240-0e3b4c888343",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "25c81453-3be5-4857-be1c-b60d572d2104"
        },
        "item": {
          "id": "b015c596-ff11-40d0-a91a-1ba9579a4c19",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a0d8106f-fc0e-4f59-aa14-720ac7abb3a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce1aa310-afda-491d-87aa-92282c08dbc6",
        "cursor": {
          "ref": "4e029092-758c-4926-a450-aa5efa1375c4",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "202bf2df-6341-4bfe-bd38-3159c6235cef"
        },
        "item": {
          "id": "ce1aa310-afda-491d-87aa-92282c08dbc6",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0dfe1805-4bcc-49d9-b958-8284ed1ebe68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed9b4cf-a23f-424d-857f-d5d0c536f101",
        "cursor": {
          "ref": "7d243560-888c-47a5-a198-449314195cc4",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "dc40afb3-ed8e-4325-a307-9881822554e6"
        },
        "item": {
          "id": "7ed9b4cf-a23f-424d-857f-d5d0c536f101",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5eba037e-279e-4a88-a95a-ec62740985e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e12fecdc-0443-44b1-a73f-81cf3fb1e795",
        "cursor": {
          "ref": "88544476-c37e-4e84-9f7e-e6a1cab2847c",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "268bb1d7-72b3-41a9-bd39-feb45311cb9b"
        },
        "item": {
          "id": "e12fecdc-0443-44b1-a73f-81cf3fb1e795",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4b871ae9-515a-47f8-b7f5-6a757c16b6a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f19f2fd-c5cc-47ff-970a-b85db25bd8ff",
        "cursor": {
          "ref": "a91542d0-d639-4501-87c6-a117746ecb07",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b931cfc9-46a5-4ab7-84f8-d3259367ea45"
        },
        "item": {
          "id": "6f19f2fd-c5cc-47ff-970a-b85db25bd8ff",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a9eef170-e879-4a3c-bb60-b8c8ecbf0248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24821e3c-4348-4250-9a26-ca51c8900c1e",
        "cursor": {
          "ref": "d6ffd70d-50e8-4d97-afb4-053e9eae33ef",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "de62f56b-3121-442c-a2d3-e12cc876ce63"
        },
        "item": {
          "id": "24821e3c-4348-4250-9a26-ca51c8900c1e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7634c987-d24a-47c3-bf10-af70950f7781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c454a26-f924-46a9-88c2-6f3881e97ea0",
        "cursor": {
          "ref": "08a83edd-2b3d-46a1-8dbf-85cb0f3c674f",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c46f8b78-7fa6-4d23-a5b6-37b0fafdae05"
        },
        "item": {
          "id": "6c454a26-f924-46a9-88c2-6f3881e97ea0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e8d7ec4b-6a91-4620-b890-ffb0f47ac76b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e59a9c11-65fe-4034-97fc-9fbe45c08014",
        "cursor": {
          "ref": "b5887d86-b512-4f5f-84a9-8c1e88c992f1",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0f006df7-4efe-4b3a-b731-cbe805ace63a"
        },
        "item": {
          "id": "e59a9c11-65fe-4034-97fc-9fbe45c08014",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4906ee36-e471-4e29-b891-f614392d5592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "329bdbf9-7970-4237-bc41-c12f56b78ebd",
        "cursor": {
          "ref": "20b86871-025b-4ad8-9125-df0b70beedae",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0aaf0c74-8376-4125-8a6e-bd7b2db7f273"
        },
        "item": {
          "id": "329bdbf9-7970-4237-bc41-c12f56b78ebd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d585294a-0b84-4b32-8d9b-9b7a41d47db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d981d0-d12d-4f69-bfe2-a88ef9e63cf0",
        "cursor": {
          "ref": "15c2d79c-c873-47e6-8b0b-51e834984237",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e1336c39-9d5e-4558-8d3e-d416f3e6a938"
        },
        "item": {
          "id": "b1d981d0-d12d-4f69-bfe2-a88ef9e63cf0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "61f3f0c7-aefe-409a-a0c9-4177a5c5280f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b66a4d-ac08-4f40-9f33-2092af91aad7",
        "cursor": {
          "ref": "0f71d3cb-d891-4699-8238-efbc8b169b08",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "838a3ef3-a98b-476e-b89c-438269eac06f"
        },
        "item": {
          "id": "b8b66a4d-ac08-4f40-9f33-2092af91aad7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a40dceb9-e120-4b2f-a729-11784cf3b6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec253c2-23bf-4a3c-97bc-91ea8507ed80",
        "cursor": {
          "ref": "5fb1e809-75db-48fd-96e4-cc594232dac0",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "38b0ba38-3d3d-4422-a6c9-6a998cc677fc"
        },
        "item": {
          "id": "eec253c2-23bf-4a3c-97bc-91ea8507ed80",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7d0dd635-63be-4814-8e0b-52c4b02e64ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2251e66-a2aa-42df-94c6-d0ac2c88aaf7",
        "cursor": {
          "ref": "afcef821-25cf-46a2-8318-cc2c5b0d485c",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ccbc0271-a05a-4176-87af-c35ec379048d"
        },
        "item": {
          "id": "c2251e66-a2aa-42df-94c6-d0ac2c88aaf7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a89e2e42-a1c2-459e-ae22-774cf7ec3e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599aa4aa-5db4-4dc5-8497-b52bcfa7e023",
        "cursor": {
          "ref": "7a7fec29-fefb-4db9-81a0-ec0ed6887c0f",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "40ce3ed1-521a-4bf3-8352-9a9fb5abfd6d"
        },
        "item": {
          "id": "599aa4aa-5db4-4dc5-8497-b52bcfa7e023",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e39114b9-edb6-4b9b-90de-f3de18f5ef3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07b8211-650d-4a6d-b122-8d95c2b25fa6",
        "cursor": {
          "ref": "43ba3fe8-d48c-4796-bccb-a27786a81975",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e795007b-46b2-4f6d-a243-9be0a8125dec"
        },
        "item": {
          "id": "f07b8211-650d-4a6d-b122-8d95c2b25fa6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f9c185bf-dfad-454a-8df0-a14ff9c03a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f8f7e6-61b4-4429-808d-f1252b71c365",
        "cursor": {
          "ref": "7c166fa7-a0dd-4534-b2e2-8bb95fd312e1",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "de0c1d40-92e6-43a7-bfd1-4d0d34027d9f"
        },
        "item": {
          "id": "a8f8f7e6-61b4-4429-808d-f1252b71c365",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8e599783-cf5a-4966-a584-e9b7e40b4c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11bd769-1fee-45c3-945c-0c11de1cf632",
        "cursor": {
          "ref": "96595045-d168-4002-8e1a-b87e7211f888",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4c87fc87-c49f-4379-ac94-486eb3dc0c7c"
        },
        "item": {
          "id": "e11bd769-1fee-45c3-945c-0c11de1cf632",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "4db3494e-81e9-48d1-a347-bce933d0732e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5b0e0c-56de-487b-82c7-2efa084f7e92",
        "cursor": {
          "ref": "67e66eda-5a0e-4bd3-a1a3-1bfd0c50472f",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e782a71f-8ca3-4e4a-bbff-0f4f2f7a5234"
        },
        "item": {
          "id": "3c5b0e0c-56de-487b-82c7-2efa084f7e92",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "179edfbf-65f2-48d4-8f6c-2c4cfe771c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82034216-cf25-4359-a7d7-70e0ab99a59b",
        "cursor": {
          "ref": "48798563-6b15-454c-b4a4-9aa7238275dc",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a62fc845-5eed-4dfe-92cc-d396d008e0a9"
        },
        "item": {
          "id": "82034216-cf25-4359-a7d7-70e0ab99a59b",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "52e16a19-d619-4a60-be05-fe915db3ba8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bbcee11-2692-445d-b89c-d829966d0a2a",
        "cursor": {
          "ref": "56e14d91-aa13-4bae-8b26-c24cc0d1fb69",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4c061ba9-7555-4a37-a00f-b74447ae23f1"
        },
        "item": {
          "id": "5bbcee11-2692-445d-b89c-d829966d0a2a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "b9d637c8-0a8a-40e3-9bc3-1bb52e4002f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac0a20dd-1b7f-4d81-ac4c-0362c7855194",
        "cursor": {
          "ref": "0f8ae985-3600-4831-b88a-c1f2cd757922",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c0846792-c67a-4378-a5b8-db5e40a8103c"
        },
        "item": {
          "id": "ac0a20dd-1b7f-4d81-ac4c-0362c7855194",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "cb25ca92-6de8-4585-8105-c8d1f01839db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe8fe3fc-97b9-4b94-8476-9496a4bd9c4c",
        "cursor": {
          "ref": "2a15ae71-b563-47cd-a644-22dfe915de09",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "bbfdf7a3-eb5c-4d89-ba5b-065d99890819"
        },
        "item": {
          "id": "fe8fe3fc-97b9-4b94-8476-9496a4bd9c4c",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "8cefdb65-d060-47b0-b3f1-6053cf59724d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb884701-d55e-4708-b2f2-768c713ad85c",
        "cursor": {
          "ref": "edfc56cc-56ba-4a2b-bc78-c0806e29186e",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4e546221-35c5-4e3f-9fe0-674631602894"
        },
        "item": {
          "id": "bb884701-d55e-4708-b2f2-768c713ad85c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6f4dd9bf-c503-4b89-8185-bf927d4c26f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "799dcb29-5f82-49a4-8528-003f150c20de",
        "cursor": {
          "ref": "341bbca3-8e01-439d-9137-2b6f521e9f08",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5ba88c8f-d677-4207-a970-e7434397ba65"
        },
        "item": {
          "id": "799dcb29-5f82-49a4-8528-003f150c20de",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d78bbecc-3a5f-4f12-a33a-484e3a67585c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eea0b95-ad90-45b9-9572-57896793d921",
        "cursor": {
          "ref": "cc8c611b-aa56-465a-a88f-1a02100343ee",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b889cefd-0f66-499d-aa3b-0d68c8205f41"
        },
        "item": {
          "id": "2eea0b95-ad90-45b9-9572-57896793d921",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "47ccef7d-1bbe-4a62-aaf5-6411040237c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f88293-5804-4ba1-864c-39b56269b194",
        "cursor": {
          "ref": "a79bfa83-aa77-4062-8a10-c7572cbd15e0",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5659bf49-feed-4ed2-b1b1-52f56573d1f3"
        },
        "item": {
          "id": "85f88293-5804-4ba1-864c-39b56269b194",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "42477b09-231e-449e-b245-65557e6551c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b854b4c-2f63-46a2-9f63-a0f61f94674d",
        "cursor": {
          "ref": "9755801a-f391-46a0-b79a-b122766552bf",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7ba7624e-dc7d-4d08-abc7-df2a07295e4c"
        },
        "item": {
          "id": "5b854b4c-2f63-46a2-9f63-a0f61f94674d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "91c8b660-7744-4440-a383-a5d41b522de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e887cd00-cae2-4071-ba0a-2be642731f9a",
        "cursor": {
          "ref": "d0c81d75-6af4-4e1e-bccc-bac6f54d8c12",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "527f77cc-a783-4d98-90d9-8e985e7d51fb"
        },
        "item": {
          "id": "e887cd00-cae2-4071-ba0a-2be642731f9a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "4f475ddc-ee16-477b-9ffa-861e72fb848f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12e22eb-d931-492a-b82e-343d0db1e413",
        "cursor": {
          "ref": "96fc94db-68ba-4e67-9d13-685c50fbb15d",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c0f30dbc-0e21-4fbc-9510-f01f71ca54a9"
        },
        "item": {
          "id": "f12e22eb-d931-492a-b82e-343d0db1e413",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e73ce6c6-bf75-4071-9235-d0c5f5f59f09",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "1597147b-cc8a-4a97-ae40-b19af236adac",
        "cursor": {
          "ref": "94d1ed84-8742-44e5-8317-d64687a821c1",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "338be5bf-5169-45fa-b6c7-ca7326a3b4cd"
        },
        "item": {
          "id": "1597147b-cc8a-4a97-ae40-b19af236adac",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4f5111c8-3970-4d16-920c-50b6657d08ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5100970e-d41e-4b24-a784-890021ea3131",
        "cursor": {
          "ref": "dcfaa1e5-1a28-45b6-8bb1-4b7952f822c1",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2dc1decd-31de-43bd-8067-d123ad5aa996"
        },
        "item": {
          "id": "5100970e-d41e-4b24-a784-890021ea3131",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "91573695-c4cc-420f-a539-48c451501e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9619cb85-d5ad-49b7-b3cd-fd5df42d0673",
        "cursor": {
          "ref": "3f94c8db-caaa-4dc2-a7b3-fe9da6124c45",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d171fbcb-ce3f-47e6-a7fa-bca4837a0513"
        },
        "item": {
          "id": "9619cb85-d5ad-49b7-b3cd-fd5df42d0673",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "fc13c6c5-205d-42b6-be0c-cd0233ab5ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44bb1f3b-a321-4db6-962e-e20ee6d803be",
        "cursor": {
          "ref": "f684ca73-8c7c-49e8-ad10-16c6e1a9c445",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "19e1ff69-2f8f-476e-b80c-b6db1076502b"
        },
        "item": {
          "id": "44bb1f3b-a321-4db6-962e-e20ee6d803be",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "23bbbee2-6cbc-4b35-ac21-c2220490f812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca53cc21-3bf7-4af4-9d80-e33b3c8bdb4a",
        "cursor": {
          "ref": "276af4b7-2df7-4ad5-9c9c-cc1593925dde",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ed178fc2-4dcd-42cf-a6be-46092808283b"
        },
        "item": {
          "id": "ca53cc21-3bf7-4af4-9d80-e33b3c8bdb4a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5d2ecbbb-03c5-4616-bc2c-e208fc61743d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38dd9245-6027-4909-aeaf-92eae434f0c4",
        "cursor": {
          "ref": "5204c1c1-66bb-4b30-993b-e0bf53413105",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bf3c620b-c793-4f1a-aa18-291017f7b662"
        },
        "item": {
          "id": "38dd9245-6027-4909-aeaf-92eae434f0c4",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "0543fc4a-d04d-498b-be50-d11ad5226b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e79162-e57b-4e22-b061-e986ea81b39c",
        "cursor": {
          "ref": "453c294b-7895-4eb8-b406-7daf7af282e0",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0e1b03c9-e7a1-4ba3-a287-697072a6dc00"
        },
        "item": {
          "id": "08e79162-e57b-4e22-b061-e986ea81b39c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5262d834-679c-4b2b-b77c-640eee72b6ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a902d8b-27bd-4e20-ae41-67c986898d84",
        "cursor": {
          "ref": "01496d60-bad2-4797-bab3-b1d507922339",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "fd8c43c9-47c6-4b57-bd47-78ccd42a5a40"
        },
        "item": {
          "id": "3a902d8b-27bd-4e20-ae41-67c986898d84",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1ca70d99-8d5f-4562-aa36-69d4bb9d7b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1101120e-b4f0-48a8-8bb3-d144915a5220",
        "cursor": {
          "ref": "1ac1a9b4-69a6-4609-820f-35aafd374044",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c8d61b0d-03fe-4545-a3c1-a7c1b3b67a8d"
        },
        "item": {
          "id": "1101120e-b4f0-48a8-8bb3-d144915a5220",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6ae5f875-cd19-4c1b-a6b6-9538e3859ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f7dbcd6-a4ec-4b8d-91d5-272bb3bc63b6",
        "cursor": {
          "ref": "1812a38e-ef3b-48d0-9004-8502ec56ef18",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b4da8eb3-2147-4e9b-be30-0ec50dca7702"
        },
        "item": {
          "id": "8f7dbcd6-a4ec-4b8d-91d5-272bb3bc63b6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0df2199c-f13f-41ad-b83a-eda8648ba02f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120f13c7-1bce-4721-9d54-52954fc0b439",
        "cursor": {
          "ref": "9d5dbc0b-70f6-43e1-97aa-97e563f30015",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "dcd7abed-2607-415d-a969-8f53cc54628f"
        },
        "item": {
          "id": "120f13c7-1bce-4721-9d54-52954fc0b439",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d8c17fb1-ade3-45e8-9e6b-9a0d8c57e9cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ccf826-a533-49be-b1b1-1906ddeea658",
        "cursor": {
          "ref": "0572bed4-d622-44d3-b0b9-8ea0236c502d",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f487660b-452c-4dc3-8cd4-068a65ad707a"
        },
        "item": {
          "id": "51ccf826-a533-49be-b1b1-1906ddeea658",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5e089d87-a089-454f-b7ba-b8478793b14f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddefd2fa-8fe6-4d61-a151-ec596e389c80",
        "cursor": {
          "ref": "4d369d35-1aa8-4dae-889c-e20aa47bbf7b",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "03755b55-cbd7-4fb8-b093-4e66b28a797e"
        },
        "item": {
          "id": "ddefd2fa-8fe6-4d61-a151-ec596e389c80",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2547ed7e-df98-4515-b1f5-d808c4e3d6e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d630136-e152-47be-a233-60e34bbc53f8",
        "cursor": {
          "ref": "3da54bac-db1b-42d4-925b-614aa837d87c",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "917d4c05-69fe-48b6-a763-ac86f5dfd871"
        },
        "item": {
          "id": "8d630136-e152-47be-a233-60e34bbc53f8",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6dfe098f-c151-4b2b-b155-17c0df3f3b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afcf4f75-6a2d-4a0c-85ef-830e7ced2ffc",
        "cursor": {
          "ref": "3fd4ed22-fc5f-4d85-9747-b3d0d501a123",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b1a07fef-4241-4181-9afb-e7120efad39d"
        },
        "item": {
          "id": "afcf4f75-6a2d-4a0c-85ef-830e7ced2ffc",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "175fb139-ff6a-420c-ba40-3c2e1fc4c3cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2054213-be84-4b32-91b2-b42971f24fcc",
        "cursor": {
          "ref": "17c58035-9e0e-4b09-8d48-5bcb0c0b8e1f",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "369cc80d-e87a-4957-a109-5ac36a196998"
        },
        "item": {
          "id": "c2054213-be84-4b32-91b2-b42971f24fcc",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "67ed8c23-a8b1-4181-b15c-d79a84a1ea68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2cf8ee8-7690-4af6-982e-d838c33c4f46",
        "cursor": {
          "ref": "fc43959e-6f59-4021-a89a-24a4a9726b2c",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "98136abb-a536-4754-8b40-b68bcf9ac510"
        },
        "item": {
          "id": "e2cf8ee8-7690-4af6-982e-d838c33c4f46",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "163e2ac6-28b7-4af3-b876-8a18d3ebdc4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a6715f3-c393-4166-8418-3238edf378dc",
        "cursor": {
          "ref": "f5e88b2d-dc7e-48e4-ac76-0ad259a13913",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b406d6f2-fd2f-4bc2-9553-87aa6bce552f"
        },
        "item": {
          "id": "5a6715f3-c393-4166-8418-3238edf378dc",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "959dee56-23d0-436f-aed6-8297baa1c27b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a4ee480-2e0b-4c4d-a2d9-54d37da5605c",
        "cursor": {
          "ref": "a7106591-67a2-4a42-bbea-72ef3759d534",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7e097b40-cb09-4e3b-9662-f2ba3a90a50f"
        },
        "item": {
          "id": "9a4ee480-2e0b-4c4d-a2d9-54d37da5605c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3d76a789-1aa9-49c8-972b-153b33ab4939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ae4914-5506-4d93-860d-396102a2c902",
        "cursor": {
          "ref": "efeb3009-45f3-46d2-8bc7-b371a6bb6877",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b554bff2-437e-4ad5-8455-4aa976a2097b"
        },
        "item": {
          "id": "81ae4914-5506-4d93-860d-396102a2c902",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7ddc029b-cc92-43fb-93d0-abd909cae761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "894f32ba-74cf-4cc3-bc16-0cfe3de7835e",
        "cursor": {
          "ref": "838eac16-0a98-4861-8d37-0fd3e339a70a",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7e8ca323-d522-470c-861f-cc07a9fbe38e"
        },
        "item": {
          "id": "894f32ba-74cf-4cc3-bc16-0cfe3de7835e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a66ad242-dd33-4806-b836-6d8ac8d101ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693594aa-ff22-4fa9-bdd8-ed177d33722d",
        "cursor": {
          "ref": "09891db6-662b-4eea-81a2-865f9c55b3ed",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "61a6045a-534c-4fe3-9dcd-b8e0a28aa383"
        },
        "item": {
          "id": "693594aa-ff22-4fa9-bdd8-ed177d33722d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "89279cba-41f1-4841-85f6-0ab4349ec831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efbf324e-05b4-4368-9949-eca67f8bc9ff",
        "cursor": {
          "ref": "641ddbb1-ce29-4386-9f9a-571eeae73631",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7e766289-9037-4458-96df-b62a75b44b97"
        },
        "item": {
          "id": "efbf324e-05b4-4368-9949-eca67f8bc9ff",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "2d8f0faa-223e-4740-9761-8abacb3987a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "130af40c-9588-4bde-83af-3b64ccd6966b",
        "cursor": {
          "ref": "11d7aba4-720d-46b9-b037-23b3e6702ae0",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "c3d939f0-df08-447e-927f-e9e9a43d9fd5"
        },
        "item": {
          "id": "130af40c-9588-4bde-83af-3b64ccd6966b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "94abe2e0-6fd7-4f94-8e93-9bee1cf66476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5f3fbc4-3379-423a-a9cc-13f4fa7fcfda",
        "cursor": {
          "ref": "3e0f3c14-4a79-4126-a8dd-79d1b3c27d1d",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "dd01d0a1-0726-403f-852f-7ffd870691c6"
        },
        "item": {
          "id": "e5f3fbc4-3379-423a-a9cc-13f4fa7fcfda",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "07fb11b2-b571-44b2-bdca-95b92315a27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ab9f87-2392-405e-8151-711b117911f3",
        "cursor": {
          "ref": "d1356e74-8800-41a0-a1ba-248353d253cd",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6b9f6a10-516e-4a16-ade4-093085cee90d"
        },
        "item": {
          "id": "02ab9f87-2392-405e-8151-711b117911f3",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a70ff1a7-953e-4895-ab01-db47fd82b6d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c62cbd-9c58-41f4-bc05-0197e85cccfa",
        "cursor": {
          "ref": "fbebb4de-836b-441f-9d5f-8ccee07fbbfb",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7930a876-0376-4d64-9ce7-752b4e8c74ef"
        },
        "item": {
          "id": "f5c62cbd-9c58-41f4-bc05-0197e85cccfa",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3d575d0f-135b-4e59-84af-5dc927a2980e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c00892a7-3c66-41db-99b9-a0b87caf7534",
        "cursor": {
          "ref": "f3f297ba-b64e-49eb-b254-d3aa598ab0fa",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e3026523-bcb1-484b-8068-45a66b2cc4bd"
        },
        "item": {
          "id": "c00892a7-3c66-41db-99b9-a0b87caf7534",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "22f38d8c-c56b-48cf-88d0-d7a73b6d9c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a75fde5-e823-4894-a3e3-baf6515e2b46",
        "cursor": {
          "ref": "46029f83-a0e6-4678-aab8-f0c9d760a1bf",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "fe76ac79-129f-4f27-abed-2d95ffd98e4b"
        },
        "item": {
          "id": "3a75fde5-e823-4894-a3e3-baf6515e2b46",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "cb98ec9b-ea01-47da-bd0b-0a832b9a0219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cfe4f41-5990-43db-aaea-e3380d4bc26f",
        "cursor": {
          "ref": "7587edce-a8bf-41e5-9c32-b4c14d364c02",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "20f69d5b-40fc-4254-ac40-a387b9df2e17"
        },
        "item": {
          "id": "7cfe4f41-5990-43db-aaea-e3380d4bc26f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9c0c94b8-3497-4027-b847-caea1111479d",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "dda438d5-d4ba-43f9-88d7-b9c3add205bc",
        "cursor": {
          "ref": "b4d2a754-e44b-4d71-9f0a-c5ebebd7359e",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0e5fc314-85e0-4210-af88-51592f8274ae"
        },
        "item": {
          "id": "dda438d5-d4ba-43f9-88d7-b9c3add205bc",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b45ce4d7-1389-4eb0-a4c0-923c07189a02",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "b78cd821-9657-48cf-a6cd-8b37f0003179",
        "cursor": {
          "ref": "6eb473a8-b2e1-4e70-b000-97337a271f30",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "df1aa69e-de0d-4b8a-b8cc-a74f283d73c1"
        },
        "item": {
          "id": "b78cd821-9657-48cf-a6cd-8b37f0003179",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ac92e3c6-4d4d-4daa-bba6-648b3cbf8d8d",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "6efffe0b-d31a-4955-a51e-dfd7082027c7",
        "cursor": {
          "ref": "6fad75c2-347b-4920-bbd4-0b97d578b0d6",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c2c25b2a-319b-4373-a43f-83d28ef910ae"
        },
        "item": {
          "id": "6efffe0b-d31a-4955-a51e-dfd7082027c7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "56249433-4032-44f7-8aad-a550207900d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9117132f-7f61-4970-a606-da5953e70af9",
        "cursor": {
          "ref": "cdb8c459-9a2f-4d81-a7b6-21da4ecb054a",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6c580319-01ba-4af0-99cb-934956b5dd6a"
        },
        "item": {
          "id": "9117132f-7f61-4970-a606-da5953e70af9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9dfb533a-6dd4-499e-a92f-cec660231935",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "efb04654-e5a2-40b9-b016-eb180136f4fe",
        "cursor": {
          "ref": "9143344d-2963-4ca0-8210-e337928f1777",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4b54b4fb-8bcd-42d4-922c-6a418c9b4220"
        },
        "item": {
          "id": "efb04654-e5a2-40b9-b016-eb180136f4fe",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "dd715385-95a4-4472-a672-a88008165f45",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "8f888843-4553-4b37-abfa-9a83115faf28",
        "cursor": {
          "ref": "f4321c01-b903-4c2e-ad6d-391b6f9fd786",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "31b42ea1-4b23-485a-bc78-d18ed55f4f56"
        },
        "item": {
          "id": "8f888843-4553-4b37-abfa-9a83115faf28",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8b428898-8a3c-4f2e-9535-a345b46d063e",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "80cb7c8b-cf4c-40a6-99b8-30a7838311db",
        "cursor": {
          "ref": "c8804bbb-c04c-425a-8591-9d9774e9d4c0",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e13f33b0-3b88-4351-a453-8141eaba7ba7"
        },
        "item": {
          "id": "80cb7c8b-cf4c-40a6-99b8-30a7838311db",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "255d12e2-1c47-4ab8-8d7b-2595a220c8b4",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "fea0cb92-c943-48f1-ac94-914b5f506030",
        "cursor": {
          "ref": "68a4f565-ad2b-4cc8-b497-7d05d7c83b9e",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "7184d5c4-8152-4649-b842-a03cd4ee0cba"
        },
        "item": {
          "id": "fea0cb92-c943-48f1-ac94-914b5f506030",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f29c0795-53e9-4e4d-a94a-4d1d896635cc",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "2ca285d5-034f-4f9b-bdf6-f4c5644ed3e5",
        "cursor": {
          "ref": "c1da3bb3-6975-4a68-b7b7-cb702ece6e08",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "9d622e07-b6ed-4251-ae8d-a2bca9a0749b"
        },
        "item": {
          "id": "2ca285d5-034f-4f9b-bdf6-f4c5644ed3e5",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1ad1f819-f4a3-4344-9920-4f73a856ad34",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "888b350e-d07f-4fc4-855f-882d40c87b06",
        "cursor": {
          "ref": "49702200-291a-442d-b3b2-796d895225dc",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "aa33faec-13ce-4505-b444-a4ea996ecfbb"
        },
        "item": {
          "id": "888b350e-d07f-4fc4-855f-882d40c87b06",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "18596b62-9606-41c5-80c0-ca7f49e3f36e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9494558c-3764-4d66-a739-8330281bdcba",
        "cursor": {
          "ref": "e0d9df9e-a13e-43ae-b77b-42b678fd7d8d",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "27e2ab45-e5fc-4f5f-9d99-4a4d46b322f4"
        },
        "item": {
          "id": "9494558c-3764-4d66-a739-8330281bdcba",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "bb56ca07-5ecc-4845-b504-c504d07cef6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7de30d8f-8b0a-4e09-ba30-a949823cecad",
        "cursor": {
          "ref": "57493039-4289-401c-b050-7bc13f4b0923",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f26c3ac3-0e38-4630-871d-55ae1529170f"
        },
        "item": {
          "id": "7de30d8f-8b0a-4e09-ba30-a949823cecad",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4f32fa5d-b1ca-4980-a93e-b833c532d3fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b13bd07-dbfb-4dcf-95dc-16f8ade11c52",
        "cursor": {
          "ref": "cf21a6be-4fbc-4222-a219-b860a932ea5a",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "15ad7cab-fe7f-420b-a18f-f88703a80f8c"
        },
        "item": {
          "id": "0b13bd07-dbfb-4dcf-95dc-16f8ade11c52",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ea3d84b0-a39b-4a73-87ca-0a3e29f32e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b3242d-255f-48ac-a7cc-6848abd3555f",
        "cursor": {
          "ref": "78dea01d-61ca-4dbb-a4a1-2df1b1478b5e",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "05ed9967-684d-4cfe-9b28-98da6f414465"
        },
        "item": {
          "id": "b0b3242d-255f-48ac-a7cc-6848abd3555f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "29a0dba1-0a24-4f1f-a9bb-d38e5e6e0422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f4b5836-44f3-4a09-98a9-0fc3a75c54d7",
        "cursor": {
          "ref": "17a09a9b-4aff-4757-a7f8-7b3c17db7b2e",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "dd6ce586-e1e2-4209-8900-1bd02ad500da"
        },
        "item": {
          "id": "3f4b5836-44f3-4a09-98a9-0fc3a75c54d7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "bfe8e6c0-4ff6-4187-9362-9d719a49b6d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f16a11-7028-4daa-b39c-07d1743ee719",
        "cursor": {
          "ref": "8bf74b2f-ba20-499b-af90-db496f660e3a",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a8c960f2-a1c7-4315-82f2-aaa943a8d1d1"
        },
        "item": {
          "id": "91f16a11-7028-4daa-b39c-07d1743ee719",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7ba24318-78c0-4dfb-a0cb-b36268d9af49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c1d1c0a-2eab-409b-8a71-0e0cab5a9d48",
        "cursor": {
          "ref": "3edd303f-cd39-4d70-84ca-ee0c0b53952a",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b223c92f-3cc3-4a73-9338-2a48a05b3696"
        },
        "item": {
          "id": "1c1d1c0a-2eab-409b-8a71-0e0cab5a9d48",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8ec363cc-982c-4d7f-bb0b-629495a8ed0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a61a50-1cee-4388-a6f2-80b21a7902f6",
        "cursor": {
          "ref": "c8837f18-b013-463b-b6fe-baa07851ffc1",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0f575a0d-378d-434d-a44e-0018d86ed4a5"
        },
        "item": {
          "id": "03a61a50-1cee-4388-a6f2-80b21a7902f6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6daadba7-53f7-48ae-8c24-baa27a0f0b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e12e58-ec5a-4b7a-a88f-6a06c193d198",
        "cursor": {
          "ref": "f734c26c-cf75-4de1-88d7-52f8595d3248",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ba8621c8-5788-4197-9943-4146782cc8b7"
        },
        "item": {
          "id": "a7e12e58-ec5a-4b7a-a88f-6a06c193d198",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b7b29a71-19a7-44b6-9119-8c0d5c5d3952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a175f77-edfb-404f-80ec-2d794d300bbe",
        "cursor": {
          "ref": "81584ae5-32be-4074-a5af-298c79d304a0",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c08da887-73ff-46d3-a3eb-8f66572976c4"
        },
        "item": {
          "id": "1a175f77-edfb-404f-80ec-2d794d300bbe",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8aa2d6f4-512a-4c3c-a24f-d18fe1181916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee9d2885-9ed9-4d14-81a6-62b36672d57b",
        "cursor": {
          "ref": "cd63c6c6-d59a-4582-81fb-2d63c28152e0",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "dcbe00d9-020f-4f6a-b3cc-3257529677e9"
        },
        "item": {
          "id": "ee9d2885-9ed9-4d14-81a6-62b36672d57b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "09b95154-eb07-4322-8bce-34a8521bd3a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01927e6a-907d-4fc3-a60b-9d9bb714c49f",
        "cursor": {
          "ref": "0a19d19f-c575-4071-8b71-a1a910e7afe4",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "82c25684-f027-415e-9a4d-1fbc70886246"
        },
        "item": {
          "id": "01927e6a-907d-4fc3-a60b-9d9bb714c49f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a8c21389-36aa-48e9-8677-14f605d6d0dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a780f0-affa-4873-b958-8e93d546892f",
        "cursor": {
          "ref": "27e74dd7-3ce4-495b-afb0-e91290e48101",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "16bb66b1-0c1d-4400-be72-b54a81c0caf4"
        },
        "item": {
          "id": "03a780f0-affa-4873-b958-8e93d546892f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "409d8634-1253-42a4-9b21-8a28f27fd3ae",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "258ecaec-ce18-40ce-9fe6-0782b29e1482",
        "cursor": {
          "ref": "58eea285-2a2e-4af9-af68-7a00a912ac58",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "bead6245-5458-4858-81fd-79276550d983"
        },
        "item": {
          "id": "258ecaec-ce18-40ce-9fe6-0782b29e1482",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f1fc1ad8-9231-449a-92ab-96de5375939f",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "7dfc7e2e-3c6b-4810-b807-fe04d79d6048",
        "cursor": {
          "ref": "a234561c-8c9f-4427-9f3a-5bd0fe86187c",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9c13bd7a-be7d-4389-b6d1-440c75baff52"
        },
        "item": {
          "id": "7dfc7e2e-3c6b-4810-b807-fe04d79d6048",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "1feea322-ebb2-4833-8679-4fbe76c227fd",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "259a9502-c79c-43ca-80e9-9dd9fa0fdb44",
        "cursor": {
          "ref": "5a8a90d2-c917-4435-9624-059263146de8",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f1c0658d-438c-4750-889f-7d5ebfac5818"
        },
        "item": {
          "id": "259a9502-c79c-43ca-80e9-9dd9fa0fdb44",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "938e8d58-097f-427c-afe6-a4ace2679dd5",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "0a3b0876-0d3d-4c81-88be-5506d59e8365",
        "cursor": {
          "ref": "b5615489-fc6e-4e82-b384-f71d1e54eb66",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "791650b9-13ae-4d39-893f-dd0e04129396"
        },
        "item": {
          "id": "0a3b0876-0d3d-4c81-88be-5506d59e8365",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0a679318-f657-439b-a8cb-a17dea03bdd3",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "f42f0214-503b-48d6-af3c-47309165aba6",
        "cursor": {
          "ref": "8387e8d9-29a2-4487-a2f9-e8ea29a5b072",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e8f75277-9752-49c4-ad35-4c84e24e5d32"
        },
        "item": {
          "id": "f42f0214-503b-48d6-af3c-47309165aba6",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "70442c29-6455-4447-be8e-42f352d33ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7626fed6-a019-43a7-8b15-7ed8562f7635",
        "cursor": {
          "ref": "9abc3688-ff00-4977-8ae4-494f127d1ab0",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8e42ae55-55dd-4b6e-bc3c-696bfa265959"
        },
        "item": {
          "id": "7626fed6-a019-43a7-8b15-7ed8562f7635",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "baf92a7e-3fb5-4e43-8802-54a1325fa2dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414ea217-5bc7-485c-bf7c-1bbd27f75baf",
        "cursor": {
          "ref": "29e28f8c-eb8b-4818-8f88-7ebe281418a7",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a0a3b8ce-2ffb-4fb1-8689-e783e6b6f1af"
        },
        "item": {
          "id": "414ea217-5bc7-485c-bf7c-1bbd27f75baf",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "92772765-f67d-4731-9ffd-e75d36866424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f71f5c-fea0-4c11-9482-80e52e6d4d49",
        "cursor": {
          "ref": "f609376f-28d6-4d40-a451-3324460b3f1e",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a103ef57-290a-4e51-96c8-509d0055d7f3"
        },
        "item": {
          "id": "a6f71f5c-fea0-4c11-9482-80e52e6d4d49",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "97da6d14-b182-47fa-adfc-b15076505cac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1935e6ef-15b9-40fd-bff4-b810b1df2351",
        "cursor": {
          "ref": "9a54f648-7a08-41d3-a792-3e934ec81480",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e4971b3d-4f7b-415f-9079-6b04109bc5e9"
        },
        "item": {
          "id": "1935e6ef-15b9-40fd-bff4-b810b1df2351",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b864c7f3-21c0-40ac-9857-546233782d65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a24d11-3bc3-4bc7-a0ec-1a6d2ebb9e63",
        "cursor": {
          "ref": "0655cd75-5aa9-483f-8dbc-c1d08bff3976",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3855fd63-9a4b-4d5a-b52f-5d0b4d13a7aa"
        },
        "item": {
          "id": "02a24d11-3bc3-4bc7-a0ec-1a6d2ebb9e63",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e18cb0a3-b7cd-4532-a19c-b386e17009b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88058e88-b7f7-4b23-a10f-de02b91d35f8",
        "cursor": {
          "ref": "5ab668ea-e84c-46c8-9af3-cd342e1cae95",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0decac22-77fb-461a-968a-0c3e460386dc"
        },
        "item": {
          "id": "88058e88-b7f7-4b23-a10f-de02b91d35f8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "936d0fd4-3beb-4daa-82e0-2e22ca29d851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b6b6c29-b457-493c-8cf2-2ff663507933",
        "cursor": {
          "ref": "3c11b91b-b339-413d-a74e-20b2cfca2136",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d45a0da7-8fd4-4d59-8521-a8e029782d64"
        },
        "item": {
          "id": "6b6b6c29-b457-493c-8cf2-2ff663507933",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8e6d1cb7-8348-4b0b-9dd1-4d830afffb53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e71dd5f3-3ff8-43ab-8d28-b968539ee3d4",
        "cursor": {
          "ref": "4829f473-5432-4a74-8490-249d41703adc",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "7ba7e01b-b0e9-48f6-bb01-3875a17a9f30"
        },
        "item": {
          "id": "e71dd5f3-3ff8-43ab-8d28-b968539ee3d4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9b8a1501-cd18-4cb2-8f58-6667ea187643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a6ff44c-50a1-4b38-a8ca-fe080a1a59ae",
        "cursor": {
          "ref": "78910446-fd47-45d0-a870-2a9a6c56c040",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "5ccf4831-ad90-4b6a-9c85-593b0db37f5f"
        },
        "item": {
          "id": "1a6ff44c-50a1-4b38-a8ca-fe080a1a59ae",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ef027de7-6c80-4906-9af5-10164e42591f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f9d399-6520-404e-a7a7-5b83739b4fbc",
        "cursor": {
          "ref": "73efe992-31b2-4f3e-ac0b-e59384f90cb7",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ac9ea183-c714-43a7-967d-7b1784997357"
        },
        "item": {
          "id": "53f9d399-6520-404e-a7a7-5b83739b4fbc",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3a390488-4f0e-471d-ac23-a73de57daccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1a0414-9242-4c06-adef-3bdbbe7d4505",
        "cursor": {
          "ref": "c3cfe0a3-5cfb-4e59-a5ca-4f8efaea01a0",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "00bbd44f-1fd9-4807-8625-b9d5f5c78ab7"
        },
        "item": {
          "id": "1f1a0414-9242-4c06-adef-3bdbbe7d4505",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "60606414-d25a-4e30-9d96-591a4af8da2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4dc6ce6-253c-4bae-8ff8-4d71f4b93647",
        "cursor": {
          "ref": "317b2934-6058-4b13-8da6-75c5a40ad6d7",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "3b115091-7c32-4815-992d-e10b935da4c5"
        },
        "item": {
          "id": "d4dc6ce6-253c-4bae-8ff8-4d71f4b93647",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "7e3bd232-7e97-422e-babe-6ae4bd3389a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "298b1bde-ba29-44e8-9691-0939990f4733",
        "cursor": {
          "ref": "e7c45747-1d2e-4ca0-a8a1-8cf583357eca",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "ccad9405-50b6-4c0b-95a9-9907686afc41"
        },
        "item": {
          "id": "298b1bde-ba29-44e8-9691-0939990f4733",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "26de0395-4d56-4c58-aa22-623cd2bcdea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67f5cad-5a22-493e-b80d-3ffde1be75f0",
        "cursor": {
          "ref": "5bd6a9dd-145d-4500-943a-f2f4de5b595e",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "8d86ec32-e246-415d-8f0c-dfee69dba810"
        },
        "item": {
          "id": "b67f5cad-5a22-493e-b80d-3ffde1be75f0",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "827892cd-3235-431e-a891-7e9e8fb008c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd02b218-0d67-4a8f-9674-e4153ac24236",
        "cursor": {
          "ref": "2a350a0c-ffdf-4fd0-b943-1a006cf29970",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "0f4c5e6c-599f-4e5c-9f83-a564a00644a9"
        },
        "item": {
          "id": "fd02b218-0d67-4a8f-9674-e4153ac24236",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "02e2b54a-59d1-4e07-bbc2-2630e9494bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d97669b-fef6-4ce1-bbf8-7aa4f18af213",
        "cursor": {
          "ref": "1ec869db-d0a7-402e-a05d-26b86a00cf26",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "d82fa935-67dc-417c-aa9a-00b46dfdd542"
        },
        "item": {
          "id": "0d97669b-fef6-4ce1-bbf8-7aa4f18af213",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9c46cab9-0191-4392-9883-25d4b6c90a32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fbb6e96-f6aa-472c-9bd6-5cd3f03b8149",
        "cursor": {
          "ref": "4ccf816c-3935-4ffe-a951-d5b7333361b0",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "e4f3b32e-0cfc-440f-8f35-68fcf5925b81"
        },
        "item": {
          "id": "3fbb6e96-f6aa-472c-9bd6-5cd3f03b8149",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "56d6af51-653b-4369-ae74-73173c0ca229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a455321e-323d-4291-a568-bd750ea7991a",
        "cursor": {
          "ref": "7c5f0114-3efb-4c30-b138-e55fcfe928f1",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "2fd5891a-be31-4afd-b0ee-40a592ff872e"
        },
        "item": {
          "id": "a455321e-323d-4291-a568-bd750ea7991a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a8b1a47d-aa05-48a3-a32f-7b4df72637e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4885325-d9de-47cd-ae3d-4d4fed7ae39c",
        "cursor": {
          "ref": "aff3a479-0349-4b3c-975f-32479fd0b8a8",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "79c0f983-10ad-475a-960a-dc0859793f13"
        },
        "item": {
          "id": "a4885325-d9de-47cd-ae3d-4d4fed7ae39c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "534d3bf3-786e-425f-9e38-cb4d43a1abb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c0e7b6-e110-4ea5-b186-1cc679e3937e",
        "cursor": {
          "ref": "11572158-9c4c-42e1-8913-4de556f8e88c",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "30eab7a0-c5e5-4413-9ddf-f5bce816095f"
        },
        "item": {
          "id": "a5c0e7b6-e110-4ea5-b186-1cc679e3937e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e5bf98a3-475e-43c7-890c-d3f8a8ae6afd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c1e344c-789d-42e1-8ceb-7904ae6d2eed",
        "cursor": {
          "ref": "c5349a26-8758-479b-8c44-16c9c1e72f9d",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "dfb687a9-37b3-4f51-a014-6420a49b992a"
        },
        "item": {
          "id": "5c1e344c-789d-42e1-8ceb-7904ae6d2eed",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "07973f06-57e7-48d0-9f14-9f3a63f06804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e12dd19f-8e17-498f-b0b5-4e031f8e4f26",
        "cursor": {
          "ref": "a33431a9-3d50-4c90-a0ef-6185ba3c026a",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "4cf045cb-9af6-4bf4-9e4f-f39d3a79a766"
        },
        "item": {
          "id": "e12dd19f-8e17-498f-b0b5-4e031f8e4f26",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d49c737a-8d30-42ac-be5b-6add42fdc973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4035ca41-3a18-4f3f-8b91-aa0d0390b2ac",
        "cursor": {
          "ref": "eb462afc-8cf0-47a2-bf78-325aa1e346fe",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "6a1569ca-2de6-4bed-bd21-9c53ddff87db"
        },
        "item": {
          "id": "4035ca41-3a18-4f3f-8b91-aa0d0390b2ac",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ba050efd-fced-401e-920c-4a0a534d6bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "781e3359-5541-4e67-aba9-cb85bde8141c",
        "cursor": {
          "ref": "41b450d7-3db3-48d0-b402-e1bc89d16a58",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "2703f1ec-67cd-42b5-b86c-5f05e01ab512"
        },
        "item": {
          "id": "781e3359-5541-4e67-aba9-cb85bde8141c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f71a5d86-17eb-4d54-a6ab-37ff2da8db64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ab1754-4ec9-4810-9eb0-064c04364276",
        "cursor": {
          "ref": "1bb057b3-a2a5-43bd-b957-f8b1042f2a04",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "95148f28-0401-4035-9ae2-6f192d2e4af2"
        },
        "item": {
          "id": "84ab1754-4ec9-4810-9eb0-064c04364276",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "daa945d4-fc7b-4d7f-9e61-2356476ea8e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7bcd066-f184-4dac-974c-a7c8b69e9846",
        "cursor": {
          "ref": "71c01153-e73d-4a73-b332-fe3b6e4b8204",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "f596793a-eeb4-4959-8829-010889c97dbc"
        },
        "item": {
          "id": "a7bcd066-f184-4dac-974c-a7c8b69e9846",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6606ce2f-c534-4da8-a043-deaed91f9552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ba3fdd-07f4-4463-af0d-ff59aa87fb6a",
        "cursor": {
          "ref": "23ca4dbb-53b6-44f6-a6a1-109fa064ec49",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "dfd54af1-8377-4f8a-908e-fce3d8461a60"
        },
        "item": {
          "id": "f2ba3fdd-07f4-4463-af0d-ff59aa87fb6a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5b4fcf77-825b-40fd-9169-42e306f4734c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3533add5-180d-4433-89f3-8d3302d2aa76",
        "cursor": {
          "ref": "b6451d69-ff88-461c-808c-ee2fb19250a6",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "782c9a8a-cbdb-432c-82a2-9db83fb7ae90"
        },
        "item": {
          "id": "3533add5-180d-4433-89f3-8d3302d2aa76",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d08c55aa-afbc-409d-ac7d-140d07240164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b545ebf5-b39b-4216-b24d-0529bb0219d1",
        "cursor": {
          "ref": "90e041be-f54b-480d-a3b4-1170e0867c9a",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "43e6ba5b-f1ac-4012-9fb7-c67fbebe26ac"
        },
        "item": {
          "id": "b545ebf5-b39b-4216-b24d-0529bb0219d1",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7c7a1bd5-6e24-4330-a02d-141a381130e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f3d8227-3de2-41b0-ad2b-3ae9d509aa0b",
        "cursor": {
          "ref": "f4f2de6b-5323-4913-8561-bc6803769668",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "c9476543-8c2f-49f8-9c6f-e42ed211bad7"
        },
        "item": {
          "id": "3f3d8227-3de2-41b0-ad2b-3ae9d509aa0b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "aa4a8586-39c0-4b54-8150-e74f2c53545b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee58f7f-4a72-4afd-aeee-416d199c9fb6",
        "cursor": {
          "ref": "23a1c0fc-03f3-41af-8bc8-c7cea8316771",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "427650a2-9cd2-4b43-ab42-66b2f364d480"
        },
        "item": {
          "id": "4ee58f7f-4a72-4afd-aeee-416d199c9fb6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "329ec519-88a3-494e-a088-3f26cdd0bc1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7810409-7eb8-4566-938a-c94c3bc2ef32",
        "cursor": {
          "ref": "ba601510-1b99-4723-b8fd-4efe393ff02f",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "a6db15bf-6711-4fe7-8193-aa3cde5ba75d"
        },
        "item": {
          "id": "d7810409-7eb8-4566-938a-c94c3bc2ef32",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "040e48d0-a140-4ee2-9776-2b16a9455c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019af306-2bb1-4dd9-b24f-07f91d2ea171",
        "cursor": {
          "ref": "5888b0be-60d6-453f-9591-cf906becc7ba",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "80496414-9eaa-4f17-b46b-00928eab8e39"
        },
        "item": {
          "id": "019af306-2bb1-4dd9-b24f-07f91d2ea171",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c74f60cb-caa3-4757-a0c2-5ee45d402593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b234231-8c9f-468c-b4ee-34be30daeeca",
        "cursor": {
          "ref": "935a15b0-7c62-4755-95a9-f512225658b2",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "9ccada87-cdf9-42ee-96a1-dc9563ff77f5"
        },
        "item": {
          "id": "3b234231-8c9f-468c-b4ee-34be30daeeca",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a49bc1ad-3366-4dd4-8a0d-85078723f6c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0ff0f68-bb13-4269-a7be-8e43f48db89e",
        "cursor": {
          "ref": "fd0a40aa-2a52-4e1b-8b8e-4358d55c05b0",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "0843ea16-ed0e-4564-b31f-0af9910a7a1e"
        },
        "item": {
          "id": "a0ff0f68-bb13-4269-a7be-8e43f48db89e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b4ca1642-baac-4f24-8250-f9dd2e11168f",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "0f4a1f5f-384c-49f8-9ce1-0eebd41b1e7a",
        "cursor": {
          "ref": "c4d04da4-877f-46c6-9f94-0618c416042c",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "12fb217d-b474-45bd-92ac-45922e937414"
        },
        "item": {
          "id": "0f4a1f5f-384c-49f8-9ce1-0eebd41b1e7a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9fac83eb-f87d-4044-bc78-8dde50aec9cf",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86d92fc-df8a-4d71-8b0a-2e4f845c0e76",
        "cursor": {
          "ref": "800a024c-0d5d-4c04-84f2-cba5b096b850",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "82469d16-13ae-4f78-b675-6307f8dccf4d"
        },
        "item": {
          "id": "e86d92fc-df8a-4d71-8b0a-2e4f845c0e76",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0d5fd336-9efc-4881-bf0b-d442d186c092",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7ad905-cd54-4c73-b98d-b8ec7a72931f",
        "cursor": {
          "ref": "b0ec736a-2db7-4c1c-8c1e-839eaca674fc",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "7c5ad210-e395-466c-a7b3-8c58124ab620"
        },
        "item": {
          "id": "6a7ad905-cd54-4c73-b98d-b8ec7a72931f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ce5c5b38-3ef2-4578-b8df-1f5b12e7f9b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7ad905-cd54-4c73-b98d-b8ec7a72931f",
        "cursor": {
          "ref": "b0ec736a-2db7-4c1c-8c1e-839eaca674fc",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "7c5ad210-e395-466c-a7b3-8c58124ab620"
        },
        "item": {
          "id": "6a7ad905-cd54-4c73-b98d-b8ec7a72931f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ce5c5b38-3ef2-4578-b8df-1f5b12e7f9b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d507c0-4432-4840-9666-8b2bcb798878",
        "cursor": {
          "ref": "53047892-b4ed-4f23-afb2-36a5389b12cd",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "4092ae7e-0f50-4447-a860-b36069d247eb"
        },
        "item": {
          "id": "62d507c0-4432-4840-9666-8b2bcb798878",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5c6a152c-bc9a-43b2-8cb4-334bac1ca334",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ea8c80-946b-424b-9a86-59069fde3279",
        "cursor": {
          "ref": "efd4ab46-f9c5-424b-a247-46baa85f4bfb",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "37350e3a-4fe6-40d8-b234-495293f45c08"
        },
        "item": {
          "id": "a6ea8c80-946b-424b-9a86-59069fde3279",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "89aceeda-2d84-4b5e-bd22-80919dfaa35e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}