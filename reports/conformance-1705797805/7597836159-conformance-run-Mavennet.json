{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ebb31cc1-ac14-450b-8043-baae2f05d5c8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "512d2b72-6b4a-4735-931a-fcec35e4f732",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4d766bca-24e3-4565-98ae-9b3859aca484",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "81139c8f-e4fc-4516-920e-8cb561a35827"
                }
              }
            ]
          },
          {
            "id": "8d34c9f2-d522-4a3b-943d-12ac11dee572",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2758e48d-43a4-4bfd-ad49-69660cecfc45",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d1a301f7-3a4c-4bab-b21c-fe863e48024f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7d40d8fa-9906-4fda-8872-9cc4a022e912",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "65dd2620-229b-44a8-bedd-e2b16686e03f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "62b131f1-242b-4847-ae12-2f2aaabc10cd",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5a4a346-121a-4e22-a28a-781393f3d03c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9e100717-ff72-44f3-b183-fe8c4291d49b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0a24af2a-d3db-4c20-9614-034cf2c8d9da",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "05f6b8c1-631e-4853-ba1a-4440937892c7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3ec14a9f-639e-4bc2-9c6c-bd7d5814affc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "212ecbef-ffd4-4a5c-ab5c-91b21a429b26"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a8c6f32d-e58e-4efc-83df-eeda56142593",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9f3cd87e-c2a4-43af-8c72-7cc510d53b0f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6fbbfd4a-17e9-4aa2-a01c-9eb6d3a97581",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "166c4dca-10a8-4827-93fc-1a666a8a4c49"
            }
          }
        ]
      },
      {
        "id": "dd5f9e79-d892-4e36-937e-212df0b0f16e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ca1921be-ecb3-400a-b939-db9921260db5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c7b93323-4f24-4bfb-b819-bc12c261abe1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "03fda2fb-3ee2-4b5d-b2b0-1b1daf7b754f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10321047-a9cc-49fe-81f2-75734547898f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80156e96-452d-4fe3-880f-20cc284865d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f019ba0-8151-483d-88c8-a6cd03f893b8",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b9323c-3966-45dd-bc8b-25d748caa309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46701884-9832-45f8-bab5-42c42d9e0fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f86a48-77a9-47c8-b5b3-8ff90f0c71d3",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a3fdbf-d79f-492d-b339-982d27da84f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79730686-2394-4c39-bb4c-4e8a9466ad5b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0e6f2acc-f1aa-4591-9317-13f0b09b7435",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9b14bc26-17f6-44dc-b24b-5ad4dc14743e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98aebaf6-629e-4199-8f19-315029995397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7f36d8c-303f-4b18-8a82-e4480fccc43d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4733a26-039b-494e-bdb5-fb990ffaf786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0b02047-3850-4b41-8231-16900ffdf2dc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9c2d1146-1c82-4bc5-aeef-7c9adc8d1b3e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b1edce50-68f7-4ebb-94b3-00d6f94ecad1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6766848c-e2f9-4b3a-9104-921a9ae04298",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d581b662-89d9-487f-b47b-2ee5d19e7d1b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46ba5da1-70b5-4f9f-9d2d-84f05dd09719",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "67d8f384-5e5f-40f1-ac42-64a88e9ce3d1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5d35887d-e742-411e-a59a-00c318ba70d5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f5865df0-1c21-4b17-b38f-4b1aac6ae86b"
            }
          }
        ]
      },
      {
        "id": "68fa17e1-fa6d-4dff-99fc-798d96c9a68b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5118056e-c102-4f85-bc05-7e401b005ac7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0eeb808d-861f-48bc-a182-5a54eb20b803",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4ae7f927-a43c-4223-8849-249719ad9bc8",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ccd81d6-8af6-4ee3-90b6-9b84cbbebbb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e24f20d2-005b-42a9-9122-19ef069b5520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3951c594-c9c7-4e55-abab-f5c97783fb9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4614f936-9c4b-4ef5-aee5-12d7ce6c0c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a4f811-8665-426c-ad4d-7a1b922cd6c5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f624b84d-6672-4a58-8b40-9af5e870129b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c64f8d-c71d-4044-8abd-e7251edd34d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f67bc15-1aac-4b8d-b91d-86f31feb58f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e194a7bd-60cb-478e-b743-e8e456417cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6578332-56a3-4d35-9636-94f8105a31c0",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9732f844-d328-4407-86ad-a7601436b7e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24f6f589-2717-4162-aa0b-d24dda7bbccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52aa1bf9-c2eb-4013-8a8f-043a3cf15794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "206dedf7-7a6b-4277-80b3-cafd55046156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2acf5ea1-8869-4d17-984a-7ec4ea7ea9cf",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3ce5bc-98b2-4ab0-bc83-22e9b70f59b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4ce3577-981d-4078-b50e-2ac5f3c4bf3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b4bf61-6668-43d4-8d71-36c15ea674a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b17f558-487b-4df6-92fe-38e11d16aca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe9b0da3-9dde-4383-bfef-f4b77a659bcd",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82298cd9-8106-4d0b-a192-fa930d316731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3082d943-37c1-4a29-9e53-460d2c141d62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00f5450-d925-4677-950b-b292b7f74e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7974f13f-1015-4cef-a7bc-274e84e8bc67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46dc1453-88f8-4969-afaa-4c88413fdbd6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "361e2ad1-30b4-4a88-94c3-5a2050717c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a224a8f-c4e4-4004-8517-9cb23b2e1fcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15190c0f-6939-4a3b-ad75-b42aa5a05154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8351abc-137a-4019-aada-90346d3fe462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8819515f-2feb-4be3-aa99-60ee96d6275d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75611e66-4dc4-42fd-8cb5-351c0cfdee9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8433f53-28fe-4943-89ad-121b4ab9af21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "569a5f78-cf5c-4cfb-8a43-77f51763cf5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fc96259-285d-47b0-8833-aecdcee8bb0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c835f273-1248-4358-b457-a8c3c1a53f70",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2cfccba-08b4-457b-980a-4f678a26a42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d9f7c01-107c-4702-a2c6-655d1afbed9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293978af-d695-41f5-8c9c-d44bda767574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54b41633-688d-4524-803f-c07116c662bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cbd4c96-3b61-43d5-a3b9-06afdd7104c8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd8069e-61d8-4ac6-9fb5-7c34fea61632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a62af14-bb22-4016-98bc-59ba5a9662c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffdd1984-a001-4473-b4d6-7a2d3030d01d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c870a51-90f5-443d-980c-6d8743b4f735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7374cba7-2641-40ec-8431-34c332d04c26",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6747ff-f20d-49a6-aa69-53dc9cef5af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ad37551-f70d-4b94-9839-8a0edad55aef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6295de2a-6485-45c5-8fcd-41afd1e1e9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5bd7384-9cc4-4d4b-8527-8dfdbe191bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82fba0f4-edbb-4ec6-b2b8-1ba50170171a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e48bfb-4ebb-474d-9a38-3ad39740e08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "858eddab-da04-4a3f-bb78-f087700f97fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd345d0-19b6-4cd4-9845-06a022b52c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03771f69-5e81-4986-98fb-641e380b0ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d57ed4-fb75-47dc-be1a-4714437e139d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e0033a-51f9-49fd-a7fd-809172fe673b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ea46c8c-a86a-4a5a-bb06-0805cb1464ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03252c79-a52e-46d1-8276-6920b52bde74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee901844-1c81-4921-b2cc-b660d1c7852c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3deb92dd-2dfc-4311-9cf9-2e391b9fa093",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "226f4367-878a-4d56-b9c8-ebde3d13a6da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b23bf98-9bc9-44b5-8dac-5185ac593630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0a0a6a-925f-49e8-bb94-b7393eaaa90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d80fb3c8-0196-4bbf-9056-f6e7411efcf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e1907d-e14d-4e3c-b69c-0fd253c6b436",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dbcef23-06b3-497a-b091-b9c2c61dfe47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b06b15e-5de7-472a-b97f-a143a030ede0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2127468e-7b32-4ef9-867e-b4178ce8d85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a497f5a1-ffbd-4a23-9271-b936554152f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c4faf7-fcc0-465f-9d9c-f38dd825b1f2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26de78e8-f5bd-4fd2-8a63-451877666f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f75994e-411f-4c98-ad96-c93fea43568d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0140f40-3cad-4d62-9a68-5532883b2c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1566e5f5-d51d-49cf-af08-63d900456ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4f36cd-e6a0-4668-82a5-1cab9c95105e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc30657-2716-4438-bd0c-3c6de5a921c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea9fdaf-15c2-4884-8e4b-4542902c7ace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce300ac7-a614-4f66-8ec7-3a6b3ee987b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d3d1a45-7777-40de-b6b5-2c51c381ccb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b74cf1cf-0275-419e-a16a-2c6a13445bac",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8150030b-2694-4314-9376-14a0fae0ae06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670fb507-e2ec-48b4-9ab0-6869e75428aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae653f5-5b81-4260-8893-c0613edf1430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c266f47-e109-4c70-bd3c-124863f7ced7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877fddd7-7518-4949-a385-cec55323fa0f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d140358-1c1e-432a-b272-0c51d3891bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "229d82a2-c1aa-4881-bf2a-c619067cd3dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343cdf04-b2c8-4903-b784-bfb3baaed1d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e60d3876-13ad-4171-b3fe-e9f10dd58c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e33c28-4140-404b-8ce7-032c2adfa1ff",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2d525f-2da3-41a1-876e-179bb82db944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e7faf70-0f54-4ce1-add6-cb0294f991df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b4dd72f-05ed-4be8-b31a-a2a26bb5a07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf86ddd2-8625-4da1-8e54-7145d490a923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c41b363c-a26b-4a63-b993-56598e503fba",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb62ffad-b6d6-49d6-92b7-8c2bd5acdeb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9cbd5e0-5bae-45ca-833e-4b9533a4cfa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ac9cab-51d9-43cf-8f14-04653993b287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d274edcf-29f3-4a69-b0f5-be9dbea028e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d538c5b7-f8ed-4dad-908d-05dcbe7bc0cb",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "038c70df-a183-4ab2-ae6d-26862347d3c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95fb28fe-1412-4fc8-97f7-82349e0eb4c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2736efab-688c-48fb-ace7-05413a6302fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ba226c3-ca4c-4be2-bbfe-408487cb3220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5bef7d3-ef07-4a67-980c-c32c83384c80",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7336ae1c-3975-4506-8b68-2e4a019f1d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6ff7cfe-fab1-47a4-affe-b93b67d26c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90646e5a-3ea8-4198-9f46-c7de40090ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "edbdd271-4cda-4e30-bc1e-903564142537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27491d88-e1ae-4c4b-b0ad-62d3989e6e96",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b044cc-fdfb-43d3-8ddb-d9b6cbf2ed08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10505048-3bdb-4535-a18c-fe03a2144a68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93aac8b2-2558-4352-9165-12cb2e4b2fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e1688f8c-05f8-4cbc-91b9-97e2ebb58cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7893df81-e2b9-4403-beed-b08a1ad30944",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "404a4388-6d7f-4afe-887e-898925d5412e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a3fd899-fdec-4079-a384-6a2cccc41d2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18bf13c-5623-4e54-a8a8-6d6c773628c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "556b0d6d-f3b3-49d8-ba92-3d6613e0ce05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed435b66-0570-4879-b919-5f78746f6a0d",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3731baf3-550d-410c-83c2-b98bf68541ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40594272-cfd1-4077-8ce6-a5ebb75a015d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8980d06-0a92-4c70-b7ba-99b5d5e43241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ad246c4-901f-49b9-b4f4-2f890a2197b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fb17da-f063-4a37-a33c-f8b493bdefe3",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59575c6b-547a-4702-a91b-c1c83fedd7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4f85efc-d170-4da5-b9ad-ea049fab434c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750f1495-7d89-4e74-adbc-cd96bf3491cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c220c0fe-ede7-4d50-a124-46e16de3b032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27ffd09-793f-40df-9697-2e928c39027a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a88bbe-29dc-48bb-9ce1-5ece92918b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36286bc7-b0dd-4e27-98c6-da12bb73aba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1154e86c-e01d-4523-97ff-f5b834f9d02d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc6506e9-9972-42b9-90d9-c1a62ca5b230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df603901-3225-44d6-9bf1-578c4e16a967",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c313b3-3e9d-4d01-8570-8825c33a5e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "369a3d55-dff8-456e-ac97-81f0667de735"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70334fd-0d04-4f10-9625-4843c1df4975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "afe10eda-8bfa-45d9-8fa8-50cea31a790f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47722345-77e7-4bf2-a6b1-50f2f07ee26e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "299a232b-e771-494f-9089-4d2339ab8dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f5da04a-63ea-4d7a-a88a-32f5bb7be366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935f3418-8940-4360-aed6-6b4d30eb46ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dde96c1c-f15a-4206-8280-d4aa87fc70ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b1191c-a174-4bd3-abbe-563c90375b70",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4afcc98e-956f-4d9d-a936-2adabffa1c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b24c1295-fa48-40cb-8bb0-c1ab724e4c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20ca3b0e-214c-45ee-a8cf-b6f766dcea76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8791ea54-26a3-4bd8-b6ef-b1b1b94fdf88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5123d20-9c29-40ef-9c54-7758b79656f1",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "629f78f2-1f07-4317-91ff-b28e93721270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b62dc5cd-c78b-4bb0-8083-e23b398a58e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d92c51c-3b72-49bb-8fa8-5ef0d1308cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "041d50b7-c845-4279-81e6-c93917998776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d908388-a8f4-466d-8209-d63e24c99def",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b545e80-0083-4412-ab1d-5814f1238c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "064cd02f-b593-4788-b9e8-c31c6605a185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37123014-d1e8-4541-8e9f-5871273e2967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e886e6b3-05e8-4e5d-8bb3-abf6cc796050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd9d3cf-4088-4887-a25f-1c04658b28df",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e35483c-f90a-40e2-a77e-f66b759d8f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b5740fe-1e31-4cb4-9eac-115e91e77664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c246614-e86e-4922-965b-c1d0f3d9a1df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "757c0586-5ec0-46f2-ad54-a084b3b5ebf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f3a8a1a-8452-40cb-8a16-b084fa3e09bd",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "600ef463-3631-4a12-8382-b918ae273d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad593359-ccb7-4090-87d7-2984daf7df46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d7c77c-a585-4760-855a-067bd46d3afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "040d825b-8270-4744-82c5-1f8a6e0584c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8d5ed0-ec19-4577-932b-321398e2c63f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a174a26-ef2a-49be-831e-adcdcd356e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ba1ec4-46ea-4c02-a07a-d24c9ed57fdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eacffc27-490c-46ad-a26e-7ead0d69a21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8494aac3-c123-4392-b831-dcdb99cddec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2828de3f-c227-44ee-b100-06283afd4bc0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d939a216-11d9-4028-89d2-32538a764949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88996741-2e81-4367-abd4-ed5ef7ccaaec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304192f0-b3d4-4ec2-b028-ce218be5491c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1fb41e3c-e317-4466-90fa-6e2a9e109f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b2d1884-ab06-46f3-8f90-a4161a185bfa",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d9a131a-47d9-44fc-909f-55ae59c03b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cc1c11e-cdd0-49cc-a0c3-ef80c3db57a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d58060-8375-49e6-b2b3-53bee819ae77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5623da47-3b39-494e-aeb8-b9766584073d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0dce73-0932-4752-b6d3-400d83b02dae",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33a5193-cf1d-4cd3-85b6-012fec05de8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ebd9f4c-4e52-4007-8bbc-94723b4599f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93fd78d-6f21-466f-a15d-ff2cb3b827de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fcf0ee3c-affe-4af2-98e3-711b788d5107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df00df5-4e79-4895-97a2-896daa2b8d48",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f241a81e-c90e-4061-aa5f-a69e24418aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f2cf1d6-6451-462f-b1e2-d5c9bba9237d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ef243b-70ae-4b6e-a40d-eb58ad7c927a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dce7c9cf-2d20-4164-9c73-f509a2e168d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb384ea-bfec-4111-9ebb-5f62c37d5b98",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b057a796-3271-4a09-bef2-22ad2680c90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae5d8161-8341-4a99-afe8-9709c9c3eef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167d4b3d-21b8-44b2-a256-39eaa66e91f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "687f15e4-5deb-4bbe-bf2a-0ced149b9731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8559df40-7e82-413e-991c-ab73d9afd063",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5985ae-0562-45bc-8f81-e99611927001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "608c1f78-0fac-4432-9547-d7e368248e09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "835dd3e6-5b7e-4e13-a6db-e38848f15ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b564838-9bbb-4272-bc87-32e7946dda3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c1eb5d5-ffcd-456c-bd29-3e492db4a88d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9997dfa-7f4f-43e6-ae1b-00876e3cad22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df596978-ba5a-4c54-a381-5a58b34f87ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6f264f-b04b-467f-a3d7-f505a4f62323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d392562e-3800-4586-9197-463b4d1d47b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce3fdd9-f837-428a-83da-1ded7647bd6a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a403a1-ff76-465a-bd68-8f5d037013dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf7d5e43-45f5-420d-8cb8-06c23feae8dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da67d50e-7ad2-418a-b82b-60b0c187d937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe4a2902-a9ca-48ed-8655-a34ea9e7595d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8090799-73ec-45e6-8d56-81d915ceb2c6",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd4c919-7375-444b-b162-9bf9e370695e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08b5b225-3b48-4820-8ae8-422136ed82bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb61741-1fb5-412a-ad54-ad104859dd43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d806762-286a-45bb-a980-9f1104ccedde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ac70ea-494a-4d9a-b730-56ea72b0324a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "595a77f7-5c57-4f56-96b1-67b470569397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3a89bc8-e2cb-43f4-97dd-93e03d5c7b77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee5f90d-5a78-4ef1-b6c5-ca01d7caed04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2f23618-a950-4b60-8ff9-60f94890fa86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a6796a-5cc7-4567-9260-8954e02f1615",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f9ca25-19a8-47d1-b226-8c11528fcd58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf030953-05f9-490b-8d82-3130ef2974fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a88ca6-ff75-45b1-ba47-02a8a9a280f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98dc303e-82ba-4747-9e6f-e6c5322b0ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1033591b-723c-4753-844a-00b7ca9c0eb9",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf2d7fa-1905-400b-b46b-b91dfd5f244c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a0e30c6-dab5-435f-9e37-0c32fd74838a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c01d3d-7d99-43b0-b48c-6f3a384baf21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9efe39a3-8f53-413d-a079-e65d0622ec28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5941715a-3c38-4685-b7eb-0d9056efda15",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98236b61-a90c-46d6-a98c-1bbecb7a93ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24bb01bd-4b86-49b6-81a9-d0e867550c0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b25b9b0c-394e-49fe-a3f5-e5f9c1f27602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b1dcba2-c66b-4f18-a754-9b80de276e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0bacd5d-ee73-4c9d-8cc8-b744cb877ffa",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e303f1-f5c3-4034-935f-4bc3b1d6bdfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "347eb44e-ac7a-4d1d-885f-6d16199cb324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda03aab-6d6b-4428-b626-4b09c6ef9bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8452f70-c211-4dea-aeb9-bf8fb7554a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b50c509-057e-4d14-b3fc-10f109f787ce",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9728db33-a115-45ca-a844-29ff7c41caab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61a92013-c1e1-4345-836e-b90fa33d9506"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ec843e-4caa-4c5a-87c5-94067378c5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb2b03c8-e47b-42c0-9178-f50749b22af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef17c505-e104-456e-bc4d-bb0e034d8ca9",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9f1207-9ef7-4a62-b890-bdf255e1649e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c2ad0a2-9271-43df-ae72-4c3a906fdc6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19dc9ca2-9f62-4daf-898c-ecad6f51ba99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ef53bb8-64d4-4a0b-8830-692074a40ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e96027-62cb-409a-883e-796b7297b3ff",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f306e5ef-dad0-446b-9b43-88164ae0d91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36acc812-97bd-40d2-bf01-abd2fc7a9ef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ace363-3d9c-4c9c-a656-a31c46dc9442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c40d4564-b908-486f-bae5-607e9183e669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39e0033-b8b8-4943-8d13-278438fd691c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e9d6f8-db2c-4dc5-9dbb-01707340592e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebc8bce4-bec7-450e-a178-2a6fe665df27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd1ba4ad-1771-4e6f-98f7-c3cdf8fe692d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9025320-bfa4-4097-9303-bc1db0ef558c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cec5038-3447-4558-a316-05a22497926f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc4f53b-7c94-4afd-b205-3e89f4c785ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc7c6288-37ff-478d-a1cb-b053ac5bf090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31720648-03a6-4cfd-9b14-7a6d6916577e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "31d80112-ae3d-45e6-863e-6b34fe2cf700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c1bef73-90ff-4551-9870-cda9bae7180c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf49cbe-a89d-458d-846c-f2eb4cfd5294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c290e7f-239e-4278-ba16-6f691f5e4319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "727649e0-ceb3-410d-b126-fc777ae14d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac28524c-f6df-4776-ab7d-914271421f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba07b77-a493-4ad0-ac4a-5b9c0b4fd426",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b837be-be01-40de-95fc-191ad8173d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd39626d-3d2e-4d70-94b9-77eeeca6d477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f239ae5-afe2-41fb-a945-f100bb268403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d26a7339-e9a8-4148-9917-36b8ac041109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6e8563-8085-46f2-b0e7-0d3577335953",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4889e3e5-b3cc-4bd7-aa74-48ae5d8b486f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a916a0f-b9f8-47b8-958f-ddd2aa4c9ef6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5485b5b-8728-4161-9553-600be60ce347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d0f35a5-9250-4437-a1a3-bb790a7f25cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1600b944-ba76-40b4-b447-ddfb7a4c3af5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94bcaf67-fc54-4e80-9e05-bcefe16d4347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7122059b-a41d-4a10-b0d1-53035781fbba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac799cf1-5fbb-4a68-98ae-7eaf11a07181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a580c1e-8a4c-4c90-be57-557bb20f35ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc45805e-0f7a-460b-afe8-5ef96ba0d245",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df8bd0d-920f-4db0-9b06-bcbe6dae985b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab33f854-75d9-4807-ba3d-4a59cbd77359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db5b7db6-f72b-45bb-8c12-db7134fc7cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7deb3c29-3bb9-4a2e-9976-bc626af1be1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6436ac8-13cb-44dc-851e-e245187e565f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5699efaf-bf5a-4a67-b611-5365fac4d98a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "413427ee-d799-43c6-9612-7c24fdabec3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7494546d-81a9-4ed1-9cf4-3153bbb00e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f094c737-27c8-4fd1-9c4c-8f0c27b298fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ef8924-245b-4749-9249-d5c55286a2ed",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "605b296e-bbdc-41e5-8eb3-ca23efa2dacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "379b5009-b5e7-4ee8-9524-7f8ba6bc2796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54b0f63-196b-497e-bb1f-66c605a4a682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e61b0551-afc0-4dcd-8901-061a3541406c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c19d303-ec2c-4f15-8695-d3fd619f1f27",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55609220-62a9-482b-97ad-8cc5f8d94cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beaf0731-1228-4d6f-8c5a-a69e8e768817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f26a40-77f6-4660-bcbb-437da159a2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "167afb5b-c25f-4de9-99f1-93ffaed4471d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a540ae1-9d8f-4442-8581-1c9dac5af2ae",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a97b0182-1bb3-44d7-9b3f-deda847b1d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "671e415b-89b8-4f85-be88-5ee9c3f12cf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d45d46f2-f05d-4bc3-99f4-3dc63da4bfdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7951f009-306d-4f65-9cd5-cf49e84922d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3c1b7a-c14d-4460-899a-71ac4a9dd79c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "673eef10-06d2-4d97-93e4-4b7203275cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55114068-103c-4eee-a41c-36866629be65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c63802c-71e3-4495-8b11-d51893de7cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f733d997-f5cc-4cb2-9c4e-491739ffa391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e8e4ee-9267-4c9a-9bfa-c546a4538a21",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a4b0be-002e-49d8-a2b7-98b555ea52bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e998873-8512-445d-91fa-cfcc1fa5fd88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75682aea-1d76-440c-b41e-8cccf3e36fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2383baac-2381-4579-9130-d3f812ba1f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f30d878c-57bc-4969-a498-4c4c5376d394",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f43e6af-344e-4d97-bc30-5d6f443e5d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f724a95-1bdd-400a-af49-49f4db03f3e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf36269-ddd1-4bda-9a0e-6ba461a590dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "44e3a937-bfaa-45d0-8601-b70c76939319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7785b5f8-6029-4070-b15b-1d61747259ad",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "269b76e4-7185-46a4-9324-1e69eea9e373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "441f62fb-8f44-491d-984d-ce5797f27afc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16ab608-b444-4ad8-8264-273a8fbea5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65287e5f-4630-43eb-a0a3-1a59f76f2df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e362d7e-1f99-4e39-b67b-1b660d7c310b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d761fd-b750-48ff-a1d1-3d2e4c571f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6253aa6-4843-4e43-b769-29677d84327b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0fdeec8-1b2b-46d8-8cfb-30542b28fecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bb2abf0-1f90-4596-a672-e6b9e694d57f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e796fb86-3b68-4923-af8e-dba4b69a71c3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ef7a57-8214-4e45-b399-882d8f7a3e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d83ac069-aef7-41cd-a6b9-5dea136066a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc818f5-a4ec-41c0-9b07-eb3e77e93c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "46ceffae-3873-44bb-a91e-66fa84450f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd313720-2455-4545-8862-4f9d798d33bd",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49471e5-a290-470b-957e-05334282ca66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcf65730-dba3-4d79-95f8-dc4abfa53a06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bc357c-8883-4975-aab1-5d8f53c82b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "30a21b76-59a5-401a-a21a-d4ce7303f8db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232c2e0e-fcf6-41f5-84a4-e8303c17778a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d5a8b6f-8ca4-485d-b384-b068daa68731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2775899-a006-40a5-bf7b-9607c6a01fe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f991317-90af-437f-9184-070b0311d16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eeff7f98-bb20-4458-b45f-3532b4cd3789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f4968c-5c4c-40e8-9978-17df5ccc7c95",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b352ab5-0f6e-43bc-b0c9-0ca53bd3bfd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e5ca4b4-436e-44e7-82d0-f2a7c8c432ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd852641-8b98-4fa6-9994-5b06cc8c27b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b273584-ab61-4389-9f9b-b208c4a89284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111031be-a981-464a-a556-8d2c188bbabf",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a1abf1-c495-48b8-8305-f5c380e5b00f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf0864f-a5fe-485c-aeba-00d3de6efeaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44438f7-4786-49b7-87a5-c9b785bc9d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4c03c06-b8f3-476e-9525-51c61a2a3a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d42f2578-7400-4083-900c-f45b55dbd5d9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d9d3377-0ee8-454d-a132-7150f0091327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7f4000e-1f86-48bc-ac4b-7cc8e4e19d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0369b470-5d1b-4b87-aad4-5b8ae7dd7fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cd7fe486-6c71-41f6-b481-a107e5383377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b038c780-0139-4d4b-8869-ebc118c739c3",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "027efa18-6f4e-4ba3-bf06-b3c8af2cfadb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "981d4b79-73ca-4e01-b39f-92e8fae8fee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a32c8c-e805-484c-96fa-4d4bb9a33a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "61c10e42-988d-4b92-b3bc-604098319b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b391e8-4b5b-402c-acc8-22d3c75739a6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab63782-2a41-4747-8c81-939cd5b61fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e29a2e7-aa85-4bec-b60f-d2e70b3bda85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd495b94-39bc-4d0f-9ba6-76f03dfc28af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcebf3a6-4c71-4102-b5d4-b5be9e8bc592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b94ef1-9a55-4d55-b632-e54db56b516c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5b6169-ffbd-4bbb-9757-a0a1f2cbc32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c81f5a0-2c1e-4ab5-805d-829827a29168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16655bc-e850-44d7-b1a8-f5c1355c05a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f71faae-2ce5-4e2c-a008-9855daaff8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9475866-563f-4caa-86e1-1f3419f18961",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c8fa299-1b01-4345-a0df-fc221895e32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b90b8f5-cd71-4f62-8dd1-dc11da996c71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750f835c-2a15-4455-992b-963e73dcb496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "77bc4f2f-6f20-4bcb-b63b-45f386ba7d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18317de-b149-4fcd-a354-06cd50272f46",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afaff884-319b-4823-a67b-9634dbd44519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74e25fbe-5a3c-464d-83cf-03da054bb712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c45bc2c-ec19-4aef-8230-415a2552ed4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "71a3b71f-90de-4da8-b57b-a4bcf6c936d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d84668-80c5-46a2-afc2-e2b4d27e7764",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2311ac45-642f-42b8-bc02-8c89519b4c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d44112f4-f083-497e-b387-6a3910a47d24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f083724c-7621-42a4-aadd-027874972e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c63ca01a-5cdf-4a85-aa3a-8e7e0d55dae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8816a94-c35e-4bd5-a912-f1232fd31ea6",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8529e4fd-a46a-44e1-b5bb-d5151e5be87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8231e3ac-8043-4855-9cbe-37ccfbe88e1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c4b743-44f1-4548-9304-a3fd30c3cd53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9796cf31-0f27-4c1a-bbba-180e86789833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee97038e-9932-44ff-ab8c-281d93926e0c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47caac10-361b-4979-aa20-25389da6c24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76cf765d-1951-4f66-9b25-71a9b4c43739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "963f6071-78de-4732-8217-9cca152c6933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "421cb305-ff75-4038-91a7-85256f838850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1784ac3a-f97a-4f5d-8e8e-b1568b2822da",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0efc2385-9438-4c68-8251-df0f1313dddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a07eeb0f-0923-4c8b-887c-850fad2eae10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20797a48-4378-4fb8-9be5-29265c86b9af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9276f8b-ddfb-4175-9d19-6f7a28a7ba7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da90935-f3a5-4dbc-ab36-f2bafcb04658",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "279de493-d57e-40fe-a66d-a526cc7615d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e48d866-ca50-4a5c-8eda-555676fa750a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea4d50d-7650-47de-9603-92f7003262bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "698b6d02-a4da-4201-9eed-a1209866d8d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae4430b0-769b-44ce-bc84-710896ee7330",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c6e6f2-e819-4186-9653-b4269723bb68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a33019d-e9dc-4826-a5fc-30171dd72d8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13b34ce8-ba3a-4ed0-a956-a9bb4f6f4577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "af2d305c-0070-456d-bce4-d67591c2ec10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454b42e0-d740-4434-80ac-ab665bbf351f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4159a739-fc6e-40e0-a52a-ed2ded01e164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e8bab5-3bf4-4e83-bb40-33ea252d65a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d81af46-7348-48c7-8dd1-2249da085e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "19d5db52-4d9d-4864-a25d-b3cf75c60e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23619589-ff56-40b3-b2b1-41b45cb5c088",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb760c52-0507-459f-ae4a-be0eb58ff41d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49decd32-f193-4e89-a8eb-58aa97673f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3300c8-8109-41b4-9bf3-1f02ba14ba88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ae9b67e-3d82-4d98-9fc2-154bc7aab828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9448a21-c304-42e0-83ac-542eda908184",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f824110-2b6e-4891-873f-d84765d10231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63ecb49-061e-4cd1-96c2-50323567b687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc12c1b-2b77-49d9-8fc9-52b2fdb683d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "570c1670-3d8a-446f-8530-92bd83c442d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1562435-b3e4-4d70-a465-6ce5c75ccb6f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45dc9e08-4e9d-4619-9bb0-54893811ff6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99d62c61-59c2-48a5-bf6f-493b2c76a00e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e16e1cb-14d9-4f60-a360-a604128d2ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e346d57-d876-408f-9d6f-dc8f6246d2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1bdda7b-94ed-4f1f-a0b0-5cffa20f5c95",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96886359-3fff-43f1-a441-d4346ba82430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d79f5e58-cef2-41c9-b43e-623e86b618e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a27b29-81c3-4851-ae1b-d5b2d3d61cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc9e5098-210f-40b1-b165-94b35c042a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1900646b-cd6f-43c9-9a08-cd5081454836",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f3fdb1-8db1-482f-8658-92c42409710a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e9817fc-47d9-45c1-91dd-8279b9f7296e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b1e259d-21d3-40a8-9ceb-19617b3e1a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf77a62b-a67d-4d16-9212-01177fd94f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce37dde6-f7d4-4db8-bf0a-6ead05a12e25",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c894d83-70d2-4f8c-8a34-48eb13bb32d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b025fda0-677c-4f32-9d2e-2a4b17308d66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9601021-fc43-4bf1-9bac-aeacbd8e8631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9aeb9ea0-a144-4ba9-bdc8-7678114a0df4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "76b6065f-6dac-42ff-ab16-cab7a74bc47c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1fca79aa-16b1-4eb8-bfe5-240d2a4db070",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c98b9db1-9f6e-48a8-935a-afbc034a3e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20c1c7b2-ae78-4698-8288-92fce0faf603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "291aeab6-5920-46fa-9cb5-975d75ac266a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dff2a6dd-9e45-4c42-96cf-554cd4224da8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2e9faea-4d2e-4386-b8c7-c6662073e0a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56f41921-e805-4071-8d6f-e59cb12e1e17"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b16721f-df07-44b9-bcfe-e287c9a54e85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "127a22ec-5eae-42a9-a07d-815344b80335"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "33339688-e08e-4ed9-8aba-c4f4a186b8cf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "53971d1c-3eef-4b4a-a5d7-0f09fc58969b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "eed00c27-0df5-41c3-9393-8bc06c293a13",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6358f888-09f4-41bb-b412-ce1aac7d99a1"
                }
              }
            ]
          },
          {
            "id": "e5a2284f-1b2a-42f1-8fbd-0aa8636d5833",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1a81e7ad-e2d1-46ad-8eb8-c7002ae1e8b3",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "2f49bb60-53cb-4379-a6d9-086c97aa3ea2",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa563e12-04ec-4121-8ba4-878319337937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d097d056-87f8-4c1c-9ad7-30d788c8400c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e863a5-2299-43d8-9a7b-3a31c4bf1aba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "859310bc-390d-4575-8963-4c3641ce2e15"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "69de8641-35af-47c1-af93-fe544f035b5a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1afef42d-8b8e-4c57-8e5f-a74c19f6cb98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f71b274c-bfbe-490a-b05f-4397c7ae50ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d77308c4-36af-4417-939b-e11b432619bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "415cc697-bb23-4063-8f2b-85f049f121c1"
                    }
                  }
                ]
              },
              {
                "id": "161081d0-f106-4d77-bfdb-2175bba9decd",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0675f7f8-6fa5-4946-aa3d-4e1642028fb9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "08b76233-51cf-475f-8e6d-1f4a51db2984"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "132d62eb-2a64-4a8f-b908-3a4b6589130c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6aaf8ecd-6c32-4f10-9d75-94eedb25e5c9"
                    }
                  }
                ]
              },
              {
                "id": "48424906-2e23-4536-a1b2-cf0467af8413",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c1f3ca0-0073-4707-b35e-f032d3dcd30f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "04d14221-605b-4049-b4b4-c7ef16300e56"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e00af7d-4a18-47f7-b33f-cbcd5134d303",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7198a027-4f09-4730-9e2a-224696bb5aa3"
                    }
                  }
                ]
              },
              {
                "id": "e34de4f8-4bc3-42f9-b8f1-4773ae76ae9c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d773db60-278e-4616-b43b-7c8eada888a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b2ee0062-e57f-4491-85d9-cbe1cfcd3ed2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "555c4188-fbfe-44ca-8e92-1d47559492b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a16daf4d-5dc8-404e-9c98-1b1164ba7899"
                    }
                  }
                ]
              },
              {
                "id": "4953987d-8745-4015-9949-b6461264d94e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b3d5240-9b6d-49d2-b022-bd64fe900a50",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b95deb12-3eb5-4765-bfcd-c74b4e5a4359"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1124523-d396-4e08-854c-b7a733e6ab34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "eeb2a402-0a2d-4a40-b43d-3bf704224c5a"
                    }
                  }
                ]
              },
              {
                "id": "e3056b14-b7f8-4bcb-9614-d1b0a3113e10",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "67de5025-a94a-40c6-8279-18a14335ca85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d0f0ffcf-365f-474a-ace8-663d8d9b3a91"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7276925a-3cb1-4561-911b-ed11d045cf6c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "17d1bf97-875e-4724-a456-083996ac94f1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1062ef6b-4ed2-40d6-b3be-93c39c713e5f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "11d0d525-57c9-490b-9ad0-7d4751a8beb2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b5217554-fd57-4a1d-b2d5-d2c4a3db0a76",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "71f3dd5d-5a0f-4bb9-a66f-f0b0795a4974"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb9ce753-e973-4db5-977b-4e37add38274",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d4cb9c5b-f927-4031-9eb5-08b10ba08416"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "de7cbee3-8e5e-435b-a8f0-7efa75673120",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "216b0c99-193c-4abe-be5e-e9d35c4d19ae"
            }
          }
        ]
      },
      {
        "id": "8868de0d-b72b-41fd-8e48-0e9303850aee",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1eda5ad0-f3ad-4745-9c77-96cb60fa65cf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "613adae5-7b3e-4bec-93c4-b99a81abee10",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8b0ff398-85ea-4d74-932b-5aaff12aa3ba",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9659e1-0086-41ef-a49b-57485160a386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4cbdf21-9ec2-4415-b99d-912f44876092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c755b914-e429-46ee-a0f4-ab0bb5c962a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8def6537-9569-4baa-9372-690b5090387a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c047d9e3-0eda-4394-87aa-336a59916883",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d812795d-5f5d-4903-a4d1-b0fec01ed32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "967a9cc2-9a4d-4036-9fca-62d2a38aee6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e746c27-a297-4f35-92ac-9e8687971830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c7e974b-0059-4e2c-a1b5-1f10f797f9bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3790993-334f-4836-9fe2-728ce1d2a3a2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e563812f-6f8f-4d65-a2e9-e2d1e4bafc9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c7457b6-6335-4835-8947-30f919428379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28795cf-2a36-46f7-abbd-e8451859608a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "90136c69-39f5-40b8-9cda-92a714346407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85339acc-5a16-41a4-bbbe-effdcf8dc24d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "328294f3-399f-4f2d-926b-b5c215f1dac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35d58273-9846-459b-a61c-d22d1da35440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9475485-3476-4588-ae89-5c0db7769556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0599f000-d88f-4c3f-9d49-3e5ac281fe08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3b190d-d6cb-44b7-86a1-cefcedab0c8f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "244c9e41-665e-469c-bb0a-757fc38b8520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f33a8ded-a774-4798-a67f-bff2236fec74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4eca48-1e0d-43b4-8e4a-1f11caeffcbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7827bf7e-cfb0-4135-a0e1-c5e85a029d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4091ccb8-5c02-457e-b12b-75db9a924cb6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c5d291-69a6-4a8c-9df7-fb5158a9a1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b09e6885-d5f2-4a9f-8906-eff3b8a7c7a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de364135-e13c-4df3-b802-5fa5960de76e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd65e03f-ac35-4164-be25-6b6dc7e6f0e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c85423-0745-42ae-8650-f7ce29e485fb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "357a2956-506a-422e-80b7-376f2cdee1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f548079d-577a-48af-8eb9-fe8118260319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43f6eea-33d8-4477-91f6-c082fa38b086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ff18a32-3d09-4d8b-b18e-95a27af582e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91643cf0-745a-4cea-aee7-b1c8a7c1d403",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "384fed7d-cb2e-4d8d-9f22-b119f54e5def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcbd2da7-0fe1-4b32-88f7-68c3d7ec080d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1012c118-76ae-4d46-9821-b5887177bb4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff306284-9e0f-4910-8449-d4e259ed98dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1791662c-a5bc-439e-90da-cade6f5d5898",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ad6b8a-5033-4141-863d-8dc23bf86a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "290198ec-6471-4632-9779-6016e2b60108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa6bea7-3aef-4766-a9d5-f7142083eabc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a0eab40-f906-4ede-8204-683ccb581e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "672f3fde-baa6-4b09-9135-c9950f22e6e2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d29ef1a-c786-4379-bcd1-9e2ee7cc880e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a22cfadb-2a83-4ff5-a627-12029884aa81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e553767-0180-4a6d-876a-45b2b39ba021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "55da90c7-14d8-46f7-9f3c-7722e3480795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc8b3bf-8a71-47c8-91b7-c60cff5e3d55",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6965504-a9b4-4cc1-b686-e8dce9c6fc3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31897cca-83de-4757-97d8-c585e218dc0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4815bdd4-f283-478e-8b79-4c133c9fabdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "694a85cd-28ad-4d0f-8add-36cdfbed68cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e3d263c-ff5a-45f3-8d17-60a5aa0592db",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae4a644-ddcd-450c-890b-ae0be9dd44ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "814010f5-5598-4d46-bcd4-9556ff8b8937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b721ac1-ef0d-40eb-83c9-f7e47525664b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a313da52-f7ed-4045-b35a-19e52ff7ec67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcfdf925-0f31-45c6-a824-6cec25df49d7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a695272-2a9d-4f41-a22a-290d5825c861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "135b0aaf-b052-456f-b858-9755444ad83f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce738e89-e54a-4bef-877e-39d68c0c3c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb9d3e55-2379-44b9-a984-f2ee2cee85d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8659f10f-a85e-4208-8f2a-8a1def7c8bd4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6b98ec-f146-4c0e-bac8-8fa580832fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "045aeda6-bc0c-4fae-87a0-3eff2bf9e10c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3234171-4fc7-48d8-b412-8327bd7e322a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e731120-74bc-41b8-9897-a1aad6893652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a799f02b-b2e2-436f-83e8-31d2bc2430d1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e534f7-70a8-48a1-b187-e90b2a62a4ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2478896-11ab-4553-a668-8d31243fdaa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89417b12-8d01-4319-959a-998d428a84f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9d122f4-5409-4576-909d-f12493eeb186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f6fdd92-6732-4cf4-acd4-56f15069cb88",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76af9e31-5ce5-475b-9986-1922cf7a6465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad9b009a-4f53-4d3c-a8c9-8fb02c5bbd29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3448fd-683d-433d-adf2-7bdb6a769af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "12452338-efa9-4065-9cdc-62ef2e4c0e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d27c73e-c5ae-480e-b65a-2cb0505c3cc1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cede9f4-d2ee-4fa5-880b-61d65b67ebe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28116c13-d59e-40ef-8995-6fd1bdf36afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf2c211-01e2-41ee-a764-b444572cb498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "48aa9bbd-beda-4876-b0f0-30b43be13ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e374ab-f669-447e-9d35-3232d3d5ff3a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff28c4c1-8c20-4b7f-920b-81e5f26c74cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7760ea00-2dce-4600-a972-7296bd78f035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ace9ef3-eefb-4766-adb0-9e50071a05a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "773d58a6-0bd7-4073-9db7-ac95f26cda2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4518c1-5bc8-4678-8c0f-f1ed835a61c2",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d9eabe-88d1-4a92-89fa-e7b4547623e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e3514d-c61c-406c-880d-b548d4ea3498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4241b9-403b-4be0-a474-8e38c93794af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48480425-9381-47c3-a264-f4188ca93192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0068364c-9fd5-4e3b-941f-0e9bd869e14d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb888eb-0ea1-42ec-9408-f4a5cf2e6f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c463165-4542-41ea-94ad-ef1c60e0cafe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62791e6f-6fcd-4ee1-9429-bb67ab1ee007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd7fd39d-4e96-4fe5-b75c-af771ee857df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f74502-d197-49f2-b0ca-a4c539abe532",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6adaeb-981c-451f-b09b-d48da1fa2f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "740ba3c5-7dea-496c-a6d6-6692c96b2c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea11a77-cd56-4281-8e84-8009ca640059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "475225ef-9461-4899-aa03-9d17d9cd4843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1887c4-e8a0-4b2a-995d-7746c9391153",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44326a92-510a-47ce-94fa-081ff98f84bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dba36f9d-4a9d-4240-8686-303462f7d586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e863b927-05c1-466c-bb2c-a0939d61e2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efd68cdb-a9df-490a-a185-8ffdca57e9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6765db-6590-4d0a-ad9d-56aebf7c334b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae43f4d-4ccd-489e-83fc-ba833fbe3d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2315803d-ed5f-4147-a92a-6759e5db66ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b280b6-53ff-4574-a4c9-078f0e36e3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "597ab1c8-5b69-4008-8a95-aae0b73e8f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c4f866-65e4-49c3-ae2e-0ff39cbd56b4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f80f571-7e5c-4290-98b4-f089d362bc0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15912173-a840-4710-81c1-42f86a6fc7aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c751038-8722-4e03-adec-092dfeeed036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b2b3b1-12ba-4b12-9a30-183c46dec656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "492193e8-6d92-4fbe-80b6-46e38d25b6a9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0407ae06-26d2-4b3a-9c4e-614e1e6d2ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "991032b6-258b-444b-97ef-52456387b43d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3266999-59d4-4bb5-be67-cd98820a91f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e59d1c8-2b5a-4f56-88cc-6377bbdfab8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79496982-c94e-49d1-8724-b28c6d0e153c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c4a0d9-2539-4d6c-ab44-1a83d951399a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91b99f2d-028f-426a-a021-520a1b07405e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e241c3-0456-4550-b165-d4ece2d1ff42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c48cd3d7-8a75-4a37-af02-ce2a918d4bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508cf8fb-4a71-45fb-b448-b5faabe01172",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db08f7b-bcbe-4469-9d08-1969201f5849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fe9f0b6-241d-41ba-83d9-facd53b92b7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48ee1c4-2c07-4c56-9c6f-13d8f647eec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00033ceb-1063-4fc7-b27e-9be66189a0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a4ade2-1867-4f17-b15e-712a4c5233b4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "164d7f98-b264-4631-9d1a-f1c2e7fdd6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c8e318c-109a-4af5-a14c-61990b889f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893c351e-de1d-4677-8d7a-aa050101aafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3e81eb1-0e8c-4e71-b3da-b7cbf5f503ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13819d0-41e6-4174-98fe-3082469f1a99",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a73c2dd1-26ba-41ce-8a10-0172ac6a04a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84af0e70-9ffd-4503-839a-6f9784ec6b32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e4e34a-0f69-4a4f-9a88-5ff5d92a4a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "499c8db9-2199-410a-9987-abf70f677174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d427069b-77be-4f45-9653-f4abe196d54f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a5a0cc-fb41-477b-97d3-5ab4ecf3827a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94e91bbc-8bca-421f-aa7a-6034d47bbd31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a6e2be-5de7-4eaf-bc76-d7989d6b345a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a0b6c94-c467-48b5-9ca7-de55ce3fe0ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52424fe9-f5df-436f-890a-d3a69b5ad76d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7433113e-5bee-487d-ab5b-36c4d1069ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "396f69bf-5691-4858-aa0f-a72cde27541d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc872c95-1d63-4ec8-9f17-beece6dc053b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a0b3b23-7678-4bee-888d-fbfd9b203b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b94ac3a-40be-45f0-a626-d3ad237790d7",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32bc7ea-b30a-4fc9-b2de-c9a5eeb35e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9683e7a-59bc-4e7d-8e6d-f34bae0d58bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61092ecf-2048-4f54-b5b7-93e8f7d91851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6990daee-86cd-41d0-9386-337272d58bbc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0a958d05-1ceb-4fd7-a102-55b274c4eb49",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2166adc4-3696-4ed0-83d0-5942f4d5cb23",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f946d1f-75fe-4162-9b4d-43b472568048",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "59247bfb-96d0-43cd-b383-eea9fd3bc64a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01358193-0581-4202-8032-e68c75fd27bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba0579f4-f901-45f2-823e-875325af1b2a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "639c1372-e91c-4597-a4c5-2b6e2ce4f919",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8d78486-e902-4098-9f68-3c6daf414d2c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f22d4f8a-b426-47df-8567-cef23800f294",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f20b52a-92be-46c6-81e8-2b18b1d6a200"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c07d4009-6bce-4a47-be32-6c742c56073e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "43198850-3e16-40c4-a680-68559fe0383e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43fd5ddc-559a-414c-bf9b-97598fde5b44",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2171e316-d431-4272-8976-e419fb1e67d7"
            }
          }
        ]
      },
      {
        "id": "37403d57-2bcf-4f6e-aa31-708675c6bbf8",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "01fb2bb5-d2b3-4393-bec6-335fb051f935",
            "name": "Negative Testing",
            "item": [
              {
                "id": "de596c16-83d8-4b83-934d-fb4c21fbac49",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "74c42e37-1ba9-4536-aad4-e3ab480558b7",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecfb66cf-949a-474a-8f3a-9eb070905a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a201547b-d659-4bc0-a7da-20357eeabfcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b224ae-4f3c-4e78-acf5-7e46ff1fa3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f338d2fe-305f-4813-ac74-a2b0ee2322bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832eafbb-0392-4b85-a7ad-006aff20f392",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "256eff17-0a91-4fa6-870e-bfc1bcb4e171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac58cc71-d0ca-4a20-88e7-5e675505a87f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6002a383-5bc5-422c-938b-fea0ff209516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fb4cc10-3f8a-4252-a703-ade64b729196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27367298-e9d4-4d72-81f6-6b55f151a820",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6356af5b-a1d8-4457-a0d2-3364bcc9b09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1484dcf-834b-4651-b811-e2d6caa0fa80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a562127a-d9d2-4d7c-b4a7-88a9cdde89de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fa80210-efeb-4edb-8868-a3f9d8b07073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58030d74-5023-4d93-bceb-7fa17ac07553",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c438aa6-fa11-4c45-b1c9-cc65def20c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2fd2429-a146-44a1-bca4-3bb783a65afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f8517d-7602-4653-8baa-d106b84187f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd476507-deb6-4018-9dfc-58d089a0a8cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ad116c-10fc-4e54-9900-da89533b1149",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f66d3f5-4791-41f1-87b5-0aae99315238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33110072-4530-4175-a374-ddc759080220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ca1e15-42d8-4e3b-ad9e-e38c75cbe11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "af2e2f11-fe90-4645-9f56-deb2afb5c51f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c727fc3-86c7-4786-a898-31e3b41650b0",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "527cca62-c646-4d83-8b9f-982c4024f13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e20885c-605c-4d39-9873-1e8210c3b6a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0acc68-3b96-48cf-8eae-a51f054f4d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "97a6540a-d9e4-441b-994e-2d3aa2e1ef5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb11546-143d-4764-84f1-34efdadc5de3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3df16971-f580-48e6-87d9-77d453436387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7be2a29-11b9-4a6e-b18b-4e82fe29b28e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d2b873-8f99-4689-bd42-6fa3b717b060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a41b155b-df3d-41eb-90fd-6d7c881c14bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb8bc22-f690-413b-b9a4-ae518dae2e83",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c1f7ae1-372a-4c08-9def-e63c46010092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d7cf534-96f6-44be-97a0-ff62da64a959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "162f992f-dc7e-465a-b10f-b49865b1f588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aea952d6-6920-46e2-9400-ed68263deba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f2434c-2a12-49b4-950b-241e7d1fab1b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "394a7294-8267-403a-b64f-302b55715c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c60139e2-5efc-446a-8ffd-d39b9668789a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f21fd4c-64df-4371-804f-ab7fe181c907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d178fe19-cb37-482b-b516-6561f0f1be23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc9253d-1742-4395-bb85-77af27dd0be1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "322ee709-457a-4e19-979e-1842b55edbb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "159e977e-1a71-4be4-a539-c9dcf27bdb0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279a011a-efa5-414b-a5e1-bd1ea359936b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "85c40457-8580-437d-8f81-4f7c068a09bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9dcc93b-7184-41a7-aafc-c2abb087dca5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49be8f30-f14f-4de8-9a98-338e6713b515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c58a5f32-e554-453d-b613-27ff8a20aafa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6464fbb4-7513-4d2d-a707-38574a3ed1ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2fc9e54b-842b-4858-a37b-ee898c357bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b7223d9-cdae-42f5-903e-f17b1b12b7e6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ed3cb2-ee36-4106-8e38-ed5124dfcaeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "342b14a5-00b4-4fdb-bd00-f7fbb22d36b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9412854a-9a9c-4fcf-b39c-443a92327c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "159838f5-9866-4ed0-a3ef-96f236aa86a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83884fb1-5f43-49cf-a3bd-5e3600895499",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b83efb-c8ad-4985-9bc6-0ca301be3a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "745b2382-88d2-48f4-9655-b4ddee62fff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6ef483-8941-4e3a-9d9c-1e54c6c2347c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1324ade0-5b1c-4a01-8289-59ac060b8130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a425a662-4c54-4895-a71d-f69144a02b9c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8c6cf3-a242-405e-9b54-401020cd0b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0aa2872-66f2-471e-882e-6e01a6727df4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89529efb-8241-471b-9d91-69d5ff301bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b82c514-0e78-4cf6-aab3-d56c6faa1f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5684727-8046-4fed-ad5b-39a774b9eeee",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f48672-0f41-435d-94bd-8217f45c7d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a76eb3a4-afdb-478a-8476-2dba2bd5da56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebccb3b3-7d8f-48e8-ad08-61090e2cd7fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7452aef-44f8-42d4-9c29-b494d01e0f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62a4b06-b37b-482c-8a52-c04ca750d091",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b72b52f-4cb7-4218-bb0b-65d3a5f963d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a80b851f-f128-4606-a0b8-ea0ab965c816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251a09ce-a35b-4237-8f92-7699ff293bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "34069f27-72a4-498c-bb21-0c258ed1e7e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc4db00-1ee3-4234-8415-ecc45304aeac",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ac625b-7c6b-4d92-b0d6-568f223fcbe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f35cd38d-6254-4dc3-bc73-7cbf0ca5933f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db58a66-cb7a-45e9-9e7b-82c0dd0db967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c68a6d4-14e8-4a59-b2fb-e8650a5a26c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ca5933-1424-4984-b42c-ad08926c01c4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9e2057-ffb6-43b6-a773-4f5a744f8981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ec7e3d6-3cce-4518-81b9-98ba27a66d5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e24d743-67c0-4aa0-a2ee-47a745c24032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa52855d-6901-4d84-8c3c-49494f984fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd76509e-3288-48e0-b150-3414b42f4e94",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d00b5d3-ccb3-480e-879f-a7be3dc3db2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f7727d-0bf5-4559-bef9-afba37f03dbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f38b8b-936c-4f11-80d0-7fc443c46a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "577e0122-aad4-4df6-b7bd-dcab2a96b0c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ff9037-1cb1-47e0-b950-4f8f67326aae",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "514ba878-2847-4cef-9395-dad88cca9d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08fa2291-1a22-44dd-bcb3-ab88efe9acf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c01733b6-ce1a-42fd-81da-da9ac8f847a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cba6e095-29f4-4cec-8c75-f40790fbeb93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94ff2ff-5665-4001-98b9-411c73ec35d7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc24c28c-624a-4ae5-acc6-9e3a3867a295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b68027b1-50f0-415a-b40b-5b41551e316f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9caa234a-6771-41dc-95c3-4f04137a0b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e04dfeab-a268-4a53-92e0-c6078995410a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc5a0984-d30a-42e2-8eba-ba5c3a4850af",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea86619-413b-448d-930b-d595baf56ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "747dc886-4aba-4ce0-8576-94b28bf6ae64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e679ef31-5bdd-4b62-82ff-7396ed3f8e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab99b73f-51a7-4fae-ad9a-414a705563a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c57002-756e-4264-85a4-6f7a6303cec7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45df2528-01fa-4723-ab06-0c1cea2bd0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ed4c4b1-38e8-4280-b59d-5067061048a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ac3d56-9c67-4680-8ddd-c0d86637239b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f50446b4-729d-4bd9-bbb6-62e97d12ccbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f3293e-6f0f-4c9d-9fc8-1e365f7cf065",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b20735df-a70f-4019-ad28-06e0fd5b5026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd27bd4a-d507-4c44-ae6b-6fd75381f6f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b6c422-8335-485b-b1cc-46eb504d5b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cf89ef3-61f0-4268-8ca3-468a7cf62af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a0f9f0-1822-42bb-8683-4f26dd7abf74",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc5cd6b-7f1c-4086-9dbd-a0debb5231b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7a58eb7-d2d7-4347-8feb-46bddd0e976b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd0bab9-97d5-41c4-8829-66fbe4ea9d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5282eb53-870a-4e1c-ad63-4dd79c06bb98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20743ae4-d6ca-4fdc-96f2-251eac9a99f9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670b47ad-392a-4ac0-b1ab-12088ef6c01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f04751b2-11f8-490b-9a2e-51fac5d71dc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a340513-0369-4556-89ca-64bb869052d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad3caa8-d159-403c-bbd9-eab0b2144734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea336074-10db-49ec-bfa6-1474230e203a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc68c9d7-36dd-48b1-b23e-ed34468b8498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a94ccb57-7d00-48fb-b72a-31cec04882b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fe383f-55f4-4e83-b221-06623401c5db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e4e1853-66c6-46ae-86e3-d23c90706b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1719df5d-4e94-49ad-b6a9-c0f79eb2cdd0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a9e94d-3cd7-4a6a-b429-dc95e4d30e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f9bd97-0cee-4ed3-9f23-b267c7449418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "125b913c-2b57-4322-84ca-191eaeef2eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3632ad75-8dcb-4205-8182-9b2198fc8c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dfb38c7-c4d3-4e6e-859d-756da2e73921",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1033544f-b958-44d2-bba1-861a47ded9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f4a5029-0f7f-4ab7-9b90-26e8d6eb855a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed3904d-95a8-4e44-b476-a22bdafd2f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c26189b4-fdda-4c80-b778-55fb020c91d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a375630a-2b1f-4700-860a-73af89831367",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ba397e-4981-41eb-8c54-2e98b30abb60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e625f90-2e39-4eb8-80de-012c83e8d502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e788fc6-7651-4648-9c98-ef62032662d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39be8c9d-c321-472b-9b10-425b6991bcca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c461a331-40bc-4a89-99fc-589799923d2a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf68ecc5-3a15-47a3-8505-90c1e1a67ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a196f383-3bad-427c-9c5e-94c7b22a1bab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd49348-26c5-494e-852f-2463a71cb33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "624ee7c0-834e-43ab-81b9-767eb3165772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e0bc85-78da-468b-94f6-ada26ffa386b",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3cce89-6a50-43c9-96be-aee6339e41c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f66f94e-a8c1-4262-901c-4d45b7b4ffd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4291ea82-e619-4c58-8870-6f03a152287b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4b19a76-c098-4b9c-bd94-59b4b1fc4575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "facfaedc-97b1-40fd-ab9f-7276b3ded21b",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ae8ff5-ff07-49ad-ab76-3d4acf85a4ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab5fd2b-36a0-4b55-9fb5-8bdabb08f00d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f4b08e-75c3-43b1-864f-fea65cfddf85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "664c06e7-5e30-4ce7-9c55-dc26972a92ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb417dbe-9920-44ae-9a05-82ef012e6caf",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ac8454-5089-4cd6-ac4a-f5dc511e04f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "313b8513-3d31-44bc-9d88-f62320217b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5f7e99-45c4-4913-9a0e-6170d318a11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "beefc871-4f90-4af0-8a91-b4a1bc1e656f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccccb8c6-7b36-404c-9dc5-1b3471d7785b",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c26acae-2331-4a62-b89d-60cf1f707b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba4e2942-de91-4082-ad43-66732ab6ed27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7407d456-6474-4415-8ab1-2d58a4c0d2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3063851e-53db-4170-8d92-67944e697f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d11d05c-bf87-4e03-be1a-71aaa4343b73",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abee0241-2035-41d3-9a23-de30d81ccbd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7404b724-ed97-4bd7-804a-e6c568336dc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f32c99-d204-4d17-a80c-738f8c4f6d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24f9b627-9b73-49ac-be32-96c4573c3d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f7b030d-c262-4762-9e07-2a7d60ab7232",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba67ec3-c210-42e1-be77-c6a2cb6f78e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ca4e644-edcf-4b55-82bd-089af82f321b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc3d18b0-0420-47b3-b822-de9894d9d803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5056eb-d045-4db2-b585-2729f17c165b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e9a9896d-3435-4ef4-b91a-f8c8f9a97eb2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d34c2aee-4577-40dd-a98f-2e6f3ac0c3e0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8223c001-a8b7-4cbd-bcf1-eb1921a18bbc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "37fbafe2-2b28-4698-a943-3f84c319abb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d4e01b-fc90-4c5f-914b-20075b55eb48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc2b57bc-50ae-4292-b7cf-c28a5b1c77fc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf078ccd-ceef-41f4-98a8-e480852e073b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b8741cf-287a-4f65-89b7-7005037d0161"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9281e903-1050-4097-ac23-d0159a557837",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "032b5223-5e53-45c1-8712-c20e7bbfd5f4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0380f7be-222b-4c8c-be78-88f8b96adebf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "be8d16df-1260-406f-abf3-b229d5ec3a59"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "38680850-3a0c-4558-8dc4-d2dd4e1c5da8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9afdf940-ac26-41ef-b478-4527ab429b56"
            }
          }
        ]
      },
      {
        "id": "35cd0c7a-4d4f-4aef-9e6b-2fbd40c8a8a1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c7204966-cb13-4617-8a43-35fc99b4a91f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "954e2b5d-18bb-4a5a-9db3-c4187ad4b9dd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f38291bf-e2a6-4490-8643-b7379065d37d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38fb7c4-42b5-47dc-ac4d-05024287187a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255e5502-adc2-4da6-badb-500d87500625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f8f48b-24ff-4cca-b6cf-431df679a2d2",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52bc28e-4b06-43bd-8622-58bc8021e92c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7d4717e-6fc0-4872-aa5f-8f9ad27c361e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9b8bf2-ccd8-4c6f-87a5-e5e64b6264ef",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e6509b-09bc-4b1f-b286-d493477e1490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39aaf7f9-a71a-4acf-9a5e-ce032421fc89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd2d22dc-86a5-41c2-a0d2-f6ac46036669",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75209ef-2c0c-496a-87a4-14313fa81d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24558a42-4cc4-443a-9ccb-e2e6c8f0adac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c787c72-ec87-46c3-b242-422c9325c3a1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34dbc8c-944b-43b6-91db-8ca1d4d21f96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc14a90-09ef-4702-858b-4ca1a15210b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1c23d0-e99d-49d5-8d11-08949246f87d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d29803-0653-4a67-8118-4e9880ac3ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b0bda63-3a62-470f-a412-2a42e3ef9317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c588be0-f6a7-4d6a-8f6b-280dc57c9e4b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144fc345-f4b3-4a4d-af42-7028ee05a334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ae9ecf1-3497-47c6-a293-f2d35ee075b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76405790-266c-43fd-bfbb-44b0af5ce149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8836dd0-6608-4144-87fd-9a496196c7b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e64356-5c1a-479c-b2a0-882457827bd5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a191986-ab07-4902-974f-eae250aeaa0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cbbcada-18dc-438e-a0c8-ad8687e69486"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3d1e1e-30be-4a36-96db-0c3b8298092d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d1e241-e467-4197-9849-7604c89fc7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3814a13d-89ae-41a1-80d0-a5fbbbfef997",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c9798f-11dd-4435-a172-0e59480c2890",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "366f1747-88f4-45dc-b7e0-5a7e7221d27d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80cd97c-4732-408f-9ee6-3184e61e895a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "007643a4-06fc-4cf4-8187-f2dbaebf1955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d16de87-92a0-4ea3-b990-eb92957b8008",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d857f3-2bfd-4f60-9568-b8051df93813",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b19f6d50-6b15-4b2a-91cf-a81d57a9ce7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e077bf0c-4170-4922-a8fa-4153092b5366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89c41d33-21ef-40de-971a-66c636b62813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "366bebac-74ec-4777-993f-e0cce748af67",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d4cdb8-2072-4e12-86b5-0c90992355ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae6ee9c-82ca-4f73-826b-4c257ac203f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51fb0cfe-9252-4b30-bd33-b1ecb0273ec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43bbc13f-8ea0-43ae-b630-2d38b01bb269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d25952f-a1c4-44e2-84c6-4ca9c9e2b796",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73081029-c702-433b-b645-7851359dd123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d31fcffd-590a-4c9f-827c-7844d5868988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e41d71-e1e5-412b-8023-ffde8b014057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "092bc1a0-9b95-4aee-a175-f80c3f5470eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "526cdcca-546a-498a-9bf9-36a0dddf2948",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29d2d2f-34c4-4383-b599-bd5605f5cdde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c1c6718-8f6f-47f7-8d22-e3a9277f8c2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e22ee81-f064-4a51-8456-c8cca51d31ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88cedb17-7e5b-4c86-b26b-2e73a4be77b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7debb749-3e40-48ff-8e46-56b0aa89500f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae3d3d0-909c-4dc3-a02d-1e6c3e656416",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3622f3f4-f314-4a54-822e-4d9d3905e39e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2321fa42-188a-439f-b465-7c310ccac517",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6214834b-a760-4118-a86c-fca2fffe3c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85dce0d1-21e5-441f-8e96-b32c8e02d1d2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74b9c2f-2a1d-4549-aed9-d58f489cca14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ca8d73b-2147-4109-a6dc-6f0a17fe504c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b39cb6-ab4e-410d-b7c7-3ebb7f5e1661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "144a7627-a35e-41d7-aa67-4c9bf9640039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89085b01-e1b1-4280-bda8-724dc97725f2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2526e6-9c3a-4069-9bcb-1776effa03cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad34cfd7-74f7-4396-aacf-0f8277abe3cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3401492-945c-42d3-9fa6-80ba10e098d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfa7611e-2160-4571-8049-9aa61347aa7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae1df3e-97f8-44df-bd77-4ab77a970472",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb5a5f8-bb2a-425c-96e1-d01a49555ead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9715b9d1-cf08-4321-9d2f-2e1d3d354ad4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0eb165-0126-49c0-b7c0-11358954857b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e99004c2-450d-4480-ad71-22deb4f75ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aedc5f6-d4fd-4514-98e9-219efd3a6df9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6238a0ed-fd9d-4a44-a1e4-b2c0cfa516c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2199adc3-6eed-4145-a88e-62dd32969caa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f2f1a4e-9ed3-40c5-96f4-3fffd517f4c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce503da1-7a1c-4705-b331-b36833582288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c5446ea-dda6-4727-b4fd-5174479aa1cf",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820f6857-6a3c-4a80-9ba2-42ebaaa1007b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc23bde7-dd93-4835-a462-ae360f508862"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd104ae9-50db-40b9-8da0-1ccdc914f27e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7570a54c-e1fc-479f-82ce-a3f3703a62d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05399578-ac3e-4fa2-868b-494a71596fc0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2b3f94-a144-4238-81b0-bc3e1007713c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f166bb12-5d78-4908-a46a-e21ddc76453f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4eaae1-e18c-480b-b70a-524718ea59fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f614815-534e-4856-be47-c6f68a43ead6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7fd87fb-e605-4aa7-92c2-575ca3b2231b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1c9b7e-f7ed-4e44-a8b0-39c5ec2b4f16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4381666a-49ed-4546-97c7-5a56962a528c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab844aad-f11b-4d4b-8a20-559037ac7843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbc56529-9d42-436f-a976-8727caa2eabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972f3b85-15d1-45da-b887-1d9c807e4e11",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bcb439-d197-4c68-adaa-39b05e1dab35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35bab1ee-465c-4bd5-9357-0590eb784c76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "758ce7a7-bf9c-4d4c-b19f-32af53e55cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e20e12-fcad-42b4-a191-baca4832761f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d836af-fd3a-4d5c-b787-ad85eb78ebbd",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2317bf-64a4-4a82-9ade-82076415525e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7635afd-f5f9-46da-8193-5abf2cd71bb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55aefb3-0a09-43ee-9971-a074486a3235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd8f80ee-ea47-43b0-9a19-add903a5fc2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2c64ac-556c-46f0-9194-32a5475230bd",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72e41fcd-5e57-407e-a17a-d45481c8cc2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fc8626b-e484-4167-95f0-3c5eab8d0b9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32115419-a246-4145-8998-99a2434e5bea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1083cb7a-0f3d-4ff7-80d7-36de18e103a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a7b97d-6d6c-44ff-860d-be2da6470d4b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29cd90e0-7d81-4826-ad96-61a7493e863b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "919e421f-1594-4834-b652-fa9023b380dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be8cb131-c20c-4491-8846-c7b66f9ea39e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17d84a40-c865-45f7-b3d3-46cc74944bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b0c726c-be08-408a-918c-3c737bb69161",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54bab4f-878d-45a4-8d1f-eacee5a69de7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3742930-1e7f-4b5f-875c-b5342d95d14f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e640c69-2d7d-4636-ab8f-19f25d4846fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d95806e-d654-4e15-b71d-ab3bf4264856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30fd784-65b2-4ce7-872c-d8cc4168973f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad542466-7172-428b-9aca-f23929e79486",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0559cf5d-cff4-48dd-afc2-526cd750d33d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93689669-7736-401c-b34a-e71eb3b4fe52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f14d31-50f0-45a5-960c-647ee67adfb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7a46a5-8c5e-4a71-b850-54a9773129c8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eee141e-09a7-4242-972e-7d0680382eea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdf12177-3dfc-43c9-86a6-303d2d09f59b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d18dc0c3-ca8b-482a-a2f4-d697e739518f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c92a6ded-a871-4a1a-bdd9-545b83631548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2c3fe9-5c8f-4ab0-85e7-15f2cbafed57",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ee48ed-9635-4906-93ad-d16eddfcc087",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26084f20-82b0-4ad6-8455-187396450517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6225af4-c6df-4754-acab-5d7c400da0d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a6a921-2459-458a-be0c-6fae8aac70a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52361d1f-2c66-4567-a8e2-7879361ba934",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b9f82bf-3a1a-4970-87b9-8eb978b67901",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba6cacb5-a90e-4e06-aff2-47d57f6904bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d78e41-11ca-42a2-ac23-a2fa0c286c51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f80d998e-7c74-4ccb-9ecb-5e7ad338d1ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb02cb2-1b0a-473d-9f3c-292e7da24964",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d558d3a-10d3-46be-ab1a-c60e6e8787d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40453cb6-c120-4695-b272-f11006d5e2dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84d624b-6b63-4c0d-8e3b-627d8aa49505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "323de4c4-d29c-49a2-b6fc-686efa302a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "105496a7-6c1a-4120-902e-4109bce320da",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711bbc18-9ffd-4b41-b2a1-2988f611f58b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f731bcbd-8c97-42df-9081-16be979e1d89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b58bafb7-fb9c-4f5e-86ca-d3ce920700ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d22fc418-2d9d-4ff6-b645-c8f73ced7bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f538e1f2-460c-4e5b-bae5-e9cd3957ddc0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0064fc3-5bed-4765-9922-318c550f9e64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc3db919-caaa-4ca1-bf65-cd083446fa1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d730a0d1-d16c-4688-81e5-31497d1f4893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0902841-595f-44b4-819f-556da497eabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f59fb9e-bd27-4929-94b0-d259e1f04cc8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78cfdcb9-9fe8-4ad0-933d-fb5c7260e0ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed87a808-ec58-48f5-bf41-e62786e43b0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f8d2b65-d81c-430e-96d2-149394b020e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43dc1f3f-dd53-44b5-874b-6c696f784659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc960a3-70b4-47e0-9a3f-cfeb2bc66c98",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67b41a8-38a2-4775-8c95-a6ff0d924fbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "827f425d-87ce-4657-be74-3e36f46087ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed8d79d-6ad0-49d8-87e1-8e27fcb773b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c388cba-e1e0-4f1b-8135-02e68f69cb09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b50213c-3b5b-41fe-a588-27593af8030d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "126330f1-9cbe-475d-9a9e-fbf160d04b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe887d97-8a6e-4a86-8b28-8c4422d5945f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a2b680-d3e8-4b51-ba52-f10ca74f215d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65611fc8-4ce4-4268-a205-5fa79714ce12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d5866f0-bfba-48e8-88a6-dfdbdb9de903",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a85855-dec9-44b2-b77a-54d37938d54f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f9e9ef2-9b0d-4056-90f1-ce4f5924c4bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "566d4c88-7164-45a8-a207-f5306145c471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d89c9db1-aec1-4001-91a5-1b77969bd0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b3446b-c090-4125-a52a-55bd88e93d1c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c2fab90-f5a3-44d2-a47c-7ff44cac9ab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "161cf955-46ca-43d1-b51f-65f87a9aa426"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da41b66d-2e9d-4ce3-91d6-d955185e9fd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a2af75f-4481-46ad-a11c-bd8648fe7472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c457551-e260-48a6-ad73-0539bd7791aa",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07cdacb4-e6b9-44ab-950d-bb1664d0f600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81d85580-2e94-4f3b-9e9b-13d7253c49bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2efa11-3ab2-4593-ab65-2dca23fda6ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4ddd665-e00b-4817-8ecb-c6c0279af08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a3ffee-e4d6-4e77-af35-2a250f0bbe49",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1a2b50-9ec0-418a-a4cc-97b879191b15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "537fd0e0-cd64-4063-90e2-989480601936"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "469634fc-40eb-440b-9ea8-7da748a7cccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7260e98-9522-43da-afe3-97df3566e312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e75ecba7-4741-470a-9e57-6ab4f1474378",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f5064f-20e7-4370-9ed7-42ea18c73d8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df058416-6ec9-4201-a8b7-b7ab63e63ee5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31fd5248-fa89-4f77-b5e7-1a69e0efc1eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd17360-5408-4b45-ba93-ac265033ac66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db0089d-b236-48bf-91b6-46d9cb473c9f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3224c37-b9d5-490a-96bf-5816d7e0559d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a761c9df-5c40-4f84-b8db-ba19d86513e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b993a35-90b4-45e4-883f-4d2857148c25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead376c0-25cb-49e3-bf8a-29026e4e078a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e64cda7b-e7f7-49b7-9c95-07d0675f8a6c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ced6c42-95c6-4b20-a64a-c142ad030d17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a42bda83-c780-4447-91d0-50e86f41bdcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e889ee1-4bbf-4782-91f7-15a0c88e546a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18cd7176-84a9-454a-9e90-5cfc7d245d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722bfe68-f2ca-459c-bbbb-b46a2ab529b0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549a2ec8-6802-44f5-bd10-dc1ac3bd7dbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4426ec-ff0c-4f53-9b74-81923620f407"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f2c310-b1be-4b08-b14c-0d540f09f66a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0badb27b-3997-40da-95e1-cf9667220b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94200454-ce4e-4a3b-866b-aa9d5c175d2f",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46fd752-2f04-4486-adc5-701580391a44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "611575d5-12fd-4cc2-950b-535b7d8735d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d353dd6-849a-4043-8ca1-8ba6be54afb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeec40f7-5676-4bd6-a29e-0a825b2cfbb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f97d2c3-d012-419c-8608-8f832d4cab37",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ebb1e3e-9ca1-4f7a-b632-39283ae99835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27381b23-9711-439d-82f6-5221995b4176"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abbf7caf-3d2a-44fd-9314-cecc63468969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6343c3e4-8b3c-4ca7-b999-650b3bfec09a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e55af9-8138-42b2-bce4-4f7efade76dc",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b619dae-19b3-4707-b21b-08a43011b218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fea8073-a8d2-40e9-a7e5-a445e6dc912a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "044df11d-4df9-4b55-b8c8-bffaf2766625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "320e43a3-c283-43f8-a41e-3dcfce40ccac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0738dfb-5ce8-4ec5-af4d-fa7e8d03d32e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc2dde7-7465-401f-a9a7-5ee2039cb97c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d69bee-cacc-4684-99b3-114bdb74d28f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9600a0-880a-427c-97ce-b4784a5e9661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e2c8ee-5a11-4ad5-8e45-7a0ddd1fe71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2160536-2e65-4668-800d-c43da4eda7e7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94442322-89c9-4b96-9ab4-19067e45a96a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "911761fe-f3a4-4258-ba43-e08f79d32620"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecb8431-e854-4273-92cc-416043124161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aa2c180-c0e8-4cd8-ab80-a7a97527d9f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf62cb74-03fe-429c-a665-483aaafd8e15",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c766375e-4ef0-4181-8e4a-2c537f7406f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82cbb210-0443-4f2c-9e1c-c05b1e25f8a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b1aa82-1cd4-4146-9b82-12d692ad0545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9057e4c-8603-4a9b-a0f2-f6233451b4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca48cb6-94ca-43f9-be7c-1fd8982f0a0d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6f4051-4d54-404d-9d1b-8851c3cf253d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86a4dc09-301d-41fe-bdb3-518fab3c02d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a0e99a-2ee5-472c-8fc5-06b58c844fe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81beabe0-06f1-449e-93ee-1ed7c1a85b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a9d29b-16af-44fe-a47b-6508ea0df7e4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d8939f-4a62-4e37-b3d7-112440a46b1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f458cbe-3f67-4fa1-afe6-5dfdf4a25ee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bef3bd0-9e04-4ec5-8fa7-9862007d2943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b5df4ab-c7f5-4322-9551-c2ae317f5c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65dca458-bc61-41d4-86ee-1acbeffde92a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76bde4ed-5cfc-41df-a92a-7f1faa60598c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99463a39-a937-4ec2-8a66-73c157c5413a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb172f4-d3a6-41fd-8f20-eddca13f77de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0661d90b-c780-4b75-8d0a-d4b6c5a715f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2562f23e-367c-4bc4-a612-8487e6f93201",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "052fa16f-fa83-4bbf-88b4-1c89337cfd0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddd14d96-54f9-40f6-8bde-731d722bf6ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "118299f7-a497-472f-b709-a3734a940f49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac56e81e-56f2-4363-a24b-b3864b3f4d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d3e5f8-763e-4a8f-9575-9e1f681c9d8f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb666cd-24f2-4a4c-abf2-bef9d987f2b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "133ef7e0-6cf3-409a-a91d-9ef5aed219f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3458c670-1a43-47d9-8001-72c9a14ec7bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f661760b-7cab-4aee-876f-be85886e38bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc32078b-fcdb-4d8b-b8f3-52b01d890d23",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c672a6b-6f41-4723-a2e8-dedcdbf1eb04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cdb3808-9144-4961-93d8-b8641a9a89cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67921beb-24f9-4b42-a8ae-027acdc7b18f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31d465a0-cdf7-4158-8cfc-4cc7c9b3b78a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b489ca9-f5d7-4d93-9d2c-e6af90bd4994",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b46783-5146-4a52-979c-97e637b7b59d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5c324ce-efb2-4f14-8f81-642dd3939d77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6083fe9f-6006-4fb2-9c0c-6ba02235f5a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0688a866-78f5-4c19-b42c-0c9f5ca80be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c56b413-501f-4653-b84e-4964db0c75db",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cfe0f20-de8a-4de7-b157-75954316c538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfccd32d-8a4d-4f4e-8f28-ec4da3080bac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ebc2fde-3813-4fc3-bfb4-80975a260b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8befc934-f615-448d-815b-8f7bf4c3a5d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455140a9-9327-4488-b448-b689559238b1",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c929a11-3d56-4057-a995-443d05cb97e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ce61f2b-d1b2-4ef3-a9bd-58bcad425e6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "436426ba-0df3-4282-b387-659dde30f1b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faea64bf-4e6a-47d6-a17f-3dcad5a8a0ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b028bf-0f50-4ee9-a8e0-e1c7e05407e5",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af35d98-f018-4a08-98a5-cb30e449bb81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5de39d59-3d40-4f43-8c5f-22cd2f93d89f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "928a891a-a587-4f23-a75d-edb0e04fa681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a99ad32e-e53e-47f1-b635-922b3f330a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99402433-acda-4445-87de-aa25d14571d5",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b5628f3-8776-4a75-9e5f-bc24919b5c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c57947d8-8047-4f8e-a2d4-7794e93bb34c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5935054-e64b-49ce-af00-955e2ebd26dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "871952e9-a9bd-4853-b0fd-77caec880fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eeaa0ea-116b-4653-9f21-5ed933ff7375",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb53f48-b9b0-4972-bc4a-159a75106227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c99c9f9-df88-43b5-a3d7-fb10b13b65e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce0ece4-fc9d-4737-a4f9-f6d08c0c4b41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "014f8ee2-80af-44d3-91a7-9ce0815b66ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a7c591-de4a-4cef-b9ff-7b98044dc663",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8fa907-be07-4897-a590-3767e869996f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7f0a1e3-4aad-4bc0-b40c-bfd63a946887"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b25e5a-0fb6-48e0-a2d5-742d6461a86e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e1cfc6a-0ec4-42e3-bcc3-7d114b981dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941863c5-ea9d-4487-8e82-6dbe0fb190cf",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68cca28e-c5eb-4776-a8fa-653dcd236709",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c1865e0-8e9d-4368-8484-bd047284bfa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2a6ae0-aa09-453b-8f7a-8b67affba1e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b826c40-6315-409f-a5b2-b0dcf0981f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a300cec7-a228-4429-9705-87b9deae1801",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00692615-e906-45f8-92e9-18213a9db760",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9aa427c5-d158-4bb8-a7e1-b2c248511d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e6973c-cfff-4fda-89a0-6adc5434f482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d6e80f8-a7df-4262-b65d-3c4699dca155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f043685-e9c6-416c-87ba-bf848701c32e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ff2fbf-7f9a-4e5c-9a4f-40c5b8ab0cfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf067a60-0ca2-49d1-a968-3e7d81e1b91c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e50a82-a295-4185-848a-3aa1d4f4aeb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eefe1fb4-e4aa-43c0-a692-4f6a0eb2e1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c494fce-80d3-4588-8c7b-47be16a63b5f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b2914f-1f27-425f-b77a-352e368f4ec4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14664a6a-6ca0-4802-bfd5-5ca75fa85dd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3289bfad-1b0d-4333-986a-afe34b54fc91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df461f48-64cf-4e5b-b17f-2a4655a32836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4fa9406-352b-4f24-96ad-1cdf92f130d0",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "344b36da-df44-493e-9537-5935cb509ace",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "060448d0-9c37-4537-afd7-403a698fcfcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19994342-4606-4c41-8f79-ef40b5d978d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef9255d7-06ac-43bf-897e-5c084bc649a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde0fcef-fea4-4583-8662-2a9f9c02dd3a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ebbb0f-0af3-4a7c-ab6d-0be8ec6ad55c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eec64020-cec8-4a06-a3ae-d06be149fefd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56398fb-82b0-4e13-8558-e873f0ffbf67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "173c9c1f-f657-4c98-9509-273cc725b5bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197e932f-9626-45c7-8f06-143a0ae0b332",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "183ec838-c61b-4c65-b1c2-efc7171f0fc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6da9cd21-c7a4-489d-8df9-66645eab56de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe8c96e-c2cb-49e5-a4e8-1cac131b41fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48fbfc9-1cc7-4c3a-b4cd-bb589a6082ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0597cacb-bb4b-4377-8eca-3fa8c7d702b1",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ace9917-fb8a-4a5d-9de7-566857a29579",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f59d168-10ab-4822-b0ce-608aa64114db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44aea305-d005-4406-a2c8-0ffddb133374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af89af45-8278-4028-a99c-e7bf340eccbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232814f7-9ade-4830-bf93-40d601994b1f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4323cc-caf5-4f51-a4cb-5317416e8118",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90c447fa-8491-4302-a824-d79f060925c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b45565-f190-459f-b480-4f7cb2e1fb85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28b4a6ba-cae5-46fd-a9d1-0644a42521e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540b7365-6d99-4f94-b38a-2c049bc0ba1d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afbfd169-592f-4da5-881b-a3a19a25262e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22a1b56d-5b00-497a-9e1d-0e455da49856"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a29d64-6ee7-425e-a387-908d50d89c60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bae3274-655b-492f-95c0-ef89f2686d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a6a13f4-46cc-4763-a5e2-57919f9356da",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a92d33d-5631-485c-95b4-f62c56f8157f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7200fdae-7bf5-44be-9b6c-2d2d3c249e8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd00fc24-5b31-4ca1-85ae-50333fdd01c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "130f1843-c207-48e3-a66b-41f5ff4b9c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79793aa-1de1-43ce-a097-455df5eb8869",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b55c81b-20f2-4398-acfb-01bb002f34eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cf6d075-34b0-4565-80bf-28c253fbda17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "479294cf-0b1d-40bc-9aa8-ba778ce1593f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba7e664b-1225-402c-b432-23185a2f39a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30aaab3-e28e-40a5-8672-0a86894c9571",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a2eb0d-47b2-4349-b859-807248cbed85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "776074eb-8b4a-4468-a6c6-5867af33842c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e9fe7b-b3c0-4182-939c-c662fbe61542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2178c81a-c499-43d8-aa78-6f3dd5f12b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b665f9d-28f6-4c04-8530-bea47726e077",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0cb5e0-8a9f-4e96-b93a-5416b8c74813",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d887546-422a-4af6-85eb-5404890905db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd94c4c-3b36-4d60-b1dc-bac18b90ae29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4e437c1-ff29-49b1-af0e-4863a26a4fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0896d6d-1e34-4fe7-a53b-857d3e96ecdf",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b829fc5-db92-4379-b57a-f2f5303cef65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1995b4a4-3980-4990-8b0d-901c3842b410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d32a79-3f2f-4f36-87a7-e58962df8718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde84eaa-67e1-4156-8c2b-248477c89d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e53cb33-c92f-4551-8145-7b596d8e6dff",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c48d603e-12a9-40e1-9c32-a90ce0ac6c0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af92f798-8c77-4b40-a7c6-b3414a1add0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94630135-21ca-4586-bb64-a22e426efe00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c67d2b6-f913-4c2c-8231-ff6c69a1212f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c735992d-da24-426c-9aca-fdf06af3b307",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b179775-6700-400e-b581-f4e26934a147",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c87dc842-b6e1-48c3-899e-b3fb96de1fc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4365ad61-b2b5-4f5f-b180-93cefff36cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "416f83e2-fa17-421e-8ab2-5b6d0f3a85a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b9db764-0c51-4b5b-b21a-aea1251bc34e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0030f5f-2fe2-4c4e-99d9-0fb030b0788b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3684cd47-17b7-420f-87f4-3e1a152ee000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a669b52-0f4d-4d42-9c2d-f62c4c292d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0c5dede-7367-48ac-8750-6ab6f1353b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6337966-a758-4681-9ef7-4dc9f35d65be",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a9004fe-4f4d-4471-81d9-48d1ac008ed3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2825c465-b81d-4623-8245-2458bf0826b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "823c3538-2abc-4807-b8d2-3ec9d2eee945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "601fcbbe-ee46-4841-b85d-f56c899a5bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ee5c04-1927-40be-af18-d301267f3286",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef0c313-b6cd-4a1e-916f-1301aa1ea5b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c64eae0-b38a-4af3-91ec-fb3d202f1db0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c29b7a7-c598-4ad5-8203-f11fb0b63c51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65042f2f-81a2-4dd8-994f-24f536609fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93abb70-2118-44c2-ae75-240cda7184df",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d61f5b4-cb3c-4fd0-9263-61973ecf208c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed6d0e41-d04f-40de-aa6a-45a7a635b83d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "191a6275-53a3-48ae-bb79-a3b24c836c9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33e6e88f-48ce-4fbc-b7b3-de9d7e9a5df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2f635c-01da-47dc-b956-a8096e4593f6",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4666897-f961-4a37-ba00-21d234af41f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2292cf5b-9444-49c5-8adc-51cf1274bae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bfccbc0-ed11-4261-be82-c792638ab9bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a22cdf6-62a7-4d0c-aaa3-8c1ef8e1a63a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a978832b-cfef-4dbd-ac3f-9cbb671980dc",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e446795d-becf-4d8d-8f18-a96d23ada645",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "339fbacb-8487-4037-82d8-af37074af238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3653c6d4-3515-4821-aec9-2a89bae18d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78c3afb3-20b1-4585-ac0d-6b5fb504345f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d28d33f-79cc-4051-8232-de2a0c5f310b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73b57f8-67ab-40e7-9c9a-0f00b483c0da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8f87afc-86d4-42e7-b446-5b5d7d179b8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6202d3-4cd8-4eb3-a838-a4f43d6a4c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e52dc912-b557-46f4-89d8-a9c3047d2df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fded418-c86e-4079-a7d1-ba18b67a9ac7",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a569093c-5481-41b1-b97e-10621a2f2511",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25605df3-c002-41d8-9bd6-62ea1e3bb810"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da54560f-2f1f-49f9-a838-55aa6764926f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a75ad13-714a-40bb-8f89-02902f61c34b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ad80a9-7d7f-4b74-aed9-f3be3f0a08d3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60866772-fbe8-4577-9b52-2034a501d9df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c8f1ecf-3b03-4c6e-8da1-d98e82683518"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ad9a0c-27d3-480c-aeed-4ec90067acc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ee5d9a0-44ee-4a7a-afb1-aec605542f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637e2191-d9a5-4bd8-bd30-c146a3a0a414",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161e5a4c-8649-49a0-b50f-8f7c781e3d1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f1ea1fc-a598-48a5-87a5-4b12abf651bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d72f35-995f-405d-9054-0d86bfb47963",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d9ac4e8-a4f7-4fc9-88a0-3c13f3a0bb4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4417ea-d4bf-47d6-b66f-2362efe02004",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a802b3a-7b14-43d3-a617-186002b171db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "160b5f3b-58a9-4ff0-aaeb-9bad698df9fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25080d1-7b29-4053-b6d9-963cbdf40c3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b5d8ba3-5b09-4b44-a208-e1628fc02477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861aef50-3977-4f3a-9879-2ee6a56b86c8",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d259e060-bcf9-4174-8548-a367528a4250",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaa9b4af-bb4b-4e43-bb20-85816c764786"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e53ed65c-5afa-4d13-a4dd-d5bbcb1739e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24621c46-1d31-4a63-b5b9-813085be399a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d92d5296-7486-4710-aca8-5325962215db",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee321bd-4408-45e3-9563-18e831ee4cf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "134b1cf9-0c85-4a53-992a-87a10c8b0b7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c13fcc4-a212-4d40-ad58-4f2ae02531f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b11cd79-ddc4-499a-a906-e021d23806f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e9fe61-ea42-4738-8925-a2ec95cb1d51",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0217dca5-8f21-4e01-99a0-0ca294e3887a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aac16a70-8351-427f-b6d7-5c3293d269da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b46057-8d4c-4959-b975-d3b5aabe5a2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d65f69-4565-40b6-80ab-ddca550a6241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c463e7-a39a-44db-90cc-9f990fb28c6a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f0671d-0b16-43fe-8a74-7fc05714ff73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82c8ab87-4096-45b2-97f8-8dee785f998d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c17686-7ef5-4a0c-9bfe-52b8b007a47a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5214c78-34c9-4424-ac5e-cc137e496f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5bdc37c-3eda-47a6-8460-5dd829dbe00c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e43d62-e564-49b6-a048-1cdd385f1942",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c51b02e-ac98-4e8f-a250-eac1b75b0ce0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f1ffcb-f46b-4665-b9da-7ad374920308",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a69ef0-3a2b-417c-9043-5e0f2be14442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d417f75-b789-4559-8ac5-e7a30a0a4043",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebcae0b0-a4bf-4316-9228-b64b3e2e0d27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6656f3f-4d6b-4f86-9eb8-a5e6b56747f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e1066a-55dc-4a33-b7b6-3cd7d4607b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26844460-9b1d-4972-b03d-1ac6ba461753"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b588e387-d0fd-44d7-96f1-cf9a4845e8ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ebb4c682-9319-497e-a077-3682dbf428c9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca56ef59-c933-4031-bae8-373151b3ea94",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dd15aaaf-0f2b-4a57-9d81-67ee7a088995"
                    }
                  }
                ]
              },
              {
                "id": "ed476812-940c-4af0-a857-e193733d8429",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b674d258-5c1c-4eee-9f75-527f1b1cf1a5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30f000b-9acf-4f85-8329-511d5bd77eb5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a55869a0-7038-4179-92ff-78c673d585bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9656d14-bf37-4af8-a0ae-08b5529f5452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a475d28-3d46-467e-9c40-eeb16d25c942"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab13c2b2-a624-46ec-9f9f-7b143d6a44d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8a30aa5-eb00-430b-8981-203ea8225db4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9991cb7c-9f84-450c-84db-eab26f3bfaac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e96e063f-9572-4a7c-b2e1-bbcb938b2987"
                    }
                  }
                ]
              },
              {
                "id": "c0fe1fc6-579c-482b-a418-189f279e94b7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6339cfb3-05f8-49d8-a905-60db17b339b8",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a75b7c0-60df-48f6-b3ac-98350e3d92cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "30d02ca7-82cb-4956-9c48-661dfdcf0579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa43417b-5ec5-4fbd-b662-deae34fa09ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e95eda16-097b-4b0a-af27-d8aff3201915"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "62b25713-a0b0-44d1-bd4a-614d72518979",
            "name": "Positive Testing",
            "item": [
              {
                "id": "38e710e9-fe21-4992-974c-57edd406031a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0239154c-7f8c-4a1d-b727-cde9249d25f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "064c267c-060a-4adb-9e64-28c28cecf644"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0306de8-c4a9-47ba-beab-99123902214f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc6a75f3-af97-401e-a5f9-ebeb169cbfa0"
                    }
                  }
                ]
              },
              {
                "id": "2575cabc-1940-4749-bc58-306283ed1b05",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9960951-21ae-4c9a-a699-f60696f6f55d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "fe52b69b-f282-4f41-ba54-9e958ae99380"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7a50de8-30df-4f99-b0f1-18801aef65bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "641853f9-9171-484a-b0a2-5855b0bdeee4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b23c06d-c374-47d0-a442-43030f1b0a9b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e75267d3-bbec-4968-bb74-7ed061f44257"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ed8cd34d-8819-4347-aa63-3301662c8584",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f9498174-59e8-4fc6-afc8-221a91348065"
            }
          }
        ]
      },
      {
        "id": "9584b020-d229-44f5-9838-6485e075189b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c6dc25d3-1600-488d-8546-75e94a7529de",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df221be0-3d7c-4723-ad4d-f1b1c4c2fbf9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d0515782-adcd-4512-8315-b6255d15c3e5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef824f0-bbe4-441d-8d18-7e31225b426c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0f1f5e44-e900-4dad-9290-36484b12699a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "950b4624-ee31-4dc3-89a9-5e2768b9829e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f43af17a-daf1-40bb-ab2b-4c09740e8ab7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c730691d-57f3-4e1f-87fb-64acabe4930b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15d80945-0bed-4119-9207-a6ecee0a88df"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "68f4a5e4-0c01-4aa6-8cfe-d545bd14ef67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "343215d3-064a-498b-a938-f04aa134ff11"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "92857284-c846-47ef-b39c-3a877f2695e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ffe914d8-aec3-4be5-8862-90232c3c6269"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0a98ddad-90d0-41f1-8e95-b7e1bb93ab8d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "81c11fa0-670e-4e9e-b9d5-8f11e2425eb2"
            }
          }
        ]
      },
      {
        "id": "e7398e91-b48e-4fa3-90b7-df76aa18b1c6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7df6e9a5-a720-4c47-ac98-dbb054bd48df",
            "name": "Negative Testing",
            "item": [
              {
                "id": "75b5f810-f69e-448e-8b66-53bb20fabab2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "794ad1aa-76cf-4593-8d76-67fcbdff9104",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc78be6-9c55-4f5b-9c7a-b018732f7ddb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e92c6f7-f325-4bdf-9c84-dd7a9e59ca80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca94fd71-dfdb-4326-a07a-47e95450d9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29a84e14-be79-4f67-9201-941606c18196"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1dca5b2f-82f9-4fb4-87d9-353719d98a8c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d43ce67d-8346-4a0e-aa3d-f3d72dba6619"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5bca7cc-548d-422a-9f74-5f15f2b18feb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6bd10028-14fd-4b2d-89be-e378143c3490"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "60f5251d-56f0-4826-969f-d205cb162431",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "81df416d-6eee-4483-9076-28b53f9ef5e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f067340e-5063-4661-84e1-ef77e72f7b9a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0cc7de52-46dc-4ed0-9a6d-1c0919efaa65"
            }
          }
        ]
      },
      {
        "id": "f177f4fa-e13a-447d-b430-7f3a3ea2a511",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2040f00d-fbaa-42e4-a4a1-1adbad654257",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9c4f7963-ed10-4282-802d-5663dee81dd0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "92633009-4582-4905-a605-ed765204ff2d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e2b527-c2f0-4da0-8aec-17b28e5d3728",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d7b9f93-0b62-415d-9eee-28acfe909a5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3027cf-f301-4883-9cf7-d6bd44f178de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "caee4b0c-e889-4f7e-9a52-4c32801d954a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4652271a-a6f5-420c-bd29-93ee5195be1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "015afe96-0e55-4de4-bf16-20107a30e0a9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "01de5087-3d20-41df-82e2-69edec1d8a1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9812d118-d8d8-4b39-b506-92ea90804d68"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "39452e21-b58c-4429-bdb4-db2fc5788f83",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a2961aea-9084-40a7-b309-28731647d78b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2df84d8d-b333-42a5-abb4-280dd7ef0a37",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "43dfb8e6-e9b8-4d8a-9c81-389d001b5cce"
            }
          }
        ]
      },
      {
        "id": "5ffc4bf6-c58b-4fa5-a668-734325fd4537",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b58c34ec-7bdc-4cbe-ad1d-501f2536845b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9e82def8-0e32-43c8-8bdb-f89be24002d8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "daa6dbb8-b8bd-4d5b-b619-5b8ea4cdfdf3",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cd8af93b-a720-4e5f-bb2b-efbdacb27b07",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4e7672c9-8e18-4c2e-9ee0-c9efae9b0206",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 62.982456140350926,
      "responseMin": 9,
      "responseMax": 547,
      "responseSd": 67.53714799189892,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1705797595577,
      "completed": 1705797623077
    },
    "executions": [
      {
        "id": "512d2b72-6b4a-4735-931a-fcec35e4f732",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e9243f98-8e51-409f-aff2-5f4f0ca400aa",
          "httpRequestId": "29b3a3f1-9535-4bcc-8b51-fdbae011984b"
        },
        "item": {
          "id": "512d2b72-6b4a-4735-931a-fcec35e4f732",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f43a339d-87ce-45aa-a298-62548d6388b9",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 0
        }
      },
      {
        "id": "8d34c9f2-d522-4a3b-943d-12ac11dee572",
        "cursor": {
          "ref": "1b14821b-cd97-42bf-a037-5f114f426e6f",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0b5c7764-fad2-4980-8626-a840967bc33d"
        },
        "item": {
          "id": "8d34c9f2-d522-4a3b-943d-12ac11dee572",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "773ce460-7ac3-4103-833e-e6a67ef7a134",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "62b131f1-242b-4847-ae12-2f2aaabc10cd",
        "cursor": {
          "ref": "bf865ffa-c8a2-47bc-aed3-96459000401c",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "84f09d1f-ae2a-4528-af9a-830e1d812197"
        },
        "item": {
          "id": "62b131f1-242b-4847-ae12-2f2aaabc10cd",
          "name": "did_json"
        },
        "response": {
          "id": "94d9bf70-46e8-410c-868d-a8fd7581e8a7",
          "status": "OK",
          "code": 200,
          "responseTime": 215,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03fda2fb-3ee2-4b5d-b2b0-1b1daf7b754f",
        "cursor": {
          "ref": "42702088-8c76-4b1c-bb38-5935f72a306f",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c3781aad-8b53-4086-92b7-75f05f217fdf"
        },
        "item": {
          "id": "03fda2fb-3ee2-4b5d-b2b0-1b1daf7b754f",
          "name": "did:invalid"
        },
        "response": {
          "id": "9ce61403-df79-42ef-96f4-54722bb47427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03fda2fb-3ee2-4b5d-b2b0-1b1daf7b754f",
        "cursor": {
          "ref": "42702088-8c76-4b1c-bb38-5935f72a306f",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c3781aad-8b53-4086-92b7-75f05f217fdf"
        },
        "item": {
          "id": "03fda2fb-3ee2-4b5d-b2b0-1b1daf7b754f",
          "name": "did:invalid"
        },
        "response": {
          "id": "9ce61403-df79-42ef-96f4-54722bb47427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f019ba0-8151-483d-88c8-a6cd03f893b8",
        "cursor": {
          "ref": "691de141-ba67-436e-b295-a948aed2591a",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6d1e19d8-623a-4998-a8cb-2e2c50533414"
        },
        "item": {
          "id": "5f019ba0-8151-483d-88c8-a6cd03f893b8",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "32aa3c34-16e8-4798-a359-c740080115bc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 97,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f86a48-77a9-47c8-b5b3-8ff90f0c71d3",
        "cursor": {
          "ref": "c03f392e-c7df-467f-9dd6-c53e66983b38",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9019a80f-b5a7-4ddb-b1f2-81b56aeb1b28"
        },
        "item": {
          "id": "f0f86a48-77a9-47c8-b5b3-8ff90f0c71d3",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "060caca7-3bd1-46ef-b737-a51a1bf62f5b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b14bc26-17f6-44dc-b24b-5ad4dc14743e",
        "cursor": {
          "ref": "97261b13-4fa2-43c0-b22b-1da55bab66ab",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a592f948-40d6-42bc-9dc3-14cebd541290"
        },
        "item": {
          "id": "9b14bc26-17f6-44dc-b24b-5ad4dc14743e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2dadb4dd-1411-4ce2-89eb-aeae07cbc9f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1edce50-68f7-4ebb-94b3-00d6f94ecad1",
        "cursor": {
          "ref": "7a3804f6-942f-486d-b706-bc2b6fb0eb1f",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4de5abca-9e77-4bef-8a8c-f48792d2b043"
        },
        "item": {
          "id": "b1edce50-68f7-4ebb-94b3-00d6f94ecad1",
          "name": "identifiers"
        },
        "response": {
          "id": "65ebbd0c-7c0d-4684-9b28-962408781ae7",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae7f927-a43c-4223-8849-249719ad9bc8",
        "cursor": {
          "ref": "d2521900-e125-4aaa-b049-a56536df493e",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "26344502-d9f5-414a-b3a1-256cacd8bb56"
        },
        "item": {
          "id": "4ae7f927-a43c-4223-8849-249719ad9bc8",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "01804c17-4fb7-451f-b258-c88431b93ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35a4f811-8665-426c-ad4d-7a1b922cd6c5",
        "cursor": {
          "ref": "106158cc-8820-4934-b904-85894b0fff20",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "24a894b5-c40e-4ed0-8ab8-9381f6f61b74"
        },
        "item": {
          "id": "35a4f811-8665-426c-ad4d-7a1b922cd6c5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "511be734-492d-46ec-b908-5b1e33a340d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6578332-56a3-4d35-9636-94f8105a31c0",
        "cursor": {
          "ref": "29865363-10a4-4113-a738-1c6adf88bb0d",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c9e5ae85-ef89-4290-9e32-c944e3dee2e4"
        },
        "item": {
          "id": "e6578332-56a3-4d35-9636-94f8105a31c0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e5a08dc0-45fd-4397-8dd1-b5cbde461939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2acf5ea1-8869-4d17-984a-7ec4ea7ea9cf",
        "cursor": {
          "ref": "3e2411a9-a2fa-4637-8be7-2775de775886",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e1f00362-1f57-4d9d-b402-c684fc2f097e"
        },
        "item": {
          "id": "2acf5ea1-8869-4d17-984a-7ec4ea7ea9cf",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4cc27d84-1292-4a4f-8d8e-958d2fbea812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe9b0da3-9dde-4383-bfef-f4b77a659bcd",
        "cursor": {
          "ref": "ade25b5b-ccc1-4392-8bb6-cbdb9d45984f",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "bf00b420-0fb9-47b8-9e8e-d9fcddddfa67"
        },
        "item": {
          "id": "fe9b0da3-9dde-4383-bfef-f4b77a659bcd",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "3701960a-8a52-4df0-ba75-4ee793a2a783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46dc1453-88f8-4969-afaa-4c88413fdbd6",
        "cursor": {
          "ref": "b739c73e-4dfe-40c3-b800-0e05786acdff",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7e12c16a-7acb-4b25-a248-48b6b72e3008"
        },
        "item": {
          "id": "46dc1453-88f8-4969-afaa-4c88413fdbd6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "08ee643f-e856-44ef-83fb-504df386b3da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8819515f-2feb-4be3-aa99-60ee96d6275d",
        "cursor": {
          "ref": "fea9a742-9411-4a4d-91d9-f049b853481f",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "32f6a3ad-0330-43cc-9ada-060485c01024"
        },
        "item": {
          "id": "8819515f-2feb-4be3-aa99-60ee96d6275d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "06fe47ef-2cd6-4fe3-b003-4d12c17b12f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c835f273-1248-4358-b457-a8c3c1a53f70",
        "cursor": {
          "ref": "595d6713-557d-41c7-bb28-a141e632718f",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e19b6d73-ab86-44a1-8749-5b86f34f42e6"
        },
        "item": {
          "id": "c835f273-1248-4358-b457-a8c3c1a53f70",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8ec11c7c-7e59-4d3a-992c-377e77cddbbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cbd4c96-3b61-43d5-a3b9-06afdd7104c8",
        "cursor": {
          "ref": "a21c020b-dbb1-4cf9-9cc0-fd8669b8408c",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "347504bf-28dc-4b43-b154-b2f7778234b9"
        },
        "item": {
          "id": "1cbd4c96-3b61-43d5-a3b9-06afdd7104c8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7d4bcd9c-41e7-4fa6-bb8a-c96de2b8f42f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7374cba7-2641-40ec-8431-34c332d04c26",
        "cursor": {
          "ref": "bbc2af4e-b94f-4f86-8385-0255437b53ee",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b331ea52-7eaa-4806-9307-9c2c6067e3c8"
        },
        "item": {
          "id": "7374cba7-2641-40ec-8431-34c332d04c26",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "df754190-0887-44c3-aa28-19a1256be411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82fba0f4-edbb-4ec6-b2b8-1ba50170171a",
        "cursor": {
          "ref": "42d4376e-cc5f-4a18-8afd-0ce45285fe65",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2153375a-7097-405f-9723-7ce45d12076e"
        },
        "item": {
          "id": "82fba0f4-edbb-4ec6-b2b8-1ba50170171a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e56fe642-4e41-4b87-b971-b20005920203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d57ed4-fb75-47dc-be1a-4714437e139d",
        "cursor": {
          "ref": "1897a056-a2b1-4a71-bc37-bd5639221f28",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "503d9cd9-2321-4bc9-b87d-b6f49577a65a"
        },
        "item": {
          "id": "d5d57ed4-fb75-47dc-be1a-4714437e139d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2f36527c-ed09-401f-94cc-40631d6b0a58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3deb92dd-2dfc-4311-9cf9-2e391b9fa093",
        "cursor": {
          "ref": "dbf47572-cc33-4419-a633-4d79fbde169f",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ff8d29b7-7492-4dc0-9bb5-2aa2d72eb068"
        },
        "item": {
          "id": "3deb92dd-2dfc-4311-9cf9-2e391b9fa093",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6704ae5d-1176-4012-9dc7-1079b4ce4416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e1907d-e14d-4e3c-b69c-0fd253c6b436",
        "cursor": {
          "ref": "b28eb6e1-1c58-4496-af12-2213b8f06831",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1e1b595b-f71a-4f10-8b16-ff62ee25e76e"
        },
        "item": {
          "id": "b8e1907d-e14d-4e3c-b69c-0fd253c6b436",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3c4c9e8d-da7b-4864-812a-789cd81a0cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c4faf7-fcc0-465f-9d9c-f38dd825b1f2",
        "cursor": {
          "ref": "77b0ac01-c6c7-402b-9c32-dd1dcb3308f3",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9df5601c-27fc-4672-a895-bcb9f826a4e1"
        },
        "item": {
          "id": "b0c4faf7-fcc0-465f-9d9c-f38dd825b1f2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a7c9cbe7-abd7-4cf3-8cf2-10a047769f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c4f36cd-e6a0-4668-82a5-1cab9c95105e",
        "cursor": {
          "ref": "7f4163f3-c91e-41d6-aaad-f4c0fd15da9f",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "575949f9-7597-4e6b-b9eb-f21f3e85c818"
        },
        "item": {
          "id": "5c4f36cd-e6a0-4668-82a5-1cab9c95105e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6b6de19b-0f94-4fa7-bb7d-5947d36c54b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b74cf1cf-0275-419e-a16a-2c6a13445bac",
        "cursor": {
          "ref": "cf95693d-41e1-415d-9649-16ac0652dc57",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b7b29d3a-224a-414a-af4c-1dad95d3ef6f"
        },
        "item": {
          "id": "b74cf1cf-0275-419e-a16a-2c6a13445bac",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7647ca5d-e3b5-43ba-afe3-6e7581e7ea09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "877fddd7-7518-4949-a385-cec55323fa0f",
        "cursor": {
          "ref": "9908e855-9468-417a-abdc-3c494283155a",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c7c5bd9c-3de2-460b-a0c2-a1e630c06b5c"
        },
        "item": {
          "id": "877fddd7-7518-4949-a385-cec55323fa0f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0d5480de-22fb-4051-a844-5f0a91b1e08f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e33c28-4140-404b-8ce7-032c2adfa1ff",
        "cursor": {
          "ref": "69283444-17c8-4d04-8640-614509227014",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8cd382da-8909-4998-aef3-f03beca883d5"
        },
        "item": {
          "id": "11e33c28-4140-404b-8ce7-032c2adfa1ff",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ac359d36-7192-4c0c-8c62-ac47e1bee7a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c41b363c-a26b-4a63-b993-56598e503fba",
        "cursor": {
          "ref": "4514d18f-365c-45a7-8a21-5663b542f52f",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f45925b9-8cf1-412d-95c8-7f10b37bf5d1"
        },
        "item": {
          "id": "c41b363c-a26b-4a63-b993-56598e503fba",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "bf19520b-79aa-4596-a454-2fc08ce8f969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d538c5b7-f8ed-4dad-908d-05dcbe7bc0cb",
        "cursor": {
          "ref": "62ca9679-abc6-4bd0-9012-25169977804a",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a8386fd8-4806-4d1b-bb63-ce49380f4281"
        },
        "item": {
          "id": "d538c5b7-f8ed-4dad-908d-05dcbe7bc0cb",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4627dcf6-a106-4751-b1de-aa697f63baeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5bef7d3-ef07-4a67-980c-c32c83384c80",
        "cursor": {
          "ref": "f248867c-fdc5-4581-a6b5-8d40b836bc1f",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c775a792-3cb3-4a32-bb41-d5618f111ca5"
        },
        "item": {
          "id": "d5bef7d3-ef07-4a67-980c-c32c83384c80",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "dc4c4adc-297a-4e05-a524-ce1b655179fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27491d88-e1ae-4c4b-b0ad-62d3989e6e96",
        "cursor": {
          "ref": "bd167606-436d-4515-aa93-4e74cdffaf3e",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9751c791-2155-46fe-ad02-c39c28181bd7"
        },
        "item": {
          "id": "27491d88-e1ae-4c4b-b0ad-62d3989e6e96",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3b2c0097-9137-4310-b4e3-6725b87ffa5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7893df81-e2b9-4403-beed-b08a1ad30944",
        "cursor": {
          "ref": "0988c922-2cc2-4334-a381-409c9612e256",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1556ed62-f1f5-48ad-bc3a-d3875021e632"
        },
        "item": {
          "id": "7893df81-e2b9-4403-beed-b08a1ad30944",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4236d2e8-325d-4b7c-b5dd-61539f1ccfb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed435b66-0570-4879-b919-5f78746f6a0d",
        "cursor": {
          "ref": "169fd014-16e4-4994-9471-175e809f6315",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "feb14a50-b314-4bf6-b04e-1a49a7956bd8"
        },
        "item": {
          "id": "ed435b66-0570-4879-b919-5f78746f6a0d",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d940db19-39df-4d0f-8161-487f1472bb1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38fb17da-f063-4a37-a33c-f8b493bdefe3",
        "cursor": {
          "ref": "c96cbf3f-22b4-40c2-a995-59f7d7942be9",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5ddaf6f5-d6d8-453a-a0b6-c521b1a9b303"
        },
        "item": {
          "id": "38fb17da-f063-4a37-a33c-f8b493bdefe3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "cf2188ec-4d36-4a24-9348-a801ba8106e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f27ffd09-793f-40df-9697-2e928c39027a",
        "cursor": {
          "ref": "f78ad004-b071-477b-a8d4-b32d8c6fb0a7",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "92cd75c1-7b5c-4aaa-bf77-280aea1dda0f"
        },
        "item": {
          "id": "f27ffd09-793f-40df-9697-2e928c39027a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "76da55cd-7b1b-4c21-86cc-2e87ed8ccd62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df603901-3225-44d6-9bf1-578c4e16a967",
        "cursor": {
          "ref": "c745c213-85ce-46b5-a28d-e9fd44a82d33",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e0f163f2-0c01-43a6-92fc-7f109b9406d6"
        },
        "item": {
          "id": "df603901-3225-44d6-9bf1-578c4e16a967",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "73b90279-d721-44ff-ab42-312d0d348420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47722345-77e7-4bf2-a6b1-50f2f07ee26e",
        "cursor": {
          "ref": "a8f41681-0474-4aa3-855f-19fae396641b",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ad81b441-dade-473d-a9a7-2117fa9f5b11"
        },
        "item": {
          "id": "47722345-77e7-4bf2-a6b1-50f2f07ee26e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "af836fa0-f249-43ae-9a6a-c8608e4464a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b1191c-a174-4bd3-abbe-563c90375b70",
        "cursor": {
          "ref": "c5f98125-320f-4a97-8db0-aba3181954aa",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9b55c3fd-b68a-481c-8b0e-06cd17322049"
        },
        "item": {
          "id": "d3b1191c-a174-4bd3-abbe-563c90375b70",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "42c3d3a1-fa74-4fe0-8722-560a3ed67fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5123d20-9c29-40ef-9c54-7758b79656f1",
        "cursor": {
          "ref": "24d3d206-c144-46f1-b426-885ce7013797",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "64ffb8b7-76e3-4fca-98da-27cae6e7d6a3"
        },
        "item": {
          "id": "a5123d20-9c29-40ef-9c54-7758b79656f1",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "cb45b78c-d797-4b6b-a0c4-0e19f27bf864",
          "status": "Created",
          "code": 201,
          "responseTime": 547,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "3d908388-a8f4-466d-8209-d63e24c99def",
        "cursor": {
          "ref": "90f4ac3b-723d-4326-970f-ec41edf75668",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "af356527-d59c-4d78-99ed-1f52a62bf134"
        },
        "item": {
          "id": "3d908388-a8f4-466d-8209-d63e24c99def",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "45a2e0ab-f6ac-4d11-b416-7667d3aa1ad9",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "2cd9d3cf-4088-4887-a25f-1c04658b28df",
        "cursor": {
          "ref": "6b6e728e-3fab-49d2-b664-e5266dc3bcf6",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "879b0d11-f5fe-4856-9e69-410e5d14a936"
        },
        "item": {
          "id": "2cd9d3cf-4088-4887-a25f-1c04658b28df",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8bd91b5e-11ea-45ed-849f-cd40a1c68318",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "3f3a8a1a-8452-40cb-8a16-b084fa3e09bd",
        "cursor": {
          "ref": "fa4253cd-da21-415f-acb9-3326bb899095",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "75694c61-286c-44a2-a758-4a9e905c2402"
        },
        "item": {
          "id": "3f3a8a1a-8452-40cb-8a16-b084fa3e09bd",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6ca94a2e-50ef-470a-a143-df9321a38938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8d5ed0-ec19-4577-932b-321398e2c63f",
        "cursor": {
          "ref": "cb03a80e-c241-4f57-a108-f858fadbf2c7",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a183ec8f-b7b9-4385-9e25-cb374a2718be"
        },
        "item": {
          "id": "4f8d5ed0-ec19-4577-932b-321398e2c63f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "969365fc-ab88-49ba-920c-efddcc59506c",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2828de3f-c227-44ee-b100-06283afd4bc0",
        "cursor": {
          "ref": "717e2366-38b3-464f-aa45-fb3eec72859f",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ee9f8586-fac5-4382-bd43-63ee81e3df1d"
        },
        "item": {
          "id": "2828de3f-c227-44ee-b100-06283afd4bc0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5f529781-80c5-4d6a-9172-316eb16f118f",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "7b2d1884-ab06-46f3-8f90-a4161a185bfa",
        "cursor": {
          "ref": "c00af0d4-3e4f-4730-9ae3-566cc4794d0e",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "0c9b6f2e-8fe4-4de3-b4d2-d8e7c24551c0"
        },
        "item": {
          "id": "7b2d1884-ab06-46f3-8f90-a4161a185bfa",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d7b3d58e-5577-4df5-9193-0f350a1fddd2",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8e0dce73-0932-4752-b6d3-400d83b02dae",
        "cursor": {
          "ref": "f1cc97f6-5a55-4bad-87d8-891cc5678862",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e93c3f7d-3f33-4431-b130-b6c058b334c3"
        },
        "item": {
          "id": "8e0dce73-0932-4752-b6d3-400d83b02dae",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "702370ff-5250-43fd-827d-63b984e22a8b",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9df00df5-4e79-4895-97a2-896daa2b8d48",
        "cursor": {
          "ref": "dd2f89f8-e7e2-45a7-b149-1f452eba7f1d",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4f9dca0a-efc7-48a1-ae8b-7eb1379fbe37"
        },
        "item": {
          "id": "9df00df5-4e79-4895-97a2-896daa2b8d48",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "79030c35-f0b0-4a0d-aa12-e9440477b033",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "bcb384ea-bfec-4111-9ebb-5f62c37d5b98",
        "cursor": {
          "ref": "5478d554-24a0-4dd1-afb3-dd15b0a1293e",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b6e2f656-8acd-4553-92e4-3159e018bb39"
        },
        "item": {
          "id": "bcb384ea-bfec-4111-9ebb-5f62c37d5b98",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "77cc704b-dbd8-4cbb-826d-1eb379a737d1",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "8559df40-7e82-413e-991c-ab73d9afd063",
        "cursor": {
          "ref": "b7e3003b-41fb-4a64-9adc-0bbcaac90e1b",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "fe704023-c216-4914-a966-7da05314b218"
        },
        "item": {
          "id": "8559df40-7e82-413e-991c-ab73d9afd063",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "bc887ab4-eab8-4bc1-bf19-3e38b708a436",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "5c1eb5d5-ffcd-456c-bd29-3e492db4a88d",
        "cursor": {
          "ref": "aec5b745-b860-456e-8e27-410a78504c75",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fa799881-dff4-4213-b3fa-e3a202c43ec5"
        },
        "item": {
          "id": "5c1eb5d5-ffcd-456c-bd29-3e492db4a88d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4871ac16-2b1d-472a-af3f-75aabdf3df60",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "fce3fdd9-f837-428a-83da-1ded7647bd6a",
        "cursor": {
          "ref": "a4100636-818b-4b72-880b-e6e00791baf8",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c037e661-afd3-43c2-91b5-9fea8be32dd7"
        },
        "item": {
          "id": "fce3fdd9-f837-428a-83da-1ded7647bd6a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "874b218b-4f2a-494d-8a0c-e81fe56b859a",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f8090799-73ec-45e6-8d56-81d915ceb2c6",
        "cursor": {
          "ref": "429eee7b-ef1b-4ed8-ab72-141c8f2c3592",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "06fdd9c7-d53a-4103-9b66-18a544a364ba"
        },
        "item": {
          "id": "f8090799-73ec-45e6-8d56-81d915ceb2c6",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "41f2df82-c58e-4844-aa63-9affdcd5898d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ac70ea-494a-4d9a-b730-56ea72b0324a",
        "cursor": {
          "ref": "442322a0-a727-4384-9a62-79c9d3b3aa8e",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a2cf707b-5498-44cb-9ed3-ce4853106ab5"
        },
        "item": {
          "id": "25ac70ea-494a-4d9a-b730-56ea72b0324a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "132483dc-21dc-43d6-96ce-8174fb0e6a01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a6796a-5cc7-4567-9260-8954e02f1615",
        "cursor": {
          "ref": "6db81c92-9552-4ac6-b5e9-80637090d078",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b0b286ac-18b0-4bee-904f-d3252ba61e2c"
        },
        "item": {
          "id": "e2a6796a-5cc7-4567-9260-8954e02f1615",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7994ae0f-bc05-4504-8588-4f1da3f8c7d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1033591b-723c-4753-844a-00b7ca9c0eb9",
        "cursor": {
          "ref": "0154c96d-c8d9-4538-a590-86378ce8a3a0",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c8e66f63-6162-42c9-84bb-5c813c2cf38c"
        },
        "item": {
          "id": "1033591b-723c-4753-844a-00b7ca9c0eb9",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "2192d491-5dfa-4e55-b8ad-45e59a090803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5941715a-3c38-4685-b7eb-0d9056efda15",
        "cursor": {
          "ref": "55ea2769-959c-4d62-bc7f-765236824a54",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "527dc8bb-ff68-4a05-983f-be67a473564f"
        },
        "item": {
          "id": "5941715a-3c38-4685-b7eb-0d9056efda15",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "daf538c1-b9eb-428d-af05-fdf19120a327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0bacd5d-ee73-4c9d-8cc8-b744cb877ffa",
        "cursor": {
          "ref": "6cc97ba6-cbb6-4935-a5b4-27f554974d55",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "607df929-6284-4200-81c3-6ea04645e5ee"
        },
        "item": {
          "id": "b0bacd5d-ee73-4c9d-8cc8-b744cb877ffa",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "17a6e4d5-3651-4c11-9574-a84f149a15ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b50c509-057e-4d14-b3fc-10f109f787ce",
        "cursor": {
          "ref": "f8ec6c89-8db8-4f2b-8625-6e468631ba37",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4d3d0c38-1e51-425c-8bc9-44d16012e549"
        },
        "item": {
          "id": "9b50c509-057e-4d14-b3fc-10f109f787ce",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1e85718a-ce0f-489f-b85c-096ab84b6b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef17c505-e104-456e-bc4d-bb0e034d8ca9",
        "cursor": {
          "ref": "8c510ebe-8214-4cb8-96c0-1f8507ef1c80",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e439cd10-d929-40c3-907c-458341a61488"
        },
        "item": {
          "id": "ef17c505-e104-456e-bc4d-bb0e034d8ca9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e6f1e415-4b99-4690-9dcb-60465fb436e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e96027-62cb-409a-883e-796b7297b3ff",
        "cursor": {
          "ref": "7cb19702-ba94-4a4e-aaff-e6abe50943ce",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "90de300c-f344-4032-bf83-dfccf10715ac"
        },
        "item": {
          "id": "c3e96027-62cb-409a-883e-796b7297b3ff",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "94c53d99-50e3-480a-bd91-539ce0c913cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39e0033-b8b8-4943-8d13-278438fd691c",
        "cursor": {
          "ref": "ccacbd93-8d54-49f2-bed8-0e8b656e0c6d",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "90021153-e757-4632-9eb7-dc681a613b13"
        },
        "item": {
          "id": "e39e0033-b8b8-4943-8d13-278438fd691c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "87ecec68-79a5-4f57-9a85-4a0be1786ba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cec5038-3447-4558-a316-05a22497926f",
        "cursor": {
          "ref": "cd153af5-228c-41c0-a537-bf0391e15be1",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8ac99ac7-5780-4d6c-a626-ec4ec67a54dc"
        },
        "item": {
          "id": "8cec5038-3447-4558-a316-05a22497926f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0a92b3a4-128f-48db-87f7-9d1d0c912a74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c1bef73-90ff-4551-9870-cda9bae7180c",
        "cursor": {
          "ref": "919adf9d-a79e-4b14-8a06-e3d4a07aea1c",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ec1d19c1-1383-4402-971c-9742562eb19f"
        },
        "item": {
          "id": "2c1bef73-90ff-4551-9870-cda9bae7180c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "abbf82e2-5196-48ba-a1ab-cbd61eb4e7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba07b77-a493-4ad0-ac4a-5b9c0b4fd426",
        "cursor": {
          "ref": "8ac85fb8-8187-4551-b878-1da7a9cfa573",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f24346fa-e898-4c61-a9b4-2be031137b60"
        },
        "item": {
          "id": "dba07b77-a493-4ad0-ac4a-5b9c0b4fd426",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "75ec8a35-f67b-4c62-a919-ff8b1a0443d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6e8563-8085-46f2-b0e7-0d3577335953",
        "cursor": {
          "ref": "f67d4001-8998-4354-b7ee-a0f1eaf83168",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a0e216a6-b952-409d-b280-1a7d108db59e"
        },
        "item": {
          "id": "9c6e8563-8085-46f2-b0e7-0d3577335953",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c71d80dd-3332-4a7a-8972-a772afff3bc0",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "1600b944-ba76-40b4-b447-ddfb7a4c3af5",
        "cursor": {
          "ref": "ca350b7d-565e-4a43-a357-347ab8838471",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "28e5e5f3-4755-438b-84a3-323866537135"
        },
        "item": {
          "id": "1600b944-ba76-40b4-b447-ddfb7a4c3af5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "5aaf797f-29c4-4d8e-9e68-eeedc37fbd06",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "bc45805e-0f7a-460b-afe8-5ef96ba0d245",
        "cursor": {
          "ref": "312b87ae-aaa0-4835-a422-7607c4574e85",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "125dbdf7-5048-4841-b03c-11d4a5b2358c"
        },
        "item": {
          "id": "bc45805e-0f7a-460b-afe8-5ef96ba0d245",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "fc014e9a-8135-430c-ae4d-72fb396e5513",
          "status": "Created",
          "code": 201,
          "responseTime": 219,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "d6436ac8-13cb-44dc-851e-e245187e565f",
        "cursor": {
          "ref": "47eb16d4-7aee-41cc-8d82-7794c6680efc",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "17c6b339-5cf3-43d0-b1f3-5676c4fa11f8"
        },
        "item": {
          "id": "d6436ac8-13cb-44dc-851e-e245187e565f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "cf154167-6e47-4271-823e-67e9cd865bfc",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "37ef8924-245b-4749-9249-d5c55286a2ed",
        "cursor": {
          "ref": "5b5cc417-524d-492b-a95c-b8ec335e8046",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b0b89b3b-76a9-4031-b4a8-5fac84c4c694"
        },
        "item": {
          "id": "37ef8924-245b-4749-9249-d5c55286a2ed",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7942c2eb-d5d2-4b20-8c7f-ad66d2a08e72",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "2c19d303-ec2c-4f15-8695-d3fd619f1f27",
        "cursor": {
          "ref": "bbc8a1f8-0c3b-4671-be67-8bce6c7d07b6",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1d2a05aa-c702-4c7c-9ddd-fa98c7ed757b"
        },
        "item": {
          "id": "2c19d303-ec2c-4f15-8695-d3fd619f1f27",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2b7e9ab8-fd21-43f0-a837-c26d8096ad60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a540ae1-9d8f-4442-8581-1c9dac5af2ae",
        "cursor": {
          "ref": "dd39587d-dbe1-49e9-af29-940966d7a519",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5f53aa30-f617-48ab-ba6a-ff26ad1be6d9"
        },
        "item": {
          "id": "5a540ae1-9d8f-4442-8581-1c9dac5af2ae",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e15770d0-3466-4430-96ec-50de2b299dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3c1b7a-c14d-4460-899a-71ac4a9dd79c",
        "cursor": {
          "ref": "58354d98-a9b6-47cf-9e51-e7c1ed4aa1ba",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "aa39e41d-6c3c-4399-a64a-471761f80f28"
        },
        "item": {
          "id": "3a3c1b7a-c14d-4460-899a-71ac4a9dd79c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "bb6ecd52-85f6-4c8c-a7f3-a4ab4afe2b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e8e4ee-9267-4c9a-9bfa-c546a4538a21",
        "cursor": {
          "ref": "1fe3b8de-4e56-4775-8db7-ecc56d46cd67",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e2d1fd77-ad90-4d08-95f2-64153a2854ce"
        },
        "item": {
          "id": "56e8e4ee-9267-4c9a-9bfa-c546a4538a21",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "78ec7a43-ea60-429b-869e-a2734c46c90a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f30d878c-57bc-4969-a498-4c4c5376d394",
        "cursor": {
          "ref": "cd27ab71-397e-4bac-a9b9-c118d26a6af1",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fbed2618-41d9-4824-b29f-f4f595d1b453"
        },
        "item": {
          "id": "f30d878c-57bc-4969-a498-4c4c5376d394",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "152dede9-6a3f-4470-8301-92c1e5d5b515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7785b5f8-6029-4070-b15b-1d61747259ad",
        "cursor": {
          "ref": "d331350c-f902-4cd3-8045-57061b04e84f",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "949adfbd-ed5e-42af-acee-961c24d30be2"
        },
        "item": {
          "id": "7785b5f8-6029-4070-b15b-1d61747259ad",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6202d52c-fde2-4645-ad9f-6133a4e621dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e362d7e-1f99-4e39-b67b-1b660d7c310b",
        "cursor": {
          "ref": "12831a05-3021-4bde-9b75-3b8f1574712b",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a2f3e5b2-ebda-4d7e-b023-bb4d7912b4a4"
        },
        "item": {
          "id": "4e362d7e-1f99-4e39-b67b-1b660d7c310b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "aec4c031-97ef-47f0-9172-79b4acd475ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e796fb86-3b68-4923-af8e-dba4b69a71c3",
        "cursor": {
          "ref": "8c140e8e-cbc6-4f32-a093-020b8c53d1b5",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1e4c8b62-1008-4c50-a341-309c23ff3185"
        },
        "item": {
          "id": "e796fb86-3b68-4923-af8e-dba4b69a71c3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f1373053-ad55-4ec8-ac31-ce013debca69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd313720-2455-4545-8862-4f9d798d33bd",
        "cursor": {
          "ref": "ca73c5cb-b7d4-4aa8-944e-85e34ffea5d5",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0fc232a8-2cb3-46bf-90ee-d3c1eb0a856d"
        },
        "item": {
          "id": "bd313720-2455-4545-8862-4f9d798d33bd",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "24a99fda-1bcb-491b-a7f0-a8c8e5d86880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "232c2e0e-fcf6-41f5-84a4-e8303c17778a",
        "cursor": {
          "ref": "5a0793a9-7209-4a86-a0a6-151c89dcd9d4",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "096c20df-4ada-4d92-9509-1cd0777a03e5"
        },
        "item": {
          "id": "232c2e0e-fcf6-41f5-84a4-e8303c17778a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "14432ee5-1031-4845-bfed-30f8e49f0c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f4968c-5c4c-40e8-9978-17df5ccc7c95",
        "cursor": {
          "ref": "f814e5df-1f2f-40a9-842e-afa6b26bc80b",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d34f55a8-e38d-4397-9b90-3370fb21ef82"
        },
        "item": {
          "id": "a7f4968c-5c4c-40e8-9978-17df5ccc7c95",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "72449c83-6b26-4322-a990-2dbae787871b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "111031be-a981-464a-a556-8d2c188bbabf",
        "cursor": {
          "ref": "16e19a68-3324-4cac-9f95-99bdd57cad70",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e29a218f-f294-419e-9958-3cf254ac16d9"
        },
        "item": {
          "id": "111031be-a981-464a-a556-8d2c188bbabf",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1e1a10fe-1f45-4c52-b99c-d419151c9797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d42f2578-7400-4083-900c-f45b55dbd5d9",
        "cursor": {
          "ref": "e79b7262-c16a-4fd5-934c-251b064c67cf",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "38ba66be-7e05-4727-b80e-be7c9984a955"
        },
        "item": {
          "id": "d42f2578-7400-4083-900c-f45b55dbd5d9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0c3e0703-d759-4974-985b-b467e4ba1a6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b038c780-0139-4d4b-8869-ebc118c739c3",
        "cursor": {
          "ref": "0eaafe79-6760-442e-9932-c22377fba3e8",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "003be092-3e59-4b92-a54f-274551d1941b"
        },
        "item": {
          "id": "b038c780-0139-4d4b-8869-ebc118c739c3",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1badbd7b-94ee-4688-a92c-289f49dcb933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b391e8-4b5b-402c-acc8-22d3c75739a6",
        "cursor": {
          "ref": "3ae6ed0e-e0bf-476f-a09f-5ef460acfb80",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d0bff1ae-0325-4c39-9b96-dc76320e7ac5"
        },
        "item": {
          "id": "d4b391e8-4b5b-402c-acc8-22d3c75739a6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "94cd86e6-8fbc-4e68-8bd4-745040cbaa56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03b94ef1-9a55-4d55-b632-e54db56b516c",
        "cursor": {
          "ref": "3258c071-50a5-4f70-9609-7aed99ba1d2d",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "75b75357-d5fc-4afe-ba1b-ebc453ad7fff"
        },
        "item": {
          "id": "03b94ef1-9a55-4d55-b632-e54db56b516c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b3dc4cd8-ebd0-40e7-8340-ff89229fb6b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9475866-563f-4caa-86e1-1f3419f18961",
        "cursor": {
          "ref": "7e96b306-57c7-45b0-8bd4-1efab008b3d6",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5a92d4ec-4202-4221-befe-e50381232f67"
        },
        "item": {
          "id": "a9475866-563f-4caa-86e1-1f3419f18961",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "289f38b4-8632-4b57-b6e7-b7f0da468e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18317de-b149-4fcd-a354-06cd50272f46",
        "cursor": {
          "ref": "883651c0-556d-4ecb-ad22-07cb8d642b8b",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "65d1c2e7-5f6c-48c7-bff5-89713709e03e"
        },
        "item": {
          "id": "e18317de-b149-4fcd-a354-06cd50272f46",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "75cfc882-b7a3-4b9c-bc78-ee7e649f5a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d84668-80c5-46a2-afc2-e2b4d27e7764",
        "cursor": {
          "ref": "7ef257ae-7969-4359-a447-88b1f0fc74a4",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6af83b2f-3213-4fd2-8d38-048d59c46e2b"
        },
        "item": {
          "id": "25d84668-80c5-46a2-afc2-e2b4d27e7764",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "74b2343d-c082-4110-9a2c-5efcd0a607f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8816a94-c35e-4bd5-a912-f1232fd31ea6",
        "cursor": {
          "ref": "c32fa0a0-a703-4b86-89dd-1ba6fa054c10",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e22eb913-7795-4c0d-ab2c-62995b5fe44c"
        },
        "item": {
          "id": "f8816a94-c35e-4bd5-a912-f1232fd31ea6",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0096a90c-d22b-4cca-9cdf-882fb85cb0fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee97038e-9932-44ff-ab8c-281d93926e0c",
        "cursor": {
          "ref": "7acdf335-3a78-405e-8933-ac51f9b4130b",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1c873b8a-0484-47a8-85fb-4d56446cc1c0"
        },
        "item": {
          "id": "ee97038e-9932-44ff-ab8c-281d93926e0c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7aa09f6e-0f63-4a2a-99c0-b0fd7929c27b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1784ac3a-f97a-4f5d-8e8e-b1568b2822da",
        "cursor": {
          "ref": "e04271fd-3270-4b17-ae5f-0ed906d2337e",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "77fc25ad-deda-4106-bf46-dbb22ed31f47"
        },
        "item": {
          "id": "1784ac3a-f97a-4f5d-8e8e-b1568b2822da",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c1eedcd2-e852-43a6-81d9-824b381689a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da90935-f3a5-4dbc-ab36-f2bafcb04658",
        "cursor": {
          "ref": "d05d0c5f-5e8e-4196-ad8d-061b76773ec8",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "73466b3b-c028-4908-a855-357f40158cf7"
        },
        "item": {
          "id": "7da90935-f3a5-4dbc-ab36-f2bafcb04658",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "221556c9-3780-4046-aa75-3419a08b5d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae4430b0-769b-44ce-bc84-710896ee7330",
        "cursor": {
          "ref": "0988006d-7a2f-4e42-959d-6cb4fe163767",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "227ed409-24db-470e-9af8-f756ba3668c6"
        },
        "item": {
          "id": "ae4430b0-769b-44ce-bc84-710896ee7330",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "851f7636-b248-4b2e-b432-f8b94fe2b58f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "454b42e0-d740-4434-80ac-ab665bbf351f",
        "cursor": {
          "ref": "c0130efa-56bc-4720-8cff-1b971e074233",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4c8edabd-d1ba-4cd8-892e-ba6025592d87"
        },
        "item": {
          "id": "454b42e0-d740-4434-80ac-ab665bbf351f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "1068768c-f572-4147-bdf1-21564ebf0f14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23619589-ff56-40b3-b2b1-41b45cb5c088",
        "cursor": {
          "ref": "2299e28b-2a33-4f41-a85e-5d8622c35984",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "bbfb4f33-016d-43e7-9bf5-758883b27126"
        },
        "item": {
          "id": "23619589-ff56-40b3-b2b1-41b45cb5c088",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "dc9d4064-be36-4aa4-a404-9cad16a47a58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9448a21-c304-42e0-83ac-542eda908184",
        "cursor": {
          "ref": "8880bfef-21c6-44b3-930b-a5432bb5d825",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "875d8ec2-3d88-4815-8219-7231def6714b"
        },
        "item": {
          "id": "b9448a21-c304-42e0-83ac-542eda908184",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a4db7106-e466-439b-88d0-6a6ffcc679f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1562435-b3e4-4d70-a465-6ce5c75ccb6f",
        "cursor": {
          "ref": "a99a83c7-ad45-454b-8703-e1bfabaefb7e",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5568a3dc-381e-4bf1-ba8b-23c65983d2b7"
        },
        "item": {
          "id": "d1562435-b3e4-4d70-a465-6ce5c75ccb6f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "65bbacb9-dc17-4a5d-b796-abc7b00b154f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1bdda7b-94ed-4f1f-a0b0-5cffa20f5c95",
        "cursor": {
          "ref": "6e271fdd-b82d-4ff6-b9b1-7a38417e0816",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6f0eb404-1c01-465e-a963-aab647f07ddf"
        },
        "item": {
          "id": "d1bdda7b-94ed-4f1f-a0b0-5cffa20f5c95",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f2463332-3c1d-4734-9a1c-1b27adaeaa9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1900646b-cd6f-43c9-9a08-cd5081454836",
        "cursor": {
          "ref": "5d7794fb-5221-4f3a-8be9-8def16cc1a06",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "41fb3cfb-1583-40cc-b2b6-bf17bc46145f"
        },
        "item": {
          "id": "1900646b-cd6f-43c9-9a08-cd5081454836",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e2923995-68cb-4532-9849-4426741462f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce37dde6-f7d4-4db8-bf0a-6ead05a12e25",
        "cursor": {
          "ref": "7c723b13-981c-48ce-bab5-24a035636c29",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "13e1e59e-687f-4fed-9d49-c449f7f75613"
        },
        "item": {
          "id": "ce37dde6-f7d4-4db8-bf0a-6ead05a12e25",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "db990b71-8085-41ce-9d3a-27127d2f54b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fca79aa-16b1-4eb8-bfe5-240d2a4db070",
        "cursor": {
          "ref": "ccb056bd-1f03-4ee5-ae4a-b9769c6d44fe",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1307d11b-b511-42bb-903f-ddebcf9bf3fc"
        },
        "item": {
          "id": "1fca79aa-16b1-4eb8-bfe5-240d2a4db070",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ff3b585d-42c5-4143-bcee-14b06ea9bbfa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f49bb60-53cb-4379-a6d9-086c97aa3ea2",
        "cursor": {
          "ref": "ee031c92-4220-46a3-ab28-f39d32ca8330",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4f69d639-3199-41a2-ad3f-5ccaf9814c18"
        },
        "item": {
          "id": "2f49bb60-53cb-4379-a6d9-086c97aa3ea2",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "3f7ea9b3-a52f-4554-88a4-59afa6c4e058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "69de8641-35af-47c1-af93-fe544f035b5a",
        "cursor": {
          "ref": "dd8f485b-165b-4474-b9d0-8f25702e59b0",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "75e0380b-1a84-4bf4-82c5-99f9faa172d5"
        },
        "item": {
          "id": "69de8641-35af-47c1-af93-fe544f035b5a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "84001d46-b708-490b-9cec-ee53fd47f5fa",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "161081d0-f106-4d77-bfdb-2175bba9decd",
        "cursor": {
          "ref": "5e80cffb-184e-4963-9054-d579cc662ee1",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2c0cb20b-324f-4379-83bb-1fd6c71fdbd7"
        },
        "item": {
          "id": "161081d0-f106-4d77-bfdb-2175bba9decd",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a8210205-5626-47db-9670-91f02f09cb6e",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "48424906-2e23-4536-a1b2-cf0467af8413",
        "cursor": {
          "ref": "0a559abc-9d56-4c33-99ea-97243efb9b83",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3ec6a5b8-31e8-4c5a-918f-0b68b61fa796"
        },
        "item": {
          "id": "48424906-2e23-4536-a1b2-cf0467af8413",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "50f37cd9-2760-430d-ac21-e0489db2f1da",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34de4f8-4bc3-42f9-b8f1-4773ae76ae9c",
        "cursor": {
          "ref": "32f256d0-9bc3-4886-a9bd-7a1a3daa55d9",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b98fe44f-1306-431d-b289-052e1fe1f781"
        },
        "item": {
          "id": "e34de4f8-4bc3-42f9-b8f1-4773ae76ae9c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "333aabf6-f790-4614-807b-ce5ee8d76522",
          "status": "Created",
          "code": 201,
          "responseTime": 208,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4953987d-8745-4015-9949-b6461264d94e",
        "cursor": {
          "ref": "a9c75950-0b35-4202-9034-fe60a7f25796",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c04b73f1-60c1-4432-9b4b-760230dbb9a8"
        },
        "item": {
          "id": "4953987d-8745-4015-9949-b6461264d94e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "71abef31-60a2-4da9-8a19-60280cfee1d6",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-21T00:40:08.961Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-21T00:40:08.961Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "e3056b14-b7f8-4bcb-9614-d1b0a3113e10",
        "cursor": {
          "ref": "cf6fccde-f941-41fa-beda-8373e2072dc0",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "14205c7e-62bd-4320-8f5d-7b78e3e67e9d"
        },
        "item": {
          "id": "e3056b14-b7f8-4bcb-9614-d1b0a3113e10",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6b2fd8be-9b56-4fb5-95e8-72c0e491ee78",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b0ff398-85ea-4d74-932b-5aaff12aa3ba",
        "cursor": {
          "ref": "30c84f5d-0297-435a-9a88-566ca1cd65c3",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ae999076-0181-452d-b41a-108b85a93e4a"
        },
        "item": {
          "id": "8b0ff398-85ea-4d74-932b-5aaff12aa3ba",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6ffe95bf-6be3-4686-8c53-b109c8b18740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c047d9e3-0eda-4394-87aa-336a59916883",
        "cursor": {
          "ref": "ece776ac-1f01-4b82-ac0f-e67fac25e77f",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "300d9be7-fb65-43dc-96a8-78d1b77c09dd"
        },
        "item": {
          "id": "c047d9e3-0eda-4394-87aa-336a59916883",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d62cb632-73f3-4e26-b9fe-918c2fcf2005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3790993-334f-4836-9fe2-728ce1d2a3a2",
        "cursor": {
          "ref": "75b7a6cb-1596-425a-bc98-d78af03d2953",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "74cfd78c-96fd-438a-afec-5ea0e7d31cd0"
        },
        "item": {
          "id": "e3790993-334f-4836-9fe2-728ce1d2a3a2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e867c68b-9ca7-4b22-b1f4-1593bf250588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85339acc-5a16-41a4-bbbe-effdcf8dc24d",
        "cursor": {
          "ref": "f59b7ad1-6a9a-4ba7-818d-5812d1804919",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "fe2bae4a-f60f-4d81-a23c-b90d20d228e8"
        },
        "item": {
          "id": "85339acc-5a16-41a4-bbbe-effdcf8dc24d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "baaebc2b-92ef-4979-b8d3-54ddc2af740a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e3b190d-d6cb-44b7-86a1-cefcedab0c8f",
        "cursor": {
          "ref": "6a75fece-7671-43f1-837d-8b97db804b7f",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b173356f-67db-46f2-9b83-3dc2df407ccb"
        },
        "item": {
          "id": "6e3b190d-d6cb-44b7-86a1-cefcedab0c8f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "48226fa4-81b8-421c-b96d-b96d17ed7452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4091ccb8-5c02-457e-b12b-75db9a924cb6",
        "cursor": {
          "ref": "9bd65bdd-9f05-4e6f-81d2-23973f03b34b",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3bb77de1-28e3-4b8e-a088-857630649838"
        },
        "item": {
          "id": "4091ccb8-5c02-457e-b12b-75db9a924cb6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f84422c8-2295-4269-9cc9-80d5014863fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2c85423-0745-42ae-8650-f7ce29e485fb",
        "cursor": {
          "ref": "dcfb9b65-d625-4ab8-bf8e-e6e547beba16",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "32101cb8-52ca-402a-b4b2-df1d8be0bf8f"
        },
        "item": {
          "id": "d2c85423-0745-42ae-8650-f7ce29e485fb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "233c1d2b-4d06-40bd-b4c6-634bb46ed8dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91643cf0-745a-4cea-aee7-b1c8a7c1d403",
        "cursor": {
          "ref": "c720aa09-6a8e-4f57-b16a-3e493e2e9124",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "51cad4c2-73e4-4f5f-ade1-de9e4a89e513"
        },
        "item": {
          "id": "91643cf0-745a-4cea-aee7-b1c8a7c1d403",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ee18877f-7fca-4eb3-871b-26afc2c72445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1791662c-a5bc-439e-90da-cade6f5d5898",
        "cursor": {
          "ref": "4fe33769-61bc-4273-a901-29203f52e27a",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "32edac3b-fd30-4898-99db-5bf10ba669bf"
        },
        "item": {
          "id": "1791662c-a5bc-439e-90da-cade6f5d5898",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "534ef8c4-9992-4ffd-af0e-1dc06f560859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "672f3fde-baa6-4b09-9135-c9950f22e6e2",
        "cursor": {
          "ref": "3eb4a04a-0649-47a9-b86c-3b8b672d1dfc",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "96e29b41-1acc-45ef-9273-687003c076ca"
        },
        "item": {
          "id": "672f3fde-baa6-4b09-9135-c9950f22e6e2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "cfd28b44-1745-45a9-8742-c7b8fa047f7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc8b3bf-8a71-47c8-91b7-c60cff5e3d55",
        "cursor": {
          "ref": "4d636342-6ad3-45d3-b12b-09d0bd6edd73",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3978be24-ba6e-46fc-a92b-ef6cfd1ecb70"
        },
        "item": {
          "id": "bfc8b3bf-8a71-47c8-91b7-c60cff5e3d55",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "400ba0a7-3026-46ea-83c0-0602874e2270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e3d263c-ff5a-45f3-8d17-60a5aa0592db",
        "cursor": {
          "ref": "758f3dd3-9de6-4e99-b9b0-9d15fbf93d47",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "26fc3538-af76-42dc-af27-ca7bf88343b6"
        },
        "item": {
          "id": "0e3d263c-ff5a-45f3-8d17-60a5aa0592db",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0110663d-95f2-4342-9da3-056d1142c606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcfdf925-0f31-45c6-a824-6cec25df49d7",
        "cursor": {
          "ref": "d43f1b46-ec3d-4814-b38e-19ecd8afb111",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3ebad6d2-ddd5-40a6-adf2-429074e49a1d"
        },
        "item": {
          "id": "dcfdf925-0f31-45c6-a824-6cec25df49d7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9caa849c-3905-4a68-807d-aabb29f50125",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "8659f10f-a85e-4208-8f2a-8a1def7c8bd4",
        "cursor": {
          "ref": "4cb96e7f-941d-4eac-bd38-2f7997c0d056",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "53124db9-a796-4abb-8233-9216ee77d502"
        },
        "item": {
          "id": "8659f10f-a85e-4208-8f2a-8a1def7c8bd4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d2d93989-40a2-4661-8762-78401af3b338",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 126,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "a799f02b-b2e2-436f-83e8-31d2bc2430d1",
        "cursor": {
          "ref": "c833f878-f359-47ff-8149-da93f7ef9668",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c78e1967-6986-4cb6-8c17-e8340f9054b2"
        },
        "item": {
          "id": "a799f02b-b2e2-436f-83e8-31d2bc2430d1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5849de93-ec21-4b4a-b2c4-a3795c08c412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6fdd92-6732-4cf4-acd4-56f15069cb88",
        "cursor": {
          "ref": "85c8e6b8-a70c-4ad3-8f93-8a19e4a69d7f",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6bbc6dcb-c1bb-40de-b1ee-0266a83b8e89"
        },
        "item": {
          "id": "4f6fdd92-6732-4cf4-acd4-56f15069cb88",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5796c402-52c0-49b1-a290-a8cfaff3680c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d27c73e-c5ae-480e-b65a-2cb0505c3cc1",
        "cursor": {
          "ref": "ab2315d4-5f14-492f-a9e0-3990dbe37b91",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "50fd21f1-59be-4c2a-a5e5-0ddb3f9faf69"
        },
        "item": {
          "id": "2d27c73e-c5ae-480e-b65a-2cb0505c3cc1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4980bd21-cb65-4880-b377-e93652f12478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0e374ab-f669-447e-9d35-3232d3d5ff3a",
        "cursor": {
          "ref": "083d1e4e-6edf-4208-9ea0-798b3afa4f31",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b4b053b9-2e87-4089-874d-10aade28bbd4"
        },
        "item": {
          "id": "b0e374ab-f669-447e-9d35-3232d3d5ff3a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4ebae643-da08-427b-9dfc-cb5424d068db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4518c1-5bc8-4678-8c0f-f1ed835a61c2",
        "cursor": {
          "ref": "d3983b50-53ac-492c-9f44-5a253a78766b",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f8d1f108-c56d-40d1-bbdc-9e9b4a206e57"
        },
        "item": {
          "id": "0e4518c1-5bc8-4678-8c0f-f1ed835a61c2",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "950c1afa-c11d-4c27-9cc1-f91612a0754f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0068364c-9fd5-4e3b-941f-0e9bd869e14d",
        "cursor": {
          "ref": "203ea5fa-4fa4-40d1-9355-f15ea34bd1f7",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "64d4bc15-059b-4183-87c4-5018c1bbc927"
        },
        "item": {
          "id": "0068364c-9fd5-4e3b-941f-0e9bd869e14d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2ff5177e-a655-47db-84b8-d7aa5aded920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f74502-d197-49f2-b0ca-a4c539abe532",
        "cursor": {
          "ref": "43876bfa-3507-4f69-905d-b8d25013e6de",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1805ab2e-3a28-4f93-aebb-4d0ebfc3baf8"
        },
        "item": {
          "id": "36f74502-d197-49f2-b0ca-a4c539abe532",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "cbcb18d6-be7b-4553-aa8a-7783a4567a33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1887c4-e8a0-4b2a-995d-7746c9391153",
        "cursor": {
          "ref": "ee0c738b-dd07-49c7-801c-ba494bc6820d",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "36198841-e91b-4a26-b777-c419524d31ea"
        },
        "item": {
          "id": "cd1887c4-e8a0-4b2a-995d-7746c9391153",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a49b6012-0817-471e-9070-50149698eec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a6765db-6590-4d0a-ad9d-56aebf7c334b",
        "cursor": {
          "ref": "e57381f6-2e05-4c46-8f5d-8bd148ba1cf1",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "75c617f3-5c9b-4c6d-b233-33b246ee3e45"
        },
        "item": {
          "id": "9a6765db-6590-4d0a-ad9d-56aebf7c334b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ffd8cfc7-39a4-40ff-a089-06a4705baa84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c4f866-65e4-49c3-ae2e-0ff39cbd56b4",
        "cursor": {
          "ref": "0478af08-4562-4718-bb79-3c617348beea",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "9ffda0f3-812b-4e44-b63c-ec5f42fa52e8"
        },
        "item": {
          "id": "e5c4f866-65e4-49c3-ae2e-0ff39cbd56b4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f4682b3b-f8f1-474f-a308-c2bc16b9c39e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "492193e8-6d92-4fbe-80b6-46e38d25b6a9",
        "cursor": {
          "ref": "7667b183-cc67-4213-8965-ed5376e69ddf",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "40f416b5-f56d-410f-bb4d-f57cc6f80fe9"
        },
        "item": {
          "id": "492193e8-6d92-4fbe-80b6-46e38d25b6a9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f374d515-f732-489b-9733-1d33925e45c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79496982-c94e-49d1-8724-b28c6d0e153c",
        "cursor": {
          "ref": "f7b5a9ab-6b9f-4e65-86e4-c1a887fb8f16",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "02dede21-cc65-41ee-b3f0-c6bd8af1daa5"
        },
        "item": {
          "id": "79496982-c94e-49d1-8724-b28c6d0e153c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "465ad580-6f7b-4833-8acd-23a18db663c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "508cf8fb-4a71-45fb-b448-b5faabe01172",
        "cursor": {
          "ref": "48217352-a43d-4393-b7f3-853f94d6d440",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "6024b97c-0baa-4426-b405-3038aeb8d3e3"
        },
        "item": {
          "id": "508cf8fb-4a71-45fb-b448-b5faabe01172",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d1c862e1-dedf-4dfa-85f8-9e62991a2d5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0a4ade2-1867-4f17-b15e-712a4c5233b4",
        "cursor": {
          "ref": "237ab519-86e8-48b0-8ce4-f9720c474ff0",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f2f2ff7f-89e6-4a62-af42-af163337da84"
        },
        "item": {
          "id": "e0a4ade2-1867-4f17-b15e-712a4c5233b4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fe22a758-04b9-40bb-a865-0710d3e97db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13819d0-41e6-4174-98fe-3082469f1a99",
        "cursor": {
          "ref": "64f5e743-7ac2-4359-a5ea-ce24f85cb54f",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3d6faff8-68c3-498e-b376-e136776ec229"
        },
        "item": {
          "id": "d13819d0-41e6-4174-98fe-3082469f1a99",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e4a59c37-6f5a-48e0-a222-43fa140b4ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d427069b-77be-4f45-9653-f4abe196d54f",
        "cursor": {
          "ref": "655b3ede-ddad-468a-9289-2841e745c6e9",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3f504934-25fc-4093-8399-0c2ec4f67bcb"
        },
        "item": {
          "id": "d427069b-77be-4f45-9653-f4abe196d54f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ea557593-ed99-42b1-9e09-8a759bc31f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52424fe9-f5df-436f-890a-d3a69b5ad76d",
        "cursor": {
          "ref": "5aa5ab3e-95bc-402d-951a-13086fb5129a",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1c867d78-5456-4f80-a35d-2c8edc83177b"
        },
        "item": {
          "id": "52424fe9-f5df-436f-890a-d3a69b5ad76d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7f66f809-aa9b-4242-be54-09a8538a32c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b94ac3a-40be-45f0-a626-d3ad237790d7",
        "cursor": {
          "ref": "f6fc70b6-6389-4801-928a-b2023ef97670",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e84b35c1-dff7-442f-964c-49abe0841e35"
        },
        "item": {
          "id": "7b94ac3a-40be-45f0-a626-d3ad237790d7",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d6e025a2-7131-4a7a-93cc-c56eb1689811",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "2166adc4-3696-4ed0-83d0-5942f4d5cb23",
        "cursor": {
          "ref": "e4445962-6a3d-4fd6-acce-812ca98cd246",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "bc17ba5d-ab0a-4c78-8189-6a0f2a6fa9ef"
        },
        "item": {
          "id": "2166adc4-3696-4ed0-83d0-5942f4d5cb23",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "90eeb84c-b25e-4e13-beb6-e5847ac637a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c42e37-1ba9-4536-aad4-e3ab480558b7",
        "cursor": {
          "ref": "ccd1bf70-8a5f-48d2-8372-c7fe2fb0dffd",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9b033286-1982-4438-9994-2328bc81e20b"
        },
        "item": {
          "id": "74c42e37-1ba9-4536-aad4-e3ab480558b7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "95bafe8e-e4dd-4896-a773-32b277b0effe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832eafbb-0392-4b85-a7ad-006aff20f392",
        "cursor": {
          "ref": "a9b1713c-809c-4868-8b95-35612de28b25",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9a6eccaf-76dc-49be-9421-50012e194afa"
        },
        "item": {
          "id": "832eafbb-0392-4b85-a7ad-006aff20f392",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "71ecea75-07a6-495e-b213-f1ebce11dd2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27367298-e9d4-4d72-81f6-6b55f151a820",
        "cursor": {
          "ref": "94838514-3e69-4bb9-8a12-10f56c5ce2f0",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2bf7a120-f8f4-49ea-a6cc-8d23822cf90a"
        },
        "item": {
          "id": "27367298-e9d4-4d72-81f6-6b55f151a820",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "329aaf6a-a0d7-4e6d-83fb-fe07c6e4d0c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58030d74-5023-4d93-bceb-7fa17ac07553",
        "cursor": {
          "ref": "7da08aa0-1e5c-467f-9f7d-ceb9c910b467",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6e7a4cfb-8348-42fb-9f07-cb27443b7356"
        },
        "item": {
          "id": "58030d74-5023-4d93-bceb-7fa17ac07553",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3499eba4-8fb0-458d-ac22-99ee36a82c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30ad116c-10fc-4e54-9900-da89533b1149",
        "cursor": {
          "ref": "dfe0435f-2a2c-43d6-b6b0-61dcf18359b1",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d4b7f715-5523-4a23-8189-d4b53a1cf243"
        },
        "item": {
          "id": "30ad116c-10fc-4e54-9900-da89533b1149",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b23c0ab8-9224-4d1c-ad40-ef9da421bd9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c727fc3-86c7-4786-a898-31e3b41650b0",
        "cursor": {
          "ref": "0aff02d3-69ef-4367-976d-b3ccb6f3a752",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e70553d5-a7df-4bb1-932b-1f4ca2eb4801"
        },
        "item": {
          "id": "7c727fc3-86c7-4786-a898-31e3b41650b0",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f3ffe761-1716-46f6-b8ed-a79b2d0ce732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb11546-143d-4764-84f1-34efdadc5de3",
        "cursor": {
          "ref": "d7401fec-e1c9-4469-9cb8-1df404f64ce2",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "473f0e42-3e88-4089-be61-d25774c5d94b"
        },
        "item": {
          "id": "0cb11546-143d-4764-84f1-34efdadc5de3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "dd080e8e-6735-4b6c-b37d-45ab78b39b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbb8bc22-f690-413b-b9a4-ae518dae2e83",
        "cursor": {
          "ref": "602e4ca7-3669-4c0c-974c-4d7b816ae38d",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "91667a72-1701-4531-9a62-b78a5041cc98"
        },
        "item": {
          "id": "fbb8bc22-f690-413b-b9a4-ae518dae2e83",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "05f9a7b2-b92f-4afe-ba26-4644711ca563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49f2434c-2a12-49b4-950b-241e7d1fab1b",
        "cursor": {
          "ref": "209280d2-1d52-45f9-ad8d-cff1e08e4c79",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "9e0b7ebf-a39f-47e6-a6ce-ab0231f62938"
        },
        "item": {
          "id": "49f2434c-2a12-49b4-950b-241e7d1fab1b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8f780473-bcd6-4430-8207-8ec76fe26872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fc9253d-1742-4395-bb85-77af27dd0be1",
        "cursor": {
          "ref": "55b014ea-1aa7-467d-9d94-bad260c7b596",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8994c6d2-9ff7-40cb-a8de-64e508aabd62"
        },
        "item": {
          "id": "6fc9253d-1742-4395-bb85-77af27dd0be1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "356d6900-f98a-4b46-b48a-751e2b6b54cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9dcc93b-7184-41a7-aafc-c2abb087dca5",
        "cursor": {
          "ref": "1b4c08bd-03f5-4e10-8746-a6a19d75568c",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "65d85c1e-cd24-4c32-9dce-44c2ccfe82c7"
        },
        "item": {
          "id": "b9dcc93b-7184-41a7-aafc-c2abb087dca5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "662c12de-8d76-4b21-ac06-823c62d54213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b7223d9-cdae-42f5-903e-f17b1b12b7e6",
        "cursor": {
          "ref": "e0d6bd70-f708-4699-9127-12427e6f62f3",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e171bbff-e7b9-455a-9d71-2131b90155e7"
        },
        "item": {
          "id": "6b7223d9-cdae-42f5-903e-f17b1b12b7e6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2970b91d-7594-4b4f-8fc5-493958716a74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83884fb1-5f43-49cf-a3bd-5e3600895499",
        "cursor": {
          "ref": "daf507cf-1d37-4e55-af17-e74a3579d81a",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c418d888-6779-4dd9-a513-2df67d74e9a0"
        },
        "item": {
          "id": "83884fb1-5f43-49cf-a3bd-5e3600895499",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "acdf7cc3-96b5-46fc-82b1-7b7c1d914ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a425a662-4c54-4895-a71d-f69144a02b9c",
        "cursor": {
          "ref": "9971625e-d3a9-4eae-9fdb-0108393892ba",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a7972f39-cbc8-4144-a861-206a4273133a"
        },
        "item": {
          "id": "a425a662-4c54-4895-a71d-f69144a02b9c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "702693cd-5a29-44f1-996b-b23797146f58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "b5684727-8046-4fed-ad5b-39a774b9eeee",
        "cursor": {
          "ref": "b47a45bc-f703-4b56-920d-7140f1c8dd1f",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8d102368-a098-4bcb-9a27-c6db4c50bc9e"
        },
        "item": {
          "id": "b5684727-8046-4fed-ad5b-39a774b9eeee",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "dd315556-1665-4a7c-ac61-d69f60519481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b62a4b06-b37b-482c-8a52-c04ca750d091",
        "cursor": {
          "ref": "6e3e86a9-1f02-4513-b060-883a8b351cd4",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f20e6b4d-a14f-48a8-929e-45c45b9b1ec0"
        },
        "item": {
          "id": "b62a4b06-b37b-482c-8a52-c04ca750d091",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "423ad956-a3fc-4f17-9122-c2fec5414696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fc4db00-1ee3-4234-8415-ecc45304aeac",
        "cursor": {
          "ref": "16b3cfcc-11f4-4ac6-9442-79d171e5f8cf",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "afdfffbf-b4cc-432a-b28c-123f80ccf69c"
        },
        "item": {
          "id": "6fc4db00-1ee3-4234-8415-ecc45304aeac",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c24da1a6-f7d5-4c4c-b4e3-82c204ecb12d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ca5933-1424-4984-b42c-ad08926c01c4",
        "cursor": {
          "ref": "2993f975-c137-44af-a4a8-75d2af8ccc63",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9e1eddd3-bf47-48bb-82a3-c955b26a79f8"
        },
        "item": {
          "id": "54ca5933-1424-4984-b42c-ad08926c01c4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9b05a24c-621e-4a57-b4bf-af31b1352f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd76509e-3288-48e0-b150-3414b42f4e94",
        "cursor": {
          "ref": "8dc647c7-a212-40a1-b555-604d4a85453f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d12e0c2f-5260-48f6-9930-41c3b7102cb0"
        },
        "item": {
          "id": "dd76509e-3288-48e0-b150-3414b42f4e94",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "96819292-fb85-46f5-895f-1b724e8b5831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ff9037-1cb1-47e0-b950-4f8f67326aae",
        "cursor": {
          "ref": "dbf06584-c7ca-4b4f-9bcf-27bf402b543c",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3b713f8d-b5a3-4209-84d2-66f9e384f4e8"
        },
        "item": {
          "id": "39ff9037-1cb1-47e0-b950-4f8f67326aae",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5d0915cb-5187-4008-8759-ec6d9fa13051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a94ff2ff-5665-4001-98b9-411c73ec35d7",
        "cursor": {
          "ref": "5f471d94-6ebc-4d23-a653-1041158ddd07",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1a70fa03-380c-4659-ae69-49e861b29cb3"
        },
        "item": {
          "id": "a94ff2ff-5665-4001-98b9-411c73ec35d7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bc1e4de8-2e4d-46a7-9834-216c182a4d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc5a0984-d30a-42e2-8eba-ba5c3a4850af",
        "cursor": {
          "ref": "79a66b2e-adab-4efc-b803-770e6ac7a4d9",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5d777e3a-e0cd-4375-b50a-ef865df5a8b3"
        },
        "item": {
          "id": "fc5a0984-d30a-42e2-8eba-ba5c3a4850af",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9d2eeb55-2a74-4864-a87d-1cf783bbbe3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c57002-756e-4264-85a4-6f7a6303cec7",
        "cursor": {
          "ref": "47779924-1d44-4b45-a880-faa419be6257",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e2acde97-0f98-420f-ae2d-8b7800c8dd4d"
        },
        "item": {
          "id": "d8c57002-756e-4264-85a4-6f7a6303cec7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "790761f9-4d36-4dc6-8857-8dbdc1f73711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f3293e-6f0f-4c9d-9fc8-1e365f7cf065",
        "cursor": {
          "ref": "4839ecb3-8998-46d5-bf05-110892722314",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "4d9a31c5-535f-4e5b-88e6-32ec7ebc8ac4"
        },
        "item": {
          "id": "57f3293e-6f0f-4c9d-9fc8-1e365f7cf065",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f2399125-9370-4a2f-aede-f7e2b074477c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a0f9f0-1822-42bb-8683-4f26dd7abf74",
        "cursor": {
          "ref": "5cd511a5-5b1c-4c93-a056-64f5b05ae761",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "92b35e42-f6a6-4a71-ab36-9e2759f9035e"
        },
        "item": {
          "id": "28a0f9f0-1822-42bb-8683-4f26dd7abf74",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "855948bc-3cab-4ca6-a832-821994bf6d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20743ae4-d6ca-4fdc-96f2-251eac9a99f9",
        "cursor": {
          "ref": "a6c1d49f-9e2f-4ccf-9feb-236575dd66f4",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "565e8693-f438-450f-9e62-5206031b8709"
        },
        "item": {
          "id": "20743ae4-d6ca-4fdc-96f2-251eac9a99f9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "07c15f78-6004-4160-be27-96904cac9d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea336074-10db-49ec-bfa6-1474230e203a",
        "cursor": {
          "ref": "0e42437d-c72e-4b33-848c-43d71cd902ae",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e51612b0-b204-4348-afbd-78794a798b8a"
        },
        "item": {
          "id": "ea336074-10db-49ec-bfa6-1474230e203a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "95e66ff3-dec5-41b6-b491-ab8ab3410ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1719df5d-4e94-49ad-b6a9-c0f79eb2cdd0",
        "cursor": {
          "ref": "e22ec417-5034-441f-8d7c-fa0e65ff79fc",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a8959e0d-6f1d-49c1-ab33-42d8688dc557"
        },
        "item": {
          "id": "1719df5d-4e94-49ad-b6a9-c0f79eb2cdd0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a5dbaed8-9792-4aff-8a90-a9b41eb37348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dfb38c7-c4d3-4e6e-859d-756da2e73921",
        "cursor": {
          "ref": "e2e7bf1e-e143-474d-9853-d8ac593817b8",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5cccedb7-a7b5-411b-90ff-8e7816295faa"
        },
        "item": {
          "id": "4dfb38c7-c4d3-4e6e-859d-756da2e73921",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8a5e3ffc-4579-4fe4-b49a-b2c9208f997e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a375630a-2b1f-4700-860a-73af89831367",
        "cursor": {
          "ref": "aeffc77a-64c9-4f88-aaab-32c44a88ead0",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3d3c6529-e185-43a0-86a3-623b7b0e7e8a"
        },
        "item": {
          "id": "a375630a-2b1f-4700-860a-73af89831367",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5f29232b-5a41-42ce-85fb-0830a3f9b058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c461a331-40bc-4a89-99fc-589799923d2a",
        "cursor": {
          "ref": "c2f16f4e-2bca-4069-aa05-a3a0a536375b",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "2ae477a9-a709-4156-871d-29645a6ddfb6"
        },
        "item": {
          "id": "c461a331-40bc-4a89-99fc-589799923d2a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f2600063-0e77-4d86-a59e-aef017fc2245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e0bc85-78da-468b-94f6-ada26ffa386b",
        "cursor": {
          "ref": "88e4c725-d8c4-44ea-ae2a-03900fffcced",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ea4bd04f-4aee-4f5f-965f-893126a16236"
        },
        "item": {
          "id": "78e0bc85-78da-468b-94f6-ada26ffa386b",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "9cbad0d5-3727-4e81-a90b-a43df99e7480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "facfaedc-97b1-40fd-ab9f-7276b3ded21b",
        "cursor": {
          "ref": "66ddf15e-92f4-445e-ae6b-04d44b820c8b",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "968b5f74-df9b-4195-a65b-0b35f11c9839"
        },
        "item": {
          "id": "facfaedc-97b1-40fd-ab9f-7276b3ded21b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "334cde61-7aef-4ac5-ac92-bb4dcfcf901e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb417dbe-9920-44ae-9a05-82ef012e6caf",
        "cursor": {
          "ref": "1d56f699-966b-4e51-8f1c-3a4a6e761045",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d51fbbd5-1809-4cd3-9e59-ea62f277daaf"
        },
        "item": {
          "id": "eb417dbe-9920-44ae-9a05-82ef012e6caf",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b68ab2d0-9b3e-43b3-86f6-8feac160bc80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccccb8c6-7b36-404c-9dc5-1b3471d7785b",
        "cursor": {
          "ref": "cf67759b-2571-4f4f-a5d4-3622b5b376a3",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "62bd5903-9f08-45c4-a0c5-4438801500e6"
        },
        "item": {
          "id": "ccccb8c6-7b36-404c-9dc5-1b3471d7785b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "d1871e74-ac24-4eb9-b689-973d7f396d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d11d05c-bf87-4e03-be1a-71aaa4343b73",
        "cursor": {
          "ref": "80e144e7-ebf1-4e70-83f1-fa5b3af2371a",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "cabceb80-24ab-432a-bd70-a3bbaa0704ac"
        },
        "item": {
          "id": "8d11d05c-bf87-4e03-be1a-71aaa4343b73",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b8b0c213-3d72-48f4-94a2-efc0f313605f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f7b030d-c262-4762-9e07-2a7d60ab7232",
        "cursor": {
          "ref": "a1170389-b5eb-4f33-8b81-15b2c1e735a1",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "1ca16c92-b65c-4d6e-88c2-5aba59f3ccfd"
        },
        "item": {
          "id": "0f7b030d-c262-4762-9e07-2a7d60ab7232",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "bd8fa192-f3a3-413f-98b2-9688457787ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d34c2aee-4577-40dd-a98f-2e6f3ac0c3e0",
        "cursor": {
          "ref": "f952caaa-8d4f-4505-9d38-09972fdb2bc4",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "32c69834-f3cd-44a3-ba75-4ec041126076"
        },
        "item": {
          "id": "d34c2aee-4577-40dd-a98f-2e6f3ac0c3e0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e3719748-7f4a-42c5-925a-9c27ec0f519a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f38291bf-e2a6-4490-8643-b7379065d37d",
        "cursor": {
          "ref": "0a72959f-68c0-4060-b632-ad4265c89b2e",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "72aa2090-ddd4-4be3-a083-231f0bcfa457"
        },
        "item": {
          "id": "f38291bf-e2a6-4490-8643-b7379065d37d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f6983377-5cdc-4338-8d81-289f767dda13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71f8f48b-24ff-4cca-b6cf-431df679a2d2",
        "cursor": {
          "ref": "fc419cec-1368-4fbc-9210-6b2a053ff4e0",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9b819ebb-0908-4907-a9c2-fbcb39a7dda3"
        },
        "item": {
          "id": "71f8f48b-24ff-4cca-b6cf-431df679a2d2",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7af1d8fe-253a-4e52-886e-0b58f362f11b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9b8bf2-ccd8-4c6f-87a5-e5e64b6264ef",
        "cursor": {
          "ref": "80181908-951e-41ef-9746-ed58e23eb3fe",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "abc181c2-973a-4974-a960-1d177a7a1746"
        },
        "item": {
          "id": "cb9b8bf2-ccd8-4c6f-87a5-e5e64b6264ef",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "819cfb53-d6b7-478d-8aff-d50032f72f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd2d22dc-86a5-41c2-a0d2-f6ac46036669",
        "cursor": {
          "ref": "a425c764-a65a-458a-a4fd-49cc6ffe1910",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0197d554-f24f-4224-8a4a-c49f87ea7b92"
        },
        "item": {
          "id": "bd2d22dc-86a5-41c2-a0d2-f6ac46036669",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b081ca13-5767-4052-a7b3-cb7cd71319dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c787c72-ec87-46c3-b242-422c9325c3a1",
        "cursor": {
          "ref": "0b01de2a-3b86-4c66-b0ee-9c914d395f06",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "0f3904ab-4acc-4ccf-b8da-56a4147a8c15"
        },
        "item": {
          "id": "4c787c72-ec87-46c3-b242-422c9325c3a1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9929edac-589e-418f-9128-51ee3692e3ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1c23d0-e99d-49d5-8d11-08949246f87d",
        "cursor": {
          "ref": "dd00eed9-26a4-41ce-a477-7f3d7572e79d",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a7738b46-f2ac-4488-899c-609289ba9306"
        },
        "item": {
          "id": "cd1c23d0-e99d-49d5-8d11-08949246f87d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "040a16c5-6d86-417e-b06c-49369a235402",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "0c588be0-f6a7-4d6a-8f6b-280dc57c9e4b",
        "cursor": {
          "ref": "d9b777ae-139c-479f-a9a5-872b6448b682",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "09496595-0530-4e6f-ae1a-0a8897bdf42b"
        },
        "item": {
          "id": "0c588be0-f6a7-4d6a-8f6b-280dc57c9e4b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a51101f2-796d-478e-b200-71d93c40d4a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e64356-5c1a-479c-b2a0-882457827bd5",
        "cursor": {
          "ref": "c934175d-b054-47c4-9240-b94dfda0586b",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "381cdf64-13b2-4ce1-bbd1-c38717303d8e"
        },
        "item": {
          "id": "12e64356-5c1a-479c-b2a0-882457827bd5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9951ea94-7166-42a2-a24f-e39e5d10dc36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3814a13d-89ae-41a1-80d0-a5fbbbfef997",
        "cursor": {
          "ref": "5f4cefa2-d7f3-4399-ac46-fe6d047d9d47",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f124bd3d-bef6-4666-860f-5e172915ba5e"
        },
        "item": {
          "id": "3814a13d-89ae-41a1-80d0-a5fbbbfef997",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f5e32366-8c73-4de8-9001-ff1f76ee914d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d16de87-92a0-4ea3-b990-eb92957b8008",
        "cursor": {
          "ref": "6a9d5192-6fe5-4be6-b5a6-d1ca44b5d7fc",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e21652f8-81da-4c40-87a8-ce4f7116c641"
        },
        "item": {
          "id": "7d16de87-92a0-4ea3-b990-eb92957b8008",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "092d22e1-c90e-43b9-ae18-99c86c10aee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "366bebac-74ec-4777-993f-e0cce748af67",
        "cursor": {
          "ref": "03a20236-4f08-4974-b3f8-676c019e6c50",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1d6ccb21-4f59-477b-ade4-d2056cfd3a55"
        },
        "item": {
          "id": "366bebac-74ec-4777-993f-e0cce748af67",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9f4dfc57-9cc3-457e-b01d-7c44bce62b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d25952f-a1c4-44e2-84c6-4ca9c9e2b796",
        "cursor": {
          "ref": "872bc27d-0b0c-4784-b0b6-336c4a1608d7",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "443299f2-a5fd-4e79-8d78-4e5e39378167"
        },
        "item": {
          "id": "3d25952f-a1c4-44e2-84c6-4ca9c9e2b796",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1135a402-8fb9-47a4-8b50-e29fd50ab210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "526cdcca-546a-498a-9bf9-36a0dddf2948",
        "cursor": {
          "ref": "0a172257-004f-4362-a1a5-08f128862e51",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d6468334-a18f-49ed-a7ac-b64956721924"
        },
        "item": {
          "id": "526cdcca-546a-498a-9bf9-36a0dddf2948",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0496d87c-0487-48fb-91d6-cc627a468cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7debb749-3e40-48ff-8e46-56b0aa89500f",
        "cursor": {
          "ref": "313acf34-c66c-4b59-8359-73e6023dc147",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "013d79ad-048f-4b63-a5ad-2cfbd5026eff"
        },
        "item": {
          "id": "7debb749-3e40-48ff-8e46-56b0aa89500f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7eab46e3-bced-42ad-bcdb-d00284c3f1db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85dce0d1-21e5-441f-8e96-b32c8e02d1d2",
        "cursor": {
          "ref": "19d968dc-4355-4a49-9b28-f53919163d8d",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e58bc2f4-39d3-4fc3-b836-23cc9ac8a309"
        },
        "item": {
          "id": "85dce0d1-21e5-441f-8e96-b32c8e02d1d2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "efa07c32-8139-4f39-bc07-2386695b18b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89085b01-e1b1-4280-bda8-724dc97725f2",
        "cursor": {
          "ref": "e22121df-e38f-4d87-b713-96ff91529910",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c4bc516c-46b4-40aa-8de5-e5d70faba4be"
        },
        "item": {
          "id": "89085b01-e1b1-4280-bda8-724dc97725f2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "da54013b-50b1-407c-b776-b0cb3b31eb9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae1df3e-97f8-44df-bd77-4ab77a970472",
        "cursor": {
          "ref": "9820ba5f-8f68-4583-8455-a732fa4fb2b6",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5be50358-53a3-4aec-b6a0-d09b168b5c98"
        },
        "item": {
          "id": "2ae1df3e-97f8-44df-bd77-4ab77a970472",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "bb275431-f7fe-4e27-bd89-eab4797876a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aedc5f6-d4fd-4514-98e9-219efd3a6df9",
        "cursor": {
          "ref": "3be296d1-d865-4067-bdc0-e76c9c16f7d2",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f5a8a4a8-ad07-4de9-9613-768081dc9d3e"
        },
        "item": {
          "id": "9aedc5f6-d4fd-4514-98e9-219efd3a6df9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8f3dac97-a81d-414f-8342-079083f5d53d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c5446ea-dda6-4727-b4fd-5174479aa1cf",
        "cursor": {
          "ref": "2be33ed0-6998-4bfb-84bb-30a74d12ffee",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "07824917-e72e-45f2-a445-68d63843db04"
        },
        "item": {
          "id": "5c5446ea-dda6-4727-b4fd-5174479aa1cf",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "51e120b1-db12-47e8-9325-962e87cec12d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05399578-ac3e-4fa2-868b-494a71596fc0",
        "cursor": {
          "ref": "a98a7cf9-0d3d-44e9-a678-9415b3a4b8d1",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "26551d10-3688-41d6-909e-bc7e83761afa"
        },
        "item": {
          "id": "05399578-ac3e-4fa2-868b-494a71596fc0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "41fc6591-cfcd-432d-9f4f-40c684a8df3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7fd87fb-e605-4aa7-92c2-575ca3b2231b",
        "cursor": {
          "ref": "575754e7-51b8-47e6-93c9-62aa8e6f8e2d",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d4c9abdd-c8ba-4f31-bde1-218c6e5f0d07"
        },
        "item": {
          "id": "c7fd87fb-e605-4aa7-92c2-575ca3b2231b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "08616aee-9a87-4e9b-aa4d-cf6c815b1643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972f3b85-15d1-45da-b887-1d9c807e4e11",
        "cursor": {
          "ref": "23b4a53b-021b-4a21-9b60-2865ff68e8a6",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4b976b30-411c-43b2-a2de-865beb4417e7"
        },
        "item": {
          "id": "972f3b85-15d1-45da-b887-1d9c807e4e11",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "60f718de-245f-4782-a34a-d2197e60b950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d836af-fd3a-4d5c-b787-ad85eb78ebbd",
        "cursor": {
          "ref": "effbca92-3fc3-4613-922a-f2bd371187b7",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "95ac111f-27a8-4b30-b38b-037d73fca734"
        },
        "item": {
          "id": "50d836af-fd3a-4d5c-b787-ad85eb78ebbd",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5725568d-16b9-4c39-8eaa-ccecdc99365d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2c64ac-556c-46f0-9194-32a5475230bd",
        "cursor": {
          "ref": "08fa4cfb-d567-41bb-a01d-1136ab2f6d95",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "15cad3c5-1a9f-4ed5-bf55-5e2fe4b2fd84"
        },
        "item": {
          "id": "7c2c64ac-556c-46f0-9194-32a5475230bd",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "81721fdd-3fe9-4cc1-994d-7d3ee164780f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a7b97d-6d6c-44ff-860d-be2da6470d4b",
        "cursor": {
          "ref": "a7560d91-8945-4dcb-92e8-801c8655f336",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ac40e9ae-871b-4d65-9cba-0ff9ad165478"
        },
        "item": {
          "id": "c1a7b97d-6d6c-44ff-860d-be2da6470d4b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e496e6f1-c5b6-427b-b873-592eecee2116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b0c726c-be08-408a-918c-3c737bb69161",
        "cursor": {
          "ref": "801578f0-89ea-4cb1-aee3-d490904d958a",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "5010e086-5d07-4d3a-bd4f-768e0af5f966"
        },
        "item": {
          "id": "6b0c726c-be08-408a-918c-3c737bb69161",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b30b2999-4075-4866-acf8-f8e8c3e7f077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30fd784-65b2-4ce7-872c-d8cc4168973f",
        "cursor": {
          "ref": "c8282a84-26c4-42fc-8326-effe46dac294",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "477dc57e-bac6-4aa6-a0be-457ea74a594c"
        },
        "item": {
          "id": "d30fd784-65b2-4ce7-872c-d8cc4168973f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ecd605bf-26e6-4694-a59c-4d445683bac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7a46a5-8c5e-4a71-b850-54a9773129c8",
        "cursor": {
          "ref": "c902bcb8-f168-4e48-ac96-d2d58403c621",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6820893f-9197-43b2-9ccb-2d5f50aca996"
        },
        "item": {
          "id": "7b7a46a5-8c5e-4a71-b850-54a9773129c8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b4a3c0c7-5b7f-4ad5-bf9b-be1dd9749b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2c3fe9-5c8f-4ab0-85e7-15f2cbafed57",
        "cursor": {
          "ref": "0fef3412-63cb-47bd-aa9a-88f45b529fef",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "01ad01b4-3bfe-4ba1-b595-7f0496e7ffb0"
        },
        "item": {
          "id": "0f2c3fe9-5c8f-4ab0-85e7-15f2cbafed57",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ac426d9d-3a15-4ade-935a-a8edf271e3f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52361d1f-2c66-4567-a8e2-7879361ba934",
        "cursor": {
          "ref": "990caf5a-b02f-4ee4-96e5-9d9012b7b5a4",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "625ea6d1-77db-4bc8-b7dc-0a266052ba41"
        },
        "item": {
          "id": "52361d1f-2c66-4567-a8e2-7879361ba934",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9d2c6ac9-e7fa-417e-8ab8-c5a68dc241f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb02cb2-1b0a-473d-9f3c-292e7da24964",
        "cursor": {
          "ref": "2d0f61c2-6949-4686-995d-5aa380f217e2",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "64552d94-b923-4064-bbd9-bc27b4a5ac50"
        },
        "item": {
          "id": "3eb02cb2-1b0a-473d-9f3c-292e7da24964",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "997665eb-8df1-493a-b25c-8605bd3dc0af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "105496a7-6c1a-4120-902e-4109bce320da",
        "cursor": {
          "ref": "01a8e20d-13e0-4df6-a1a9-d4beb7ebd97d",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b7926a64-0177-4395-acd7-ee798f2d1603"
        },
        "item": {
          "id": "105496a7-6c1a-4120-902e-4109bce320da",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "44c2aa4b-3b1d-4879-a98b-903713bba258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f538e1f2-460c-4e5b-bae5-e9cd3957ddc0",
        "cursor": {
          "ref": "289d3024-9576-4f63-8fba-b27184a88a81",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "63a69a83-f99a-43c5-8376-5b4658644180"
        },
        "item": {
          "id": "f538e1f2-460c-4e5b-bae5-e9cd3957ddc0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "849b0c12-8cf6-4097-8060-00bdb61e5926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f59fb9e-bd27-4929-94b0-d259e1f04cc8",
        "cursor": {
          "ref": "fa7487b2-fb21-40b7-8b5e-015dd4ada18c",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4fc13332-7934-4fe9-84a4-fe6ec019d7af"
        },
        "item": {
          "id": "0f59fb9e-bd27-4929-94b0-d259e1f04cc8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f02d623d-2e27-4fba-8052-a91ddb2b1f1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc960a3-70b4-47e0-9a3f-cfeb2bc66c98",
        "cursor": {
          "ref": "3c30633f-cfef-4deb-8645-6c08735e963e",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7dfb46e7-6cf4-463d-b181-59e4242c6e41"
        },
        "item": {
          "id": "2fc960a3-70b4-47e0-9a3f-cfeb2bc66c98",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "3634090b-8ffb-4cbd-b2ac-1e88c8ad1cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b50213c-3b5b-41fe-a588-27593af8030d",
        "cursor": {
          "ref": "8adf0906-a914-4a2e-a8f9-3c300fdd9569",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "04fa7ade-a42f-4ea7-9088-135418e9f1f3"
        },
        "item": {
          "id": "9b50213c-3b5b-41fe-a588-27593af8030d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "fe8e69ee-3c34-46a5-ac3a-a98d3cd81bec",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "7d5866f0-bfba-48e8-88a6-dfdbdb9de903",
        "cursor": {
          "ref": "5eba529d-951d-48a4-89a7-af87ed10a71d",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bee679ed-5f74-4d03-b5a5-8a3386d1fa23"
        },
        "item": {
          "id": "7d5866f0-bfba-48e8-88a6-dfdbdb9de903",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f486d76c-7f9b-4371-9404-c4415c731634",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "16b3446b-c090-4125-a52a-55bd88e93d1c",
        "cursor": {
          "ref": "f05cc544-1206-446d-943b-097443e871e5",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9c640825-ad94-4072-a185-5998339d4804"
        },
        "item": {
          "id": "16b3446b-c090-4125-a52a-55bd88e93d1c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "fbe1b7f4-e38e-449a-bb3a-064e1dae09a1",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "7c457551-e260-48a6-ad73-0539bd7791aa",
        "cursor": {
          "ref": "55bbdb6b-b66a-4e2b-baa6-32c6f5374942",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "fb37e9bb-f1c4-49b4-87da-91d8cab9b471"
        },
        "item": {
          "id": "7c457551-e260-48a6-ad73-0539bd7791aa",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "753066cf-7eda-4782-a9b2-b010243da92c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a3ffee-e4d6-4e77-af35-2a250f0bbe49",
        "cursor": {
          "ref": "25db9333-0021-4ebe-92ed-5b79b0c12129",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3f5257d2-71c5-4ff3-bb79-9af7caae9bae"
        },
        "item": {
          "id": "62a3ffee-e4d6-4e77-af35-2a250f0bbe49",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "21dc0753-9f2f-43ef-9536-65015e737710",
          "status": "OK",
          "code": 200,
          "responseTime": 195,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "e75ecba7-4741-470a-9e57-6ab4f1474378",
        "cursor": {
          "ref": "e86dbf61-76d1-4fbd-9ea7-cf264185ebd7",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "972704d3-be96-439e-8bea-12e4c2e1f537"
        },
        "item": {
          "id": "e75ecba7-4741-470a-9e57-6ab4f1474378",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "62a67af8-16ee-4941-9dd8-93403e2e94c0",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "1db0089d-b236-48bf-91b6-46d9cb473c9f",
        "cursor": {
          "ref": "e2fc2c27-fa07-46a3-9efd-5a6a613c394c",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "06150d1e-b6cc-4731-a085-3f81006bc671"
        },
        "item": {
          "id": "1db0089d-b236-48bf-91b6-46d9cb473c9f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0d31a5e5-8ee0-4f10-a2a5-be8ae2e47616",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "e64cda7b-e7f7-49b7-9c95-07d0675f8a6c",
        "cursor": {
          "ref": "f6fa32b3-2f8e-41ce-b62f-baf53d5be027",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9bc696bb-2762-48e1-a93c-e06dad2ed1ad"
        },
        "item": {
          "id": "e64cda7b-e7f7-49b7-9c95-07d0675f8a6c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b03ac8d8-7b45-4983-be86-40479695f505",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "722bfe68-f2ca-459c-bbbb-b46a2ab529b0",
        "cursor": {
          "ref": "6b932bef-5c3d-47fa-887d-81b12c839f5e",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "453cae0b-c95d-4e33-a556-8e77c969ef66"
        },
        "item": {
          "id": "722bfe68-f2ca-459c-bbbb-b46a2ab529b0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "7f03f49d-1ef2-4115-9285-f0b88f247553",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "94200454-ce4e-4a3b-866b-aa9d5c175d2f",
        "cursor": {
          "ref": "a29bfc67-08c2-4ca9-a2d6-0155e753a2fb",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "509f2b92-00ad-41b3-bce2-3726819b9bc0"
        },
        "item": {
          "id": "94200454-ce4e-4a3b-866b-aa9d5c175d2f",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "81cabfdc-711a-404a-924f-41da03822869",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "9f97d2c3-d012-419c-8608-8f832d4cab37",
        "cursor": {
          "ref": "bb369e48-67fd-4c2e-8507-295e66baf727",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2bcf247b-4514-407c-a05a-ea4ca7c53400"
        },
        "item": {
          "id": "9f97d2c3-d012-419c-8608-8f832d4cab37",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "187f72de-ee93-49e0-88dc-5e9392b92471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e55af9-8138-42b2-bce4-4f7efade76dc",
        "cursor": {
          "ref": "978302c6-1ac2-4d15-bbb7-42f6aef04fe4",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c96379eb-e927-46d6-a2d7-855b48fb5589"
        },
        "item": {
          "id": "b6e55af9-8138-42b2-bce4-4f7efade76dc",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "34ecfca0-b85b-49f5-9c02-cb44a81d20e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0738dfb-5ce8-4ec5-af4d-fa7e8d03d32e",
        "cursor": {
          "ref": "72c72280-477e-4d28-968d-635da8b1f5ab",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3ca02057-09c7-4825-b560-b6077f45e5d8"
        },
        "item": {
          "id": "b0738dfb-5ce8-4ec5-af4d-fa7e8d03d32e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d1a19ff5-8237-48e7-9937-d260c948ff9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2160536-2e65-4668-800d-c43da4eda7e7",
        "cursor": {
          "ref": "eb672330-223f-4374-a53c-9e90075354d9",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "347f31ef-1e9d-44fc-897f-156c2ed39cbb"
        },
        "item": {
          "id": "c2160536-2e65-4668-800d-c43da4eda7e7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5d325b6b-5fec-417b-8625-718cc7b39b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf62cb74-03fe-429c-a665-483aaafd8e15",
        "cursor": {
          "ref": "144d8247-04ca-4ecf-baa3-f4cdaffcba5c",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5bc04a85-8d1f-431f-8262-fd0ea83ca896"
        },
        "item": {
          "id": "bf62cb74-03fe-429c-a665-483aaafd8e15",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "851bdb49-274e-4b4d-a37f-a145bf34bbaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca48cb6-94ca-43f9-be7c-1fd8982f0a0d",
        "cursor": {
          "ref": "aaad3bc7-ee2e-4f42-a8f9-0a8ce11ecd24",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "77e6724e-53e9-48ec-8226-0eaba81ea643"
        },
        "item": {
          "id": "dca48cb6-94ca-43f9-be7c-1fd8982f0a0d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a3999784-f71c-452a-bcbe-ce740e0251d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a9d29b-16af-44fe-a47b-6508ea0df7e4",
        "cursor": {
          "ref": "68026350-225d-4f4a-bf9f-74324822ff53",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4c66886f-5652-48be-a7e1-e5dff3f7dddc"
        },
        "item": {
          "id": "a1a9d29b-16af-44fe-a47b-6508ea0df7e4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7f82229d-1ec6-472b-9844-dc4575266aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65dca458-bc61-41d4-86ee-1acbeffde92a",
        "cursor": {
          "ref": "b1dba6db-d63c-4edb-a45d-606a67cb9b4c",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5f21a236-4180-46a7-a3df-9bab3166954a"
        },
        "item": {
          "id": "65dca458-bc61-41d4-86ee-1acbeffde92a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "fc4aa557-9f65-488c-abe8-297d74576573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2562f23e-367c-4bc4-a612-8487e6f93201",
        "cursor": {
          "ref": "3ffde218-a8df-4e6e-94c1-4eec1273d46a",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c8bee761-b6ca-4ba6-9886-4a2634f4b7bd"
        },
        "item": {
          "id": "2562f23e-367c-4bc4-a612-8487e6f93201",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "cba2d1ae-3a64-4221-ad8b-0075ef702e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d3e5f8-763e-4a8f-9575-9e1f681c9d8f",
        "cursor": {
          "ref": "7d6b5b72-cf93-43a1-b14e-284966d5f94b",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2ccb66a4-7dc4-4107-9f1c-b07bdd253fc4"
        },
        "item": {
          "id": "01d3e5f8-763e-4a8f-9575-9e1f681c9d8f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8a805a8f-ed45-4d6a-bf18-b0e1d62815e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc32078b-fcdb-4d8b-b8f3-52b01d890d23",
        "cursor": {
          "ref": "bf109735-50d3-4ca2-b331-b5ed5fdc0239",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "26b100ad-3d84-4c19-9d29-9d70e0d0e48e"
        },
        "item": {
          "id": "fc32078b-fcdb-4d8b-b8f3-52b01d890d23",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "932ab409-ada2-496c-bb9d-0153b84fac0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b489ca9-f5d7-4d93-9d2c-e6af90bd4994",
        "cursor": {
          "ref": "95289481-8d8b-4515-9ff4-d6bcf245cd78",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "bf62d5a6-230e-4541-9ef9-0b424554d805"
        },
        "item": {
          "id": "0b489ca9-f5d7-4d93-9d2c-e6af90bd4994",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8c1178d1-c608-4bb1-bc41-4569dd0d3fd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c56b413-501f-4653-b84e-4964db0c75db",
        "cursor": {
          "ref": "4a713b06-2456-4053-83a1-3e9f58b4dc90",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "41c0459e-bbc5-4176-8c83-a965851c43b1"
        },
        "item": {
          "id": "5c56b413-501f-4653-b84e-4964db0c75db",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ed6c28fc-7af9-45ed-85b8-e1e48f8994be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455140a9-9327-4488-b448-b689559238b1",
        "cursor": {
          "ref": "f5bd3676-213c-4e2b-b235-233d471706ef",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0ff93407-2e80-4e90-ace9-3c97138fd944"
        },
        "item": {
          "id": "455140a9-9327-4488-b448-b689559238b1",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "bbe1b7ac-b401-42ec-a175-b60b5852e7e7",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "95b028bf-0f50-4ee9-a8e0-e1c7e05407e5",
        "cursor": {
          "ref": "1b85d41c-dbcc-44d0-a574-6e0d6d1f97d8",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "270474d5-e75b-4349-8769-8f1c2547dee6"
        },
        "item": {
          "id": "95b028bf-0f50-4ee9-a8e0-e1c7e05407e5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "239ac48d-5d94-4c97-9327-2e44444baf77",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "99402433-acda-4445-87de-aa25d14571d5",
        "cursor": {
          "ref": "1d28044c-0c81-496c-a8d3-7a543404f285",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f4ee92b3-4c50-4c42-927a-cb34368cbed4"
        },
        "item": {
          "id": "99402433-acda-4445-87de-aa25d14571d5",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "7aa5ac92-6c0f-41a7-a04b-4269c3cb4ee4",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "3eeaa0ea-116b-4653-9f21-5ed933ff7375",
        "cursor": {
          "ref": "fe3fca60-9c96-4fca-8412-b3e74e412628",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b54c22d1-1482-4a13-b4c9-089f6f9a1410"
        },
        "item": {
          "id": "3eeaa0ea-116b-4653-9f21-5ed933ff7375",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ba907319-1da4-46ab-bed0-c0b61ce909e2",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "47a7c591-de4a-4cef-b9ff-7b98044dc663",
        "cursor": {
          "ref": "4f77ae8d-0da5-49e5-bfe0-79e83af810c7",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "dbd329f9-9eea-492c-a8ce-7e61ddec1d73"
        },
        "item": {
          "id": "47a7c591-de4a-4cef-b9ff-7b98044dc663",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "fb1af627-6be6-44ac-8afa-deea639286f5",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "941863c5-ea9d-4487-8e82-6dbe0fb190cf",
        "cursor": {
          "ref": "e698bc98-8cdd-4180-a0bd-7afb93db226c",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d2930370-fdfe-48b4-ab09-417060816d4c"
        },
        "item": {
          "id": "941863c5-ea9d-4487-8e82-6dbe0fb190cf",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a96352b5-ec68-4dfa-b40b-0727ed89080c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a300cec7-a228-4429-9705-87b9deae1801",
        "cursor": {
          "ref": "7907a296-a6c3-4ad1-84f7-4b22419ef015",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "515195e7-c0b0-4d90-9f0e-8e8404a16686"
        },
        "item": {
          "id": "a300cec7-a228-4429-9705-87b9deae1801",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "9065493f-6366-422c-aaef-7bb7040088cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f043685-e9c6-416c-87ba-bf848701c32e",
        "cursor": {
          "ref": "0a01351c-1d58-4281-942c-81ebf295faf8",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "06148e4f-c34b-400c-af1d-9fce57c86f50"
        },
        "item": {
          "id": "1f043685-e9c6-416c-87ba-bf848701c32e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4ab81d4a-6687-4dcd-b45a-9c5c7b8817b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c494fce-80d3-4588-8c7b-47be16a63b5f",
        "cursor": {
          "ref": "381a23fa-d356-4097-8161-88e8fd1773cb",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6456e42d-1cc4-429d-9298-8e6d68295ed4"
        },
        "item": {
          "id": "2c494fce-80d3-4588-8c7b-47be16a63b5f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6b7b5244-d6d7-40f4-a1c0-e2892592a734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4fa9406-352b-4f24-96ad-1cdf92f130d0",
        "cursor": {
          "ref": "da106c35-a8f7-483a-a159-4742769ecb57",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0b8e417d-5b1f-46c1-a292-c423f8b5ea25"
        },
        "item": {
          "id": "f4fa9406-352b-4f24-96ad-1cdf92f130d0",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1985a647-8dc7-4af8-b471-7c5947e72dac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde0fcef-fea4-4583-8662-2a9f9c02dd3a",
        "cursor": {
          "ref": "6dc64e33-c402-4158-beb5-3a5f8b44559d",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "28e7c3e7-9153-47c1-8bc1-68e8f0b830a5"
        },
        "item": {
          "id": "dde0fcef-fea4-4583-8662-2a9f9c02dd3a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "3d23cbce-b8ef-44dd-9e3c-7d899911a871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "197e932f-9626-45c7-8f06-143a0ae0b332",
        "cursor": {
          "ref": "6eb923d9-5e7a-41c7-80b4-7a427cc620ec",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2915d4f3-2e7a-4c59-87d2-e0becc2a1c04"
        },
        "item": {
          "id": "197e932f-9626-45c7-8f06-143a0ae0b332",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4c6d1210-f974-4a79-881c-e45435cfa5c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0597cacb-bb4b-4377-8eca-3fa8c7d702b1",
        "cursor": {
          "ref": "2f24487f-0f56-48a8-9f31-9ec659bb7503",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0236df6d-970f-4697-9b0e-ac745d213fe1"
        },
        "item": {
          "id": "0597cacb-bb4b-4377-8eca-3fa8c7d702b1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "92e82446-977e-4d9e-a79c-3634628da4e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "232814f7-9ade-4830-bf93-40d601994b1f",
        "cursor": {
          "ref": "d7b354b1-05b3-41f9-b533-c56d6577283f",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c2e1a093-0d94-4a8d-8b26-874d050f4a5d"
        },
        "item": {
          "id": "232814f7-9ade-4830-bf93-40d601994b1f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3f0e848a-4bac-4c81-8989-7d0a8ca5e024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "540b7365-6d99-4f94-b38a-2c049bc0ba1d",
        "cursor": {
          "ref": "489e89cb-7bb3-4ed7-b3e3-d604fd665b22",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "9fe69f43-8e46-4401-a3b2-419c029bac07"
        },
        "item": {
          "id": "540b7365-6d99-4f94-b38a-2c049bc0ba1d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5ee90d4e-4392-49c1-8f0d-3164debaae96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a6a13f4-46cc-4763-a5e2-57919f9356da",
        "cursor": {
          "ref": "f852ce5d-bdf3-47cc-a633-792e6bdd7f3f",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "f0b068f1-1283-44a2-aec0-75a34de50bab"
        },
        "item": {
          "id": "5a6a13f4-46cc-4763-a5e2-57919f9356da",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d6614272-9f60-4a75-99cb-a1c4486d79de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c79793aa-1de1-43ce-a097-455df5eb8869",
        "cursor": {
          "ref": "7bf38dcd-0be3-4ebf-9b68-6cf8af0eaa3e",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "d1004c3e-5c15-455a-8f85-aa5e7ad59daf"
        },
        "item": {
          "id": "c79793aa-1de1-43ce-a097-455df5eb8869",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "31499629-a801-441b-95c1-e5ae76b86541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a30aaab3-e28e-40a5-8672-0a86894c9571",
        "cursor": {
          "ref": "43b0a806-69ff-409d-a3c5-1c6b7aa1575e",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "5ef95079-5ab3-4031-b3e6-7896f5ad5a17"
        },
        "item": {
          "id": "a30aaab3-e28e-40a5-8672-0a86894c9571",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "33492912-61a7-4dda-a17a-95f06a63fbac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b665f9d-28f6-4c04-8530-bea47726e077",
        "cursor": {
          "ref": "f2d847a8-cbda-48e4-901b-3c19d1ad9422",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "e81c1173-e81e-4ef6-82cc-0eda0dd887f1"
        },
        "item": {
          "id": "8b665f9d-28f6-4c04-8530-bea47726e077",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "83e94527-0774-412e-8cbf-6244a4ff9be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0896d6d-1e34-4fe7-a53b-857d3e96ecdf",
        "cursor": {
          "ref": "b572073e-de98-49f7-9da0-a649e942d92d",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "c69b6149-0629-4785-89cd-ec7101b8ecf3"
        },
        "item": {
          "id": "e0896d6d-1e34-4fe7-a53b-857d3e96ecdf",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c7d6a035-1bf2-489b-adf7-b400b55fdf66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e53cb33-c92f-4551-8145-7b596d8e6dff",
        "cursor": {
          "ref": "c4b648da-9ece-4395-84ba-9804513a3c1b",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "23c20000-9428-495c-a3ec-95f538da2db6"
        },
        "item": {
          "id": "8e53cb33-c92f-4551-8145-7b596d8e6dff",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ffb29c77-90f5-47e6-aea8-4427c22b8ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c735992d-da24-426c-9aca-fdf06af3b307",
        "cursor": {
          "ref": "4f8f5d8e-991b-44df-ba70-1d355fb2b789",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "2c81c275-8146-4741-a325-d49bd3d7900c"
        },
        "item": {
          "id": "c735992d-da24-426c-9aca-fdf06af3b307",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7d6dfa09-a75e-4e54-84f4-df88521b991c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b9db764-0c51-4b5b-b21a-aea1251bc34e",
        "cursor": {
          "ref": "8a653b78-0a9e-41dd-9882-eccaf48b23c9",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "346befa4-97d0-427f-b664-f7d6baa83baf"
        },
        "item": {
          "id": "8b9db764-0c51-4b5b-b21a-aea1251bc34e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "fb90c1a0-4e7a-4d99-8b11-16fff2b5446b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6337966-a758-4681-9ef7-4dc9f35d65be",
        "cursor": {
          "ref": "1c0d985c-e638-49c7-ace8-59a8481792bf",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "18e6f4b2-e193-4b67-96d3-01ddfb8e6d6c"
        },
        "item": {
          "id": "b6337966-a758-4681-9ef7-4dc9f35d65be",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9bcb3db7-2934-4945-b200-0e940bc23b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ee5c04-1927-40be-af18-d301267f3286",
        "cursor": {
          "ref": "b5d09b4d-2027-4e31-8d24-3022273a1de1",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "8cd6a75e-935a-4d7b-aa27-72ef011a19be"
        },
        "item": {
          "id": "b7ee5c04-1927-40be-af18-d301267f3286",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "55680974-1092-4299-a9a9-fa267d54a999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b93abb70-2118-44c2-ae75-240cda7184df",
        "cursor": {
          "ref": "3446fd4b-7a55-4eac-ab9d-a526d2ac6b72",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "a3917f66-9b75-4d53-8d32-4cd53578788b"
        },
        "item": {
          "id": "b93abb70-2118-44c2-ae75-240cda7184df",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7b848ed9-d576-4757-8a7f-666f0b064041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2f635c-01da-47dc-b956-a8096e4593f6",
        "cursor": {
          "ref": "35c0d050-150e-4679-b243-1c1d3febe401",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "36bbded1-5d6b-4d66-9b08-7982e188695e"
        },
        "item": {
          "id": "3a2f635c-01da-47dc-b956-a8096e4593f6",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "143020b1-dac7-4c1d-8c54-1bbc2c1ed6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a978832b-cfef-4dbd-ac3f-9cbb671980dc",
        "cursor": {
          "ref": "98108116-6121-45c4-baf3-2916bd0638b2",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "059cd685-68bf-4341-aaae-ace510922faa"
        },
        "item": {
          "id": "a978832b-cfef-4dbd-ac3f-9cbb671980dc",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "99826715-b2a4-4686-b914-2993008cd386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d28d33f-79cc-4051-8232-de2a0c5f310b",
        "cursor": {
          "ref": "6afb9928-dd43-47d3-9bfa-378a4033d8f1",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "4e2ddf28-acba-40e0-8664-1bf4c337746d"
        },
        "item": {
          "id": "2d28d33f-79cc-4051-8232-de2a0c5f310b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ddcd25e3-d8e4-4673-b64e-157cdccbdfd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fded418-c86e-4079-a7d1-ba18b67a9ac7",
        "cursor": {
          "ref": "1fb8d4e5-d3ec-4777-8633-578a4ed66df1",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "16e49bd8-8f4d-403c-a7ed-b97e68c0eb3c"
        },
        "item": {
          "id": "7fded418-c86e-4079-a7d1-ba18b67a9ac7",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1e9715a9-ea3d-4317-8d5e-5fdd728da7d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ad80a9-7d7f-4b74-aed9-f3be3f0a08d3",
        "cursor": {
          "ref": "2a5f090b-c857-415e-9345-58077d11e5e3",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "95d44f9c-a3d6-4a28-813a-bd22e95d2184"
        },
        "item": {
          "id": "78ad80a9-7d7f-4b74-aed9-f3be3f0a08d3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3d1d765c-98ff-4aa5-b2e9-a2c98b971e26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637e2191-d9a5-4bd8-bd30-c146a3a0a414",
        "cursor": {
          "ref": "2c0be60a-b578-4b0a-89b6-14ce30a459c8",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "f3cdfd70-350a-46d5-9f91-b67e6012f784"
        },
        "item": {
          "id": "637e2191-d9a5-4bd8-bd30-c146a3a0a414",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "89d932e3-4097-4bcc-adcb-3113f9c031b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4417ea-d4bf-47d6-b66f-2362efe02004",
        "cursor": {
          "ref": "dedb276c-11e8-4903-a9da-22930849cc5f",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "a5b99895-d9d4-4868-b8ca-362153eae7ab"
        },
        "item": {
          "id": "0f4417ea-d4bf-47d6-b66f-2362efe02004",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "87d69f41-33eb-47e6-835f-9ab4a8e2177d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861aef50-3977-4f3a-9879-2ee6a56b86c8",
        "cursor": {
          "ref": "5d3289a5-7ca6-4c7c-8459-4d360dbfced6",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "1acda4cd-1983-4a12-9885-b312d4538c18"
        },
        "item": {
          "id": "861aef50-3977-4f3a-9879-2ee6a56b86c8",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3ed8b868-8e74-430c-9dc1-898985081274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d92d5296-7486-4710-aca8-5325962215db",
        "cursor": {
          "ref": "7693161f-ebb3-43bf-a5e6-8d531f9b6193",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "7dbacb83-7474-42fd-af70-efd56c81861d"
        },
        "item": {
          "id": "d92d5296-7486-4710-aca8-5325962215db",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ac0a100f-9b65-4cb3-9420-d33a73ad5b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e9fe61-ea42-4738-8925-a2ec95cb1d51",
        "cursor": {
          "ref": "0bb4022f-c797-40f5-abbe-afe77bd2c852",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "a3ddf3dc-83bc-401b-906a-f10f5a981ba5"
        },
        "item": {
          "id": "95e9fe61-ea42-4738-8925-a2ec95cb1d51",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5a58332d-f430-4c2a-a104-b159dec44b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c463e7-a39a-44db-90cc-9f990fb28c6a",
        "cursor": {
          "ref": "becbcf50-9388-4582-b50c-0457c9ad565a",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "761f39f4-25c1-438c-aeb3-17ee0a84b151"
        },
        "item": {
          "id": "a7c463e7-a39a-44db-90cc-9f990fb28c6a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f50f37b7-b170-4fb4-9b75-3210338f4843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5bdc37c-3eda-47a6-8460-5dd829dbe00c",
        "cursor": {
          "ref": "cf878397-3528-49e5-ab24-0ffe95542918",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "31b5cd2a-a266-453f-8555-9544decec2f7"
        },
        "item": {
          "id": "c5bdc37c-3eda-47a6-8460-5dd829dbe00c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9b8389fb-f4f4-4b03-a671-fafea8d41f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d417f75-b789-4559-8ac5-e7a30a0a4043",
        "cursor": {
          "ref": "b72b115e-3500-4f72-be9e-c538818b014f",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "5dec9b46-1bae-4bbe-90ef-8a7c131f1712"
        },
        "item": {
          "id": "0d417f75-b789-4559-8ac5-e7a30a0a4043",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d94e7b65-a1cd-4bfd-bc90-c58e0941da48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b674d258-5c1c-4eee-9f75-527f1b1cf1a5",
        "cursor": {
          "ref": "132ec5b6-a623-41b3-a852-6f0d35ee24c0",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "3703976f-b3b3-4de6-92ff-8d78ab837375"
        },
        "item": {
          "id": "b674d258-5c1c-4eee-9f75-527f1b1cf1a5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "96a81e20-b39a-4f33-be38-93e617c711ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6339cfb3-05f8-49d8-a905-60db17b339b8",
        "cursor": {
          "ref": "4db63b6d-e8f2-4bbf-91ae-1a603143fbb2",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "0ae608c6-cebc-4927-afe1-7a0f15682b2c"
        },
        "item": {
          "id": "6339cfb3-05f8-49d8-a905-60db17b339b8",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "05c08f8c-765e-4ffd-b1fe-e4678a6d6402",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "38e710e9-fe21-4992-974c-57edd406031a",
        "cursor": {
          "ref": "4d8f6d5d-c576-4d86-ab64-58c8c57b748a",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d188fb55-4cfd-4871-9a11-0fafd6989ece"
        },
        "item": {
          "id": "38e710e9-fe21-4992-974c-57edd406031a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "86c26653-ade3-412a-93d1-df88ec254115",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2575cabc-1940-4749-bc58-306283ed1b05",
        "cursor": {
          "ref": "e221f5cd-9466-469a-87a1-9778c47b90ac",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "b3a0ea00-66f8-4d43-92d9-464d8eaf51ee"
        },
        "item": {
          "id": "2575cabc-1940-4749-bc58-306283ed1b05",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "fcb9e1ab-6847-4f86-a723-22cb84d8c545",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0515782-adcd-4512-8315-b6255d15c3e5",
        "cursor": {
          "ref": "e1028d82-9a24-4d91-8463-7b62684d7b87",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "11992215-7840-4c17-80a5-07cd3886ed60"
        },
        "item": {
          "id": "d0515782-adcd-4512-8315-b6255d15c3e5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2e5b80bb-e4d0-4da1-993a-4c3db0ddb70f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0515782-adcd-4512-8315-b6255d15c3e5",
        "cursor": {
          "ref": "e1028d82-9a24-4d91-8463-7b62684d7b87",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "11992215-7840-4c17-80a5-07cd3886ed60"
        },
        "item": {
          "id": "d0515782-adcd-4512-8315-b6255d15c3e5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2e5b80bb-e4d0-4da1-993a-4c3db0ddb70f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "794ad1aa-76cf-4593-8d76-67fcbdff9104",
        "cursor": {
          "ref": "297ac407-c805-4569-95a5-e4e3a486d689",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "e20b88cf-e41b-430c-822f-4f052a359165"
        },
        "item": {
          "id": "794ad1aa-76cf-4593-8d76-67fcbdff9104",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8b54059f-e9ef-44a3-ab59-67c6206031fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92633009-4582-4905-a605-ed765204ff2d",
        "cursor": {
          "ref": "f98f73e2-b0ad-4cc9-b368-f37996f4179c",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "f75d35cd-e65a-4469-a97a-7fcc07ba5a60"
        },
        "item": {
          "id": "92633009-4582-4905-a605-ed765204ff2d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7e59917c-9965-424d-bc69-be1d4d7a6009",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}