{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ca6f5808-3858-4378-aa04-a2bd001fb361",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7e337297-d404-4051-8af6-21db02b254d4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f208be00-5520-4d48-bd0c-fd9b7895ba73",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bf4ab32b-04a5-476f-8de8-65925793b97a"
                }
              }
            ]
          },
          {
            "id": "58d16cfe-e5ae-4359-86bf-ee84e682cad0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dcc793e0-7201-40b0-adb4-741484ebe298",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "eeaad319-98fd-4c6d-a1dd-a9e8c86d754d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b76a66e3-221b-4518-a5dc-99e40ac51232",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4577378c-faa5-4378-9e1a-86b94adfcfa7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d2cfebf9-a39b-42d4-a24f-8447a1565ab3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "376c1c83-7e97-4838-98d5-3d34082f3bf9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "91d9ecf6-28cd-481f-8855-1155264a9db4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9d177927-358b-49ca-a8de-96dcaef89ee4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fc3e6eb4-b8a2-4206-a7bc-9da4e70ac625"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8e0ebebd-0261-4d15-9855-3f919f5c7b1b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "babcf3a6-24de-4644-91dc-88d119a00434"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "857e820a-a27a-4802-a65e-26ad5164c147",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "fff1e31a-6f38-46bb-81c8-49bbb7b8378f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72d3fe7c-b39c-4e05-a47a-3db8d05cf6a1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "71b07151-9f38-40af-8d35-d561f830be1e"
            }
          }
        ]
      },
      {
        "id": "0c57500a-91f4-46ab-ae64-5a64369054ec",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ef408129-c5b1-46ed-a123-bd74d37773ce",
            "name": "Negative Testing",
            "item": [
              {
                "id": "36b480ae-dc0e-4602-b3ba-bc52ab696d78",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "912416e5-4fb8-484b-8358-a7986c98462b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b5ebbb-3702-4b30-80c9-771010ed588b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "486480cb-69c3-4dd6-872a-d4a1e01d4a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2287d8fc-fed1-49b3-9c5d-2cea71707409",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3752424e-d100-4b40-a323-af7111bedf56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc04af43-8e16-4130-9916-56584d7b0a13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7cbeb2b-8040-419c-8abd-6c88d022b8c6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7580e12a-ec27-4cb0-9066-69b4e581f4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "504608cf-4a65-4b60-96a1-696711d0f367"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a0f75264-1aaa-424d-adc9-cc1160b22e80",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9b26300a-450d-40cc-8fb1-fbf61ccf3cd1",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61f148d-7654-4275-acc9-c1ff6466cb33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d664bed6-11f9-4899-8b60-c66d9c0f1606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6f337a-e580-473f-b60a-42e0478f1e91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cb31631-270d-4bf8-b86d-ed2064f78085"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d5a24ed0-6672-4312-93db-9f4563e4f512",
            "name": "Positive Testing",
            "item": [
              {
                "id": "218ff796-3908-4999-bb5e-d0db4abda268",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "718969e9-83b4-4a34-98dc-daef7efe42b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c5c6b792-4997-42fb-bb58-f17db0c49609"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6fe8e680-d925-413c-8553-9db0c303a405",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "d557891b-401d-4846-835a-8fe087b6211a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ba0e47c-e477-412f-b0be-c93c557e838f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d6ab2f46-0524-4b17-ace7-3c6bc45c8ecf"
            }
          }
        ]
      },
      {
        "id": "18dae14c-dbd9-4238-a999-5a5af1ca1c6e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "377b6388-5f42-432b-8fd4-49524652a99f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e87ce95e-c84d-4729-a855-7352e8affd6a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "dac54af0-b999-4783-90a9-e239f433a456",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8eecfac-8872-46e1-8355-494f7db74e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "111e5281-f788-435c-befb-4b09dd5c45a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a05aa1-559f-44d2-bdcf-fa7da6776cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d434f8b-9262-4aab-88d9-cdc06d81d1e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "062aab17-7cbd-488c-8f81-ecfd9ca0bca5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc41ed2-29cb-4580-a556-2470bddf5b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfe8460a-2213-40a9-b23b-a1d3f1f29bdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40989bb9-ad8e-4ae9-ad92-4e8b66f5138e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "981daa1e-3b98-453e-9056-bb4ed4d9ea9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08d52e9-3285-4aac-a7fd-f60d3eaafe9d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef2aac7-6018-4004-b0b1-0062c63d81f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f92b695c-82df-4c9a-9cb0-ebb0e6407d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e3c7db-296b-4dce-a00d-efcc67635550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02139f9d-25a2-445f-9a13-e0e54c7c7d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f603361c-203e-4636-abe1-6a38275a019f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e138dfe9-a2de-4060-a001-bce18fa15186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7576dd45-dfa7-471b-9618-083305f7ef80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebc161f-ba5c-4a29-ba8f-a408735b43cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c7d810d-e652-469a-9066-55294c634684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0946996f-7348-4981-b6cc-b53e7d2c040e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6e374e-3463-4fee-82c1-44d0f499ae19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d22db8d3-4ba8-4f8f-9d53-1db7dab9f762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb086cb-361b-4d83-97d2-191b691e1552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42818b09-c37f-45f0-a7c2-e634a72bdb4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83881f71-0632-4f98-963a-b032bbe251e1",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "996fdd12-638a-4e58-afdd-4fa607119de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0393065-8966-400d-833c-3b08882d8dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8e95814-d91b-48c2-96be-6d00cb297675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a6d3601-2832-43ad-89f2-6d6bf03dc03f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e84f086-9563-476c-9fce-e8c437b6f42d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a76558c1-e642-42b0-915a-0fd2a6281cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f61f317-d9c4-47e1-8c76-d2b3c7bd6697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2556ec4-79ad-4639-b3fb-ec2d08eeef69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ecd00170-0130-4a8b-893e-4b1c5ebf134d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6bd474-2e94-4ce6-8d7d-3cc46d199f5a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "074ee564-41ad-4b68-a5f0-a3201ba80784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f96387f6-2de0-45ef-aa76-90a47bee5665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d39509aa-c640-44b1-9de9-831571337415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5137e7b-76c4-44cd-b16e-51e92ace5211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c96f0e-4ff9-47a6-9de3-1a9fe20abf9d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd469353-a5e4-4bf2-a33a-18bb91d3945d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b34d10f-c588-47c2-b360-173b10a91c70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d12914-b86b-4cd6-9f46-9eb216ba0361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d8b77e9-df11-4c57-801f-f78ecc0b3a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ca7f4c-bd70-49ea-ac01-6250d188083a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e0065d-2d85-4a95-8be7-fbf851552dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "696c99d6-7d83-4692-867c-19145b5425eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b31106d-c312-44e3-926c-885bd8e6c665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2dd8ed37-2f26-4706-80dc-a8b3a37bfea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de7383e-2d3d-4209-869c-426d75852e3e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb865ed5-ef17-41d0-9562-662376c854d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50afd0ab-5c50-457e-b28e-a8e2b6ad6d00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3850806e-d700-4830-9e52-ca7498b911e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2c9effe-4bb9-4da4-829f-b5aa14184a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03093338-313e-4500-9d73-1a7ea6a344cb",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9aa9233-af40-41ae-a065-05bb7ae88a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e971913-7708-4637-ad18-1979f515fed2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57502a0d-f28e-4950-b841-6f691b5a9573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d65e7cc6-6b4b-4a23-aba1-613d1c8fa482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d54612-0242-4ccb-be2c-2ff4e55dfcc2",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "457572d1-a62f-4491-b575-53ea96f68d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "773f8df6-52cf-4a03-b729-4ea6ee3e8736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0099de-a810-4f81-b990-72035fdafea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79ada82f-eacb-4e29-9c8b-10feae43df62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e876ed-06a2-418d-87f1-a283ce283833",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "373e43bf-155b-41c7-a0e1-a4ae20459052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ec2447-d3eb-4f59-8b53-e1852249a973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a651f1ec-e89b-4508-a15e-0b8f04c77fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4fd4070-7948-49e1-8502-b75809b9ca1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328aeb3f-1e13-4eeb-bd0e-c0eed9dac6c2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e0f9262-2acc-4955-8c58-92897cf1efc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b991fe-88e8-4fc9-8456-06ac2c6bad52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37d91a3-cba4-425d-bae8-4f7a44a43bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d3f5ef0-e766-4f33-a1d6-bc66eaf50989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3eb302-b521-47ab-a45b-433089db71aa",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e20a1ca-600b-4d7b-8d1f-352d400ad53a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04be872f-eff7-42d9-98cd-e26bfb2c84d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a776f0-20dc-4315-8c0c-167bdd17cdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da2d3795-9f40-49af-bf08-7d1ac83b0602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa4a571-d6de-4104-9665-6a729d629597",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ac05b6-ba2c-4109-94f7-f96cd0f6b9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ea7934-5f86-4c12-9c98-cae04680d050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d8ba31-e171-4fc7-9d0e-b01b8175ceae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "337412b2-056d-49a5-af0c-fe49ec571c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93089968-3b10-4976-ae1d-c9adaac88e3d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31ebd8ea-b931-4111-9a39-0edd9563eca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01d2cc97-b186-484b-bcc3-40a5f1621289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc3f42a-8b1f-4d1f-b945-cae182e760c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "992fc6ee-c22e-4228-a872-314bacbe397e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b8d834-fdfd-4476-b2bb-6644ce49e587",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d2bf1d4-82f1-40df-bd8f-1038a7e6a395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bcbdbf6-8b26-4594-8c7e-dd3cb9331695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d81de8-4338-4676-8677-d4c58f0bbcaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "233e23ca-69b4-4d29-a1de-1c8c6a548331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a292e46b-6e18-4c13-86c5-23da9c151e1d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2611fdd2-476d-4c46-a7a0-ae47a881429e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ff4c50c-95fd-4544-b99a-5d51a56b22c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a825acd5-09b9-4103-8801-95da95eac21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "030be434-272d-4450-931e-5295efdeafcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a91bf0-c9be-47e7-a98e-6cbfcc53220e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ebb08e-7c33-42dc-8cad-e1de1295b3db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4f875bb-103a-4868-8dfb-557b5939c8f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619773cb-e3ac-4474-a94d-7713ecdc21c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8458e439-c18f-48dc-8c49-e164eac64488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949f7a5a-8caa-4351-bc8a-c5cecf1b212c",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13976cd7-6baa-4edd-b5c4-c07998549e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d26fdfbe-f9d7-47d1-a3cc-c03f3393150a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b7dfc5a-7607-4b86-bfa8-8acf0cc99926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "90ff320b-147e-4458-8e8d-f23238048111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65451765-1aa2-4ff6-a68b-a78c7340ec6c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a41e8401-239b-4b2c-9433-a1161a3afad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "321dbe36-f7ac-4a30-8cbd-8130b3ffcda2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6fdbc43-729f-4190-a56d-0ea12fe53d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2f798e15-0a51-46af-a9c5-fc091e078521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9b20ecf-3afb-488d-8e16-6f8a85ecfd7a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf424f5-a0c0-4862-b6f9-5ef66e6c5246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72fdc404-e175-4c58-8d4f-d0eb28de65f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3887638f-273f-49d6-a995-d0f226d050b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e62f9e2-2e00-4e9c-ab74-2d5f8ba52dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd20a878-93c8-4330-a78a-c1ec7b693058",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e8af5e5-0305-4859-83b9-ccf39b40a680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e953a31e-ec79-4761-aaab-752eaff7195e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8a408b-573c-4bf8-a25d-f571d9c06da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ff51e7-877c-4a00-aba2-58922e08b206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3de5b8-3b01-4506-8eb4-f85ab6b9a795",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "278437a8-8116-4d28-8bb4-8380e31f73c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1e73482-6ade-4f16-b46c-25ae5bb794b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "569c06b0-991e-4f80-b7e8-4a4d3c1b11d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3a41213-34eb-4a9e-9e2b-71beed12b4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8af1e0f-b65f-4a13-bc43-eddb054ac8ee",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32fdf0f2-f44e-498c-8649-3047cb636898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34c39932-b93d-41e0-9014-5dbc5bcd6f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ccb689-5f63-4ca1-aed3-4cdf0f7d4484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e613d3e2-a60a-42d8-9d09-cfeffdd4a0a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8612848-c88c-4838-af5e-32a6a5066957",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba871095-0faf-4c0c-b451-57a403f5d9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f91504c-3b50-454e-b26d-46cee0053e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e4a8d1-f405-49b5-bbdc-479a4a62f83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b88b8153-f070-489b-bb34-273d76c19a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30d154f-66ff-4c70-a8eb-03848c95f1f1",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e10bfa-ea75-42c4-91d9-a07d50ab313c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "224badc0-a896-476d-9976-cb2fe0ad1ba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7d9f16-4085-460d-8b6b-5bc489f1a635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd1390df-b4f6-4191-9841-f068a2ea2e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "332b1eeb-c383-4127-a01b-e5b256b6aacc",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f1bdd4-9f9c-4d4c-b75b-364640b5c2c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e13963e-e3bb-4432-9315-3671eaf13e5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f21ad81-1787-4347-a4dc-e9ba28b271b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "509b9afe-57c1-4bae-afba-002639558db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5d6e28-acf8-47da-b9e7-c80e1590484b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62548534-29f9-491a-ac04-03d222d0acee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c338d580-5798-4a2c-9ccd-0b61827b422d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b36f9fa5-3d50-4056-abf5-25102763c6eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b92f157-267d-4016-bc64-7f26df633108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da2d822-02cf-492b-aa3e-3b42f69cf3c4",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bfc2916-c7d7-4677-a299-b04ee50a694b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d17bac2d-18c2-4c6b-958e-1e1bd9b75142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18cc829d-5508-483a-aab7-ad9234e787b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "483c3ee3-a22e-411b-9c46-6cb64aa68de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1b20f1-1381-45df-985e-4d00bdaae1d2",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47120c9-c9d2-4675-8277-23b0b967b750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a31337-20f6-45d4-b0c8-e7580bb007dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d66e290b-b48b-43eb-8401-ee3bf6a0d2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4486ce4-62ac-439c-9626-9c8e57d69a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a4dca2-6029-41dd-9a3b-8a467f79e049",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a0222d-d9f3-46b5-9814-374228eb5078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "006a4139-e029-4502-9a0e-165ec9838554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b087b7a5-ca71-480b-9e86-ae12ae0e22cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dc99ed3-51df-441f-ba2b-4857fdb160db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18ce12b-e7c0-4eb9-a612-c9d9de23855a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f68a2a-e4ad-4d52-8e5c-77406de4a320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40d16184-68d4-4c8b-a4b4-4eee8f7642ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d8c115-0a2c-46a1-b0c7-20c1225e64a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "31811901-86d4-413f-87e7-bc646a3317f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6448cbf9-b1c1-41d1-944d-ce24f219c9cf",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2338d43-4adc-4e92-9c27-19912fad049f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a82a682f-3ee9-4d73-a0ba-08c6bf38c79f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148c1109-f63a-4673-9843-c0762c0f8f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8586b425-b24d-425d-b197-5b2abf6b9cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5703f246-5c5b-4a95-aaf9-a6ad866aadf6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59343ea0-bf66-40da-899c-d72bedb98475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f537df-ccd3-4511-a509-4fb9dc89ab38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3327337e-2c7d-4b9d-b142-f6d9e468ecb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fca30e7-360d-47b0-8136-b967f1dee7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4124f70f-d3b5-4110-991b-257466f8a72f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f6f84c-8ade-42a1-8ecd-60b6174f39d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e254816f-db0d-410b-9dd0-8ddec481bdf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db891e8-b516-49f9-93ee-46e76a02b792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "06443e18-eb0c-4b39-84db-bb905503cf38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444c561a-1399-4981-9906-4c92c13786bd",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a70bbeb-e7dc-4a49-bc00-1ec40ad6acab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "451e7a81-cb07-4992-bf83-565e12e373fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d99142d-aa82-4a91-9407-65a5f79fcb43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "77035e19-d63d-40c8-b768-9c7b9159d37b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2208ca-11a2-461c-b2ff-1acf174879b0",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7a666b-8c29-4fdc-9db4-8f064c4b3ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "163b518d-04c8-4346-a0e9-9f7f58bead43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab56499-4640-49d8-a12d-cab7196a2948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2164f008-17ff-477b-ae4b-e6a9552e3d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45bc0234-ffd6-4270-8908-bea7a04e7827",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdbcd77b-825f-44bb-b7e9-44acd8d312c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3afb5ff5-f266-4473-acf6-49bab59f46c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6faf33fd-d4df-4d3f-8efc-2deefdf87361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c0fa87f-2090-47e9-915d-aae345734b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1e362d2-7682-40aa-abc7-2b94fc0ac0ce",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d572bd1d-db92-4098-88b7-0d3f6979d5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ec09e9b-a763-435f-89e5-824064db04b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e650044-cc44-46cb-9622-12793a0f627d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5d746d65-48a4-4453-a7a5-7ff14a2bf525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c7e9a65-5626-4daa-8522-894a4c4d2b0a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9f1b5b-fe17-405b-97d2-8f6f1b70f7c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efd51bb7-1188-4419-8f9a-335af087e2a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b9b54d-c4b2-443f-9eb3-070381d6399c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2bef4254-a234-4d71-b5f4-3bf2b0a94ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a12f2a0-5ec5-4d19-99fc-0c3880203f97",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d4bb88-383b-427d-9e20-4a837a0d68e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57033d8a-5151-4f0a-a25e-6177001f47b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01826882-9d3d-43db-a915-f6e9db3fc8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0405d20c-82b8-4fb8-93f2-82459a8677c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d361b431-ba59-4e26-a1d3-9d36ba8bdcf0",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a5a47b-5f19-4f61-a609-9bf9e7bc2b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1af7cfdb-e0b7-4e1f-bd50-dfc0ae4db786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c689eea2-c065-4770-9eac-48431d50b067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "25fcf56d-8757-4572-9f34-9651a60e5af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3cde4c-25be-4e6a-bd97-a27c02709709",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6d3fce-4cad-450b-9f5d-6395775809ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afcff27d-d035-4451-8a6c-243d13bbc8c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7721b819-3d9b-46cf-8781-c9b699a3c05e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "88fb01ff-8f8e-4197-be5c-b0be8e7a0736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9a342b-24e7-4daa-be2e-c25f8667a44d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6dec5fd-4f12-4395-a159-1f9bf05cece1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c980a2b-9f79-4934-9904-9b725f5cf721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1cdb4f6-8a63-41b1-ac9d-a2bc81595ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb11e52b-577c-45a8-a3d4-2a20b65d845f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cddad959-1fbb-4468-8f87-2be21f485ff5",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "855f7eaa-94cf-4fa9-88da-f1201fce2bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7089c6a4-9b32-4db5-9524-72ec5b778b96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46dd903a-ab57-4de3-8cb5-5a0b66c5dc27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "13be0666-f009-474f-8957-a49e6397b60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9548b414-c2bf-4fe2-9e8b-1795c1b13d58",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef25bcd9-a8b9-4ebe-bd52-a211835c3cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bff61004-8d07-4e33-b3a6-2e8a55a041b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8037af2-6c22-444d-aa9e-061c9e483067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e71b039a-8114-4818-9227-eb0f30d9f832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc613210-8eed-4bff-b3f2-bc6e698709fd",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7822c8c1-8c10-4bc1-9c62-c1db429a83fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bd6ae45-aa1a-4f3d-aa7c-97a1d6b5f1dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd05e5a-f0f0-427c-8c97-f822c9eb9fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "01600df1-bd85-482a-90df-7fc089b14c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88507336-172f-4771-8cb6-0dc323a7d999",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b88d82-75e3-4062-a190-392c2471f4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46a05229-d785-40d5-9ee9-f87b531950ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31140509-dfdf-48da-b5e2-41a35dfdc7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a06bd730-568a-4c45-9db9-e474fc412117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29e3834-9d3f-4dbe-a889-f22ba801e411",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a00e00f-dcdd-454c-920f-519b51002842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee800307-4e7d-4649-9c44-bebccea7568d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5537089-86a3-4f74-9f2e-0cc77476c28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad3b2ab-8978-4e21-b784-0f218126850b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60558ff-97b5-4650-8bfc-c6946ec15658",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49625414-d170-41ca-bbad-f417b0d7136b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a72f7997-dabd-4d26-ac4f-050e32e0ed28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1e4ff3-2da1-434f-92d2-a06026ec7c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32f0b546-7613-4172-b8ef-8e8b91bdff98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd85afdf-2fc0-42af-8bad-8493c1ac7198",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d509cbdf-f354-455a-a5d5-cfc59e0f93b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e6ba4d3-792c-4c53-8995-681ead4cd88a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16323378-e286-4989-9e12-21feb427d299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5f60f9c-e8d0-4399-ab8b-c5ccbec17b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8da1548-ddce-45b5-9202-209c23d34e5f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc2c140-a5da-4848-b0d9-6328a7a9b4e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29f07571-0105-452d-a79e-77bc1b4d9f80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1764d22-833a-41f6-9f7f-c1612eaba9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "86acc942-0e41-423d-a763-ab2192927054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd13b3ee-9e24-4295-842f-bfc73367e05d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68412fba-4dc0-4897-9ead-da421e93895a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "899f9454-7ac8-402d-97a2-12b541825a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc78e926-34ad-4825-bc54-777547cd2ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a18fe9cf-b04e-4c5f-8c8d-21ecb11d78fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ea3030-6553-42f1-957d-0d302e6cc0f4",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312ba063-d90a-4e7e-ac98-0c59f8862cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6814058a-720c-4b7e-887e-9ab42c3cf5d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8873d820-e3df-4da7-a246-ec6b4d37a11f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "df7adc86-2bc1-43a4-9d10-b8486a0cf5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9fec541-face-4592-86e7-83f3c1cc470a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb3f6f5-9bd3-4361-a47a-712a86f36a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75de2919-e5c7-494e-b8aa-586091a492ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633c184a-a1a1-4460-aa12-a40f3e1d5d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccf34309-718d-42e3-8cf6-53e18211555c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b922c4b-5473-40de-a14d-8056aed7e718",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb977ebf-e321-4638-a9d9-72588d0023a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53e758db-f9c4-4d43-85a4-945f5dcfafe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d70f46-a84f-4eb5-91f5-78fd4f8658d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "09325332-e096-43a4-a76f-69c4be8a5eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a358606d-91b8-430b-bf00-ab45f2022fe5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "226f97af-c7fb-4c9c-8ad4-257e6be06363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ecc1714-0996-4432-82a3-bec1b16fbe7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b1f0ab0-bbc8-4087-b691-c6139241bd05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed17d0bb-81c6-4f56-97e3-8bff47588a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569f1ded-fe47-479f-83d6-bc96172b01b2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e1b3ab3-3088-4b0e-a5cd-725ec0dde170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1b59e45-f3c2-4568-87c0-c9d30dd8b161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a531dd2-e770-4399-b7f5-a876574ba18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff98fad4-a8f6-4404-b103-c78af5afc90d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "519d1a20-4bdf-415a-a338-dd92eec626d5",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad88d32-669d-4d8c-a727-55ca36e8c34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e82dab9-c759-40cd-b51e-f2d66b643231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0a5bcb-284d-4b11-ac34-bf10b11aa6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5d14635-a7a4-42ee-bbb2-8aa2c3ed5159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb3fa8e-28c8-4667-979c-35f5bea8fa6b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "827d72af-e8ba-4305-a915-ce9c0bc67ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5a49a39-9a5c-4491-98a5-151a6d597bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9412157e-ef58-4a42-883c-8da47632cc22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "76aef58a-b3ad-4546-95b9-14bf3f80fc26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2cc8d6-b765-4e72-b98d-2f30d75075a3",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a787e8-3131-4453-b59a-a3f44fc6c106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "630111b0-54eb-47e7-aa82-37e62c2d9440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6cfa669-ed20-48f1-8e48-8dff32e55850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc8b120-84d4-4b3d-8af5-e645112742a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be378e3-279e-4408-a25c-ef9b7caab6b3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ca0d1e-e8d7-41a8-bdf7-b10c3c1c3f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "668d003f-5691-4668-b000-e5fc6c186b10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2b60ea-709f-4e7c-9a11-02fac2ee10a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "68a8507e-ebe5-4dcc-b839-41e7fea352ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80edc6c8-496a-4a75-9782-201b01f24c63",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ae6d47-d6df-4f72-a4d9-952e194343e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31635568-57cf-4255-8e8d-10d3b86b2928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2bd2d3-8c15-4f6c-91d7-3e36238f3e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d522afb-e622-4612-b1de-c482d104ec98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b1fa66-14c0-4c67-8958-68e1043d6fa4",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e68946b-dcff-4b4a-84e1-4989ccc79c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed9e8b97-ee0b-4cbf-9a67-233a282f65c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820f7a1e-6b33-42b8-8691-125118a8814e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e7c4aaf1-271c-40ff-a8a9-3bf54fbe2e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88ef069-b54b-472a-969e-122f6a576e83",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77680661-57ca-460a-bbdf-2c2bd1b9900d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adf1f9ff-d3f1-46f3-8360-c216abd7996f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62061e2c-c53b-4b46-981f-0cee1817a788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a30dda4-00e1-4537-af89-b4730c0d7408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe39e37-b790-487f-9aa1-36ba30a91b20",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce28432-7977-45a7-9d82-f2582ccbb765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd8c4d0b-bd13-46d0-aba9-2fd1beb80b6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35339efd-1e00-4565-83a8-8a6594a0ca7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba574683-8f61-4262-93ef-c691cdad5bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c423fa50-7a05-4926-a6a6-c4e0964f7bf2",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f4781a1-c78b-4880-ae01-bd1b3d1496f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b55f92-9ee0-4126-b2f8-f6609c0f2ac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99e7ecc-90c7-4a4b-be5f-00b9840e2b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "622267a2-d5bb-4fac-8d1d-5fa43a1e945d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb76531d-e6be-4af6-87c7-e227edece88d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "026a4419-d5ac-40f0-8271-6105d8369323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1233b12-756b-4362-9f61-8f3f0044a91a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5f5d75-a481-4a2d-ae76-d98489144853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfba9a6e-e682-4756-8292-1a1b56587268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af024e67-09fb-4168-bc7d-f590447f2503",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff32588-2db4-4748-b4eb-1ef4a5617bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96642618-41c7-412d-920e-2a9f69a62b6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1241cd9e-3a37-413c-8110-16bb5fb0dd64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "034d7fbc-3999-4466-b8cc-e06318f891ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5eff1c-262c-4324-a6c7-1898c2bcc7f3",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b017a110-b07b-420d-9cbc-d2fd17b99034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de45c55-72fd-4156-9532-673301f26e44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f776aca0-5dd1-462c-b0b6-a465df663f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0a32e87-8952-432f-a6a1-31ff5f6e1f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0cebe3a-d4e1-4f5b-95e3-459a3f3a49ef",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "799223dc-d70d-4b57-828d-f193a1929359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "770bda1d-258b-4b96-a1e2-6e3a0d4667b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dabf69c8-0e30-4f50-9041-4d228bd8a418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "92c077f7-aabe-4733-a7c1-faeca1f82191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e406ff9a-7754-4a36-a7d6-256b07575218",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b936ed42-012f-43a6-a517-8fc6c22b85d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb866227-9d44-46af-98f0-cdb69d756f5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b0e34b-0484-404e-92be-dbd51950c763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "367aad2b-f9dc-4513-8853-9e29c845bd8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a4ecd6-a7e2-491c-87e5-f6820ac669e5",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daff374c-061d-4d1b-a8df-e55790c4e9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "079db6c2-1237-4785-9d95-b59d5114abdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f04e54-1637-4f76-a239-bbf31d1a9afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6a52978-abdd-44af-9ed8-2ff55aed3277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb962d7c-f38e-4a8b-9149-44b3a3a5d74a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac0e65c6-62e6-4388-b1bf-93c1a3143aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f141879-361b-4b67-9e6d-fd7f7893f3e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e382bc5f-4265-4cbd-a3de-527868c6b97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "197c02c2-69b6-45e8-8942-313d7815b828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f2b6d54-da17-4bbc-9c6a-bce2cda98341",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96447587-4b0a-4400-95ad-f1e56ba56c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abc565ad-db75-4c10-9118-7b829acceb29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b18563-520e-47ca-8fec-cadb801c0db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "97805dd1-d396-43c8-9f7a-cead62cd493a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f4bc47-9589-495d-abba-6575fd09c784",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84de76f0-5522-4082-bf28-9f2e31971c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ffe18fe-8ed0-4257-9a4d-80bd06bfc057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8fc013-8357-4792-8d94-2a6c72efd076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "905b44ed-9582-43e7-bff4-fa96702fb29e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59933760-2c1c-48d1-8aec-eee74b6fa965",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6547b855-f7ae-4a99-b99d-c73fdd3d6afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "881d32cf-9a96-4501-9d2e-687469dca1de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f184d2fe-5c17-4e29-9e0a-6d75f116a64b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "90e0d4a9-8ab9-4243-966d-8fe3c950d0e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd529f46-259a-4aa3-8b62-ca05cdbc57a9",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9d455c-c433-456a-b0f5-a526c1448fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8579492f-6248-4fca-8202-2da7d4c2ea02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7967053-5139-4e4e-bd01-8ff645f77c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "406e8406-510d-4309-b974-781c9c5151df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd443fc4-0669-4430-a288-e54bc4c54fe0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c37e0f8-6784-48f4-a869-f8bc5fb386f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a2373f0-8c06-47b2-ae0c-27fe7943e5c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a495881-5133-4f68-9098-a5b66cc0f63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c747ce2-2785-405c-a71d-d6869e02dcfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6e6c29-be2e-4fde-bcd7-d2351eb4adc8",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2027417e-0252-4e97-8d36-36fb6c7c6b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9d95cec-dcb6-4cc6-adb8-574f4b82b383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bcfdc2c-f8cb-4954-b079-acc565d7418f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f806680b-14e6-451b-ae45-7eb5c5faa795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bcf9b78-5ab9-49a5-8018-baff187e3421",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f0b7be-f1fb-4b4e-966c-00a96f898893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62a00442-2f5e-41e3-b551-8871ca4e6b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47635e4c-f02f-4603-80a0-ce78311de64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea5940e4-6059-4335-a6d6-7f2d0b3667fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599be3a6-caa8-459d-b79c-8442da2d1ccb",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19ded92-6e0c-44eb-a803-b9c706563363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "118978f6-44ba-4d4f-bfaf-374305039aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a74f452-832d-49e3-9303-205e71e5fb73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d6c0b050-f868-4f32-bfbe-56be7db4ef8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f84379f-0fd6-4943-9c40-f65f5045418f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db94cd63-af39-49ab-9fad-4e8b5e6d803e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da3531e6-8bf2-473e-8baa-c654f66989bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba14900-c2e0-45ff-b119-0829f16ef513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c88ce33b-a72c-4d7c-a738-a45343b63540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a26c3657-9262-4bd0-89be-d498474117fa",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4465fb39-8b0e-4ae0-b186-1a2c8766a36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37bc1f46-cf1d-4a9e-a4d7-a8757fc25916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4acc0e8-6203-486f-b9c2-1c3b3122c43e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "57c47655-8740-48e7-8687-98224c11fa39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0f5f40-5717-4a67-a242-845832904fff",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bacb3cfa-ab50-4c5c-9281-7f6783b0a17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bda5165a-f661-42ee-9da2-2115be1311f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42838690-e6a6-4bc2-b4d8-8fede8d46797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "36d7e4b7-f9aa-4221-b90a-f5def2957fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3778baa-4fe6-489a-842e-31531c8fa787",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb55a49-3394-4d92-b707-0686df864b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8a3a23e-71ba-4024-af96-fc167f940d6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55df3b7b-a211-4e6f-99d6-84efe9313d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5a9deb3-2e1c-421b-9eed-2f3411085389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e3150b-c696-45fe-848a-5b60f4c5339b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "842cb80c-d113-465b-9c36-d1c5469241d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d0f4df7-b827-4351-9431-4075d09ea691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f02bfd-4fc9-4033-b694-b870e9acf791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e074fb3-3859-47db-8ad4-37676ee3c030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f0f0290-1993-482c-be30-f2dfb4bbe250",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01da44f-5d03-4742-a65f-210e69ad9aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e468b63e-a983-4ed9-8c88-abbd51a4fd29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00644d5b-fd4f-4e21-a639-6c925f077742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "29ac6617-6087-45cf-acd6-442327591c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7fafc3-fc5d-4841-a262-dd75d6f73d77",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00597fd0-3386-4c5f-b77e-abb7ff153a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9de6798d-c27c-41a9-8957-1986f44ed737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d24845-bb92-49a8-a39b-4ca2a3a79e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a08c7bb7-b94b-4055-a737-c3c4fa30611e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "431bfdee-510b-41ba-b8ff-152fde529b5b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e912c892-fd9d-42e0-b451-279fc51b61e9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f506b2db-abd1-447a-9a71-8dbe1d7904fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df1cc974-62e0-432b-9cb2-14230d115e68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b8c14e-dd36-4fc7-885d-6ad48ee06af3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "024ba23f-1a20-45d2-8319-eb3cf3fe5377"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8201db5b-9086-45e4-b774-9d2537215818",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bf845f9-7d1a-4612-9212-53424871447c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "afdbdd79-f154-4a45-b21e-0d4b4ff350fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e97cef6-2724-41b5-9ca2-1073a7417603"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "210ecaaa-a7eb-4ab2-b62f-1d9b927af70d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d7daa14b-09d1-4bcc-bda7-2328344ff8ae"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "af34cacc-5e53-406a-b729-edd666c8b6b7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6b93cc71-312a-4bee-b8b8-071577661eb0"
                }
              }
            ]
          },
          {
            "id": "676199eb-c85a-4e9d-9cbc-212abbfcfe75",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4a3a0410-03d8-43fd-a845-02c1ee5c7a64",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "c98345fb-f313-40ac-89a3-832da002711f",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b3bacb-0377-4541-9cb3-6362f2d6b5f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4589c954-ce47-4c64-bd5f-99fbfdef8886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "513d48f9-bd39-4be6-8de2-17e91fded3b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e68df5b-0702-4fbc-a5cf-c074b7f9e026"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "af25d447-686c-4579-866f-c019503ed6dd",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "996e2786-349e-46ae-a9aa-d1e9d1392fec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d7b630a7-b113-4f75-8ff3-f6b9d87cc260"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f96fb9b-66a9-47f7-a31a-af7b53cb8c7f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "11c18483-40c5-4dec-aaea-19ccb28a4f67"
                    }
                  }
                ]
              },
              {
                "id": "9c9ec136-9c7e-4faf-b851-b21263ec5de0",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "63d5284a-3c6b-4fdc-acee-17a1cddec02a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6ba4abfb-0268-4d24-802b-e816789876fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f325927b-321d-4aa2-a147-3c85113b1662",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cd0fd43c-ab42-426d-bd95-6b9fd379f879"
                    }
                  }
                ]
              },
              {
                "id": "ee85c853-c749-44be-93be-4b0070222ed5",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "83c97eca-6b1c-4e49-88b3-b5828207a269",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b2179967-7b82-4c35-b802-8fbe33aed0d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a08551d6-1bab-4d0f-9ecb-9e82ef3dd3da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f2f1ff65-e964-4fed-b02b-1e43a9e86997"
                    }
                  }
                ]
              },
              {
                "id": "03bf725f-2445-4274-91d7-c9ad6bf84b88",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ba54735-3684-4368-b7dc-ce39a0ddf833",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "81e43654-6180-4d4f-8236-9f4e4c949f12"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec661197-851f-4156-82bb-9f9da9dc51d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "9a6aa955-849a-46c0-aec2-a032459aa886"
                    }
                  }
                ]
              },
              {
                "id": "e297a6aa-5195-46c4-9805-77f6dcd6b0e2",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0dabe78c-0349-4a4c-b53a-c8c0994c961b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a8432277-fa51-4dcf-a984-084775c01a45"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "558a44f5-73f7-4e8e-bcb5-e615e07e1b73",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a4c6c7e6-2190-4d54-b368-87be9a682ab9"
                    }
                  }
                ]
              },
              {
                "id": "6f1981ef-34da-4434-9593-e59aede0433d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8fa3cff9-295e-4e6e-b6fa-4dd5cdf12b9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "430e9e41-6850-4bc9-a35e-489a1c0b5e4e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0ce86c4-b611-4f0e-b9c9-396a0650b956",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cd46f3fb-a75c-4039-b6fc-4784b1094e67"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3c57a423-4c97-4a4e-ac12-a9e564226b91",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1bc6387b-996b-46a8-a60e-b1ff808829cc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1c8b3e06-9ebf-4d7f-b76a-c8557001b1ad",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6d53eed0-e314-462e-85d2-d26c83179c92"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d3865bf3-1ef3-4377-aed7-b772e4501f32",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "7aaffcc7-9180-42ef-b28f-6bba1f0d0f43"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "784f5309-fd58-4e0c-afe7-0cbdc1e218b8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4d829211-b56a-449e-98e4-cf3abd1b468a"
            }
          }
        ]
      },
      {
        "id": "1aecf20d-c36e-4901-844a-4b0e5da273c2",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0e277d50-a9c2-4b6c-a1ee-85cd4bcbb620",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dc262f43-1e5d-41bb-a1d9-1edebe9fac69",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e6dcbf3a-4cb2-45a6-a6a3-94146ef2a573",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d6d18f-6c8e-4021-9c6c-2d430a18806b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b9419c-e3d2-40cf-9add-89d6f1501f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df7b9b85-47c6-4fe0-b300-219fd0e49b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc94a74-17d0-47bc-a826-e2e3ca0f13d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e70e0b-119b-4daa-962d-3a2367e36bec",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e36a32-61c2-4048-a652-2318fb9a36a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e792efa-f369-4dde-beed-213d7a23229a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58950e02-7d4e-4570-88ae-539e6e5debae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "66436d35-328b-454d-8c80-0f8c4243ffaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22125f15-5bcd-4c38-8ed2-8e9a7998a0c8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5eb9de-f5ef-47de-8cca-d4dac18ef2dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eb308ee-a0b5-4928-8c72-6045fcca8d1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa81cc60-f35f-42bf-991e-dc7e3d9cd234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4254c9fe-5931-49b4-a852-4c6ddb6344c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a558f6-b348-4a27-ac29-c40cb38e4c6d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9180a0-8f96-4a1f-a777-6452c4705a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ad73d9-dc4c-4898-9c90-cc43aa4e2d76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ce4d18-82ad-4dc0-9166-4c353acb3a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "239d260f-884d-4d6c-b9a2-5e9bce7bdcce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba75d65-eb9f-4567-a898-7a1438d765bb",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "500e4b1b-29bc-4e8e-b949-bfba7cfc6c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a94d7e17-5e0a-4c1c-abee-3047ca496c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33812623-16bf-4a47-a181-961a735a0ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0da9a725-be71-43b2-bea6-7de2dcc53f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eef2946-dee0-405d-a104-2920f4ed2279",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "092bc48e-4b7c-413a-bfab-73d5e7cc107d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdade66d-f6ed-483a-9735-435834baac71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "369d027e-497c-426e-bc36-e26b2b9de334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f5a376d-f89b-4e29-b850-ebf571741be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96cfa7c-ccf5-4110-b5ad-2c1b8b43caca",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf87a44f-1a0c-4ad1-a353-0b83977ed284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d30de76f-d457-46a2-ad55-01673c79de1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce136672-6725-4b8d-b236-907bc847ae12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fbf3233-c730-49f8-975a-2172b039110d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01fdabd-fd9c-4180-bf07-8bd0c42c851d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aadd8541-3aa9-4470-865f-5e5c32ec2dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "555bd6c6-3ee1-4355-adb6-c8d03ac85227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a3e812f-92a7-4558-8308-c2c5ebf4be47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bee53e80-899b-4e10-8a08-49b427c3f626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca096d8-4069-4c93-a9bb-4e40c765cffe",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f359361-e976-4578-b8f5-07d161349cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "037f2d5d-3d8b-4112-bb62-02e72392f5f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b6e33a-7d04-4a5e-9943-89efae762d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ecab675-215e-4b9f-a1f0-7312ed21ad91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b64f61-0b3b-45d5-98e8-58bc48819626",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ba38f8-b9f7-4445-866b-a5223d6f3c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0671130-0f55-4e6b-924e-caccf968717e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9173e0cb-1317-4aab-8716-3483a884efea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbfd4a6d-9c2a-4e71-af0b-520596c267a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3488e948-b870-47e0-829c-1a49b62b1038",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba501eca-1ccf-4e71-9553-9c3530a7e6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea62c46-4a85-41fb-ba52-35796f0d26bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa48d80-5a0b-47f6-b0ab-1a2d6b78f958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "92ebf5b9-b5c5-440a-bce4-5f9d470802e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ecdab1f-ba0d-431b-9b65-93b6a4cc96c0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b043d0a-2080-4948-bcf8-e4f7de6a5512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47cd5651-5cda-443a-8b46-8219635b1d1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d255df3-47cf-4401-87a2-8d96c6f372e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "655f9e31-8632-42e9-a695-93ca0d58d8f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe22ddfe-acc2-4920-8eca-a5ea699977bd",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d5f097-54b6-46c8-9a5a-f931b76a9d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4f03b0d-85d4-4c4e-a0b8-f4883b8e684c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "694bfc0a-d8e7-4cba-bfc8-62051a9213d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d835e062-81e3-4f20-b610-e5f7f81fb304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51479adc-cf95-43ba-a245-6be2d3651abd",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf04fa5-cc16-4dc3-8383-af052207cc90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b384591-9783-46f5-a75d-7c2c0004d813"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "809c612d-df3b-4453-8888-4e4b964c429d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc5a5821-13b9-4118-90cb-63a8781b3491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a994fb-afaf-419e-b152-913d2ab82b8e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2433c798-1f94-4bf0-849e-2d4c3e2dbcfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4892caac-a9e5-4e10-92f5-5ea986a24b30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788e1cf0-a9b6-4349-931c-5cf965b8742c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb2ae934-71b6-4f0f-aaa7-62238b983498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ed27a9-7645-47c9-b9ba-81b2be97ad92",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "007134a6-5b27-4397-886d-764fb278cd81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ce328c7-1ec2-40aa-8e06-ebf1d21e380c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce281033-ef66-49aa-bfe0-8ad33615d7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bc9df65-579e-410c-a339-b0aa2145297a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28031a0c-966d-4479-bc69-46b949d88292",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61586fd6-b500-49eb-91cd-3b536f79847b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34294169-b475-43d1-9ac9-169d77912311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b579fc0-b41e-4f58-9168-08212ec1b329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b0cafa-05e9-45e3-ae42-dfc2614ff1fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed4b94d-b9bc-4284-b047-ac9fee6b7e59",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6d0671-1466-447b-9914-74ba8391892a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8633f418-3d6c-421a-a0b1-7f7c5bc38615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1ade8b-3a85-4112-a321-355c3921f501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "194116fa-b350-422f-be14-f6677e57f696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec1a617-cf2a-4342-97a4-fdcc7da8e2b5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab296ca-106e-422c-8abb-cfbbc7003a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b3bf17c-678e-40a7-908b-380ed347f9df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ca1dd6-cf87-4e81-a9fa-d07d172d3ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "321135fb-3966-4015-8f7d-db119a146d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db6ecb76-074e-4519-a646-9a8e0c211167",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70000cf-3200-40ac-a2de-e90d2c6f355d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55eda0b2-2375-43e0-a3ea-b699e12ca8c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1fb16c-ade1-4158-a20d-12ecaa1c133e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "338659d0-15b7-41e2-a8ff-0b0a276c5ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d15d7587-5c68-4bef-8832-f02bfbbc24ed",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "572f0333-b165-4d01-ad52-17a94419c3a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58be04f6-f1e2-4131-89f2-3f5fc65001f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf44bc5b-8e30-4cda-bf41-d985ededfeb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca80b3cf-dee8-4a3f-990d-cf60cffcf371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77c8a7c-b140-483c-bc3b-8fc84a42f462",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf3c2b7-c72b-4f89-ad8f-69170f3c2438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f72bc2a8-5a24-40be-867b-058d741020b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907f5519-0ed6-4f35-850d-304143debaea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75a17b1e-bd84-4c31-aaac-49a40cddd22d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cee9f07-1d42-4a9c-9983-2d2d60724b0b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f628d995-5b94-4e29-9560-e283af624b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "935fb330-b65e-4daf-ae4f-62f066bcab10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4f37d6-a0ca-48e3-b329-0f73bcf9afb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "851410e3-0889-4fc4-bd71-aef22694bd39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2629909-f6d1-4b5c-8bb0-06fc6ab24445",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a029edf1-5de5-424c-820e-9cbe235cf0ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83d84bc4-315e-4ada-80b9-1e20fed116fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445757c3-f735-442a-8935-39945ec45e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7aa8c418-e896-4596-af5e-07483071b222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d98cc9-cc6c-491e-b841-048de65a346c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25881f09-e649-4b29-aa1f-f4260134206f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3a3ad75-e547-47d0-b3d1-3c4149b5e7df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff59f34-8e1f-4bbd-8e00-9b1fa40ab9ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ece2a44-6a92-421c-b4d4-fbfd975a54df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32188d0-d0cb-4aec-960b-6d1ee18322b2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9660eb30-069f-449b-8471-9bacf35e4f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c23fbc53-4486-438c-8953-9484f784402b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f89d49-05d0-41d3-aade-92acc771df0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b73230e2-4995-4d61-b333-ff2610c4d3ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef1c61d-d7e3-4d4d-a637-1e118cd33e09",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d875da5-4825-4b84-8bd7-12dcb7ca8578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8e1283f-7778-446e-b4ee-fe78998a0123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc798be-8bba-4987-8653-37e70767af18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68e430b4-69f2-44a7-8f2b-c7cda004210c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2755f93b-97a1-4193-a2ec-60f490da5cd3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be5f94ce-2518-4c83-8e36-bf3f8ddddfbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19efe3da-aeee-4e77-a9e0-4dbbcdf5d576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47f8987-efbd-4c0c-9be5-37f626f6a6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19ca1bbb-846c-4510-84d3-e4c300cd17b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f5bc11-7ae9-46d3-bc7d-3e5ef47f8f72",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c143e0a6-5a6c-40f9-8f7e-b6c1db5db059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72f96e7c-eae3-4402-b9d6-dd5e8675ab48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a090539d-7d83-46ac-8d39-b01f570540c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49470808-0471-455a-9744-f43726e0665f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a6ca516-eed7-4c86-b354-a1fdb187bb79",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99261a07-a418-49e0-885d-f708656365d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06f460bf-fa7e-4bbe-8281-e75d5ae62be2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7abe327-ab7a-4faf-b57a-40d8122f113d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90386760-f7c2-4189-b606-33b7d04b6e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d4d341-b641-4be9-ac7a-465152d69e4c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "641d85ce-3052-48f2-a596-49924d8af314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f4e2630-1c2a-4db8-9436-2511ac3cce9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742e23a1-86ca-49d3-bcb1-dbc439ec0f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d1f4761-2260-4328-ae5b-b8a7838bb618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3afce0a-c87d-4435-a4c3-c7885d78c574",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "523c03cd-a10f-43af-a078-85acb9de044a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d7ded9c-0916-4eb2-bae9-1e35bc8b067f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da8f161-2c6a-44de-8fe7-1e3f63fff576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ae61b15-a885-4dc8-b3dc-00585b2ca420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0074fd1b-7fa8-4ae0-9c26-5e7b8dd159bc",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "813c2c42-48ac-46e6-aa91-4e7f32da640b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6001ade4-f3a2-4e1f-9188-e8b83d7bce66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbbc200c-ada1-442c-9c82-4f3472753ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "308a07d8-5250-4e0e-aef8-a5c64ab0edb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cf1dc88-cc5f-4ee5-8004-86ef53be1b68",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7429c941-21c3-429e-b297-417d34bb0d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37ed972c-6028-41f2-bc08-2defc54654de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ef4460-e9b6-41a7-bcce-2214b5562322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84ac8c1c-23de-4768-8623-1c62da50420c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a82314-2cfa-491c-abe0-6a405c3457b6",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b7bd4a0-740c-4056-b5f9-4b6f05ff5c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb5e718a-aa34-4ca6-955b-07ac99d7a67a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d686dc55-3167-453d-ba11-1c3df3fb76d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72301ff7-9da1-4e36-a01c-61e8a806214e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98f0ea6-8453-4fd8-aac5-4823b5b08362",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3260be2c-7bba-4b1a-8cf5-22d910862fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26e22125-a391-4b57-9557-758686f798de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d68d5b-a07e-4fdf-a230-e5e4ec88e99f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43e2e10c-6945-4b73-b630-ba768e81d5ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05037361-1743-4571-8f6e-2cf2c4149415",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00518e58-f9fb-4850-b0ea-71386c94d5dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c39e33e-a238-488f-ad9b-1a4dc29c1cab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "462f6257-4925-4860-ac46-345dfeb11c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "355f0775-c6cf-48cf-8f3a-9dc29a0c2fed"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4f24836b-10d4-46d5-916d-7f9304ba1389",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d5eafb8e-f0db-4ed9-bbb9-2935c575d718",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6961d7-41fa-428f-9284-53b430f54468",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "847e1b21-f347-4e69-b34b-190abbd9bc84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0db2ca0-ae37-4a2e-bad1-f985de2faa31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c94fc56c-6a00-4c7a-a05e-49c2dccf71cc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97ddec3c-f42b-4e7a-ab1e-43c6f9c9c8bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40e50744-4d0e-4d44-8780-63ddd53f1ab4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "542ed024-df08-424f-a381-91ac925908cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4526f9e-a0a9-4985-97e5-143900a3d819"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a31809a-cc79-46e3-86f5-b752e810cca2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "edb18a79-a993-4857-8be6-1269f8617f29"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f627773-7583-43e7-8f0a-0f0567b73ce4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1a9f6ba5-46a6-43ac-b88f-7b99d59a8403"
            }
          }
        ]
      },
      {
        "id": "3d04059e-abfa-4c5c-a4ff-ff3889031f4e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8cfe361c-c9b2-400a-ae18-d8f14195a042",
            "name": "Negative Testing",
            "item": [
              {
                "id": "77079dca-dfac-48ab-b282-db5872760f82",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "60ac6923-8218-4b0b-9d13-f03a172666be",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "333cf25a-9025-4e01-9555-76bd967b66df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b958c557-f9ed-4d8c-8ccb-b2ce0d765035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b019e7cf-b18b-4a0a-a76a-795573ae05b1",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de86f114-64de-48fd-8a62-693307f89ebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b661f9f-4c18-4a15-9666-0d9a04eb9fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b6d4bd-08eb-4bd6-9dc5-e19ad7e30506",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1842fdb2-f014-44bb-9e8f-4526440d6a51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adcb1771-9bea-4577-bd8e-bea23db28661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66d4be9-4992-435b-a81c-3f455f607d7b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc88ba2-b209-4bed-929b-436846a996f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97cc3680-7825-4ce8-82fb-9452ca9e446b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c12486-bb9e-4d6b-979e-488d64ccf3c7",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a0685c-9cd5-4899-a24b-268f3f405f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "621ec6ba-fab9-473a-a821-3a785ec481ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9ebe53-d070-4680-9aca-b1a13bc391cd",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bffadd1e-ad12-4f3c-a644-a0e96b98b4d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cdc28d0-db14-44e9-ae41-3051381376ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc60aef2-5a43-43c1-93c3-1e088799441f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af47ac03-9dbd-404e-8f4f-456e25208bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc335c69-78ef-4e39-a058-946eb54f0918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05e96e9-7dc2-46b3-b3e3-8a184afe937d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "680d2f34-17fb-4010-99de-3643eac57f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66e70c6-b315-47c0-b577-f1cb5326ead7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdbbd2ba-4208-4dae-ab57-ea6778226ce7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd53baf6-68a5-4599-ae72-ba246ed87d18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69aeefa6-a2ff-414f-8108-30590c570475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3a4f5eb-a586-4124-9362-fd985f4e354b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7bd160-c463-41b0-9374-377df8243a34",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4140b82c-e1e7-472b-a1f2-e148e28d5998",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb39c355-0683-47f2-8651-a4f1b94d6138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c62632-7e78-43c1-b414-bcfd1d1281bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "955698f9-85b8-474e-80a9-16b6d6f8ff49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13d3996-4527-496a-9888-1f33324f74e0",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbba51fe-5a3b-4623-8f57-3a3d244e9292",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51de58c2-e20e-4136-93d1-f91c44323f1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c680ca-7fa9-4824-b41a-353fe96e78e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "465d0822-7f6c-4aae-a7e7-b505a598a4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a8f6f8f-961e-47d0-aa89-ae2f7f8a38dd",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658aeeb0-2dfd-4581-9ce2-e4e65bd72fb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ec512a0-cebf-4f67-af59-d490864aecfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7982d0-3188-4fad-b748-028d8ea67dbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab3ee069-5e60-4231-b7f0-12f10cc498e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c4043e-848a-4398-8576-a2d8ddbd019b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2b2e6a-44aa-451a-b86f-a475b796bb31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d130f1b1-4276-4030-a12c-e0ff8652bf99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4ea07d-17d6-4b93-9b62-ce9c3c4175fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9fb8bd1-9df7-4630-8820-dd36b3a68dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b290182-7d8a-4e78-9e4f-cb7d98bb9912",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef10e55d-e35e-4ac0-894d-025c6ce383a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad32c32b-d884-4ec2-83fc-3795e0de7a95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e299cc1-d05a-4853-85e7-2bcf34df7ed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9feeb6e-0f75-45cf-8263-67179c292c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b18aae7-d43f-4c1a-9adf-1ebb41eb2682",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b89bd0-239d-4b21-804b-4421e8c71fba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5bee0f7-fcaa-482a-bfa0-97958a5e6086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20aafc1-4927-4c34-9eeb-6fc5d6c29539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2434758-a150-4320-a88e-274a970d044b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb8a669-150d-4c5b-b945-a88d71f83714",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebfdea3c-07ef-4990-96b8-7fd7f05da9cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5eb0b06-d5ed-4a44-89b2-de754fead7fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5794bf19-d309-4f99-a739-4ef9bddaea77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfd91db0-c0d2-41b1-8423-f95554884135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa70301e-a6fa-4a07-b20d-7273a6b2905c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c130c291-f46e-4e71-9607-56a50c03f41b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e466f5d-b315-41e7-8f94-123d67330c4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ef7c99-5f59-4410-ac6d-5aa5d7b58f79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eac572d8-2412-4720-8020-ccf9ef7e5e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb25643f-de80-4896-93c5-9a6c824a35c9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5832c1a7-c92c-4b11-b40f-c4dbcd113e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6537183-0af4-4dd7-be1b-d722828f6e0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1824a780-a942-40b1-8e34-03a1a156b112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd029f63-83d7-4aa8-8e1f-7e77374eec1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10577d3-4ef5-4920-8d99-3d9fbaef6f31",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9289dc-cf2c-455c-b967-d40557be7739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b69fafb6-bea7-4279-852a-95f2b8ac109f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39061a68-e59b-4091-9ab0-0f705f4a8909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4afeedd-8e02-4a5d-af93-d897d962139d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f360afa2-fb3d-4831-964e-6c39b44082fb",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef7c834-1855-4fa3-8fc4-41c76d27084c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "538cf36b-49db-4332-aa02-f9623c125e3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b1df9d-817b-432e-b463-b2ede12e98d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "653f037f-6484-40b1-b24b-ed6d12427883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b6300b-fcae-4235-b0de-175e4ecab827",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7ee1c1-8da7-4c63-8cf2-e9be5e22edd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02530358-1a4c-4104-b39f-f0616bd9af3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e454a7fa-94f9-4f89-8235-c0075e971959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "487e1a2c-7dab-422f-b9aa-64128fff626c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d5efa2-e6ed-4844-97b2-2ae7498bd681",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114201e2-422d-4917-b476-506f6c227a87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b402c585-a37f-422f-a34b-d966b911c466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5df8cb1-2bc9-4ba6-b791-58b435a4f230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f9aea35-ff07-4b04-bc3c-0fe3c9308673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6abfa3a0-f9ff-42fd-aca0-9d866f7c11da",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78584275-c2b4-4d6d-81b5-6a4181daa230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e9152b0-a6b2-4ab7-a1b2-fd3c388c135b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49fab62-888d-4053-adcd-8fc094c75346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b98e04c1-c423-4a98-bff7-e7088af20167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed62522c-3f48-430f-b2f1-dc42c9d73491",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5857e54c-38fb-41fe-9ef1-acc0068a002e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbe31b7c-22d5-4868-8bd6-e13960071d56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a089f40-8a71-462f-b587-23fcde11bd65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ecf8525-74e8-4a4f-bb2d-917fa6970c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4cfd67-7a29-417f-8864-6bfa4d082bcb",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257cd83a-bc57-4c62-81b5-03405f71840e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed3e55f8-e6a7-4ba2-b99f-e7320552878f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c24756cc-6956-4805-a6ef-2fd6ba4c028e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "262d13b8-c6fe-4fd5-8dee-ee8d80219de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66030ec-f040-469d-8ea5-ad3ab2e77566",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2e1d7d-2993-41b4-bbaf-d81de4472fbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "073382bd-73f1-4276-97a5-a108af8b1c73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "100ceb58-07dc-41f7-918b-16ebd1514a4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "934b0142-4347-41dc-9668-6f4ce16ae0cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a66ba5c-72d8-43ce-9a41-47012468b028",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8264c047-9491-4b98-bcb4-ef48c95f2689",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dbf7a00-8d31-4888-bb18-99e337165dc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa579d2-24b9-43d7-9a34-7db11ab8a782",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f85ffbc4-2078-4d30-a667-81ce9d92a02d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27217065-b01f-4e2c-a131-98162a5e1270",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77827867-0c29-45c8-a84c-603fc4cc89ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e98faa8-bbac-4f6f-9673-cc601108a3f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4045084d-04f1-4264-82b9-d796ae182db1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab1da44b-5fcb-4b76-9081-a90c3229d851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1a382c-7f5e-465b-9928-a3bd4f2635ed",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8587425e-4ea1-4990-a4fc-d200dcee1167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6993679-fbc2-4318-9d64-93901a6883d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "799413a6-edbc-4d2d-a4bd-7c67644bb05c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "223c10f1-1a0d-4f9c-a10a-a9bc86cee2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739af047-9b1d-47ec-a6f7-bab6b5a21a77",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6265315-f882-4730-b969-35c2d0b6ac0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dc12efe-4236-4d4d-ab3c-f468f36274b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1892a18-feaa-436c-bddb-ffa6c2bba69a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43bca97b-64ba-424e-8b68-74791ee01eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fedccfa2-7c3e-48c6-9000-89d37fb93a7d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b336ba66-253d-4be5-b2a5-dcdd0b0b7b38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "683151e5-7f3a-498c-aff9-13073bb38cca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e023a0ca-5eb3-4f9b-ba01-4db5e80f0b8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2317d2a-e2f1-4fd3-b7b6-859dfbe9cd88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2070b71e-3239-488b-a20b-caa5684c0cac",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8698550d-fb1e-4b32-ad28-86f4fd2680eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffd60753-650e-421d-843e-39556b04ca63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0e7ce5-a99d-4d71-a22d-b33bf0fa337b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d41bf5eb-3c79-442f-9b30-10879712675e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10cd1d3b-8d31-4bf3-9242-28279dc55927",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52484079-37e2-4572-8c67-ddff408284f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3139228-c1ba-4eba-9ea7-0804d413cc8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e293d5ab-c49a-4146-83ce-7e05644e08a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef0122e-c0f8-4a46-bd77-c08ae459a842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca8f900-de2b-4c87-b05f-9494e24eb94c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7c5715-5de4-4df8-9554-5a446510d5d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed39aaa4-0f84-4f59-b858-5d630940c672"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a0ab8b1-2d3c-4f6f-9715-059e3c525032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10bc8e50-3fc1-4d00-8f3b-aed960a26500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ed25eb-bc20-44e6-9695-d41387121158",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d26d48-ec22-430b-a413-7d0adfa8acd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3f696ae-fc33-4d9a-8709-c20abaa6f974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13bd043f-4602-45f2-b2fc-e9fba8054d15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "958aa045-0d6b-42c1-8e39-4e8b2dcddc52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d344c65-efdc-49b9-992f-0b2960611698",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a1cce0-f0ac-4076-af9d-115f0250b5fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bacebcd8-15f3-42c8-a708-e9c911e0c009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "528f9a96-d542-4dcd-a771-3ca77d64badc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "483d071a-def6-4238-acb1-2c0d6050cec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4661866-c0ca-4bb9-9dac-7d06c0952ecd",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80b61a8-da75-4cb8-8836-2c1eaad2455d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e75b5508-cd50-43cf-9336-f68563cab808"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b970c7-cc6b-43cd-96b3-60a977aa07ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad877f9-6dc0-415f-839a-6ee41ff2ed01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4652dae-337c-4f11-8894-fb8d85fdcbd2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15bd8176-60ac-471d-bb6c-03ef4c71d34a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d550db9e-637c-4f73-885c-d00b64a51206"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3bd3d6-1ac6-4f28-9e4e-6e5208b91795",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc4355c7-a931-4e7c-98d8-f2d3a7d972d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed5432d-ad80-4f33-a5e2-1c83dc8ca4f1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f35b06e-636d-45cb-9116-c38fdfb1bdd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d050e1d-6c08-4adb-86d8-9ac49ef99945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "108167a6-f0b6-4e4d-b72b-c7f8d2a320b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6d1fa22-a68a-4608-9649-f8ce0ea068e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f56a1478-7fa9-45f1-9d60-d8e4f248d49b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd50813d-8767-471d-9e8c-8f2204369853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ae93c6a-7782-4a6c-b89f-e553211302d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a6a0f47-6990-46b5-95d7-1041908c1259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8e12382-8e5c-40e8-a011-ce822b61d3bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb428dfd-5aa3-47a1-9da8-dd575fcfef43",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "908369c4-526f-4976-8638-ad03775134c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7172ae4-bbbf-45e2-9558-20a8fe4f736e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adaa6ad3-8bbc-4528-b882-fcf499413954",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e95113e0-fcd8-4d5b-b859-da41bcbe32df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d81a45b-0189-42e1-8201-e28fc35a3aa6",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "513a5cfa-eac2-4fe7-a7f5-754add8df3d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b3bd645-b1d8-43d6-af7b-760140da5fef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfae173a-3710-43e2-afbb-1c86d7feaf12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cea5bf89-0e75-46e2-91f5-62bdef37f813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d16c123-c697-438c-8ab5-fb057ab9564a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff400c3-ecfc-4ac6-b432-f8a71bfaa8cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa7762bd-04ac-45b9-ad1a-a33de1b8a2a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e1c908e-111c-4c14-819a-f5acb19ae5a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ad3773e-9872-4282-b28e-3a7292de22d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "944bb3a3-fb75-4616-8921-834a7c53aef8",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "413e6115-1641-4a11-a78e-228db4f2c39f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ff5f941-dca2-498d-9ff0-51e92ef84740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "737850b9-119a-41c7-a58d-5ec11562a7f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "794f9ba0-69cc-4ff3-a17a-a689fe0cced4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "456332ac-c071-4540-83e3-6ad482b62446",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de5fc76-7a3d-4e44-be8d-808fa3996ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08eba422-1960-4794-a71b-ba6518e9f19e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "803bd454-e1de-46ee-8ace-a8975221b04c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f09787b7-0f91-445c-a9eb-f52dde200f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e54393c6-92f1-4561-ab1e-c8e6a6e59af9",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb61d1a-a277-40be-b6a9-0c46e871fd69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd1d2d62-1dc7-4da1-bfdc-c02b89188bd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf7e260-cde0-40a2-a837-4dee97c8ea2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a280fd0a-8512-41c6-9a83-b53387436346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4245b5e5-72fd-449c-aeff-c1aee1012a05",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be467781-fc2a-4517-a854-93a9873d1738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c907396-742b-4704-9891-ca643f94d3b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc8bacb9-12fe-479d-a024-573442c89892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14cf035e-7bc9-4efa-9199-198d057265d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b38bae1-2ccb-42a4-a99d-9dfec3849f26",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dedfe184-9a0e-413d-ba8c-bd5e9c95ab40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efce95a9-e873-4ab0-a0a3-42b5e1d3b17c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b631ae1-0d36-4721-84c2-77d04607a689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dd384bc-642e-43bf-802b-5e8d54ebb76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb2bf09-829e-4ca8-b7c2-6b27814b76dc",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2dc1593-e671-4a92-a0e5-dc8dad6fff65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af59e78f-9d82-4c54-a20e-45d49f89e1db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62dd4e93-2670-48c7-9e5c-dde65c992a55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09bca258-a77d-41fc-999e-af6883d80400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37387fbb-a43d-444c-aec2-b3447c994090",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc79b6e-15bc-4c67-a831-9432ec6de23a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20877d32-2237-4f1f-947e-f9d352d31423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbce74a9-7a62-45a8-a9d1-a5e2e9ba37eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "275211cc-a46c-4461-8f64-5fb2999a31d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e594d36-33b7-45c2-b711-067a47c36d18",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7a39de-9114-4c37-90fc-674879aae35a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c56115f-8ea0-45da-935a-49c086e95495"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e04a5b0-552a-4f77-b7be-eef18d4f8361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fef1d56d-924e-498b-b80a-cd716e77fcf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4531a2f-2d85-4665-9d30-af90783f370e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e814546-8234-4475-863f-188176122b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd1f24fc-c286-484e-bfe9-01cf503f57f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e168259-8684-4053-9b9b-c96b0c8ece3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db930377-b44a-441d-8f74-667cd04be4e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbcc15e-2dd1-4106-90bf-deff75089b7d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a9ca17-41cb-4da4-b0ac-2a2ce86dd0fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4222516f-e351-415d-bc7a-0c3d1b851eee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da81d979-04e6-42ff-9c1d-445808451122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67d235d3-af70-4cd0-93da-67220656eb38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6725c4ca-b5aa-44fc-a333-8141306d2bfe",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d29ca9-cbae-4a70-885e-58fd4a4f48fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d21e7479-be03-404d-bb2e-e07c2819a7d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f88b27-131a-43af-935d-9facae1e85ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84279706-9b3d-4cd9-a87f-cc4e9493e638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a34512f9-32c8-43d6-bcaf-63b243485f58",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ebadc0-a518-4fd0-a313-5e324c604bc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea14292-c990-4406-b96e-f6cd377666f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9f6747-e1de-4faf-af38-a41a979ee10d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aff03ccb-017c-41cb-a76d-baef18cf7a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7de473-23ae-4130-a10d-a85c380c1b2e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9366bb60-e57a-4366-acb8-2e870afa70da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dcdb33a-591b-4800-9de2-bc84b5710f84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7115ce1-92a9-457d-aa99-ba89a528957d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32144264-e60f-492c-9e54-6dfb5e145d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2b28b1-39d0-4535-b0f6-075a3011a370",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6483ccc3-e135-4785-93fb-59d8f4591741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7189d8d1-fa5a-4770-bda2-8bddc9cd1eb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38325687-dfe2-406d-97f5-da5176bc8797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e081b6b9-4861-4879-91da-271255790ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25b236f-bc76-4f40-973f-1a6b980b309b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adfa9e5e-19ed-4f08-b4c6-15d443562c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6d3d6ed-86fb-440e-9ad1-79a8d7016f58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b74f6fb-f866-4a8f-82cd-84e5e2b2cbb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f02c2f4-d61f-48bb-8665-3dc137aff84d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "474cc54f-c7cc-4355-9461-d67799aaeb92",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c50515c5-1413-4a58-9eb2-d7a5d61a6a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85ad592f-8704-4fc3-b1c3-d6b37cd09dfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93008828-6db0-4eb6-bdf8-f9710cea255a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cc3d92e-dce8-4e4b-bcf9-8d9ee1503a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac25358-2c2d-4b55-bb0f-ea1435d9fea0",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27334135-a0d1-4a22-a368-0cc470995172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2698cd6-3d80-40a6-b28f-6a311afa1493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db8f8f0-67f7-41d5-918a-8a39a6573acb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d4a93c5-25ee-4f27-a9ff-44d97442d315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ab1048-6cfe-4ec0-9d81-128b9527a39c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a053f86-e8a9-4022-9fbf-33904386369c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4edea288-86c8-4511-a19e-0a441f10f631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3444eb0-4976-44aa-bba2-c4d43e6317db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35ff88f5-6fee-4a34-8da7-5636c2af6ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8306c320-b9e0-48fa-922f-43eb2c21959b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c685ec7f-3208-4d54-9b66-317d87983ecd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bca2d393-8256-41b1-ac74-d57c5150e182"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69431845-f898-4a37-9c1a-cb7662b01132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74ebbb62-7bb2-46ae-9ccc-6b0d27a270ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99272147-343a-40f0-91ee-0463144a6195",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc48f89-1c9b-49fd-9488-c1cc72030a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e81b0b-39a6-4a86-bdb9-83177525d5c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "071ebfb4-8a12-4340-8abf-001bfe39bc38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca1fdd7-6051-4b53-8a9e-37d2928c6845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200988d2-c2ac-4662-8eb4-ee80bdad5e4b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8c5236-684a-4dda-a41f-61e3eab61ade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3660c596-a3de-4553-8476-e83fe197bbbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f4dcf0-3693-4f1c-9ffa-8a53bedebc2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8cf3c1d-47bb-456a-b8f8-0e0abd13ddbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e19340ee-4f48-4fa3-b9de-05d3114d6a2e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0bbbe3-a37e-445f-b583-063e81cae03b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "991babff-6f1c-451e-9453-d41592032e4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47361977-87f0-4d6c-a6e9-d64c32ba86ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4593559b-0bf6-40eb-b66a-04d387713216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1b0e78-e56a-4b63-b6c7-d8f9a24302fa",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8299d5a2-01ee-456c-a673-8679f5fdd444",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f4b5a49-90ad-4e0a-b3aa-00cce1681957"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c133f3a2-9960-4f48-9229-d56fa2e43369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad90556-74be-4670-83ee-ccd6fbd932f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16067042-5ff5-441f-9a71-6f480d739806",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "842d33ed-7ee2-4952-8271-a3b8efddab1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cad92813-b908-4b6e-b87e-b568a49158f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5922001b-d51a-4991-90dc-9d34d314b151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8760b631-0575-45f0-b9c6-9b9f92078621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a52477ee-7baa-4b74-be9e-c3d18c4982c0",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df5eac1-bcab-4add-b41e-2c6597300fee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8acd654-bc33-4cf3-acab-00a96e3b6682"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad65e07-0495-4f69-b1d4-84e87378662d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33d3e625-6e79-49d0-be33-8696afec02a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ca77d6-8adc-4ba1-b71f-e20c891f1b40",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3659f4-0ddc-447e-91e4-0f331e752dce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b4f14ad-4661-4dc0-a286-b3c5da18cba1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2f588c-0f77-476b-aa7d-f9801eae626c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b51ec18c-2d63-4330-97c3-120923c4ecfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61342eb7-f2c7-4e52-8aac-7273c51b99b4",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bec7272-cd57-4997-b495-ee29914dd8bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "259e7c65-fc18-4801-9a03-9d406d711b66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03918035-f2d2-47bd-9b8a-5283d45f55a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab8bf02d-fb7c-47fa-aaeb-8802a65bcaeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2badb5-1e91-44f6-b3e0-47403dd573f2",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a5bdf7-3ace-4a6f-a2b0-a209c327cf26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ead0deb-d211-48ef-a425-68174e5c4dac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90571698-167c-44cd-a158-8080f08d54ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05e01cd5-3893-460b-a046-19a05f40600a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c01b8f1-eab3-4d26-8c0b-12812437b7a3",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "095db4cf-8bd9-4aa2-b4d3-6790d17db3a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90b8fe9a-f90e-45f3-8c09-ff771a15eaf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f226a5-a760-4978-8de1-a696124ba94c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5c7cab0-f644-41d7-ace8-774ec79b6fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a071e155-4e4c-4df3-8268-748f67774e86",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434a2ac4-96db-4fcb-a198-ca833ad48472",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d06ea90b-f360-45e5-b148-675bfdd89c40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5f028c-472f-4294-a431-032729750461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0efe633-984c-42ed-9105-c1006773952d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8e2024-c2ae-427e-a6b2-002a68706ae4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ceb9564-a43c-481d-941a-73959512bb54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7fbb54d-b163-4d49-a29d-70f1ee03111f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d7651e-48fa-4d5f-9306-01f232f48313",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e163aefc-6cba-4a39-bed7-cfd9c97b935f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c73d484-cef0-4254-8304-f1c72ccd562f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c06c30-e7de-4a60-910b-2b6eb3c6a468",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bacf4b67-b617-43fc-972e-d56e576eee92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc53905-7797-4775-82ef-275644112f44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac060fda-62a7-43c2-b4f2-2631f575d78b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d2ab7b-5778-41fa-ab5f-ad24b037b1b1",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bfe719e-6ede-47c5-8895-8061467084f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d118919-a5dc-4478-8fff-c048893d40ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04bfb96a-5e98-457a-bc27-da378800d440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e180e69-0980-43b9-99da-be2604bf5aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a4f0d2-f506-44d9-97cd-d148ad7521fe",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c978ac-1376-46c2-876e-9823fe794fd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d349cf1f-0c80-4a76-a147-9993703a25b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8393d947-ac0d-43f6-8529-94287f9f80d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77349072-01c1-4e1a-942d-a05d67372a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f403e5ed-6077-490a-ae4b-8c7f47ba603b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ca289d-ac32-4e1a-b4f9-f707478c9c32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ab9d580-ccf4-411b-8c89-67a967434166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3937b4c0-774b-47c7-ad3c-6edab97fbd42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9213275a-1dcb-45c2-9925-495fb45fca10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1a39a9-afc0-4b67-84af-6ec9b53ab0e7",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3b571f-e220-45bc-8410-9bf837b80639",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e35d02cd-95ba-46f2-97d1-7df729d5349b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d84e03-abc4-4863-bbe2-bd368b2fbde1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d35eabeb-08ae-400e-9dcb-cde1a13d3608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2caeedcd-d8ec-4632-a381-3b9bbf3936f5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff44d0bd-f954-4c84-b47e-0415eec4acdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bcce6e0-d891-44f2-81f6-a87f7b2aaaf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5320554-b935-46e7-9af6-2ce3ab0eff21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c50300-9ab2-49d9-aea3-d4ec6bb5b110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42802879-0c8f-4977-a325-1a9e50f609d5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca077ece-f4d1-40fa-b68e-d9909d4bc1e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd022b24-ff27-413f-8cb6-399906b5b8e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57254889-2d6d-4143-a66c-0ac827b04ec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb3c657-d71c-47a2-a0c4-2066f61f4cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f9dd9e-df1d-4279-aa1b-05a635e14fa6",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e94828d7-fcbd-4f35-b525-eb05ca4d8d21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b7e780a-83a5-4a61-8fa0-aa6c79cf379d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef39cc0d-c540-4774-9d96-365b40224b57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e2fc79a-0caf-4a75-bd3d-f2db8cf06afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a4ef45-312f-4ad0-aeae-548970fc3509",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec92ad0-250e-48b8-9b85-5c2e2107e651",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba9f9c73-d806-460c-ab77-fc42312435bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9eaa80-82ab-40a0-a252-3a6c1d89fd2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48f281c3-cbee-424f-b0ab-f48881c4719a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32435f0-df4e-4cfc-935a-b96e0fb51687",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38e2494-3b9e-4f2d-b5f7-075fe754989e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac0d54dd-7ad9-4f29-8efb-639823532390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff19ae1-ea41-4886-9bad-ba9d524b5fa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0345c96a-8f25-403a-b39d-d9e7dad6b961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deca0165-fb3d-4738-be6b-e620e6a4f41b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45fbf603-c1c4-480d-8197-d85b2a2e4523",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c373faf6-87ec-4f94-bcdf-b752ffcf15b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2b8cbf-f085-4b7a-a337-99edd5fb79ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aadc0a8c-a2cd-4a00-b858-ed3c01e9c6c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64bea923-531d-49ab-9bb4-757f264537a7",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27cf096-204f-4102-83a9-ffe69b55d2d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f453ea8f-3911-4fb4-8744-ef61aa51101c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3c3903-7c45-4500-9281-17e2d631f643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82754e27-7376-4191-87ac-0135281b4c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0be2405-f19c-4ba0-9834-dcd18fee92b7",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9320a5b4-7fe2-4b69-9ab4-775a6ce7ec92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "910cd4f9-508a-44be-a5d4-36a42c845f32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68dfca0-715b-419f-b087-b4eb71f1e91b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04b6b06d-c3bc-40a7-b857-31fd1c71cacf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a529e45-4e4d-4665-a262-4939a087f7de",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524aca7f-48bf-457d-8470-3b78eb57535a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a0e7871-257b-4534-a16d-377407b5745f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3adf6ac-e0ea-433b-bc43-ada10be3ea2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a4e8de8-7359-4b60-b38d-f2f8dfed5b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b821adc-92ab-495d-8b22-717861db4219",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4dcd89-88b4-49b2-9a9e-aa48cf7fc79c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9feca0d1-b3c4-479a-8b44-c8b2aacb909b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4bd13af-bb82-4006-8060-d12f28c5a641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f43fc09-d713-411c-84fe-68e38352c5f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c3b99c-741b-468c-90b9-1f6b57b34f5d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ab01f5-1124-4fc6-a1f0-5f7401acc543",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "214f8880-3328-4553-a2a2-d16ee96202b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ccdf9e-9daa-4900-ab34-042a227e4f17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ee86193-6c85-4a40-a69f-f3c40b46108a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fce3e95-8813-4056-9559-1f8131bd6207",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3265105a-b701-409f-8bb3-31135c246e69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d05ce6d-5b39-4654-a6ed-dd4009f6c1d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d30e4a-8d1c-4dd6-b170-2b6ea558bca6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1416b74-e091-4cb9-b0a8-91fe83502218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64692ba1-46c4-4aa2-bb9e-210cdc577cb0",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfde1dc1-65aa-4c6d-b3b2-d9bdcf558964",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e3fa3f0-10e7-4679-8e30-8612b88c442f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bffb9ab-027b-4843-9c08-7577086220b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9cf0ff8-dea8-40d0-93eb-068527cdf804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b333c308-015a-481b-afd0-610b98453b19",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea031dd-0a78-4403-8eb6-4c4f18509e69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43914b89-47e2-4d12-b139-c67f407a2f18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74637089-dcac-4c48-812f-e99336146fd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f721d9d-42ca-4669-9924-ce4505493119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0145c2f-82e5-4128-93bd-ccaf2d01e3a4",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c198a2df-e83c-48f3-805b-03081c5585ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42a5e0cb-c79a-4968-8af0-6fe39fbff3b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b73794-4660-46ea-b242-cba378cab609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b259965c-afb8-414c-b5b0-f22f0be158ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1841ca9-655b-4801-8f22-e45077149243",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90aca728-e27b-41c0-9312-6a3712527351",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b376117-aa33-411a-b8ef-c4771770a7f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7fe3261-4087-4ae5-827c-47e33f7e7fc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad399079-50eb-47df-b387-0f879a40517d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d86ff0a6-623c-4329-9399-e5749596fda0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ccb35d-482c-4fd1-a332-334cd796b1a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "550a9a12-ac04-4c23-8b7b-3e569042cd66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "570b4c78-9e77-40a4-b0d3-dc54b3fb6cd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1baa7960-ef41-46ea-9d56-e294d2108a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c266003-be1d-4541-ab9b-caac2ca1c9d7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccfb2526-bf4e-432c-b58e-46ef45f6a5d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fb4b7ce-a945-49bb-a697-953bd8c84d80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b836ff9-3040-45ea-98b4-7321908b3b95",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da51bc7-7c65-40be-ba08-8cba6bcc4d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ceac3b-c51c-4a30-bf3d-642259d82dbb",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302c627a-f9fe-4e6d-b2d7-9f62de2ff934",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "279f05c7-9b5a-4e82-940c-d70e70f9425f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6b0c44-ccfd-4fdf-9951-c06e080bf0b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b82a0f5c-9f54-4a85-93f5-0a18232aaf03"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c14e419-1579-4f11-b5bb-913ba0241432",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6d2ada8-53d7-4ad3-80c7-5ad65d2eb326"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f343488-60f0-4299-82b0-3e998de66042",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "649a1017-bf06-4d36-befd-8426fa9ce1a3"
                    }
                  }
                ]
              },
              {
                "id": "ee2a57f9-dd85-4923-b349-e7791aea8d06",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1415d003-dec6-4cac-a9ac-d38fbd41c627",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5cee288-4008-4bf4-95d9-7732e10d561f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "66722dd3-041e-4241-81fe-1394415ff0f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4affd50-0aaf-400f-a764-77317632df60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f06b21f1-27c6-44cc-9622-8ee2a3d416bc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71b09d70-ee1d-4816-88f6-0997a9757da3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00e74848-205e-4216-9838-58a5bf3caa97"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "333d38ee-574a-473f-b9bc-45c8e6a7763f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c961bae-511d-4f2b-b28e-4a2842342129"
                    }
                  }
                ]
              },
              {
                "id": "0923b669-d384-466a-ada8-d82eecde1730",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2a8b4baf-8cf8-48aa-9ad6-d604d19a7c4e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb635e1f-9e52-4c9f-a75c-dcf7e90aa6ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "57f01170-9ee0-4099-a063-517dd0fc1c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f92f38-d514-4f4c-b8a4-78093456bb11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6d67b86-6f78-4a73-90ae-a1e8a0032369"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1eb345dc-6b9d-48fb-9491-75090a26340e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "00ab9842-d93a-4579-b1ed-13568776408f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "776ec7ab-2ac7-4235-8ce7-6f87bdd10e56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "65191808-5c06-4926-ac6c-90e4f5bb6ad3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86ca8bcf-c94b-47cd-8b10-8cbcdc3c1bbc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f92ae1c0-56e3-4ebf-b25b-aed1d6d53708"
                    }
                  }
                ]
              },
              {
                "id": "f957972e-73c5-40f4-aa57-385694b68bf8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0303741-9d94-4f70-bde0-581c1e0d4599",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "15758a85-706a-406f-8568-2c5b52fce133"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d26c5aa2-6544-4a38-a830-9fe8e852c4a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0842f8ca-7578-41f4-b9a1-627a02ad0ac7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc8ef3e1-927a-46f0-bd6b-2763ea59e6b8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1ea4140e-31ff-46e9-a7b3-13772db08182"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce4e1b1c-b0da-4bfc-9b71-a3773f174b2c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a222723e-97dd-4d04-8b3e-8f93ea581bbd"
            }
          }
        ]
      },
      {
        "id": "c753d955-1086-4305-96a7-2fdfc565088e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a8094d3b-83df-4455-ad73-a8ed18c8ddaf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2882e11c-370e-45a6-b3ac-d607a34ba57c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fbffb29c-5421-430d-99d8-084c4134b665",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebdc2f8-f64d-4d94-b597-ae61dc8c63d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "be7c7d5c-4f6f-4246-b28e-2d6c66a3fa93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26cc21c9-2687-4437-842d-b09333c71cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f360ac44-b454-491a-9758-03ba8d4e175c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8f14a7b-7e33-45c6-a070-f2797ab103c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e72bd3f-fe18-4a08-89b9-9b63db868e89"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c65069f5-6567-47b2-86cb-267d4e8c0818",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c5e39f3-3375-4d47-9ca5-fa9f84a514f6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8e0d1e9a-eefe-4ca8-9658-a5c956db6120",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f69a8568-79fa-4e82-af98-0853a169e410"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ba99e44-f2d4-4ccb-b2ac-e0f9e1455ef0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2c754b79-2240-4899-b684-c9d6bf09b583"
            }
          }
        ]
      },
      {
        "id": "f9a50486-4f93-4015-b3a1-6a475a91efc6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "18cbe244-4b97-4de4-8d7d-67d316faa83e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5310ec5f-20f6-42a7-9383-b9d9e4e5360e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fe6786c9-48f7-4133-a664-7a7296a6a884",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "311ba659-3646-476a-bfb0-45e4c0391005",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5736300-d68b-4e3f-943e-d79776f20f95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6885e749-8c38-4653-9728-de4af22b1cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e365676e-cc28-46d6-8558-dcdb6bc67ab2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "432f4a81-e1db-46f9-9985-1e3e28bea7a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0bfe822a-7ea6-4818-9d6d-16f091e3b8af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c917c2c8-719f-4bca-81c3-68095ccca3e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4aac16e-f2b3-4766-9df2-e9fa1a033d5c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f0d033b3-8f45-4e5e-a28c-03c2f509a12f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "acea97b7-3b53-41da-a51e-f31d02977335"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea37fc2f-a71f-4e3a-ae5b-c103f2818ec0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d6328fe0-761f-4b5e-ba34-e641efceb80e"
            }
          }
        ]
      },
      {
        "id": "8d1f455d-ad37-497a-b2d2-bfab589bce46",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b9acf17b-a2a7-4a7e-9e92-6a17ec361846",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ee83cd5a-3a7a-49f5-822c-33731a44aa18",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f4eb3a8b-9049-477d-a6c3-d59e35812660",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed5f585-47a6-4e31-8408-1b84fb4d5f2c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24cc0f34-8ad9-40d6-9033-da33ded26734"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb435ec-e6e0-4f79-baa0-43a92ce0c603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e4b85fc-9253-4951-8fcd-5649701b62b8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0407d6c-010d-454c-98c3-b26c49e27000",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a7cea49-9163-40e0-a606-53d7bee90a9b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5e59302-71a3-43d3-9153-ae1ac1e2aa99",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7be4daf3-ba25-47a9-8111-b7590a3d8951"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "24206325-7258-4f05-bb12-49ea3ba6bf7c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "054dfd20-0513-46bc-9b75-03f5b6a09360"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "32b58fd5-f4c4-4e72-ac63-7c571f075dbb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3dc081ff-e75a-4aee-b7f6-b99f581b0e2a"
            }
          }
        ]
      },
      {
        "id": "7eeb85bc-e429-49b3-85f1-ac2d1e73f84f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "08f52187-4523-455e-b87c-a78472281157",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9228e996-207a-4164-a758-6e8061059d60",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0f92178e-9581-4620-96bd-1385c18341d6",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c68891ae-775d-4529-8069-d92cd087b0ec",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "affdd0e4-ca66-4b96-ba5e-79d7e51ffc59",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 63.714285714285744,
      "responseMin": 6,
      "responseMax": 820,
      "responseSd": 98.89190484330557,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1712622894674,
      "completed": 1712622919157
    },
    "executions": [
      {
        "id": "7e337297-d404-4051-8af6-21db02b254d4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6b3b19a4-4370-47fa-99c8-a741c83fa33f",
          "httpRequestId": "0ae26b33-be86-4362-9278-f725b659f5df"
        },
        "item": {
          "id": "7e337297-d404-4051-8af6-21db02b254d4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "3fa7bdd8-a03b-4503-a589-2d5c81f4947a",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 0
        }
      },
      {
        "id": "58d16cfe-e5ae-4359-86bf-ee84e682cad0",
        "cursor": {
          "ref": "9ec69679-8e96-411f-923c-36a1de3d43f9",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d82575c7-2d00-435d-a9d8-d4f82001d2c5"
        },
        "item": {
          "id": "58d16cfe-e5ae-4359-86bf-ee84e682cad0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "48a1a20e-3960-4776-bae0-fba075d0b8fe",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "d2cfebf9-a39b-42d4-a24f-8447a1565ab3",
        "cursor": {
          "ref": "e87f1c82-ef25-4a6b-bbb1-68dd3a4e8533",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0b0b005c-384d-42ea-a335-4a8be4c207bf"
        },
        "item": {
          "id": "d2cfebf9-a39b-42d4-a24f-8447a1565ab3",
          "name": "did_json"
        },
        "response": {
          "id": "399afec7-290c-4f07-ba70-621071ec50cb",
          "status": "OK",
          "code": 200,
          "responseTime": 627,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912416e5-4fb8-484b-8358-a7986c98462b",
        "cursor": {
          "ref": "bfd1a61b-fa19-4c00-9d57-d474b811b1c2",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "eb83159a-157b-441c-830d-9187ff46b9e2"
        },
        "item": {
          "id": "912416e5-4fb8-484b-8358-a7986c98462b",
          "name": "did:invalid"
        },
        "response": {
          "id": "e1f385b6-3eb5-4485-91a2-6b46447b491a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912416e5-4fb8-484b-8358-a7986c98462b",
        "cursor": {
          "ref": "bfd1a61b-fa19-4c00-9d57-d474b811b1c2",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "eb83159a-157b-441c-830d-9187ff46b9e2"
        },
        "item": {
          "id": "912416e5-4fb8-484b-8358-a7986c98462b",
          "name": "did:invalid"
        },
        "response": {
          "id": "e1f385b6-3eb5-4485-91a2-6b46447b491a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2287d8fc-fed1-49b3-9c5d-2cea71707409",
        "cursor": {
          "ref": "da152fb1-073e-4515-95a5-87e36c3b1f66",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "47221c11-7e95-4aab-9f9f-aa535932211f"
        },
        "item": {
          "id": "2287d8fc-fed1-49b3-9c5d-2cea71707409",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3866a798-c5bc-4da8-9273-b26afb56e5be",
          "status": "Not Found",
          "code": 404,
          "responseTime": 298,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7cbeb2b-8040-419c-8abd-6c88d022b8c6",
        "cursor": {
          "ref": "73b3e631-cb09-457f-9e86-7b4940e63c17",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1b8675c4-e862-4436-95ba-77bd39c4b5f9"
        },
        "item": {
          "id": "b7cbeb2b-8040-419c-8abd-6c88d022b8c6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4de63f75-0406-4010-b4a7-c7c6d9c9d741",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b26300a-450d-40cc-8fb1-fbf61ccf3cd1",
        "cursor": {
          "ref": "1c5a0566-4c5c-46a3-ad47-30023d59b8e2",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5ff17541-984f-41ca-ae8f-5e00ccc0df20"
        },
        "item": {
          "id": "9b26300a-450d-40cc-8fb1-fbf61ccf3cd1",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "cb57bd03-b17d-4f8a-ba99-e4211520eaa2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "218ff796-3908-4999-bb5e-d0db4abda268",
        "cursor": {
          "ref": "d8b239a8-82f8-4fca-829e-bbc0cf7ad9a2",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "321c6c17-fc5c-433a-8991-a0307d7cd35e"
        },
        "item": {
          "id": "218ff796-3908-4999-bb5e-d0db4abda268",
          "name": "identifiers"
        },
        "response": {
          "id": "81d438d7-4879-4589-a3dd-cbf5516b60cb",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac54af0-b999-4783-90a9-e239f433a456",
        "cursor": {
          "ref": "171494db-07d3-4516-9293-57668404bc36",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e308ea0f-ecb8-480f-b8d8-68acdeb5ac83"
        },
        "item": {
          "id": "dac54af0-b999-4783-90a9-e239f433a456",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ebaf0919-0648-4679-99ff-d616b50ef15f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "062aab17-7cbd-488c-8f81-ecfd9ca0bca5",
        "cursor": {
          "ref": "d47049a7-0714-4118-bb1d-b74def87c51a",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e4fa5127-f6a6-41e2-b167-8b1ec7736d03"
        },
        "item": {
          "id": "062aab17-7cbd-488c-8f81-ecfd9ca0bca5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dd8bae77-d8b3-4464-b911-90174b64aeb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b08d52e9-3285-4aac-a7fd-f60d3eaafe9d",
        "cursor": {
          "ref": "52422714-932d-4eaa-8319-2a2a4257a388",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5a77b455-d214-47e9-bb6e-ef8aa3c96c39"
        },
        "item": {
          "id": "b08d52e9-3285-4aac-a7fd-f60d3eaafe9d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4c1ed3f3-d01e-4bac-99d2-541f883279ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f603361c-203e-4636-abe1-6a38275a019f",
        "cursor": {
          "ref": "fbc6193b-a729-4c51-bbac-7320bcc2bbb3",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9a288fb8-9f68-4a26-bdc2-b2d419edeaec"
        },
        "item": {
          "id": "f603361c-203e-4636-abe1-6a38275a019f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "224dbc48-71a8-46e7-862b-24078d5b6ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0946996f-7348-4981-b6cc-b53e7d2c040e",
        "cursor": {
          "ref": "8e3626a9-b8ba-438c-92ed-86c8cbcbefd2",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "69e1f383-0640-4426-9a06-9958790c9ce5"
        },
        "item": {
          "id": "0946996f-7348-4981-b6cc-b53e7d2c040e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "29a68e4a-1e25-4e87-a961-40485a5a65e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83881f71-0632-4f98-963a-b032bbe251e1",
        "cursor": {
          "ref": "572e04c9-faa0-4995-af68-74303143c53a",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "aa0a9857-d656-4006-9554-a0a4d820151a"
        },
        "item": {
          "id": "83881f71-0632-4f98-963a-b032bbe251e1",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "22ed1534-8dbf-463d-ad44-f2a70d0c12ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e84f086-9563-476c-9fce-e8c437b6f42d",
        "cursor": {
          "ref": "6501e449-606e-44e4-9f9f-7f41b31df4eb",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c48e51bd-7fa9-466e-9e28-a475d962432e"
        },
        "item": {
          "id": "5e84f086-9563-476c-9fce-e8c437b6f42d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5cba3254-5f99-4ec3-8401-2f92059a6d58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6bd474-2e94-4ce6-8d7d-3cc46d199f5a",
        "cursor": {
          "ref": "fe90fd63-e3e0-463d-ad7d-1071919b64e2",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d6feb70d-ea4a-40ec-b9a1-0444e1535d2e"
        },
        "item": {
          "id": "4a6bd474-2e94-4ce6-8d7d-3cc46d199f5a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b1829be0-b31c-44ca-b320-546aa5273f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c96f0e-4ff9-47a6-9de3-1a9fe20abf9d",
        "cursor": {
          "ref": "95aceac5-4004-42dc-98fe-5a0ae817cc60",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c8fc9b87-8893-4aae-ac48-c4ffdfadd8ef"
        },
        "item": {
          "id": "25c96f0e-4ff9-47a6-9de3-1a9fe20abf9d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "8b9766f2-74df-4fb0-8380-9e4065df70d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ca7f4c-bd70-49ea-ac01-6250d188083a",
        "cursor": {
          "ref": "8d24ef49-00ea-4042-b934-61ec3f23e9c1",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c65b8ed6-de19-4e4a-bbf9-0bd3254ecad1"
        },
        "item": {
          "id": "34ca7f4c-bd70-49ea-ac01-6250d188083a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "9567e746-0696-435e-84ed-d41f09ccccb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7de7383e-2d3d-4209-869c-426d75852e3e",
        "cursor": {
          "ref": "50b5f82c-7647-40e3-9ae4-c2a334d2bdd8",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e01766f5-fd7f-4d86-8686-5e27cbe763a3"
        },
        "item": {
          "id": "7de7383e-2d3d-4209-869c-426d75852e3e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e14122b6-ef0e-47bb-bca2-00bb91d0268f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03093338-313e-4500-9d73-1a7ea6a344cb",
        "cursor": {
          "ref": "90d8b1cc-8d32-457c-af93-4389bed55e48",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "51c65da3-1e08-4703-be43-b2429f2c88ec"
        },
        "item": {
          "id": "03093338-313e-4500-9d73-1a7ea6a344cb",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "9665e07c-4c15-4294-b699-10c96161d9af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d54612-0242-4ccb-be2c-2ff4e55dfcc2",
        "cursor": {
          "ref": "4c9fb68d-f820-4c41-a22e-37388c43ffc2",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b32cefd9-d6f6-4428-863e-74a982f56ffc"
        },
        "item": {
          "id": "30d54612-0242-4ccb-be2c-2ff4e55dfcc2",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "215d6c60-bb82-4808-8f86-24ec91886776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e876ed-06a2-418d-87f1-a283ce283833",
        "cursor": {
          "ref": "52916a3d-4d61-4286-9bde-c6ef918b19ea",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "31fb4000-7f97-4b2b-abf5-a3244aef682e"
        },
        "item": {
          "id": "25e876ed-06a2-418d-87f1-a283ce283833",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "04153c3e-aef4-46e5-872a-defdcd830c7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328aeb3f-1e13-4eeb-bd0e-c0eed9dac6c2",
        "cursor": {
          "ref": "6ac70ddc-ce06-49e4-bd7d-74026ee9223b",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0ba82a9a-175e-485a-b3f8-dc6773804a0e"
        },
        "item": {
          "id": "328aeb3f-1e13-4eeb-bd0e-c0eed9dac6c2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "89109428-71ea-4291-933b-8705fee00078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3eb302-b521-47ab-a45b-433089db71aa",
        "cursor": {
          "ref": "9b119038-e3e0-484f-abda-2d91f64daad9",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b44b34ae-5b18-4eac-b7c3-3b5cbc0d44bf"
        },
        "item": {
          "id": "4d3eb302-b521-47ab-a45b-433089db71aa",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "039a6ca4-175e-4271-a6b8-3d3c94a415e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa4a571-d6de-4104-9665-6a729d629597",
        "cursor": {
          "ref": "d5d41a23-bfe5-4578-b2c0-9f716e6284fa",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2406d3f6-8bb6-4c9b-8a42-97effdd4274e"
        },
        "item": {
          "id": "4fa4a571-d6de-4104-9665-6a729d629597",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "6330ccec-0298-4df3-b2a2-6342ad97e69d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93089968-3b10-4976-ae1d-c9adaac88e3d",
        "cursor": {
          "ref": "969ad56c-d4a6-4c92-922d-6caf2b0dff75",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "612010bf-f678-4c20-a5b9-82cdc6b69375"
        },
        "item": {
          "id": "93089968-3b10-4976-ae1d-c9adaac88e3d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "91a9762e-b487-4dee-b586-5018d194cba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b8d834-fdfd-4476-b2bb-6644ce49e587",
        "cursor": {
          "ref": "4f59c134-72b6-4943-9a8b-b5f3e5517db6",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b74abc53-5bbd-478f-973f-4e1f9b740501"
        },
        "item": {
          "id": "33b8d834-fdfd-4476-b2bb-6644ce49e587",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "846dc49f-950b-4f46-9b36-bcd99d1b086f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a292e46b-6e18-4c13-86c5-23da9c151e1d",
        "cursor": {
          "ref": "2bdd0bad-e246-4475-8099-b2cd487c8e55",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b8fe87f4-ce78-45c1-951c-b7da6d7b1a3d"
        },
        "item": {
          "id": "a292e46b-6e18-4c13-86c5-23da9c151e1d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "afe8ba45-ddaf-4af0-9e8b-bac83ad6758e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a91bf0-c9be-47e7-a98e-6cbfcc53220e",
        "cursor": {
          "ref": "917d0510-724b-483f-a44e-ef7d8d4d866c",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "44b20eb7-2969-40fd-b4e1-db4a3cbc8d39"
        },
        "item": {
          "id": "e6a91bf0-c9be-47e7-a98e-6cbfcc53220e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f6f9b4c8-d976-4bf3-9de9-e7b3f34dbfb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949f7a5a-8caa-4351-bc8a-c5cecf1b212c",
        "cursor": {
          "ref": "acb5418f-b2a7-4d7b-b88d-3c125eba5083",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f95d1ca0-f53c-4512-af3e-7859af8f9040"
        },
        "item": {
          "id": "949f7a5a-8caa-4351-bc8a-c5cecf1b212c",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e93c186e-b7a9-4966-8226-17507e1e33e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65451765-1aa2-4ff6-a68b-a78c7340ec6c",
        "cursor": {
          "ref": "3502d79a-efff-47f6-b9ca-3ebe2fd5d2d1",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "451045b1-b714-4af4-a994-ecc81fb11c0b"
        },
        "item": {
          "id": "65451765-1aa2-4ff6-a68b-a78c7340ec6c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "880ba3ea-37d7-46ed-ae9f-1ba53a063e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9b20ecf-3afb-488d-8e16-6f8a85ecfd7a",
        "cursor": {
          "ref": "d9d6f00c-972b-4a2b-90ac-d19b2b2e826c",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7137310e-3e9b-4c43-b2d4-18b94d92cc13"
        },
        "item": {
          "id": "c9b20ecf-3afb-488d-8e16-6f8a85ecfd7a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "95a7c09a-7804-460b-b645-1b8191f784a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd20a878-93c8-4330-a78a-c1ec7b693058",
        "cursor": {
          "ref": "de313be6-9430-497c-8db4-a0a892885121",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "09d6dfa3-16d1-44c9-b56f-342371be7082"
        },
        "item": {
          "id": "dd20a878-93c8-4330-a78a-c1ec7b693058",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "520c30fc-c66d-4034-9ea9-ee2dba263e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3de5b8-3b01-4506-8eb4-f85ab6b9a795",
        "cursor": {
          "ref": "16859429-8a8b-48f0-8f38-fe4164a96e27",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c209a2b2-6441-4dae-856c-cc1e9fdee77a"
        },
        "item": {
          "id": "ef3de5b8-3b01-4506-8eb4-f85ab6b9a795",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7b5d6019-948e-40c3-81ba-7eb3d50ef50c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8af1e0f-b65f-4a13-bc43-eddb054ac8ee",
        "cursor": {
          "ref": "0c387ed5-2026-4ac7-a5a1-e0703fcf0c05",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3dedfff8-33b2-4b57-9f73-1aecf9de61ad"
        },
        "item": {
          "id": "f8af1e0f-b65f-4a13-bc43-eddb054ac8ee",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "23587b69-4b15-4df3-a2a3-2b4f65b68512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8612848-c88c-4838-af5e-32a6a5066957",
        "cursor": {
          "ref": "2b8ca9bd-4db8-4f7c-98e5-2244f7635510",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "82cfd86f-77ff-4295-a0a2-e7a8e44f7c2c"
        },
        "item": {
          "id": "c8612848-c88c-4838-af5e-32a6a5066957",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5f9c2f1b-010f-4bbb-b6aa-b81fab27676e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a30d154f-66ff-4c70-a8eb-03848c95f1f1",
        "cursor": {
          "ref": "b3ad4856-94fc-4ed8-b15b-e69a8f3d91f5",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f663ff21-c500-47f9-9759-730118a97c69"
        },
        "item": {
          "id": "a30d154f-66ff-4c70-a8eb-03848c95f1f1",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9e8820f7-e1d5-408e-9fdc-ff994f1c3cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "332b1eeb-c383-4127-a01b-e5b256b6aacc",
        "cursor": {
          "ref": "6646e011-95f2-47cb-8049-ec93996cf083",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "92677065-2353-4212-925c-5164e2d66067"
        },
        "item": {
          "id": "332b1eeb-c383-4127-a01b-e5b256b6aacc",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8a9ddbc7-aa77-4a6b-b556-c334ae6c0bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e5d6e28-acf8-47da-b9e7-c80e1590484b",
        "cursor": {
          "ref": "8c7f722c-cfaf-426c-8ea0-fc676946891f",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6b67c16d-eea9-4611-9a0a-b54912ae4dba"
        },
        "item": {
          "id": "0e5d6e28-acf8-47da-b9e7-c80e1590484b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "fb789dfc-7333-46db-b28a-7d3c58287f60",
          "status": "Created",
          "code": 201,
          "responseTime": 820,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "3da2d822-02cf-492b-aa3e-3b42f69cf3c4",
        "cursor": {
          "ref": "32708851-79b3-42fb-92a4-57b9a6f94aa8",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ed202eeb-dffb-4625-9918-8fcdda524705"
        },
        "item": {
          "id": "3da2d822-02cf-492b-aa3e-3b42f69cf3c4",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e60b7c45-7b07-4afd-af7b-87f0f386ab2a",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ba1b20f1-1381-45df-985e-4d00bdaae1d2",
        "cursor": {
          "ref": "fd0a481d-2273-4a31-8440-7fcadfd4fdb1",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d4a904a3-482c-4121-b7ba-5f9652c3d58a"
        },
        "item": {
          "id": "ba1b20f1-1381-45df-985e-4d00bdaae1d2",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "889f1e0d-ba10-4a87-80fa-1c4c8ac0b5fd",
          "status": "Created",
          "code": 201,
          "responseTime": 424,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b3a4dca2-6029-41dd-9a3b-8a467f79e049",
        "cursor": {
          "ref": "d64d47b7-55bf-4394-8e39-38511f2fcec1",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2f77e7ad-da41-420d-bab3-f2741d1f6459"
        },
        "item": {
          "id": "b3a4dca2-6029-41dd-9a3b-8a467f79e049",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b6b02374-4af2-4973-b2b8-5371b81f0e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18ce12b-e7c0-4eb9-a612-c9d9de23855a",
        "cursor": {
          "ref": "9e7112ff-7fcb-4dd3-90f7-e56f6aac5cf0",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3ba81c0b-fa58-40d4-bad4-f7a8da6273b8"
        },
        "item": {
          "id": "d18ce12b-e7c0-4eb9-a612-c9d9de23855a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d128fc25-8245-4abb-a192-330b617b8202",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "6448cbf9-b1c1-41d1-944d-ce24f219c9cf",
        "cursor": {
          "ref": "7c0a9de6-b3d0-439b-8875-6f1e053fc79c",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "58e5faab-dee2-4295-9d65-6a83a9d28137"
        },
        "item": {
          "id": "6448cbf9-b1c1-41d1-944d-ce24f219c9cf",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9082bf4c-fce7-4910-a1ec-4e90c2bf73ce",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5703f246-5c5b-4a95-aaf9-a6ad866aadf6",
        "cursor": {
          "ref": "6024ea3b-9364-4b08-ba24-13285163bdf4",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c81f3262-576f-4987-a0c8-746a9db985d5"
        },
        "item": {
          "id": "5703f246-5c5b-4a95-aaf9-a6ad866aadf6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0dab3aab-f8ea-4371-8de2-d0bdcc9d762f",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4124f70f-d3b5-4110-991b-257466f8a72f",
        "cursor": {
          "ref": "591b8d91-254d-43c4-82ec-7e9feefa3d08",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "52fe5be6-8965-4780-86a4-b7f9ecdb4f4c"
        },
        "item": {
          "id": "4124f70f-d3b5-4110-991b-257466f8a72f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "57ad6361-b025-43f4-8707-62fc0bf973da",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "444c561a-1399-4981-9906-4c92c13786bd",
        "cursor": {
          "ref": "4147e7c4-dabf-4c74-870d-a0cd2d1bce11",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "11681c6a-c9fe-4ed6-83aa-06c222d50216"
        },
        "item": {
          "id": "444c561a-1399-4981-9906-4c92c13786bd",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e84cdf12-7d92-4a3d-9c1b-1f33415bbef7",
          "status": "Created",
          "code": 201,
          "responseTime": 370,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3a2208ca-11a2-461c-b2ff-1acf174879b0",
        "cursor": {
          "ref": "9bd95b70-b185-4cf7-b1bc-f539b1ebf3b6",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "8a1193f3-90c4-4e98-b027-f0b868d34bfc"
        },
        "item": {
          "id": "3a2208ca-11a2-461c-b2ff-1acf174879b0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "51693fdf-81cd-42ea-838a-511ebadc21ed",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "45bc0234-ffd6-4270-8908-bea7a04e7827",
        "cursor": {
          "ref": "e8ceb486-8019-4054-93b8-2af44f5f1b07",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "5b26902f-de0e-4e7c-9104-c1d41da44ad7"
        },
        "item": {
          "id": "45bc0234-ffd6-4270-8908-bea7a04e7827",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6c19b1e9-0334-4278-b36d-829aee4d8e50",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d1e362d2-7682-40aa-abc7-2b94fc0ac0ce",
        "cursor": {
          "ref": "ec3e3c4c-700e-4847-8763-8d1e5c5f8ffe",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "adb47bf5-efe0-43c7-9eb9-8eef7a4d7fcf"
        },
        "item": {
          "id": "d1e362d2-7682-40aa-abc7-2b94fc0ac0ce",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "701d5945-27a0-4797-8a7a-cac8956304f9",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "6c7e9a65-5626-4daa-8522-894a4c4d2b0a",
        "cursor": {
          "ref": "c732d0f1-be6e-4618-ab1d-a414901d976c",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "12c3b46d-52d6-4c30-9776-45de0690a03d"
        },
        "item": {
          "id": "6c7e9a65-5626-4daa-8522-894a4c4d2b0a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b8265c9c-7702-4efa-9ccb-c2c0b29e21ae",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6a12f2a0-5ec5-4d19-99fc-0c3880203f97",
        "cursor": {
          "ref": "cda239c4-15e0-4e18-b4dc-39cf7fbf2537",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a38681b8-47c5-4f90-a39a-5f10076b5882"
        },
        "item": {
          "id": "6a12f2a0-5ec5-4d19-99fc-0c3880203f97",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8b11b75b-dbd5-42d4-9266-15e0d6576c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d361b431-ba59-4e26-a1d3-9d36ba8bdcf0",
        "cursor": {
          "ref": "4e153289-e1a1-4da4-b0ef-a8e2eda7b31c",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a2d829cf-0363-444f-9989-d160d1ea3dd9"
        },
        "item": {
          "id": "d361b431-ba59-4e26-a1d3-9d36ba8bdcf0",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2b52c2b9-7a2c-4cc8-9824-7dc9e180b814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d3cde4c-25be-4e6a-bd97-a27c02709709",
        "cursor": {
          "ref": "238ac9f0-ec26-4e7e-bc6e-8581d3303b90",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "25c901c6-7538-4dd7-be28-bebb4ad81a02"
        },
        "item": {
          "id": "6d3cde4c-25be-4e6a-bd97-a27c02709709",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "744777f9-5198-44d6-916a-593c4293498d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae9a342b-24e7-4daa-be2e-c25f8667a44d",
        "cursor": {
          "ref": "8f1e264a-4a87-4731-838d-9edabe7a96b4",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3990bd74-8042-48d7-9810-53a4eb21d4d5"
        },
        "item": {
          "id": "ae9a342b-24e7-4daa-be2e-c25f8667a44d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "3aee41c7-06a5-4698-b97f-11b7554fb1ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cddad959-1fbb-4468-8f87-2be21f485ff5",
        "cursor": {
          "ref": "1f0d4877-8653-483b-8343-fa2a26f8cdd7",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b968718b-8a68-499a-9e5d-759259e4fdab"
        },
        "item": {
          "id": "cddad959-1fbb-4468-8f87-2be21f485ff5",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "71be2d77-9594-489c-a574-318be1a08696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9548b414-c2bf-4fe2-9e8b-1795c1b13d58",
        "cursor": {
          "ref": "230d6135-70b9-4180-9f55-ec607f083174",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6989a78b-bfd4-4f18-a9dc-9b1d8219a896"
        },
        "item": {
          "id": "9548b414-c2bf-4fe2-9e8b-1795c1b13d58",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d96cac6a-ccac-45dd-ae37-e9fe7999e374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc613210-8eed-4bff-b3f2-bc6e698709fd",
        "cursor": {
          "ref": "211ff7f2-d0b4-4d16-8bd1-80b7b7b9b344",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2373a8a5-5c25-425f-8fd0-787a777c415a"
        },
        "item": {
          "id": "cc613210-8eed-4bff-b3f2-bc6e698709fd",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9327d82f-2517-4529-a910-f4914c9e8db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88507336-172f-4771-8cb6-0dc323a7d999",
        "cursor": {
          "ref": "253e0990-a5d7-42c7-bd69-0198bb1979b0",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8ed56b32-43d9-45ec-af7e-fcb5a793f64c"
        },
        "item": {
          "id": "88507336-172f-4771-8cb6-0dc323a7d999",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9da08b04-8c09-4f6b-a94c-be0dad3c0486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b29e3834-9d3f-4dbe-a889-f22ba801e411",
        "cursor": {
          "ref": "586ba1f7-3eb4-4f66-86e1-fd4040f2c8bd",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0f55fdd8-66af-4b5a-8253-684f8ab8a714"
        },
        "item": {
          "id": "b29e3834-9d3f-4dbe-a889-f22ba801e411",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f24979a1-8af7-42b6-ac4e-8e98387d325d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60558ff-97b5-4650-8bfc-c6946ec15658",
        "cursor": {
          "ref": "f57a7025-2129-4b15-b8de-53d888e3bd7a",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7900b780-d945-4ce0-8b31-f4550e24fe96"
        },
        "item": {
          "id": "a60558ff-97b5-4650-8bfc-c6946ec15658",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "fd3a454b-ca24-42a5-ba06-310b6df41fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd85afdf-2fc0-42af-8bad-8493c1ac7198",
        "cursor": {
          "ref": "5218d8a9-6e0e-4246-ab3f-6c53876c5c70",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c271cf54-7423-4b33-8409-54530aed3ec4"
        },
        "item": {
          "id": "dd85afdf-2fc0-42af-8bad-8493c1ac7198",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "4f642f53-f402-43f8-99a1-1ff2e7c6c45b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8da1548-ddce-45b5-9202-209c23d34e5f",
        "cursor": {
          "ref": "13dddb89-2a4c-4b26-a473-d1d6b24bf942",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e0dbd9a0-9f80-4afd-8720-22e920bead5f"
        },
        "item": {
          "id": "a8da1548-ddce-45b5-9202-209c23d34e5f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d033e3d0-541d-4d53-9ee7-e90e3d4800dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd13b3ee-9e24-4295-842f-bfc73367e05d",
        "cursor": {
          "ref": "4a1782bf-6b05-4383-be66-c05a860b0651",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "024a7fa0-a884-4bb7-a6ef-efecf4524b61"
        },
        "item": {
          "id": "dd13b3ee-9e24-4295-842f-bfc73367e05d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "fc9a5010-1876-45de-864d-fe89dbb8f833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ea3030-6553-42f1-957d-0d302e6cc0f4",
        "cursor": {
          "ref": "142c485b-3ca7-4c8e-9607-65d32c10e149",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ad06d100-fd27-41d6-9d7d-7a3f7e4650d1"
        },
        "item": {
          "id": "b2ea3030-6553-42f1-957d-0d302e6cc0f4",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "89e6cee5-9b5b-490b-914b-2ae32ab22c64",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f9fec541-face-4592-86e7-83f3c1cc470a",
        "cursor": {
          "ref": "4795bc1d-f58a-4345-97d1-a4f1a119c2c3",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "7fce0ae3-57c9-4d80-ad25-0822a4d67b86"
        },
        "item": {
          "id": "f9fec541-face-4592-86e7-83f3c1cc470a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e3a8eeac-478c-45b0-a7c2-a6ece8e605fc",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "1b922c4b-5473-40de-a14d-8056aed7e718",
        "cursor": {
          "ref": "d807b5f4-dedf-4c19-b103-a807df30f241",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6c70c6d8-aeae-43c4-8beb-a2fad1131f1d"
        },
        "item": {
          "id": "1b922c4b-5473-40de-a14d-8056aed7e718",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2c70cb51-564b-4212-9b17-a376fe943f89",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a358606d-91b8-430b-bf00-ab45f2022fe5",
        "cursor": {
          "ref": "70e8fbed-be6c-43be-ad3d-d94ade0b025a",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "da5aa30b-50fc-4306-851b-8cfc466d50fc"
        },
        "item": {
          "id": "a358606d-91b8-430b-bf00-ab45f2022fe5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5cdd873d-4402-4836-8c86-9a4a4dad4bd1",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "569f1ded-fe47-479f-83d6-bc96172b01b2",
        "cursor": {
          "ref": "0af28f92-6cf5-49de-8f8b-a1ce4576a57c",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "114fa90d-a815-46e5-aaa6-e78958e01fbe"
        },
        "item": {
          "id": "569f1ded-fe47-479f-83d6-bc96172b01b2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1da1bc20-d19d-4dd7-a574-3410e9178956",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "519d1a20-4bdf-415a-a338-dd92eec626d5",
        "cursor": {
          "ref": "fa9d762a-c984-4742-95c1-b7f45912f457",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "7756a8a5-cc67-4479-8df4-2a5801a0b343"
        },
        "item": {
          "id": "519d1a20-4bdf-415a-a338-dd92eec626d5",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9564d9f7-fd9e-4ccd-96ea-b83c63a7a553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb3fa8e-28c8-4667-979c-35f5bea8fa6b",
        "cursor": {
          "ref": "166e6cf6-2290-4fa3-8077-fcc9cea24160",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e09129e6-5358-4be0-9f0b-f34c5c1e5b60"
        },
        "item": {
          "id": "aeb3fa8e-28c8-4667-979c-35f5bea8fa6b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "31bc7dda-17ea-4ed4-9698-bb477c09c6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2cc8d6-b765-4e72-b98d-2f30d75075a3",
        "cursor": {
          "ref": "aa0c89f5-161c-42f8-b7a6-c16d08283d72",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "539c7924-8670-447e-b86c-c9a4af861ddb"
        },
        "item": {
          "id": "9f2cc8d6-b765-4e72-b98d-2f30d75075a3",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a44cd42c-00df-4a19-9ae9-55edee08811b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be378e3-279e-4408-a25c-ef9b7caab6b3",
        "cursor": {
          "ref": "e9037fc1-5a59-4f32-abc3-e3b2734cad8c",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5d9a50e8-ce87-4c47-b5ba-2f92a95c3314"
        },
        "item": {
          "id": "2be378e3-279e-4408-a25c-ef9b7caab6b3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "16f21a1f-6973-4b2a-8c1d-009eb006ce28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80edc6c8-496a-4a75-9782-201b01f24c63",
        "cursor": {
          "ref": "48103918-c5a2-4033-b79e-12b2eebc2530",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a5a89ef9-3f9b-4a2e-9cb8-d11d14ab4f62"
        },
        "item": {
          "id": "80edc6c8-496a-4a75-9782-201b01f24c63",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a8df8ac0-09c4-43d5-9c5b-7c898b04d9ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b1fa66-14c0-4c67-8958-68e1043d6fa4",
        "cursor": {
          "ref": "a74c2f28-25b0-4b5c-bd1d-521a4705ca05",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8e22b826-136f-4726-8248-2adcd91f24ba"
        },
        "item": {
          "id": "d2b1fa66-14c0-4c67-8958-68e1043d6fa4",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "870feced-28fe-43ec-b487-b31d143f9853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88ef069-b54b-472a-969e-122f6a576e83",
        "cursor": {
          "ref": "8a238247-a84f-47de-9656-e153f95111bb",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ccfc4e85-af46-4f99-9cda-213ca2d7266d"
        },
        "item": {
          "id": "e88ef069-b54b-472a-969e-122f6a576e83",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bcafc64b-9d05-4c49-9bff-3ec9c6fe4fbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe39e37-b790-487f-9aa1-36ba30a91b20",
        "cursor": {
          "ref": "9aa744c8-eac4-4ccf-909a-6ec0bc2769cf",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "dbfd1707-e1d6-4fb5-9e08-133685769ba3"
        },
        "item": {
          "id": "8fe39e37-b790-487f-9aa1-36ba30a91b20",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d6619c07-85b7-445c-935f-ad7a0dc49a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c423fa50-7a05-4926-a6a6-c4e0964f7bf2",
        "cursor": {
          "ref": "e1dac7bf-ae03-468b-b168-6202c25af504",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "445134a7-fbb9-4efa-a3e5-64de2003a239"
        },
        "item": {
          "id": "c423fa50-7a05-4926-a6a6-c4e0964f7bf2",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a40353fc-9c5a-43ba-9cff-2f6955d927cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb76531d-e6be-4af6-87c7-e227edece88d",
        "cursor": {
          "ref": "a34be46b-3a85-499f-aec0-2ad8e1163fd6",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "425b0df4-2b85-41e8-9344-8b73562341c9"
        },
        "item": {
          "id": "fb76531d-e6be-4af6-87c7-e227edece88d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "76163db9-9128-4ed8-9db8-8f40de0a1f00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af024e67-09fb-4168-bc7d-f590447f2503",
        "cursor": {
          "ref": "95bcd01d-728c-45d5-a119-93a1f28dee56",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a59ad3db-828b-45d2-8e74-63ad38ef0664"
        },
        "item": {
          "id": "af024e67-09fb-4168-bc7d-f590447f2503",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "121661cb-f20d-4ba3-aa98-4e4e5d92ae8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e5eff1c-262c-4324-a6c7-1898c2bcc7f3",
        "cursor": {
          "ref": "d0a4aac0-205a-4a9c-94bc-1c1305d850b4",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1393c583-a1dd-4e7c-842c-9eb015ab1a85"
        },
        "item": {
          "id": "4e5eff1c-262c-4324-a6c7-1898c2bcc7f3",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "712c7fdc-f022-4408-a76e-c8042f8e54d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0cebe3a-d4e1-4f5b-95e3-459a3f3a49ef",
        "cursor": {
          "ref": "52280bd6-1fc1-4001-aa38-fa63fdeefbef",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "dc728810-4cb1-406a-9926-2c784dd5df57"
        },
        "item": {
          "id": "b0cebe3a-d4e1-4f5b-95e3-459a3f3a49ef",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9b6af8a4-8545-4a9b-a9a3-9d7dc834285d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e406ff9a-7754-4a36-a7d6-256b07575218",
        "cursor": {
          "ref": "3fc7c86f-81dc-4c4a-a4c3-45fd08ba221f",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4cbccb14-4322-4245-b57f-4600d0b5f9c2"
        },
        "item": {
          "id": "e406ff9a-7754-4a36-a7d6-256b07575218",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b5cdc894-67af-45cb-92d5-e1600aa49f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a4ecd6-a7e2-491c-87e5-f6820ac669e5",
        "cursor": {
          "ref": "e2a80111-7a28-48b4-b065-b476020b3734",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "bb684337-6eb1-4606-9f8c-12e21f3fdee5"
        },
        "item": {
          "id": "06a4ecd6-a7e2-491c-87e5-f6820ac669e5",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "867f5fc6-4f13-4012-8853-3aef07e814d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb962d7c-f38e-4a8b-9149-44b3a3a5d74a",
        "cursor": {
          "ref": "c167ec3f-0a98-4b13-8c5e-2abf6bfb544c",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b4baf6f0-86c2-4c5b-8a38-afc3f7786d49"
        },
        "item": {
          "id": "eb962d7c-f38e-4a8b-9149-44b3a3a5d74a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a6c2ae75-06e5-4925-82ba-9a5aa86ae89d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f2b6d54-da17-4bbc-9c6a-bce2cda98341",
        "cursor": {
          "ref": "27ef4930-c10c-40f2-bc95-fe6f9958ff96",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "11e40675-d7b6-44e5-a4d2-6d19feed96fa"
        },
        "item": {
          "id": "8f2b6d54-da17-4bbc-9c6a-bce2cda98341",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c16bb14a-c3f9-4992-9662-7f56a4941550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f4bc47-9589-495d-abba-6575fd09c784",
        "cursor": {
          "ref": "d0a2a337-5449-499b-a31c-663a6a79fcb5",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6b9f1200-000e-4f1d-98b0-46baed063dd7"
        },
        "item": {
          "id": "82f4bc47-9589-495d-abba-6575fd09c784",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "42dfe4cb-6df1-4963-bc4d-a0e470be714b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59933760-2c1c-48d1-8aec-eee74b6fa965",
        "cursor": {
          "ref": "80bbfe98-e75e-4f11-90a6-08a60fda0fa3",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "46f9464f-e74d-44cf-a123-5882ed45063a"
        },
        "item": {
          "id": "59933760-2c1c-48d1-8aec-eee74b6fa965",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5a5e657b-4122-42b9-88c4-594c21d3bc4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd529f46-259a-4aa3-8b62-ca05cdbc57a9",
        "cursor": {
          "ref": "ba42ec5e-1a97-488b-8fa4-e09a1d164382",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7d946d8a-bd07-4d82-96b9-d4a3eeecf5ec"
        },
        "item": {
          "id": "cd529f46-259a-4aa3-8b62-ca05cdbc57a9",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b4379195-a17e-4c16-bb12-85dbd30c1f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd443fc4-0669-4430-a288-e54bc4c54fe0",
        "cursor": {
          "ref": "0e4e3017-6b9e-412e-86bd-5659d0397cb1",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "145f5088-2fc6-4d78-a7a2-c67c91f14bdb"
        },
        "item": {
          "id": "cd443fc4-0669-4430-a288-e54bc4c54fe0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d67aac76-13b4-43bb-9026-6754d4bd02e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e6e6c29-be2e-4fde-bcd7-d2351eb4adc8",
        "cursor": {
          "ref": "c2e5d7b9-cac5-4be8-93f9-c12b59f0bc76",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "418bcb3f-37b9-4a3e-ab61-6a927e55bed8"
        },
        "item": {
          "id": "8e6e6c29-be2e-4fde-bcd7-d2351eb4adc8",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6c5d95aa-5e36-4595-9c07-291087e3487a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bcf9b78-5ab9-49a5-8018-baff187e3421",
        "cursor": {
          "ref": "67bc8cd3-89d1-44c5-a2e2-08b2e703ad12",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "18da7187-4e7c-4d48-99ca-1f530db72713"
        },
        "item": {
          "id": "8bcf9b78-5ab9-49a5-8018-baff187e3421",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "95a4df76-4b31-4b79-b6da-8d20b70dc431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599be3a6-caa8-459d-b79c-8442da2d1ccb",
        "cursor": {
          "ref": "23a80351-091a-4503-90ab-40c4b528ba70",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8648ca08-1526-4f75-b5a8-4495a9db91eb"
        },
        "item": {
          "id": "599be3a6-caa8-459d-b79c-8442da2d1ccb",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "dbdc3b80-1192-4ec8-9b8b-3eefa200a10b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f84379f-0fd6-4943-9c40-f65f5045418f",
        "cursor": {
          "ref": "bcc376f7-22eb-44dd-bbbd-516feafa2cff",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0240a55e-1b3b-43c5-bdae-2ab14d07eb49"
        },
        "item": {
          "id": "3f84379f-0fd6-4943-9c40-f65f5045418f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3f936807-e27a-4e3f-85d6-06d96c754963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a26c3657-9262-4bd0-89be-d498474117fa",
        "cursor": {
          "ref": "58b015ab-4a23-4fb0-8caf-aa8d07a1ec61",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "59527f6e-7466-4cb1-8c01-0993bbecd139"
        },
        "item": {
          "id": "a26c3657-9262-4bd0-89be-d498474117fa",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "420a506b-65b5-4e56-9785-e42d36fb7a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0f5f40-5717-4a67-a242-845832904fff",
        "cursor": {
          "ref": "1899e9a1-ae44-4b7f-92c8-fc7da446eef4",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "29fef582-e40c-4b3a-a704-105911224e98"
        },
        "item": {
          "id": "1b0f5f40-5717-4a67-a242-845832904fff",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "477b47f1-921b-422e-ac22-56f35a4057ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3778baa-4fe6-489a-842e-31531c8fa787",
        "cursor": {
          "ref": "30330a0b-0535-4567-9732-69e48449ceb2",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1be98da8-4b04-4440-9829-1b0e44e6003e"
        },
        "item": {
          "id": "c3778baa-4fe6-489a-842e-31531c8fa787",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "afe07078-4b94-453b-ad54-b28f0809e9c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e3150b-c696-45fe-848a-5b60f4c5339b",
        "cursor": {
          "ref": "6c60d7cb-06b7-4c8b-bdea-905045a82ead",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1e1333d3-36dd-44c9-8843-f2123404662b"
        },
        "item": {
          "id": "90e3150b-c696-45fe-848a-5b60f4c5339b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "cf21c1e0-0222-4123-a84b-fdc54e0655ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f0f0290-1993-482c-be30-f2dfb4bbe250",
        "cursor": {
          "ref": "f325dc94-6ff0-43f2-93e4-7332838cb2ea",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "468cbef2-fd30-4161-a0b0-f4fb58a2e839"
        },
        "item": {
          "id": "6f0f0290-1993-482c-be30-f2dfb4bbe250",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c17794ab-6f5a-4893-ba6f-c085d150ea32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7fafc3-fc5d-4841-a262-dd75d6f73d77",
        "cursor": {
          "ref": "cb060b8e-4a21-4f58-9b35-816906c3aa3c",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9c942155-1d27-42a2-87ed-55d9ca3fee8a"
        },
        "item": {
          "id": "ec7fafc3-fc5d-4841-a262-dd75d6f73d77",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e671a8ac-99c1-4a92-bea5-203495e5b7e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e912c892-fd9d-42e0-b451-279fc51b61e9",
        "cursor": {
          "ref": "dfc4d5d4-6292-41b5-b1cd-cb1892ddb543",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9cdd6393-645c-4b2e-ae04-c7671818d955"
        },
        "item": {
          "id": "e912c892-fd9d-42e0-b451-279fc51b61e9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "688826c5-5c6a-4c6a-964a-f13e29926f57",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98345fb-f313-40ac-89a3-832da002711f",
        "cursor": {
          "ref": "1d1a3880-71ba-4d11-95d2-b9cb294e192e",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b83b2cbb-aa61-4a4b-8805-263fc2ae14e8"
        },
        "item": {
          "id": "c98345fb-f313-40ac-89a3-832da002711f",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "5b494504-b715-4164-a4a9-54858cf030fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "af25d447-686c-4579-866f-c019503ed6dd",
        "cursor": {
          "ref": "819e0b64-cdb2-4c97-89d0-499adfccbac1",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6619fdfc-54c7-4e5d-a873-dd4577806dc0"
        },
        "item": {
          "id": "af25d447-686c-4579-866f-c019503ed6dd",
          "name": "credentials_issue"
        },
        "response": {
          "id": "44fe0e49-4573-40cf-b4cc-8556b8da8c2f",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9ec136-9c7e-4faf-b851-b21263ec5de0",
        "cursor": {
          "ref": "b475d45d-33be-44e2-a118-185efff0421c",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "01b55eab-7bca-46ae-a55e-7f8837f5ae22"
        },
        "item": {
          "id": "9c9ec136-9c7e-4faf-b851-b21263ec5de0",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "1121b415-8233-424b-b248-a6b25bc91062",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee85c853-c749-44be-93be-4b0070222ed5",
        "cursor": {
          "ref": "ea53424e-4071-4e33-b4ef-6779161be8b0",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e4816ecc-f0bf-43b4-bd3f-c783b1256d03"
        },
        "item": {
          "id": "ee85c853-c749-44be-93be-4b0070222ed5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "de0c23d4-eb91-47c0-9b26-dbadcd0df16b",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "03bf725f-2445-4274-91d7-c9ad6bf84b88",
        "cursor": {
          "ref": "e8734457-a42c-4997-b8c3-26e85d01a0c7",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5093c09f-1ea7-4198-90b0-b6109a268ce2"
        },
        "item": {
          "id": "03bf725f-2445-4274-91d7-c9ad6bf84b88",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e101fcb1-17ba-4181-a04a-66f56d8d2bd7",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e297a6aa-5195-46c4-9805-77f6dcd6b0e2",
        "cursor": {
          "ref": "0d221c39-b4d2-428a-ad3b-01885e9ec136",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e1ab4bfd-8d41-4ff2-96be-990e7472e56a"
        },
        "item": {
          "id": "e297a6aa-5195-46c4-9805-77f6dcd6b0e2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ce48cf7e-3947-41e5-aea0-e0acc7ed6ce7",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-09T00:35:08.971Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-09T00:35:08.971Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "6f1981ef-34da-4434-9593-e59aede0433d",
        "cursor": {
          "ref": "5ac375ae-5a6d-4864-bf49-c8c856007694",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e4a3e219-01c7-46dd-93b2-ebe9a929121c"
        },
        "item": {
          "id": "6f1981ef-34da-4434-9593-e59aede0433d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5ba2674e-1025-41bd-b600-55b7687d50fc",
          "status": "Created",
          "code": 201,
          "responseTime": 363,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6dcbf3a-4cb2-45a6-a6a3-94146ef2a573",
        "cursor": {
          "ref": "c072f04e-1b0f-4b72-b4b3-5dcd8f62630f",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "59c26322-3001-4c99-86c4-5ea0853290da"
        },
        "item": {
          "id": "e6dcbf3a-4cb2-45a6-a6a3-94146ef2a573",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "694ab492-7212-4b4a-a007-83d517b1d2b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e70e0b-119b-4daa-962d-3a2367e36bec",
        "cursor": {
          "ref": "eafdbf68-50e8-4404-a539-6d25eadfb64f",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d4faf47f-c886-41ea-833b-ef2e63aff872"
        },
        "item": {
          "id": "76e70e0b-119b-4daa-962d-3a2367e36bec",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c63b411c-3a9d-4388-a573-42216b97af41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22125f15-5bcd-4c38-8ed2-8e9a7998a0c8",
        "cursor": {
          "ref": "34e76cc3-749c-4c3c-b28d-41cf8bc8f03d",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b5f2d0ba-26e4-42e9-910e-03ebda0e0ca1"
        },
        "item": {
          "id": "22125f15-5bcd-4c38-8ed2-8e9a7998a0c8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "aa7c4e99-e0f9-4f8c-85d7-2520f156c9c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a558f6-b348-4a27-ac29-c40cb38e4c6d",
        "cursor": {
          "ref": "48a64336-19a9-4d34-a61a-c2a5782a55b4",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a572ac60-de10-418a-87dd-d9e0f701bf81"
        },
        "item": {
          "id": "82a558f6-b348-4a27-ac29-c40cb38e4c6d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6cfd0d81-23cb-4407-a3cd-e964d0720fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba75d65-eb9f-4567-a898-7a1438d765bb",
        "cursor": {
          "ref": "9e1abb9f-1187-448c-9024-0bb8ecd140d5",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0c688705-6759-4c33-93a8-67c545cfbd61"
        },
        "item": {
          "id": "1ba75d65-eb9f-4567-a898-7a1438d765bb",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8bbe8279-9138-42ba-81ab-1a1a3431c4a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eef2946-dee0-405d-a104-2920f4ed2279",
        "cursor": {
          "ref": "3f83e68f-933f-4fb4-aaa3-f429a31cf745",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "882c7e86-60d4-497f-b752-167df75faa72"
        },
        "item": {
          "id": "2eef2946-dee0-405d-a104-2920f4ed2279",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "961d44c9-a642-4e09-98c1-91d6f9afeda6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96cfa7c-ccf5-4110-b5ad-2c1b8b43caca",
        "cursor": {
          "ref": "8106ddf5-5063-4038-823c-00f2091adb9c",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9a109229-4500-4376-83ea-ef8fbe86b89d"
        },
        "item": {
          "id": "f96cfa7c-ccf5-4110-b5ad-2c1b8b43caca",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b06c98c8-f432-4c1e-9bce-e9707d7aae7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01fdabd-fd9c-4180-bf07-8bd0c42c851d",
        "cursor": {
          "ref": "9b8b2d5c-8213-40e3-bde3-2329f97337cf",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "2de59469-8c2a-44d4-a3a2-8af5d3fd3eaa"
        },
        "item": {
          "id": "b01fdabd-fd9c-4180-bf07-8bd0c42c851d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "defe2fec-f595-4224-8384-412c5c6f04d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca096d8-4069-4c93-a9bb-4e40c765cffe",
        "cursor": {
          "ref": "a556c35e-f9b1-4389-9a05-a56c08bc542f",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a3498b1f-0d99-4c9c-9ea6-217b48ace9d8"
        },
        "item": {
          "id": "eca096d8-4069-4c93-a9bb-4e40c765cffe",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2035a9d1-c6d9-4b6f-abfa-2d07e99869f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b64f61-0b3b-45d5-98e8-58bc48819626",
        "cursor": {
          "ref": "8d70683b-3048-4be0-88f7-c2af212f729e",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "72f07c69-095d-4bfa-aa13-66c0104c3464"
        },
        "item": {
          "id": "b1b64f61-0b3b-45d5-98e8-58bc48819626",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9bc4c624-4012-4567-a7ce-7404b53632f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3488e948-b870-47e0-829c-1a49b62b1038",
        "cursor": {
          "ref": "fde41590-355a-443b-a286-c9e71b8b6359",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "df3c1d5b-4454-47da-b9f9-4e2943b909cf"
        },
        "item": {
          "id": "3488e948-b870-47e0-829c-1a49b62b1038",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c7856a26-b430-4e13-bd4b-59814d8542f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ecdab1f-ba0d-431b-9b65-93b6a4cc96c0",
        "cursor": {
          "ref": "7cb9915c-8417-4abb-a71c-e7ed52564174",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "cb609904-1625-4845-a76c-28271ffdb32c"
        },
        "item": {
          "id": "0ecdab1f-ba0d-431b-9b65-93b6a4cc96c0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c179b7d4-c1d8-4e71-be94-260243fdd269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe22ddfe-acc2-4920-8eca-a5ea699977bd",
        "cursor": {
          "ref": "5ab761c5-e5bc-40f0-b7b0-643859cf10be",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e1f28884-259b-47af-b171-a85b70b4b0b9"
        },
        "item": {
          "id": "fe22ddfe-acc2-4920-8eca-a5ea699977bd",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a4bc748c-ca24-4078-80ad-4251a132bed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51479adc-cf95-43ba-a245-6be2d3651abd",
        "cursor": {
          "ref": "107c1daa-8126-4389-aa8a-e50038954c80",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "22a8ed40-4c0c-467f-95ed-478c481806f8"
        },
        "item": {
          "id": "51479adc-cf95-43ba-a245-6be2d3651abd",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "bee0a7ee-4f9d-450c-bb5f-f12bad5c435f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "c4a994fb-afaf-419e-b152-913d2ab82b8e",
        "cursor": {
          "ref": "6006ae3a-8be6-4975-92f8-5948c160c2d4",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c1aafc64-effb-4b05-a1d7-de4b9464b008"
        },
        "item": {
          "id": "c4a994fb-afaf-419e-b152-913d2ab82b8e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "fe8b4221-b4e8-42b7-8026-3da4d82c955e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ed27a9-7645-47c9-b9ba-81b2be97ad92",
        "cursor": {
          "ref": "885e39ad-35b0-406d-872c-0cb763f58bf7",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "57046936-83ed-496d-b6fd-8dcf0334ca00"
        },
        "item": {
          "id": "19ed27a9-7645-47c9-b9ba-81b2be97ad92",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9bb93d9f-7b34-4fb6-a529-1800c901a199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28031a0c-966d-4479-bc69-46b949d88292",
        "cursor": {
          "ref": "71bc671d-b6a6-49d0-9be4-c6a270977f83",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "52e939a1-d5a4-4b97-b050-190f2e1dbee5"
        },
        "item": {
          "id": "28031a0c-966d-4479-bc69-46b949d88292",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7613e947-87b1-4ef9-a309-3ae09e667c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed4b94d-b9bc-4284-b047-ac9fee6b7e59",
        "cursor": {
          "ref": "6e5e0b51-8c72-44ee-98d6-043b530dbd0a",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4840c281-befc-473c-8ec4-df9d802b945b"
        },
        "item": {
          "id": "9ed4b94d-b9bc-4284-b047-ac9fee6b7e59",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "96b28d21-18de-48c7-91fd-bbc43fee1a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec1a617-cf2a-4342-97a4-fdcc7da8e2b5",
        "cursor": {
          "ref": "5060efb7-e635-4870-9d2b-eee03e0cd66c",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6779ef47-94bf-443f-a6a7-f9947408bd15"
        },
        "item": {
          "id": "bec1a617-cf2a-4342-97a4-fdcc7da8e2b5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "72026e80-8339-4ff6-a60b-49b69daa84ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db6ecb76-074e-4519-a646-9a8e0c211167",
        "cursor": {
          "ref": "36183bb9-0784-4da9-b174-810331a3a8b0",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "93ff1d62-b642-4bc3-85cf-7246fc9bbdfb"
        },
        "item": {
          "id": "db6ecb76-074e-4519-a646-9a8e0c211167",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2e4ccd89-c4dd-4f34-854c-cf9740ae62d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d15d7587-5c68-4bef-8832-f02bfbbc24ed",
        "cursor": {
          "ref": "a9ad8e72-833d-4b7c-9d02-c927f175b890",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "bbe820c0-dccc-4d5b-a337-e3806382e2fc"
        },
        "item": {
          "id": "d15d7587-5c68-4bef-8832-f02bfbbc24ed",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "cabb0fe8-8906-4149-9a21-130ec5ea381b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77c8a7c-b140-483c-bc3b-8fc84a42f462",
        "cursor": {
          "ref": "fbee6e50-ab85-4858-897f-f8b449573592",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "be8f8bab-5127-48ab-bee8-2f094d2bccf8"
        },
        "item": {
          "id": "b77c8a7c-b140-483c-bc3b-8fc84a42f462",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7e294924-0192-41c9-a37e-889fabf81216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cee9f07-1d42-4a9c-9983-2d2d60724b0b",
        "cursor": {
          "ref": "d9b9aa6c-933e-4c1d-acda-24b9c7019f48",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "abd95821-a885-4b6b-a83b-881ac8f26b12"
        },
        "item": {
          "id": "8cee9f07-1d42-4a9c-9983-2d2d60724b0b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "61e67a01-82cf-4548-a2d9-5767a62f4fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2629909-f6d1-4b5c-8bb0-06fc6ab24445",
        "cursor": {
          "ref": "177f9974-d31d-4935-9895-0d984b37a417",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0476e8e1-f33c-456d-92f2-fe7498dbdad7"
        },
        "item": {
          "id": "f2629909-f6d1-4b5c-8bb0-06fc6ab24445",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3db83217-4532-4678-81e8-0d3af889eebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d98cc9-cc6c-491e-b841-048de65a346c",
        "cursor": {
          "ref": "0772c84b-df90-4fb8-88a7-51576928dc18",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "68b3a5df-5b35-44c1-a4b0-7aed0d7b4499"
        },
        "item": {
          "id": "c7d98cc9-cc6c-491e-b841-048de65a346c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "db9134d2-3d94-4a07-be9a-56dd8fd57a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32188d0-d0cb-4aec-960b-6d1ee18322b2",
        "cursor": {
          "ref": "96c687a6-93f6-47ef-844f-41d1f4ca2347",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "188c300d-0b0a-4d3c-8ae4-5111d6640803"
        },
        "item": {
          "id": "b32188d0-d0cb-4aec-960b-6d1ee18322b2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5831afaf-7de4-48a2-bb24-e323a3feb90b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef1c61d-d7e3-4d4d-a637-1e118cd33e09",
        "cursor": {
          "ref": "9c857cf6-8b6a-424c-95a1-ad9c3c229a2b",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a1033679-3694-457b-abf9-2651fe39adfe"
        },
        "item": {
          "id": "eef1c61d-d7e3-4d4d-a637-1e118cd33e09",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "cd13f2aa-3d75-4690-8cbf-7b59672a2f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2755f93b-97a1-4193-a2ec-60f490da5cd3",
        "cursor": {
          "ref": "38ffb230-3d81-4a3b-93ef-ba8699a3b8db",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "526ba2cf-b2be-419f-87cb-a4c5cdfffa45"
        },
        "item": {
          "id": "2755f93b-97a1-4193-a2ec-60f490da5cd3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3412ab86-ffa2-42f1-9198-6aeb9518ab56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f5bc11-7ae9-46d3-bc7d-3e5ef47f8f72",
        "cursor": {
          "ref": "46ab3e8d-cc7e-4bca-b914-c4193b4b7f99",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c94f1922-e998-4f63-87a4-983bd87657bc"
        },
        "item": {
          "id": "56f5bc11-7ae9-46d3-bc7d-3e5ef47f8f72",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7a26724b-09bc-45bb-bde5-6f700b89a4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a6ca516-eed7-4c86-b354-a1fdb187bb79",
        "cursor": {
          "ref": "058c4fdf-b1df-4ddb-bcc6-5eb78563c0d5",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "88666a47-2165-485a-924d-cd550206c384"
        },
        "item": {
          "id": "7a6ca516-eed7-4c86-b354-a1fdb187bb79",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "de72b975-cb73-4f14-b6d0-7f5f9c4b0eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d4d341-b641-4be9-ac7a-465152d69e4c",
        "cursor": {
          "ref": "f2795900-8507-4df4-94d7-f0cbbc757062",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "345cb389-36ee-4844-91e7-45329d580b59"
        },
        "item": {
          "id": "c3d4d341-b641-4be9-ac7a-465152d69e4c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "451fd647-bcf8-46fa-a112-b87e93c81e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3afce0a-c87d-4435-a4c3-c7885d78c574",
        "cursor": {
          "ref": "d62d3a25-db2e-442b-9fb1-1b902172aa5f",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6a154030-7a11-4d08-b839-c1c8124cf221"
        },
        "item": {
          "id": "e3afce0a-c87d-4435-a4c3-c7885d78c574",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "2f51d7a7-9781-4081-98b0-4dbfa72f6384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0074fd1b-7fa8-4ae0-9c26-5e7b8dd159bc",
        "cursor": {
          "ref": "60c32d8c-9623-4de3-95cc-671fcea8316e",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f2cade86-c7d3-4b39-9160-52b80b86218b"
        },
        "item": {
          "id": "0074fd1b-7fa8-4ae0-9c26-5e7b8dd159bc",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "c2213f51-46cb-4123-b4aa-76da68354a4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cf1dc88-cc5f-4ee5-8004-86ef53be1b68",
        "cursor": {
          "ref": "9c7e0c62-1572-48f7-a266-2e1b8c28bb62",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1ae878a5-a4b8-4f45-85cf-3eed8ef46c12"
        },
        "item": {
          "id": "1cf1dc88-cc5f-4ee5-8004-86ef53be1b68",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b68a24ff-650c-44b9-bf93-d52fb35b97a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a82314-2cfa-491c-abe0-6a405c3457b6",
        "cursor": {
          "ref": "16d1d37f-c601-4f4b-993e-99149cd09047",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4de3b462-47b7-4500-b686-ada28fe73ef0"
        },
        "item": {
          "id": "27a82314-2cfa-491c-abe0-6a405c3457b6",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "a4c0484a-847d-4b52-a1f0-51d113fa881c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e98f0ea6-8453-4fd8-aac5-4823b5b08362",
        "cursor": {
          "ref": "dbaa9117-de07-4825-80e6-0699df7c67c0",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "473017c7-01ad-4cc7-a797-0a25bc63bfba"
        },
        "item": {
          "id": "e98f0ea6-8453-4fd8-aac5-4823b5b08362",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "c89af51c-cd1f-4576-937f-98ce10923976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05037361-1743-4571-8f6e-2cf2c4149415",
        "cursor": {
          "ref": "c419cc57-4c61-4c73-80cb-dcae9d157b6c",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "bc31edc6-59b3-44c7-8037-b0cfdc5f88e9"
        },
        "item": {
          "id": "05037361-1743-4571-8f6e-2cf2c4149415",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "81c1ecf6-68b2-45da-9408-de7359c92623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5eafb8e-f0db-4ed9-bbb9-2935c575d718",
        "cursor": {
          "ref": "06f59d70-de9f-40c8-856a-42c58d5c8454",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a643faf5-6c61-47e0-958a-38a9344c9449"
        },
        "item": {
          "id": "d5eafb8e-f0db-4ed9-bbb9-2935c575d718",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "94f0a7bd-bf1d-41f8-80b8-790bc745a13c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60ac6923-8218-4b0b-9d13-f03a172666be",
        "cursor": {
          "ref": "e9ddf2ec-1b34-4a3c-803d-8ddc7d50f90b",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c14785bb-625d-4a43-8229-674c2f680838"
        },
        "item": {
          "id": "60ac6923-8218-4b0b-9d13-f03a172666be",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8d237803-a8a5-428a-9810-cdc9d1b64596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b019e7cf-b18b-4a0a-a76a-795573ae05b1",
        "cursor": {
          "ref": "69b77d34-bbed-4625-9ce0-0d6b988687eb",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ab2f9f93-002e-461f-a678-6abc35c203c9"
        },
        "item": {
          "id": "b019e7cf-b18b-4a0a-a76a-795573ae05b1",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "18378ec9-4e09-4489-bbf6-5ebe33899871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84b6d4bd-08eb-4bd6-9dc5-e19ad7e30506",
        "cursor": {
          "ref": "6bc514d2-b077-4ae9-a498-0afdef52bf30",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "763c99da-b5c3-4030-ab7e-b52375b3a82e"
        },
        "item": {
          "id": "84b6d4bd-08eb-4bd6-9dc5-e19ad7e30506",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "7234e902-176c-4374-b8b7-a380eff4be6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66d4be9-4992-435b-a81c-3f455f607d7b",
        "cursor": {
          "ref": "a0d4eba9-8890-4b0b-8394-c757a6f9e1b4",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "976ad0c1-f5cc-49ec-9c07-0e1f4c412081"
        },
        "item": {
          "id": "f66d4be9-4992-435b-a81c-3f455f607d7b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bd0f0caa-173c-4628-8725-6110a541916f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c12486-bb9e-4d6b-979e-488d64ccf3c7",
        "cursor": {
          "ref": "db673ec1-880c-401b-9585-e5e28f309401",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d7d94abf-5425-41c4-8b8d-aa5ac51ed9f7"
        },
        "item": {
          "id": "c9c12486-bb9e-4d6b-979e-488d64ccf3c7",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "95ea026d-1c1e-48b7-a2df-e4ab4c4468c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae9ebe53-d070-4680-9aca-b1a13bc391cd",
        "cursor": {
          "ref": "1e0dff4b-f70a-48d7-8909-a3161dcc27f8",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f997cbf5-157c-4f7a-8c0d-5110ba9d6f57"
        },
        "item": {
          "id": "ae9ebe53-d070-4680-9aca-b1a13bc391cd",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3b69bc2b-01c7-40c3-9ace-d64bf1412b1c",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "bc60aef2-5a43-43c1-93c3-1e088799441f",
        "cursor": {
          "ref": "cd6eb6ad-0191-4180-a47c-417c7e09a15c",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1b6f5a08-4257-4e82-b643-f5cf6659ec9e"
        },
        "item": {
          "id": "bc60aef2-5a43-43c1-93c3-1e088799441f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2f8bfbcc-64a6-4051-ba25-819b913a3cee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66e70c6-b315-47c0-b577-f1cb5326ead7",
        "cursor": {
          "ref": "a01d309a-4121-4ea0-a822-4fab91bdc563",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "74bbf883-789e-46c6-9931-6ed7dd478852"
        },
        "item": {
          "id": "f66e70c6-b315-47c0-b577-f1cb5326ead7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "06eeee65-26ad-4010-a5ae-96fbde4c05e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c7bd160-c463-41b0-9374-377df8243a34",
        "cursor": {
          "ref": "f1ab5ba3-2aa4-4e46-ad1a-b274af421167",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "989d80aa-c095-4d1f-8243-f5733a197547"
        },
        "item": {
          "id": "5c7bd160-c463-41b0-9374-377df8243a34",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c7882589-ec25-4a0d-b078-507670c7dec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13d3996-4527-496a-9888-1f33324f74e0",
        "cursor": {
          "ref": "9c70d90a-7bb9-4489-b695-b92341797406",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0b5be482-d402-4e8d-988c-b32fb3391330"
        },
        "item": {
          "id": "d13d3996-4527-496a-9888-1f33324f74e0",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0e1db00e-2d54-49cf-8bbb-bdbd804e6995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a8f6f8f-961e-47d0-aa89-ae2f7f8a38dd",
        "cursor": {
          "ref": "352f58a0-da6e-4be9-bf1c-f535c172ed9c",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "44ee61c4-e2cd-4efd-866a-40ccda0a32fd"
        },
        "item": {
          "id": "4a8f6f8f-961e-47d0-aa89-ae2f7f8a38dd",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "afa82fe9-a27e-4d58-a49b-f67fb9efbaeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c4043e-848a-4398-8576-a2d8ddbd019b",
        "cursor": {
          "ref": "09e0cc4f-0cf1-40a2-9389-e4280b9e0cba",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a4c3de30-c992-4f2e-92b5-8e8d3b770634"
        },
        "item": {
          "id": "02c4043e-848a-4398-8576-a2d8ddbd019b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c9a77109-0e20-42f9-af6b-28b4a67f556d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b290182-7d8a-4e78-9e4f-cb7d98bb9912",
        "cursor": {
          "ref": "5e87f722-2834-423e-bdff-3453aeeb883f",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "16d86ddf-3d13-4e04-ae94-b66f09af0bfc"
        },
        "item": {
          "id": "7b290182-7d8a-4e78-9e4f-cb7d98bb9912",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f0232b7c-2c4b-4c4f-b769-2fed5470cc6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b18aae7-d43f-4c1a-9adf-1ebb41eb2682",
        "cursor": {
          "ref": "b26fbdcb-f522-4fa3-8e7f-9f9940ef82cc",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5728e867-bcc1-4368-a635-5f73e4d1df54"
        },
        "item": {
          "id": "7b18aae7-d43f-4c1a-9adf-1ebb41eb2682",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b8b6e9b3-d484-4287-80f7-b63317f7c4aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb8a669-150d-4c5b-b945-a88d71f83714",
        "cursor": {
          "ref": "64ec7ce6-2a27-4599-982c-f1d83de1515d",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "02cf0f52-82e4-4d47-bffa-bdbab1d60200"
        },
        "item": {
          "id": "bdb8a669-150d-4c5b-b945-a88d71f83714",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a33e9e0d-4545-4f59-b9a2-7d5ec9fe2a18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa70301e-a6fa-4a07-b20d-7273a6b2905c",
        "cursor": {
          "ref": "d83c25a0-c1e9-4750-8e35-e1f26fa689f6",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "eae7d46b-a911-47c7-85c9-3a4fe4281854"
        },
        "item": {
          "id": "fa70301e-a6fa-4a07-b20d-7273a6b2905c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8368b13b-a71e-4477-bc00-e52c9437f817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb25643f-de80-4896-93c5-9a6c824a35c9",
        "cursor": {
          "ref": "db3017fc-cd16-4be5-b864-c0f55e69e0a7",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5cd1dd2e-5597-4f1b-a41d-63b34774a9a0"
        },
        "item": {
          "id": "bb25643f-de80-4896-93c5-9a6c824a35c9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "eaad0818-1ff9-4435-a7ba-969bd99585e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b10577d3-4ef5-4920-8d99-3d9fbaef6f31",
        "cursor": {
          "ref": "1ecce322-f35a-4613-a209-2c0c9978b10b",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d517a603-867d-4961-8d71-0e585b26ba91"
        },
        "item": {
          "id": "b10577d3-4ef5-4920-8d99-3d9fbaef6f31",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "aaf77cb0-472e-4de8-9731-6c0deb00327b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f360afa2-fb3d-4831-964e-6c39b44082fb",
        "cursor": {
          "ref": "b39f33b0-dfca-4147-81ea-1fc88189a330",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f90b416c-0085-4e6d-adce-191b4afc96fd"
        },
        "item": {
          "id": "f360afa2-fb3d-4831-964e-6c39b44082fb",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c4fc98b6-ad64-4a3c-baf9-66cf084a35ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b6300b-fcae-4235-b0de-175e4ecab827",
        "cursor": {
          "ref": "cbf306e1-a684-48d0-b06f-567468111cb3",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "cf895572-395d-4edf-b9ac-22cc35904b42"
        },
        "item": {
          "id": "29b6300b-fcae-4235-b0de-175e4ecab827",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b66d78e9-0327-4aa2-9b70-22bc2359ea68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d5efa2-e6ed-4844-97b2-2ae7498bd681",
        "cursor": {
          "ref": "bfed7aa1-ea3d-403a-bc87-49163f280759",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "53393eaf-c77f-4a88-902b-d6739803ce59"
        },
        "item": {
          "id": "d0d5efa2-e6ed-4844-97b2-2ae7498bd681",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "165bab3f-c6c2-4661-9f8c-24c75b951b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6abfa3a0-f9ff-42fd-aca0-9d866f7c11da",
        "cursor": {
          "ref": "46d4530b-bb08-42ef-8e11-1fc8896102c9",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9df1546c-7e15-401d-b6da-3b05c0410941"
        },
        "item": {
          "id": "6abfa3a0-f9ff-42fd-aca0-9d866f7c11da",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e9026424-664c-485b-8d33-5e20db1ea25d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed62522c-3f48-430f-b2f1-dc42c9d73491",
        "cursor": {
          "ref": "f74fbde9-7f3f-4963-9fea-d85051bda83e",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1ed10cd0-cbf0-4326-a57b-37b751f988a5"
        },
        "item": {
          "id": "ed62522c-3f48-430f-b2f1-dc42c9d73491",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "60f6899f-8536-4d81-a00f-c196ac590014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4cfd67-7a29-417f-8864-6bfa4d082bcb",
        "cursor": {
          "ref": "52459ea8-0369-46db-9387-5aa23ad71a81",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "98a39bd7-30bd-43d2-99cb-7b7bf2f5295e"
        },
        "item": {
          "id": "ec4cfd67-7a29-417f-8864-6bfa4d082bcb",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5fd90990-ca69-49fd-a5fe-e797f97871e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66030ec-f040-469d-8ea5-ad3ab2e77566",
        "cursor": {
          "ref": "af2e690d-090d-480b-8926-306cbea93d00",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9bd599d4-2625-4c9d-8661-323b895e9733"
        },
        "item": {
          "id": "f66030ec-f040-469d-8ea5-ad3ab2e77566",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "87367f6a-d476-4e7d-b738-2e168252e9a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a66ba5c-72d8-43ce-9a41-47012468b028",
        "cursor": {
          "ref": "38b40808-34e7-48c1-8cca-d3b7ffd569c5",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ac1afd85-5114-47c9-8d8e-bfcea1258d92"
        },
        "item": {
          "id": "3a66ba5c-72d8-43ce-9a41-47012468b028",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9e4e4dc4-74d0-4262-9f05-778bafff06f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27217065-b01f-4e2c-a131-98162a5e1270",
        "cursor": {
          "ref": "7973c6a8-222c-47a1-96da-d5fbe61f22c3",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "859c0b7d-37e8-4f2d-af35-97a10bf49087"
        },
        "item": {
          "id": "27217065-b01f-4e2c-a131-98162a5e1270",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8fbbfd6a-11b2-46f3-98ab-85919966f5a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1a382c-7f5e-465b-9928-a3bd4f2635ed",
        "cursor": {
          "ref": "53bf6f5e-c9e3-4d8b-991b-7a8264ac18ee",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "74e51222-0180-4c61-943b-0c32a750c3f6"
        },
        "item": {
          "id": "0b1a382c-7f5e-465b-9928-a3bd4f2635ed",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a0e13bde-ece6-491a-9826-b0b9e5752400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739af047-9b1d-47ec-a6f7-bab6b5a21a77",
        "cursor": {
          "ref": "929c7d83-7558-44e3-b68e-1749bfa369e6",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6baa2208-cb4d-4525-a0c1-ab3d7fa537f1"
        },
        "item": {
          "id": "739af047-9b1d-47ec-a6f7-bab6b5a21a77",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bfb76c43-76fa-49ae-a2b2-ee18b01123ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fedccfa2-7c3e-48c6-9000-89d37fb93a7d",
        "cursor": {
          "ref": "3e0f446d-e280-4a8a-ba57-d2f7bec19b5e",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e0aaaac8-12f7-4091-b40a-6cd6c53decbd"
        },
        "item": {
          "id": "fedccfa2-7c3e-48c6-9000-89d37fb93a7d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b890df58-dcd2-45ac-bc0a-c867f3c7c544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2070b71e-3239-488b-a20b-caa5684c0cac",
        "cursor": {
          "ref": "3b0e8d3c-6779-47bb-90f6-f1ddf261b038",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b1066c21-04fb-4868-b350-afc6a93cad67"
        },
        "item": {
          "id": "2070b71e-3239-488b-a20b-caa5684c0cac",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7edaa658-6045-4aa7-9736-2d5dfd17533e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10cd1d3b-8d31-4bf3-9242-28279dc55927",
        "cursor": {
          "ref": "e52f873b-0ec5-4ea6-9959-3dc1ef01cceb",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7507e0d2-f3e2-4421-bbed-d7f097d7f2f5"
        },
        "item": {
          "id": "10cd1d3b-8d31-4bf3-9242-28279dc55927",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2c3d4286-be8e-474d-a3ef-17efe7759ff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca8f900-de2b-4c87-b05f-9494e24eb94c",
        "cursor": {
          "ref": "3774130b-6efa-46d8-a89a-251c5a56ff59",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "29cd1b1d-4792-41c2-893e-68f6a3d65e2b"
        },
        "item": {
          "id": "9ca8f900-de2b-4c87-b05f-9494e24eb94c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9012e628-044e-431d-aa0c-3c0be2058f7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ed25eb-bc20-44e6-9695-d41387121158",
        "cursor": {
          "ref": "3dc997a5-8ea1-4e44-bf97-a8cda92dc951",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3b8bebc2-f3ce-4dbe-a746-afa427e00984"
        },
        "item": {
          "id": "a2ed25eb-bc20-44e6-9695-d41387121158",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3f36cc08-bb69-4ca6-9331-aeab87b2f2bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d344c65-efdc-49b9-992f-0b2960611698",
        "cursor": {
          "ref": "cdd33c98-3af9-42b3-8f17-27cefcc5e680",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "009f73c3-5a01-454c-a397-538b593b36b1"
        },
        "item": {
          "id": "9d344c65-efdc-49b9-992f-0b2960611698",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4928a57e-fa3b-4ba4-b88d-438f14bbf311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4661866-c0ca-4bb9-9dac-7d06c0952ecd",
        "cursor": {
          "ref": "63cf86e1-0462-4d41-9338-43ed7251445d",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d6150572-ea0a-482f-a62d-a336ebbfdf70"
        },
        "item": {
          "id": "e4661866-c0ca-4bb9-9dac-7d06c0952ecd",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "bbdecffc-55b4-42f6-8b7f-71473b6c9e87",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "b4652dae-337c-4f11-8894-fb8d85fdcbd2",
        "cursor": {
          "ref": "8876f65c-c3ae-4e22-8836-a0da2d5aa365",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2f6c67a1-7afd-4ed9-bcf3-8549c9c86c53"
        },
        "item": {
          "id": "b4652dae-337c-4f11-8894-fb8d85fdcbd2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "130a7b6c-8c06-486d-add7-5defd8b870a0",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "0ed5432d-ad80-4f33-a5e2-1c83dc8ca4f1",
        "cursor": {
          "ref": "1809373a-dc19-4e92-b3d2-fd4f45e4d579",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6010a405-5277-4b10-b54b-f98bea011e0d"
        },
        "item": {
          "id": "0ed5432d-ad80-4f33-a5e2-1c83dc8ca4f1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6d7a8fdf-8ad0-40e5-bba7-fdf56d47463d",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "f56a1478-7fa9-45f1-9d60-d8e4f248d49b",
        "cursor": {
          "ref": "d0379a0e-62b7-42ff-a76a-17d5556b9bc0",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f2411acc-dea7-4db3-b530-b622252928e0"
        },
        "item": {
          "id": "f56a1478-7fa9-45f1-9d60-d8e4f248d49b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "285ba71d-f4de-4189-bfee-7ae08ef82499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb428dfd-5aa3-47a1-9da8-dd575fcfef43",
        "cursor": {
          "ref": "cd98e2b7-688a-4bb1-a59b-71426e8d24d0",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "eab17505-1c8c-40a2-9fd3-810190e58637"
        },
        "item": {
          "id": "bb428dfd-5aa3-47a1-9da8-dd575fcfef43",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "dd8f0dc3-c046-4424-b08b-8210081a6149",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "6d81a45b-0189-42e1-8201-e28fc35a3aa6",
        "cursor": {
          "ref": "1bcadcce-1bd3-428c-bc5d-d88f23f6b417",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e11db881-ce11-45b1-ae78-086cecbe1ccf"
        },
        "item": {
          "id": "6d81a45b-0189-42e1-8201-e28fc35a3aa6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "abeeb416-9092-4de9-95e7-ee2e77d5db70",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "9d16c123-c697-438c-8ab5-fb057ab9564a",
        "cursor": {
          "ref": "c77a4749-e1ea-4e0e-8c42-35fea2cebadc",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "32ec9568-84ce-4cdb-b177-535fb986e99b"
        },
        "item": {
          "id": "9d16c123-c697-438c-8ab5-fb057ab9564a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "35759a9b-3caf-4b3f-a23e-d364c4e6fae3",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "944bb3a3-fb75-4616-8921-834a7c53aef8",
        "cursor": {
          "ref": "a6af95e5-8b19-4fde-a187-f3f66c7b1442",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9b7c0aef-eba4-47c1-ae5b-8d066decdf5d"
        },
        "item": {
          "id": "944bb3a3-fb75-4616-8921-834a7c53aef8",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "bcd67d0c-d209-48a1-beac-3125268cbdac",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "456332ac-c071-4540-83e3-6ad482b62446",
        "cursor": {
          "ref": "bcff7ef1-91a3-40ac-a74a-d26a8c80e69f",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f881e191-82fa-4810-87c1-4f149cbb0f91"
        },
        "item": {
          "id": "456332ac-c071-4540-83e3-6ad482b62446",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "745618fb-45a8-46ee-82f0-ff45f76f1c47",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "e54393c6-92f1-4561-ab1e-c8e6a6e59af9",
        "cursor": {
          "ref": "92044326-e2db-4111-85fd-44b3527e2547",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7be8ba9b-e580-43e3-904c-1fda3229dd4c"
        },
        "item": {
          "id": "e54393c6-92f1-4561-ab1e-c8e6a6e59af9",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e967b1ca-a41a-4da7-940a-ff8162b6cea9",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "4245b5e5-72fd-449c-aeff-c1aee1012a05",
        "cursor": {
          "ref": "43764bca-8d03-411b-820d-3968bcbba53e",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f7aba536-03f0-41f5-86e8-1bda9bc0e8e1"
        },
        "item": {
          "id": "4245b5e5-72fd-449c-aeff-c1aee1012a05",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d42d76a6-e52e-4606-b754-bc218c527d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b38bae1-2ccb-42a4-a99d-9dfec3849f26",
        "cursor": {
          "ref": "f7acb54f-fce8-492f-b0ae-b73f0e8b883e",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a5368175-f383-4f78-95e3-a2cb4555c6b6"
        },
        "item": {
          "id": "2b38bae1-2ccb-42a4-a99d-9dfec3849f26",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c44349d9-aca6-4ae4-a8fd-cdc3b306bb45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb2bf09-829e-4ca8-b7c2-6b27814b76dc",
        "cursor": {
          "ref": "4d447f70-beea-4c77-9551-fa70e3be4bca",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b3daffd2-571a-4053-8550-8c989df3886c"
        },
        "item": {
          "id": "fdb2bf09-829e-4ca8-b7c2-6b27814b76dc",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "504f9103-9cd7-4cf6-8404-c7dc424d20df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37387fbb-a43d-444c-aec2-b3447c994090",
        "cursor": {
          "ref": "b03e33d5-379a-49e0-90de-a2b1d83a5c9d",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5fd9d222-2f0a-4753-b037-6a0e9ce0d4d2"
        },
        "item": {
          "id": "37387fbb-a43d-444c-aec2-b3447c994090",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "20f1a09c-c36a-40e9-ac99-964f524b9796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e594d36-33b7-45c2-b711-067a47c36d18",
        "cursor": {
          "ref": "99e82f92-4f76-41c3-bc81-613c961896e8",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "66b0dc26-d0c1-40f2-bb46-6a5144ff098d"
        },
        "item": {
          "id": "8e594d36-33b7-45c2-b711-067a47c36d18",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0ba0acc1-5cc5-47a1-8218-9ca8633e016f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4531a2f-2d85-4665-9d30-af90783f370e",
        "cursor": {
          "ref": "39aab190-fd72-4e9d-9cc2-56c0db01e30f",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6924d585-6af2-4f56-8305-d39a6334d469"
        },
        "item": {
          "id": "e4531a2f-2d85-4665-9d30-af90783f370e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "de94141c-8fa4-4605-83f4-800575dae39d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fbcc15e-2dd1-4106-90bf-deff75089b7d",
        "cursor": {
          "ref": "f4e962ab-1295-4157-962c-7e7c1ebe17c0",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a45e2ff8-7d2d-4d07-adf0-9e8f3a77d382"
        },
        "item": {
          "id": "3fbcc15e-2dd1-4106-90bf-deff75089b7d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "967f6f77-7efc-46f1-968d-1b6960fed6d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6725c4ca-b5aa-44fc-a333-8141306d2bfe",
        "cursor": {
          "ref": "d802659d-6cd0-4b71-921f-29d007cf1af7",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0d0d4718-2f34-475e-9ddd-952f7fb53154"
        },
        "item": {
          "id": "6725c4ca-b5aa-44fc-a333-8141306d2bfe",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9422d3d4-2210-40dd-b195-0f9179774813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a34512f9-32c8-43d6-bcaf-63b243485f58",
        "cursor": {
          "ref": "da41e20d-8d59-4832-b4a0-f68c69e8f32d",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c1df3542-b95c-4657-bd6b-ceb226eb0782"
        },
        "item": {
          "id": "a34512f9-32c8-43d6-bcaf-63b243485f58",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "429892ba-ed6d-4c64-878f-6b049078aafd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb7de473-23ae-4130-a10d-a85c380c1b2e",
        "cursor": {
          "ref": "7b599115-790b-4059-a24b-3db0be78e32f",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "256ff820-1076-4077-93b2-361c5940ca24"
        },
        "item": {
          "id": "fb7de473-23ae-4130-a10d-a85c380c1b2e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2589a119-f049-44c1-b804-31830f3eab44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2b28b1-39d0-4535-b0f6-075a3011a370",
        "cursor": {
          "ref": "33f78219-f5d0-4f81-9b2c-4634c01c8420",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e2811d70-c0dc-44ef-91eb-539d0104440b"
        },
        "item": {
          "id": "4e2b28b1-39d0-4535-b0f6-075a3011a370",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4f08743d-9c69-4ee6-b59d-188928575f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25b236f-bc76-4f40-973f-1a6b980b309b",
        "cursor": {
          "ref": "488899d2-fa3f-4ca9-b1b5-d135c11aeca3",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "971d4f94-4be0-4228-9725-23b3d467357e"
        },
        "item": {
          "id": "f25b236f-bc76-4f40-973f-1a6b980b309b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "25196282-b989-4702-a4ac-43e543fe6527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "474cc54f-c7cc-4355-9461-d67799aaeb92",
        "cursor": {
          "ref": "2bfd9527-6ca1-46db-a294-1a4eabee9f00",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "215b4458-025d-4435-8b83-354c8bad88f1"
        },
        "item": {
          "id": "474cc54f-c7cc-4355-9461-d67799aaeb92",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "31244ab3-e3db-4ae6-985a-823d75b8ecfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac25358-2c2d-4b55-bb0f-ea1435d9fea0",
        "cursor": {
          "ref": "94bd78ad-d339-47d7-8f61-2f054ced9494",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "298a2190-07ba-4f83-ad3e-7b01aa3d6337"
        },
        "item": {
          "id": "bac25358-2c2d-4b55-bb0f-ea1435d9fea0",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2f9f3c6d-5d5e-40a5-92fc-6e93fcb8772f",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "c4ab1048-6cfe-4ec0-9d81-128b9527a39c",
        "cursor": {
          "ref": "9e4f5ae2-8673-45e8-9301-1f9d03520669",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "98ef16bd-ed12-4b03-975d-fd029771792b"
        },
        "item": {
          "id": "c4ab1048-6cfe-4ec0-9d81-128b9527a39c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "53b4a30d-2569-4b73-b4ea-8728499b5cea",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "8306c320-b9e0-48fa-922f-43eb2c21959b",
        "cursor": {
          "ref": "c362b755-839f-4be5-a3b1-37b0bde8cc0b",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8426421c-97f8-4605-bbe7-19f6e0ae6fb4"
        },
        "item": {
          "id": "8306c320-b9e0-48fa-922f-43eb2c21959b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0ab2d0c0-6d1b-42b1-a24b-6cea12f790d7",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "99272147-343a-40f0-91ee-0463144a6195",
        "cursor": {
          "ref": "82f82029-2fb7-4a24-946e-5bb6c9fb0bcf",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ea3588fd-e5ee-474a-9b60-d6b158fa5946"
        },
        "item": {
          "id": "99272147-343a-40f0-91ee-0463144a6195",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f793f243-e657-4b1a-9980-209be6ac0006",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "200988d2-c2ac-4662-8eb4-ee80bdad5e4b",
        "cursor": {
          "ref": "1005ef38-5948-40f9-91f9-2467b042253f",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ad8364db-5fa9-41e8-a6da-916be3211d2c"
        },
        "item": {
          "id": "200988d2-c2ac-4662-8eb4-ee80bdad5e4b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9e361d7f-795e-47e7-9605-02e85650348e",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "e19340ee-4f48-4fa3-b9de-05d3114d6a2e",
        "cursor": {
          "ref": "457aa495-6516-4b78-aa56-1a9795f39b75",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "905d233b-9e89-46c2-8dcc-29be87c51f4a"
        },
        "item": {
          "id": "e19340ee-4f48-4fa3-b9de-05d3114d6a2e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ca78c48c-72a7-4eef-9d14-243f399f4c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1b0e78-e56a-4b63-b6c7-d8f9a24302fa",
        "cursor": {
          "ref": "520f70b6-aadb-414f-a3e3-bf4dc679593e",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "69b39df5-1ce7-4bf0-be03-cb1c8a4047fd"
        },
        "item": {
          "id": "fc1b0e78-e56a-4b63-b6c7-d8f9a24302fa",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "aab38959-f88c-4401-877e-3dc4213c5e29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16067042-5ff5-441f-9a71-6f480d739806",
        "cursor": {
          "ref": "7c9de25b-6c6d-48ae-ab99-f123d8698e4f",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b6366663-4acc-4630-aaf1-596a9643bd53"
        },
        "item": {
          "id": "16067042-5ff5-441f-9a71-6f480d739806",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "cff033a9-7e29-4905-876d-317a548c5ca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a52477ee-7baa-4b74-be9e-c3d18c4982c0",
        "cursor": {
          "ref": "c11e98bd-06d3-4d53-aa0b-4bd73fecbbb4",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "78807399-3680-4a70-86f7-15542bb02e4d"
        },
        "item": {
          "id": "a52477ee-7baa-4b74-be9e-c3d18c4982c0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5fb1eaed-a6fc-478e-bda3-d23c25575ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ca77d6-8adc-4ba1-b71f-e20c891f1b40",
        "cursor": {
          "ref": "a502e3d0-6f84-4054-8f96-24e760b78c3a",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b6322de4-1251-4f79-85b2-75ce7a11140f"
        },
        "item": {
          "id": "00ca77d6-8adc-4ba1-b71f-e20c891f1b40",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8b23fbd5-7640-497b-9379-195c92cbd06d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61342eb7-f2c7-4e52-8aac-7273c51b99b4",
        "cursor": {
          "ref": "72ec2b35-17b4-4dc5-8709-eb36ba6e0e42",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ac8d3b04-8349-4ddf-bd73-ab9304326534"
        },
        "item": {
          "id": "61342eb7-f2c7-4e52-8aac-7273c51b99b4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "dfb8aa7c-468a-4b38-ab5e-49fffbda5851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2badb5-1e91-44f6-b3e0-47403dd573f2",
        "cursor": {
          "ref": "30f56f57-eda7-4901-8df8-ed34666f1f47",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "cb9524a6-7583-496f-92ac-4e816b40ca75"
        },
        "item": {
          "id": "ca2badb5-1e91-44f6-b3e0-47403dd573f2",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9ef65a87-3d9f-4fe8-9630-67c77dab9ae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c01b8f1-eab3-4d26-8c0b-12812437b7a3",
        "cursor": {
          "ref": "f92e0fa0-083f-412c-badb-0912d5e0a60f",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5af0618c-9b3d-4aab-80b1-e728bbdd9b77"
        },
        "item": {
          "id": "7c01b8f1-eab3-4d26-8c0b-12812437b7a3",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "59fb325d-01b2-4f29-893b-f12eefe6a40f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a071e155-4e4c-4df3-8268-748f67774e86",
        "cursor": {
          "ref": "80b71339-14b3-4232-bfb6-f5f0b758ef4d",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3d9c61d5-b489-4da0-9c49-8725a7456b45"
        },
        "item": {
          "id": "a071e155-4e4c-4df3-8268-748f67774e86",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "99ec5d99-2054-4c0d-80ec-4fd67418f85e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8e2024-c2ae-427e-a6b2-002a68706ae4",
        "cursor": {
          "ref": "bdba2dda-7297-4f4b-83af-5432cb9c6571",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9124d960-cfde-47f5-9de0-aa3d3b26f3f3"
        },
        "item": {
          "id": "3c8e2024-c2ae-427e-a6b2-002a68706ae4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c12c159d-e6ef-4d92-bdad-993f60afd93a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c73d484-cef0-4254-8304-f1c72ccd562f",
        "cursor": {
          "ref": "438d506f-3d67-4f88-8735-fdad756712d1",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "292cecb2-a95c-4394-b927-3e3c22e35c5f"
        },
        "item": {
          "id": "9c73d484-cef0-4254-8304-f1c72ccd562f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "34f4ca22-6ddf-4cb5-ad0e-f53cf84d499e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d2ab7b-5778-41fa-ab5f-ad24b037b1b1",
        "cursor": {
          "ref": "64082ca8-a451-4ca9-9050-f64cdc346dda",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "dc39e673-3d1a-4e4e-8ded-f33c34572979"
        },
        "item": {
          "id": "b8d2ab7b-5778-41fa-ab5f-ad24b037b1b1",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ca9141f9-c372-4f8d-bde3-155de98917d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a4f0d2-f506-44d9-97cd-d148ad7521fe",
        "cursor": {
          "ref": "084cb3b8-97aa-4c7b-85f3-a65fff90d3f8",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "172304d6-ee9f-4fec-af2e-9f3aadfd7156"
        },
        "item": {
          "id": "e5a4f0d2-f506-44d9-97cd-d148ad7521fe",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "edb2d8c0-84b4-4bff-904d-565a09f16616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f403e5ed-6077-490a-ae4b-8c7f47ba603b",
        "cursor": {
          "ref": "69b156ff-fafe-419c-a345-4d2da63d5bfc",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c65d2e62-2d89-482c-8a91-0b8536e9b986"
        },
        "item": {
          "id": "f403e5ed-6077-490a-ae4b-8c7f47ba603b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fa21d56d-97a3-4899-940f-109895354fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1a39a9-afc0-4b67-84af-6ec9b53ab0e7",
        "cursor": {
          "ref": "bbecefcc-212c-4dc3-9867-7cf2b72817de",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "94ec26c0-1948-411d-8b99-fa938b256913"
        },
        "item": {
          "id": "af1a39a9-afc0-4b67-84af-6ec9b53ab0e7",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2cc0fc72-4fec-43c5-858e-3441d6a7d70c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2caeedcd-d8ec-4632-a381-3b9bbf3936f5",
        "cursor": {
          "ref": "8b934865-9be8-485a-bf51-8df8351d5b90",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2f2beb62-4b28-4415-9921-205a9dc1c44d"
        },
        "item": {
          "id": "2caeedcd-d8ec-4632-a381-3b9bbf3936f5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d5aeac0d-2fb3-4035-86a3-e86fdd34997d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42802879-0c8f-4977-a325-1a9e50f609d5",
        "cursor": {
          "ref": "e1e22ba8-ac25-42b7-b700-e3f458574d51",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d2e40aad-35b4-4700-9d24-454650f83721"
        },
        "item": {
          "id": "42802879-0c8f-4977-a325-1a9e50f609d5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b69899d9-1f52-43ba-a8e9-f320a035aa65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f9dd9e-df1d-4279-aa1b-05a635e14fa6",
        "cursor": {
          "ref": "b9eee961-3098-4373-aa1b-874d2b2093d2",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "05c3dec2-4305-4ba7-adb2-18aacce25b30"
        },
        "item": {
          "id": "a3f9dd9e-df1d-4279-aa1b-05a635e14fa6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2d6f91d2-353c-4f61-aa96-3dfcde2f36f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a4ef45-312f-4ad0-aeae-548970fc3509",
        "cursor": {
          "ref": "a40476e6-be6e-4ffa-af4f-3c104f6467ed",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "aa42f025-fed3-47be-9e71-158db77e213a"
        },
        "item": {
          "id": "33a4ef45-312f-4ad0-aeae-548970fc3509",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e7371cd8-0719-47c4-b92d-64595f709544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32435f0-df4e-4cfc-935a-b96e0fb51687",
        "cursor": {
          "ref": "27842e10-93c7-4e51-a916-8ecf8d3899ca",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "68361b58-7ad2-478d-ad8c-29cc48a0ba06"
        },
        "item": {
          "id": "f32435f0-df4e-4cfc-935a-b96e0fb51687",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4a07915d-09f1-4a20-9afb-31bfb636d8cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deca0165-fb3d-4738-be6b-e620e6a4f41b",
        "cursor": {
          "ref": "befb313f-c5d6-49d4-9f15-350c82a6b537",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6e929f95-67d1-4c4b-9074-5f19ca74e742"
        },
        "item": {
          "id": "deca0165-fb3d-4738-be6b-e620e6a4f41b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ff209ef0-52f2-49cf-84a9-2489e866f72a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64bea923-531d-49ab-9bb4-757f264537a7",
        "cursor": {
          "ref": "f1286e52-504d-49f3-b46b-d43e981797b9",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a083b929-d18c-424c-a9c2-aca82488e7ff"
        },
        "item": {
          "id": "64bea923-531d-49ab-9bb4-757f264537a7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "20b18e6d-722e-41ff-8997-a07aa9a8fe3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0be2405-f19c-4ba0-9834-dcd18fee92b7",
        "cursor": {
          "ref": "e1b0ee7f-b6c9-4359-a46e-86f2561f9408",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6f4533de-3a5b-4fd2-9353-eee2aa168698"
        },
        "item": {
          "id": "a0be2405-f19c-4ba0-9834-dcd18fee92b7",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "84ad83da-7fe8-4451-a020-441de122726b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a529e45-4e4d-4665-a262-4939a087f7de",
        "cursor": {
          "ref": "d638c3db-3446-44a1-96ea-3271b0b96e52",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6342c1fa-ee86-44b3-b72e-72bbf59aee04"
        },
        "item": {
          "id": "4a529e45-4e4d-4665-a262-4939a087f7de",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7a9ec2e0-76ea-40df-9645-161bc374d3ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b821adc-92ab-495d-8b22-717861db4219",
        "cursor": {
          "ref": "eb68f838-4b86-4b78-8ea3-e043129c308a",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2e15b2a3-9944-46d6-b733-a64cf139984f"
        },
        "item": {
          "id": "6b821adc-92ab-495d-8b22-717861db4219",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6c47d373-69b4-4936-a4fe-e9b72a7b56f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c3b99c-741b-468c-90b9-1f6b57b34f5d",
        "cursor": {
          "ref": "1ba0bead-0cb9-40a6-ae38-8cdf9d3c81cd",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f25f9460-1fa0-4eec-8a69-43d9b8a5934e"
        },
        "item": {
          "id": "c2c3b99c-741b-468c-90b9-1f6b57b34f5d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7bf29e57-b056-4734-aeeb-e16a73e96639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fce3e95-8813-4056-9559-1f8131bd6207",
        "cursor": {
          "ref": "94e6e5ba-d546-42d1-a52a-e807f1a568f0",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "890923f1-5921-41ba-a8f5-edcff38962ad"
        },
        "item": {
          "id": "6fce3e95-8813-4056-9559-1f8131bd6207",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "796341f6-f1ef-4685-b9c9-f0d34fbd74e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64692ba1-46c4-4aa2-bb9e-210cdc577cb0",
        "cursor": {
          "ref": "12bd45bb-cf20-4c06-b641-a2cb5972dbcf",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "951ecea4-aec6-4f81-bad6-0753e2a54605"
        },
        "item": {
          "id": "64692ba1-46c4-4aa2-bb9e-210cdc577cb0",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "102b91b5-fd05-47c9-a448-0714f885dc1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b333c308-015a-481b-afd0-610b98453b19",
        "cursor": {
          "ref": "1c79d6db-3d39-420f-8e81-d99777a03ba9",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "375a79b8-1e26-4db6-bc93-8b762181351a"
        },
        "item": {
          "id": "b333c308-015a-481b-afd0-610b98453b19",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ab0b44db-21ae-4e26-9c88-d96ab034c8a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0145c2f-82e5-4128-93bd-ccaf2d01e3a4",
        "cursor": {
          "ref": "8a5157e0-588d-4d73-b950-9e5b377933be",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "bfff1945-9bde-4c44-9a1d-84e1d72eddb4"
        },
        "item": {
          "id": "c0145c2f-82e5-4128-93bd-ccaf2d01e3a4",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "df0d073d-0946-420b-b343-214709dc2856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1841ca9-655b-4801-8f22-e45077149243",
        "cursor": {
          "ref": "f843c0b3-dbf1-476b-8fd0-c9c91823332f",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b7f0b8e4-1bd3-46a6-b4ef-d6c5aabe971c"
        },
        "item": {
          "id": "f1841ca9-655b-4801-8f22-e45077149243",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ddd711c5-9162-412e-9a70-fda0011adbed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d86ff0a6-623c-4329-9399-e5749596fda0",
        "cursor": {
          "ref": "ab4c05b1-8031-4e62-8b65-c147861fff61",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "cc4ede65-fe67-4877-a576-236d3756537f"
        },
        "item": {
          "id": "d86ff0a6-623c-4329-9399-e5749596fda0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "706f1340-bcbb-4279-8000-a1deaa3d08cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c266003-be1d-4541-ab9b-caac2ca1c9d7",
        "cursor": {
          "ref": "e8045223-3897-4068-89f6-c04ac66bc109",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "30b06670-3037-4e31-be64-45ba19f004d7"
        },
        "item": {
          "id": "9c266003-be1d-4541-ab9b-caac2ca1c9d7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e12c0505-657d-4ce9-ab2b-65c16ac65ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ceac3b-c51c-4a30-bf3d-642259d82dbb",
        "cursor": {
          "ref": "c2a1a01a-8b33-4ad8-b1d4-d5153fce33c3",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5c2908ce-c208-4f17-a59f-c77217c1bce6"
        },
        "item": {
          "id": "c2ceac3b-c51c-4a30-bf3d-642259d82dbb",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "223ee0fa-17a2-48ac-a249-07ca3c3c1ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1415d003-dec6-4cac-a9ac-d38fbd41c627",
        "cursor": {
          "ref": "9adc5a41-e859-4f4b-80c7-aa24eaa799e4",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a89eb7fc-5b43-42b9-836a-7476f1f2453b"
        },
        "item": {
          "id": "1415d003-dec6-4cac-a9ac-d38fbd41c627",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ca5d9a4f-e335-4814-92e5-5564d5b23c03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8b4baf-8cf8-48aa-9ad6-d604d19a7c4e",
        "cursor": {
          "ref": "44d6f10a-e4ad-4383-a1eb-43c794b3cb4b",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "235dbbf4-7078-415e-91ec-0cbf3eaac262"
        },
        "item": {
          "id": "2a8b4baf-8cf8-48aa-9ad6-d604d19a7c4e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b65f222a-88b1-4a9f-b933-64ff55c8f6f8",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "00ab9842-d93a-4579-b1ed-13568776408f",
        "cursor": {
          "ref": "bb186d98-4e26-4f4c-b53f-11a46529278b",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ac6c846a-6478-4dcd-b481-141a31629c7c"
        },
        "item": {
          "id": "00ab9842-d93a-4579-b1ed-13568776408f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e1d3646d-e243-4973-aa7c-637710483944",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f957972e-73c5-40f4-aa57-385694b68bf8",
        "cursor": {
          "ref": "a5ff91df-5ec1-4f0a-bda7-5821043b98f6",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "925ff9cb-34da-410d-90b0-517dc9ce9461"
        },
        "item": {
          "id": "f957972e-73c5-40f4-aa57-385694b68bf8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c469f916-ab2a-4a23-8ee2-f74aaa46912b",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbffb29c-5421-430d-99d8-084c4134b665",
        "cursor": {
          "ref": "9baad7b4-9145-47ed-9639-ca1b5b0f8bfd",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7353c790-379a-4e9c-ba9f-cf67310bc21e"
        },
        "item": {
          "id": "fbffb29c-5421-430d-99d8-084c4134b665",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "95ad6799-02bc-4df6-b26f-e17812f41276",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbffb29c-5421-430d-99d8-084c4134b665",
        "cursor": {
          "ref": "9baad7b4-9145-47ed-9639-ca1b5b0f8bfd",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7353c790-379a-4e9c-ba9f-cf67310bc21e"
        },
        "item": {
          "id": "fbffb29c-5421-430d-99d8-084c4134b665",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "95ad6799-02bc-4df6-b26f-e17812f41276",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe6786c9-48f7-4133-a664-7a7296a6a884",
        "cursor": {
          "ref": "2c8055ea-ae1f-4500-96ea-4db830b41442",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "cd8c8b25-cbe7-4f8f-a46a-3c24d3812367"
        },
        "item": {
          "id": "fe6786c9-48f7-4133-a664-7a7296a6a884",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9dac7508-b4d6-49af-93c9-792b44092722",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4eb3a8b-9049-477d-a6c3-d59e35812660",
        "cursor": {
          "ref": "aeb69a63-a28a-451e-8ed3-5d3910d29a16",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1737d295-576d-4dd2-a1e8-dff2177f3dd8"
        },
        "item": {
          "id": "f4eb3a8b-9049-477d-a6c3-d59e35812660",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "816a8875-1bd8-4762-90f6-5c91dcb7858a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}