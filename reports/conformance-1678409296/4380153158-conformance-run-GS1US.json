{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d29a5d47-7548-4290-8514-2720440cfaa3",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ed2c184e-a5fe-4743-b77e-a277437f0b37",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "da04ad71-a3c5-41db-a1ba-ab1113bda4d4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3ab1bd99-732f-46d6-b56a-018a348908a2"
                }
              }
            ]
          },
          {
            "id": "f903925d-3487-44cd-b5ee-2531ed239418",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fb0a4640-98c2-490b-8d4f-29180e308fb5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4c3a0328-424e-452a-bbb1-16e111935553"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "985ac635-ee7f-4670-807a-1988da69c177",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "aad21d59-e08f-4d60-87a5-14cdcddc3b4d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "303e9db7-1887-40fc-8baf-c0af17d3df4b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9bfd0ae8-19eb-4b9e-b873-cfbded849ed5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a39d2213-ef0b-41b4-ba56-68a59eb86493"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fcf9dfd0-1953-4acf-b975-d0bf29f37402",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cf9d75e6-49bc-434b-ba10-1de48d3d176a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "824dd77f-67f1-4fa7-bc4d-6910a1e58d72",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "82b9b150-1c0b-4d81-8517-91b03585df33"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6cbb27a-8262-4479-b624-d6da38a66b41",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1e8dda11-fae3-4218-8eba-ea0fd2edff76"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d79502c4-ffc5-4e28-87e7-8fb11462f97e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "523f8e85-f46e-43fc-bcf8-08b58f7cf901"
            }
          }
        ]
      },
      {
        "id": "0388aa3a-1a15-47d4-9dda-39732cd3c2c1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "50980915-9ef2-4124-b936-4a998a7f3769",
            "name": "Negative Testing",
            "item": [
              {
                "id": "048ee5b5-4d33-4ae6-b56e-6c576df25f7e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cef670ec-ffc6-4e31-9fde-f2020ec6d30c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423d5b4b-dd64-45fc-aee4-6d1d978f1e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6c24ecb-e12c-4de0-a508-e79bcc0d707e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7178e30-0eca-4a2f-8c69-183e9204de7a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04c899b-17db-4d7b-b7ed-a67a74e8e610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca0cad6c-a1ba-4e73-aa21-908260f96e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f9aa68-c823-4e2a-be3c-b4e44aa2bd57",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed22283-380b-4e56-984b-75cfdf549a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c576c285-24c9-436b-9555-5ab2002b711b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "27d0f3d5-f62e-4880-bd22-17be0b328a72",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "55c42d52-6a1c-4729-94a8-0a0b61383b9d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c973903d-2802-4562-956d-bc7353ed793a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a1f38ef-b5f7-4f1d-b336-de40ff8574ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ee3ef4-be4e-4429-bdd4-c0b12200f1a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e758639-be26-45c4-873b-c1c412fad910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362abd4d-8fd5-48d9-9ea1-d929045f4b9e",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f341d6c-baa2-44cc-bfb9-5f4bfc5fc878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31cbfe31-c852-4513-9b39-c10b087e4ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad98719-90f4-46f9-ba5a-26975256873f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "918be646-b590-42f7-85cc-7427e2b228bb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "41ee7163-de4d-4e3b-bb9f-7dbb44fb99fc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "30621528-047e-4797-9372-40fc178bca81",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a43deaa-8203-4c52-b060-5cfeb145b7c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "94b6d1e9-b4e8-4f34-9ff6-ddb109e14b34"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6d1deccb-bcf6-4371-8204-28769a249607",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "19b7077a-4862-4aa8-ba99-43baed57bd34"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b8b01275-73d9-4339-b043-fae4fa4a6326",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "56ab61bf-736a-4cc8-a337-e26434f8b153"
            }
          }
        ]
      },
      {
        "id": "1047bb0d-9752-4cd1-8aca-51c3cbeef28c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b644b029-542f-4479-a815-cd64b6c274e8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a49fe8c6-cc66-4974-af0b-d2c7f7310a8c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ecfb3460-b754-467d-9004-69580adcd032",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b90cd1-be09-49f2-ad5f-84b1e9a3148c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d47788-7f5d-4455-a8f5-66377be0baf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac7d1a4-6c90-461f-a1e2-8d236cd62091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ff62531-8793-414b-a98a-46f26a842d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c5ca191-411f-4064-a39f-39259b220252",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8960cd-4f8f-4f18-95f9-576974fe7111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1b8faf0-71a0-42fb-86ee-60d402218dd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fdcdbfb-34ee-4ef3-8adc-94b00821875c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9aa61b32-11ff-481b-8533-fa448fd87433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c15e0c-d97c-41e9-b234-b51b4da51908",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba45ba4-f3b9-4645-88b2-00004560b13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c29058e5-1e87-4d56-847c-49d66e7a167c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc42316-fb20-45e0-b208-5b86ef991b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9868d860-4d88-4231-a8fa-1305f287afe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d29fe0d-7cae-439d-a975-043288c81811",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d591189-45ae-472b-8403-afa9b8df6eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3452a95c-58a6-4502-a70f-53ef97698a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec10b3e-5531-438d-95e8-dfb983a3a694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "111c1fd2-f680-4c4f-8526-394f693c3372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed38cac5-9101-404c-b277-3fc4694d695d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "305fd175-be98-41ff-96af-32c731cd4a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "facfa950-905a-46a3-830e-41e82dcddbc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb60398-31d6-4d8d-b86b-327d213424ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd8e177e-4b6c-49d7-a8d1-51ab206f62df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee1a6dcd-9030-4765-933a-b69919695703",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0daaccc3-2c81-4306-ba79-7d3f7bd511fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0f8b85a-4cf5-4092-be96-4c62eba579a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3152e5ea-2920-4a88-8d3d-ae50460723e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aff52238-94aa-4f3a-9d3d-b562c9520d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb1b9a2-c987-4dac-9837-3cfa71ea1d48",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670f5754-3885-41f9-9eab-407f2fb62734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ceb1982-0e4d-40e8-8676-f87c52e0bbe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd17498d-8aac-4a73-a9f1-6bc98d7abce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52fcb323-7dae-4d4c-be67-a336dff0b8c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce8a02f-e495-48ab-b05c-210760d2b44f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b222bc-0406-410b-b1ec-9322ff0d95f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d59880-244a-42ea-b919-35ca940cbaa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca3949a-1f52-4cf3-b94c-6c5a6340e06a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95723713-1983-4f1c-bfac-1da90104da3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0185fb-18ab-48eb-a7b0-249219991394",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "814b25d6-b5c2-4759-b394-74b39eb094c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "418f2b5d-f7de-46f2-ba82-13e3f4856d5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd2cb1c-1e2f-453b-b104-c4bcc6bff999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6219b9b-4384-4934-a36e-6df9f79346ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72951550-9330-4c1a-a4ef-2cfd6d928b76",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aabc1cb9-580b-492b-acff-546b6c6b89f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "769a3198-5d0f-4141-9d82-3d96d3757488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b502ca80-92f3-46fd-b529-a8a0aa37cebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6aeffd81-7e47-4417-8103-81eeeee71436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aaeeb8d-2e90-48e5-ac5f-eacc1543e3f7",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "255c64eb-7448-4872-a91b-4ff153e34af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba5f16f4-f07a-45fe-b96e-01c81f0176ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7bff8f-8aa5-41a5-94e4-d8e34f190671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62afe2c7-b75e-495d-9ee1-48638c53bef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb9fde3-3da2-459d-8883-21cc138a1739",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65601a2c-a432-47a8-aed1-a6378baef38c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c72fbabd-cb78-425d-b470-a4cc8463638e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa092f5c-2bf8-4e3e-80ce-532d6ff4a936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97c9446b-41e2-4279-8158-da4d62a664bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01de46a3-5b7d-4a79-b3e6-b1c086ea686b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5a2622-e3b5-486d-96c8-a54e3cab8ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8711636-d259-4f4f-8556-2bb4767b1225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df8a5039-be5e-4af8-9654-c959662ff9a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0bb44402-df9c-4ad0-a748-d8d6866d22a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9327c089-442d-4617-b200-7a1538cc5171",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e88d3176-47ef-4ffc-9cdf-b61abd805d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "705336a3-daed-4603-a4a1-6802c9bd8343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6fe852d-87d2-4eeb-b2dd-d4c39fef1155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6345f6d-289d-490d-8a96-3d85d851c177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a44c1de-cf44-43a4-98f0-6370b1a5740e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "214a6ea7-1521-4756-b73f-4b2ad5fbf79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "713e10ab-c795-4aaa-b37a-b154aeb96d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b7069ef-a7dd-48d3-952b-3683cfa69232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63e353c9-5d27-4e4a-b044-0f0be998f6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed6eea8-99ba-4ad0-a2a4-5a7d339a3061",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6557a916-b358-4254-ab7d-8cb452b62393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c2613b3-cdb9-486d-b85d-aa23b7249811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c424d2-f911-41f0-886b-2c53e9ced002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "abace7e9-2ce1-4798-be38-e0232fc49de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f4575e0-a8db-48fe-a32d-f51cc1122bb7",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c8d765-97ac-43b2-ba72-1c6982919009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce30a6d9-afeb-4176-b92b-1b5cf5abb9af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df4cd97-057f-426a-9628-77651997ba07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37b3dec3-673e-4c08-b795-97c16fa21821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7990a8b8-f846-45e9-b72e-5d9f95dc8021",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ed1c0f-d14f-44e9-83eb-f3d5f90ed3c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba4fad90-c360-4b45-999e-30a0dacc5b6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3838d5-a617-4b1b-80e3-f83b33f8370b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "04deaee9-8876-46ad-97e7-502ff0be7d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5add5ea5-de4a-486e-8d22-16864660f2e7",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0dbf435-c238-4744-9d6c-78cd31819a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ca44c7b-983d-4972-8d89-e624e82d709f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346175a1-f666-49bf-a92b-e19fd6678200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb00d19e-0d26-4e94-a2e3-5c272b6ba64f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc008ba-554f-4fd7-b2d0-be3b859f13c7",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d295982-8b15-4ece-8f5e-7835fe752410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b9d80da-6fef-4e75-a5e8-61a0642fb30e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de144e8d-c7c1-41be-9769-208de6c3b123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee2f6ab3-e580-46a6-b669-edd0081ce2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fcfd709-2b94-4b9d-8eb6-e0fa396fe4ab",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a7576e-ce90-4efc-8738-2b86d6a5b118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a300a7d-cff2-484b-9482-5fae42a73e27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735ad625-ed1d-456c-bb5f-216ee8f236a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fefdbc32-1f78-4eae-85bc-6dd1a8f95903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33a1683-4dbb-4408-8c55-d78e6b9e40cc",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13be25b-ca75-4f0c-bdeb-1ec4bd816713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4021d6d-2148-4525-a241-3642d6b53865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e56a534b-996f-4437-a4e6-03619fa1213f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "383bef65-f845-4909-a7de-34e58c97c7d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37e7d47-aff5-4478-8835-31ae061b258e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0883c55-fd4d-4b6e-87ae-f25bca680faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11368ec9-d38b-46a5-8c95-498a13dc50a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf1f7a2-3cad-4b26-b83f-ff32abf26449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "77fb7497-672f-405f-a337-4dff39232f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8bb54c1-6607-4c87-8347-5fcddcc111af",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ceee27-9077-4c63-83ea-a43b718b416a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6deb08c6-de09-4b25-99fe-6317289d9784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b03eca4-cdb3-47d2-a759-a51f3545c81a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "74283ed3-6895-4ce6-8cd6-359cfd9cae09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24502e2-4f05-4367-afc6-d561d80adacb",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af609a9-6ce0-4684-b591-03e0575cc576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9ee725a-aab7-4a0a-880c-54685af1ec71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb2af3fa-1ff7-484f-b52e-36d1488dd73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc0dded-3cae-4e79-a6d3-9aff38ab53b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304b2b11-268b-465f-88b1-0333946e2da6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa65125-3d97-42f8-ba0c-ab6a96738379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4efc028f-d24a-4b6d-9f61-09d1b62e44e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921d1fc8-0332-4ce9-9f4d-c081e50b5627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2555c4d6-8c49-4db7-b9ba-bbcbc9b6f45a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1086f3e-acfd-4ec0-932c-c2c87915dcff",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb8f842f-6fde-4339-8d9b-fc98547fefcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d481962-d9e1-44a4-902d-9ea22ea295e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f9e6fc3-c1a9-47c3-8fe4-6fea2b62c330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ab1400a-c487-4b65-bd70-1d3815d0bc4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d1ac5d-6642-46b0-9a91-5421d6d928ad",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a3de2a-1309-49d7-8d77-c17be2848180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e470a512-a0e9-487b-a0e5-babe181971f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27353d52-8b47-4730-8408-20502213b6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c67d07e-211f-488e-a3f5-835481d4ab52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cddccc06-03ca-454f-99f1-1dde9fe3ba96",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6a38a1-4d12-4a91-9603-409f0fc1d854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baf6a750-b501-4783-8d64-e04c1035910b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8afa153-616e-4d64-9551-49d91d720bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "20d5dae0-33f8-459a-b431-d89e7c6b6772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f569eb8-bce1-4548-9fe9-2bb24794b557",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19843e6c-40db-4d46-804a-4b1d7ff4d2fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7955f974-7fe9-4ae1-89f4-738675eff352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eafa4a67-4a07-4d7e-a7f9-b904a2e00657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "80f83a0c-767b-4c71-8325-60475cea4cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d897cb7a-0a13-447c-a33e-35bc3d5846cc",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8c3373-1b7d-4803-a97a-a499899f001d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b210443-4009-40ac-aa7a-49fc2788b4aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3e01cc-be57-4e11-b536-0d85a5fe1fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c17720dc-d0b8-4e81-9b81-f04560f8fb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18cd6793-1fbe-4766-9156-a5bbac2e9d20",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4cd50f-5b9d-42da-990b-8dc9887d5b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2150fa6f-4495-449b-ab7b-78eaf297e59e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50375bf-42a9-4d2d-bfee-50e890dd2840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72f2c6f7-1a8d-4dc9-8015-73d0fda1a7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b35e693c-7416-4d1a-bb43-b6bd9c31e7ef",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "290fcc2e-a2ee-4c7c-9762-985ef7f19833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "036f1ae5-c08b-418d-adfa-844058f8d1ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01a20b5-5c85-42e5-a9f0-03fb396bfedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdf127cd-7330-46a2-b57e-86f6b467c584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38660c0-7fb8-4a45-b03d-081e6891d4b5",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3069f1eb-f792-4ad3-b00d-df7f794b8b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "303b4329-586b-4124-8699-b58fb0bf3a87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408c95a9-bd75-40a2-84af-65d5184fcc31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf350a5a-70bf-4cf8-a969-65f9c20a751c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7b9f96-ac4b-44c0-94ff-06d2c8ae3c09",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e33ce14-3c3a-4d9e-91e7-479b6fb26405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84bfc2f-729c-4bef-b571-321964e6167e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3dab07-3a5f-40ae-a33d-2a7777ff28dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "640f5516-eef1-4229-9343-a714f8e75436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08c31f9-14eb-4482-a571-a5e75c9766ad",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8e5e3d-fb3e-4467-98f2-4dda96a7910a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f389644-dd96-44f7-b967-2ac697a21723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef3f5a9-204a-4a2c-addc-cb34fb45d3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0b461d7d-fec7-485f-9d56-bd2a54958841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd4c636-0ce0-45c9-bfcc-5f73ffa6a8ee",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55dcd43c-e95e-4265-b9e3-ee7d9ad26e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11981168-986b-406b-960b-cefdc51b236e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75863e1a-9af7-4261-86f4-0510874baa11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d87afe81-638a-4b45-9d8f-2a12a86ae6c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8c930b-6731-4bfc-b979-c33b507a6fb9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dbfff85-2aec-4da0-ab33-ca3979f1e59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15051b08-d466-40e9-90ac-6c898fcafee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1eb814-5c66-4d8c-b3d9-c727bcde8433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "99ca3d93-d71d-4b05-a608-ea65abcb5080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824c4cb7-d1ec-4b46-919a-7a78937d21e4",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41a0a51-5f6d-483f-b144-791bea814027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea5c4e4-9de2-46f0-bee0-a02abcf97dcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21dbcc71-0338-4459-b096-8d33a42ba6b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a4bf705-45b5-44d4-8b0a-e67cf61ac46d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf14a86-d9a7-4d7a-b954-3f47057d94f5",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cdbc8a3-9ca8-443d-8dc2-5b85be9eb8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb1c76dc-677d-4a38-955d-6821d718b382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3324dbd-d971-4f6c-a468-601de4d41e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c35d8e9-61cd-4ea0-80d5-387a8594f544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2969e08e-b9d6-41cf-9c01-013926a75258",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0097924-b497-4acf-99e7-8a632f618e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3d09c9c-615a-449e-8c66-8b0641f80d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "455ac7a7-c621-402e-83fe-02cf902ee1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a27ddbed-3b16-454a-87b4-3d79586db04b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae367ad-2cad-4b69-8fea-cbe063df45cf",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05910cd8-98e2-4e95-b68c-056104b07342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e03cdab2-3bbb-4b89-842b-d3dc1dcf517f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a551407c-e4ad-42f1-b361-d81ebe73095b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6faf9672-bf63-42ae-835a-eba3fdf35cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c6ccd5-9bfc-47ec-bf93-576bcb104dea",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "526aef6b-4d97-4168-a3be-b7a69f8a0ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce8abbc6-a998-4cac-9493-932d1091fd3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b17d8484-d69b-4aa5-a4f4-3b15c06e664e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b33ca391-bc78-4a57-b174-2c5a2237d550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376a5c42-9feb-496e-96a6-b61b0e250107",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca59be59-4389-49ae-bcdb-b99f43ef6559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cbdbec5-598c-4e29-b549-34d8ab42d52b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe537b5-d7ea-48a0-8e9a-d21337e1c454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "adfb97ba-17c9-434e-acfd-24e180046ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7816d5e6-2505-423e-8afb-7fecb90e4d39",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f60d84-58e5-4c42-9103-a1e0b3c3386b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b2e5916-b61f-4f49-8ff3-d709f1814e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c5b43e-2a37-49c9-8e01-2620e8a3ed83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "af00a62d-7579-460d-aa23-33c8bdc5e1bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7041de1-bd80-4120-be95-d361843148c0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b352847c-41f2-4c68-a588-cd954fc776cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a46a8cea-704c-448c-a5d6-91fb4113f20e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cfb88c4-4089-4d36-aad6-0c3171d42b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "03cfa370-c7d1-4771-b85f-b734bf5ae5b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796df589-d41c-4238-bcb6-1a6a0addcaa7",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "940cea58-31fb-4a3d-8dfd-cfe262aa4dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef83188c-b477-4894-9fae-7ba3344f7bb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc84ca2-730e-4123-9821-406f4f7c32fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "70b67b07-6f9c-48ce-9f44-282c8309d7f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f7b127d-c7fb-45c2-b62e-176eb9b2a612",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea66b8c7-ee0c-4b06-90e8-85fe68f99cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8c76719-1793-4dba-b419-f562dd7f5dfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8586cf4-24cd-4489-af86-d1c9a918cce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f39b70fe-a419-4325-af85-60aa31599d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "225fc4bb-4195-4b64-a301-4730c20e1e6a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cda6c30-ca7b-47ba-9a8a-8ead7b10b1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "460b9944-0fce-4ed2-8dd5-4b2493aae3fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b9157c-2085-4594-98cb-ae488e2bc9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8add5e4-d2cd-4c89-8dd7-c6d84811a700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc91479-bb98-4536-9751-6eae921aa452",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f57688-0140-404f-a331-6907f9ebb94d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fdf781d-5c52-483e-8d5a-4db182e413f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2391b19-d00f-4366-b454-79de882644f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fbb2792c-97c5-4d9e-b371-a8b8a938a060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869c7d23-4c61-4618-ba38-bf4e8ef6766b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46bd7c7-b22a-4505-ae7e-df0657ba351b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca6508de-f436-4555-a726-b19d40b3c1db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44d434a-1d6c-4077-9d9a-4572e4d4290d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d5534e4-e721-44cc-9855-4170faf034f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385c955c-e1a6-43da-9895-b91a7cfb53d9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "286b8e60-1fb8-4beb-9fb3-899812162f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f81d8a3-623c-4e84-a387-1069d8ebcdde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35cfe8d3-5602-4b16-aa73-f188ae8cc781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b60333f7-e187-4d5d-abfc-f912d0ad94f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74111d9-d423-49de-8925-feb118a14906",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da34805a-9735-4d0b-90b6-08144208f332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cdfa92f-7ca6-44f1-af85-b68aebfc2b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c4089c5-cf7d-40d9-b283-df0ea032229a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3abde56b-2433-4316-be82-a8882860a7c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383fc3c9-4b69-4c09-a47f-7db0b78c1d19",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8852fe-d942-43f7-8496-56fb42ec6031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d068df78-2ab8-457c-8e8d-48a3f247d040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a95911-c422-4816-811a-7ad6cf427378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "264f7fe9-18e9-4775-bdef-dfa6ae6280f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c50376f6-6b6c-4e12-9c80-c9371f0f9441",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90220c2-6b71-4b84-af06-d872a7738e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdd820f7-ff36-4e3a-a3c9-af2d70041c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec57fcaa-461f-4b00-abf6-7c2512b6fff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd4ee736-2259-451d-97f7-39264ad7e8f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d08ff2-20b1-4aea-9e29-ad3a4613518b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "122e9b10-a892-4c0b-944f-5d6fd1bd9782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7bfe487-b46d-4ba1-a98a-80f5d6dd5dcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a808f96d-c9b0-4e3b-8828-e02abaf834c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ef3cded3-882c-4140-a5cd-c5206d8c1ec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021c799b-9d71-4901-a475-e7f57a62ad3c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94ed98f-37dc-45a1-a05a-1e4687873d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c763fe89-e294-4345-8587-b7ec460b95ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e353962-1e65-4356-9edc-a5f5a146a1cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b06f3ee4-cc88-4a5c-b435-069b5d33f05e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0249b94-aa0c-458b-8476-f7475cee6320",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa35925-b7cb-4d87-9b58-81badc6c41ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "533a330a-c6a7-4fc7-852f-e2beef601fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8127240a-6e6b-4296-a8e7-c5846f89a629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cece8e27-d45a-4355-a70a-ddd85e198ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4f4243-a579-47da-a931-2fb5a27b2b53",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad509ef6-c6e8-4cce-88cc-2a15ddbdfb16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5ba6145-1ee4-4319-9ad7-abce62fb67d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4576943d-6390-40a1-a26b-31b8955d1b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f8927e8-3d77-49b9-935c-71e43da74dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5c866e-e310-42ad-9adb-f55f5383cf70",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "850a69d0-3b0f-49b4-a3c2-771bb5580734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1708a1d8-40d2-4086-8164-493d6ee40cd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177b4be8-bcf3-4940-9537-9de33e9814e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "00fddc10-54da-4ac6-ba46-31973321f833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2bfb5e-2b51-4d56-b073-69f488c740f8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be1eca8-ed96-4205-8394-7d2d978f482a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "264699a3-ab9e-413c-8954-9c72f8604f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8c7cca-214d-4619-9f27-fcd5c59578f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9295739b-8752-4169-a87a-4f862366959f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e7fc22-10a8-4b79-b935-55d7ce1e30b4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b632058-48d5-494f-a6df-5b530ff97d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10caa7c2-79d2-4926-953f-881ee4041a94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d608c8a-ea38-4937-a396-0ec969a3ba11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "617eb469-4721-434f-b360-c1e77a37f759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b700354-ff80-4e89-8bbb-cc5dc3fc4529",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8a51e3-97f4-466e-91be-b3a7a25c817b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6715b874-e228-4227-a256-d2037582a14d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79200e7-7e99-4635-9ef2-2e04cfd58964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c309b05d-74d2-4f0b-8cac-5d9718dffe09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3383b6a8-f7d6-40af-b37d-4329908e4e58",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a454e2e4-ee15-47c8-b593-965df50ec56e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88a5c3bd-b915-487d-87e1-3199cce9798d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b64513-7100-4287-93cd-24901ac5ceb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "acf414d6-a049-4fcd-9910-5eb22dbea5dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16b360f-4f56-467d-8d20-a695c0cb47bd",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6aec834-295b-4905-83ce-f279896f1c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b7abb74-afaa-44b0-91ab-7aa8ca7d1f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "819db836-bdea-413a-9c2d-e5368d9ed92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86800ba0-5dca-4366-85a7-a54da179707e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2db32a-0886-45bf-bb22-cc3e9a47924b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa299f80-87f3-4074-be83-47c380543655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dcec801-2b94-47da-964a-bf32875de9ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd774ae-0113-4688-91f7-3a7f44d30c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2764b097-7aa3-4d78-9983-79f7ba693a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344ea154-c479-4ded-84bc-64db1508ff4e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0459ea3-22c2-4dae-9e25-d690d67ff910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "776c50a7-98f7-4975-9438-893a7932e5bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d612def-fea1-4c69-890a-f59aa9f4d31d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "48f22aab-ee3e-43e9-82c9-02778c7c956e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b5ce16-21f0-4a17-9305-fc019954e06f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3b1113-03c2-4d23-9f77-197e9d9f347e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b5fa9f0-5df9-49f5-ba1d-71e905df896a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e39169af-c422-4d6e-a2bf-9d8677e7b9bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "794e61f8-c3b9-410c-8f01-b379047e5851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ecb79e1-47b0-46e1-9780-b66c23284043",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb0f64c-a9d4-4762-8c89-eecd918a41f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce4743a-4f56-4004-bae3-115e3d721b48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a20c7be-a59a-4696-b9fd-fd9e5cbb35ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f69fc62-60e5-496e-9bf2-ee0cdc8c2cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686d6554-e9ac-437c-b090-b90fff9dc23b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa937e0-41aa-49b9-9852-1cdfe63a889f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bcd007d-21cb-4f15-93b0-56b8adb465fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede09232-0a1f-4edf-a7c9-f408ad1b9ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fefc4497-d0f4-4df8-8d48-0cbef103fb72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f22143-561e-49c7-8b66-afb55bf017d2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e00f43-22a5-4fba-86c8-f375b871c01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96996a20-1dad-4fb8-8a5b-0b572966ac42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c85c4a9-8377-45b0-a765-0e362328b473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08631aea-4bed-4824-a3b6-5c6374e599f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9c9d98-3888-477d-9045-546a3a2121b6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd07f1b-6925-4fa8-81ae-c68cd1226344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e46190c3-0d53-4d79-a697-b69c969de0bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d16fd4f-b01a-4a49-9f05-343a309a4621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "65bce5e8-5d3b-411b-b273-9ecec876d088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6ff6eb-2acb-4a80-b7e1-8955308c7c98",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c871f91-c143-4e98-9a74-72663ea2ad60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb66f805-99d0-40ad-a56d-6eab88026f61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4f8c41-f6a7-4f40-a346-3588c2559132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "166f2546-7aff-43f8-b25c-2ca9ce9806f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52254bf-5bb5-4767-bcb4-0daefeb495a0",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e1cd0fc-f4c0-4947-9176-98d9083b6dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe1da94-f60a-429c-941c-e72bdb0ae2ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b027f04-507a-479e-bb63-dff5816a4f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c5aa523e-d674-461a-8a62-c96f4b12a0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73aad20c-9af9-443d-9d16-a3411b4e7dc5",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d32e51f-bfce-4557-922f-88b8069b4dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68389ab5-da1c-4d9e-81ef-64040733daa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f02029b0-fa73-4257-b220-ff88a0ac3a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cc115f3-a753-47af-9b67-254b35dcdde7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fcd8b72-7b7b-4b76-a019-dbd08f85e46c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebea6c24-7f36-4a72-bad3-b83438886e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d36ac71-0c66-4c66-b954-4132e84a1d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1802fc-6719-4d1f-a77b-4bbeb7129f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "46a2563c-b983-49f1-b84a-d24570930eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b976787-3224-4033-903d-43c27c488e17",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a09a140-1d9b-41bf-8362-ad580e4b7679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d5acd9e-a84c-4567-b533-37db6189d7d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d515d3b3-c6e6-4e8c-bc18-78f372531122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a588524-28f9-4fde-81f4-5065a7c7cddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8515dc8-face-4b4d-8b83-50a0a83ed72b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80fd5d31-fc9f-413a-8631-711890660534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "072fb986-2f8b-473d-bddf-950dd8fc41cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ea86a2-40fc-4827-b474-30b43e2b99ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f2b15c1-ebb9-4994-93e3-802e4ff728db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f7149c-ff83-46cc-949b-5e166786ce1f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5630979-a027-4fd4-881d-716474f0c6ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3b6dd8e-5dd7-4627-8064-be12b6117b0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7067498-243e-4520-ae95-cde4e9dc796a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5ced21d-078f-40c1-b5b2-9b832cb6632c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1a58e6-8270-49f8-83bf-fd380d31c05b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d761b09-1a8e-40b2-b336-63ff9eeefd0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "325d3d50-fda2-4d93-a0f3-3558dcbca21a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe28a33-36fa-4236-905f-b6ae4c0a58e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ba232d2e-83d5-4328-92f1-a31b6aca3a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e681a2b3-6f78-42c0-86f0-42582accfa88",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "829dc713-c584-4fb9-a31a-d11fc71c6787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d483eb4-c427-427b-bf38-74a4aa6f9313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa935431-8d33-4901-b302-4b0afa528b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9374907-d71e-43d4-8390-3a495a12d814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d2442b-a637-421d-a026-3dfc728b58b7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf927d5-4042-445f-8209-1e985ba1e6a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be16377e-279c-4bfe-8a16-51dab20a9306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97e2ab1-c9ff-4345-bd03-1afc051a70c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c027bc64-997b-48be-b091-3430afc0ffee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffba142f-abfe-4a4d-862a-f9e47255fbf8",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "095a4a1d-5745-4ed6-9859-e6777b3f33bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbccfbd1-8450-463c-becb-45a3da43c51e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b96b794-0617-4a43-9bf7-16070479d33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "534ccc8a-6bd6-4756-b18e-7474da40d88d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8f1364-8f5c-40c4-adf5-49d16a53aafe",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d457db87-5eb7-4c3c-9f1b-4d2666ea12b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce128e25-ef7a-4fd5-90ef-1282f8aaa371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d324a7dc-eaa1-4a0a-b29d-65e738f7d198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5386507-f61c-4c1b-94c0-f86990029e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc81d27b-5b2a-472f-ac1d-ced08630eba0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3f5e9d-8458-4900-ad42-d950d8be53da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e65c878-374b-452d-bb16-67e68348fdc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc4cff9-b6ad-4753-b05f-0d1f0f5ec906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6c5e0a89-87c0-4f64-a650-aef5c2219789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a275c12f-14cd-4640-89b3-0d0713562dca",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9484fe1-f915-4963-a54e-77f2c08c6be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d99067-a006-4a80-b39e-6e171a0c7516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27537269-2034-4011-9470-d4f2bef61c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5bc79f2-88aa-48b0-812b-33f645f285f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320c3e31-846a-4af7-9f78-f795677194ee",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed860c6-facd-4b3a-bacb-34e4522d83b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a22b8f7-d159-4510-8d7c-4e79bcbb5dda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc16dd7e-312b-4f67-8008-1fe69a35ca09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "835ecf75-14bb-47a4-ac3d-f657c38b0e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb4eac6-b7c1-433e-bfc4-4a303e0e61e7",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f08db6b-771e-4b37-90de-61506d8c37c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b273efc-6638-49c9-b793-bc355d5cc7c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb3cc6c-b88f-4ec0-a125-c3cc67c977ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "478a235c-c164-42a8-822c-23ce3995fb10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23046b87-c311-4a27-bb3d-5d8feaf623e4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "323ed717-e3e5-424d-8d85-64d3dc9524db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "973ef9e5-406b-4657-815a-0a43b4dc658d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5721222-0430-4e17-8f4f-390ba2b876bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbc9d7b8-bc43-4c80-838a-24aec853586c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5068d1-0728-4cfb-a7d3-c8078ba73d6b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2cf232-b04e-4356-84e8-8269dc811de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55417a86-d132-49af-9644-be4d729d3eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "701bc1b8-17a9-4905-bbb5-df77daf3b4ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "00909a5a-2bd3-41b9-b22e-3a339a0e9f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f583721-a2c0-4b91-8424-71ac48b0051c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb40dfc-01e8-4df4-aacf-422a2511d5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af02e862-68f7-47e5-be7b-d577c6810499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23be343d-ba4b-4e0b-9f76-8480af197642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "08dbc559-199b-45d5-8093-1490b558034e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03310027-fbaa-4413-a26c-17c35b8a3813",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7257a531-681f-4d72-a57f-2e9488d5cea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "bf4519cd-9cb6-4d90-97d7-64354c8d0e48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "396c5a23-1658-4969-bb90-43e08162d102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "78117b90-9bef-47e4-af74-4bc63223c640"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e8f497b7-8b7c-4416-b083-b98689fe173f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "92bd9a74-1d7d-48f5-b04e-50f58cc74980",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d86e51-945a-47f8-8888-51f6156308f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e7a476d-8cb8-40d6-9a81-b17c25e3413e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7db85f1-5226-4911-ac7d-e25729f6cef2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86f82bc9-a9bf-433f-8324-3a0f1b1fbdd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee6bd13-cbb3-4d67-b9a8-2625a859713f",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52fdf90-b253-4a81-8c44-0faf1db2fc4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8b7adc2-87a8-4a91-8c2f-badd37243949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f416b496-4cf1-44bc-80d6-8c436906546d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "033b5881-5d74-4ddb-9a25-5e4b1873bc3a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cac4c71a-7c13-4279-8779-431ed07ead83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7c7aab2-4953-4b1e-a209-01f497a38dbe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "91885b0f-2639-457e-94e5-5c6d51169af7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4889bdd8-aa9a-4798-a462-448e9f1fe5a5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4def66fd-c3b1-4f7a-9d9d-e39838a55ab4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "02fb50bd-f52f-40a0-862e-f43f7b96b73d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1d736837-0309-4f24-ba16-308ffd5f553f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3dea6c88-0962-4f80-a4b6-ad6c77675db5"
                }
              }
            ]
          },
          {
            "id": "f70c3940-167d-4263-a520-c69debf7dcf1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1af4f6b3-71b2-47c8-8063-1a067a191af5",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce69ff10-c9b2-40f4-9e91-0552566ac1ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97e1e879-6e0c-490b-975b-1b19d8390a27"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ebd23343-02fc-48a8-ba82-d24530fee925",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cce3a2b5-e050-48df-9300-e33a49891c8c"
                    }
                  }
                ]
              },
              {
                "id": "ee3f3175-452f-448d-8752-807313786d02",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8c8afad-d411-402f-8792-6329ee5d2122",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3514e628-f285-4537-9bcb-0db8344d2bd0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2386a43-422a-4a1e-8465-705e94d556f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7ef00558-ef45-4420-9c1e-ce64c588d86f"
                    }
                  }
                ]
              },
              {
                "id": "763840a5-5ccd-489c-a6cd-135208069580",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5316f607-5799-4243-ba72-9b5934711efb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c261ec89-2e22-467d-912e-5afd6e38e769"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "983b5210-d922-47f2-8b51-f17cac60be51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b0a72b1c-8c7e-4589-bbfd-3ffdae2c0491"
                    }
                  }
                ]
              },
              {
                "id": "a34f0252-9792-4032-bad8-24115e5a0f36",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7f67c4a-f888-4a62-bef3-cb99bb3578dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f7971181-6520-4c0f-af26-7b0286118b54"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66bd385c-f20f-444d-8050-e47d3913fdeb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "18bde9fb-3616-4b49-9c28-38d4df18cc5e"
                    }
                  }
                ]
              },
              {
                "id": "b96fa9fc-0f68-4f58-8e70-9273d7cb1aac",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "65e9b8ca-3e4e-428d-a0d7-be7f33166fb2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e5c4cdfb-1200-4ea7-ab46-c8a81ce1b305"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62fb0fad-bf12-4bb8-b186-f758a5c1c33a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d20c9f52-9ea4-4cbc-acae-0ef168a9aaf0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3fa65472-2fc9-4050-b50c-d2cf66685cb8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f3b46018-d76d-4a47-9db4-9b9c723e1746"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "513a30e9-60f9-402b-aed5-ee9431453f59",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d4f7de7c-a34b-476a-a16e-9142a54e065e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ef4e24b2-8ce9-4516-ac76-b97c2925f9c1",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8a40f865-6c35-41d5-a702-fa4326e07da3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b83c1fc5-5f4e-478f-92aa-25c5030f067f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "92c08234-1427-43a9-8b5f-79763059bd52"
            }
          }
        ]
      },
      {
        "id": "751f2758-1180-48c5-aa0d-eb2ab519480e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8f0b0d6e-dab7-4a09-9fa4-1bb76d5d804e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5d36e7ac-201f-428b-afa2-97e5aff84c6c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "38af4310-06af-4e34-a7e4-e1c993265699",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99fb72f3-70d0-4211-9d67-c8dfa3acf023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d55e6ba3-8324-430e-9b38-b9f46af6279f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b5628e-1e6e-4349-b227-a923ed167973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffff0586-97a4-4301-9e18-84cf6289b91a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95781e7c-d7b5-4670-8f87-f2a269421665",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6abf86f8-29fe-41f7-970e-5f3be76020ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ceb7202-0460-4e6e-9fca-4f0661e0556d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fadc6b6-51e2-448a-8786-c7a9f656f754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "13aede3d-31ed-45d0-8ea0-7da612a095f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9712d71d-c417-4095-8eb0-f087a703f63c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb46d156-c16b-4e05-a8fa-e6822ba9166e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43ed2fc5-594b-4b2c-bba3-a0098e8f05e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f0c79c-0e09-411c-a656-778964d46094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4182fafb-1271-4faf-9437-3b310ff54257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780ecff0-0334-4b6d-81bb-95a14b31afad",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada027eb-575f-4300-bce2-49f055decf17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "660eef81-eec5-41c2-b348-effb93052f94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6827ac67-1829-49d1-ac1b-d6495f7d5bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4781765b-3dc7-46e1-9879-6cce318cb940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f56bb1-ff1d-440e-a499-ba4751677e21",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75047a08-5ed2-4ddb-b97c-fe7fb5ec3a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ae35232-3bb2-4429-abe1-948c1e10d712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643e15b8-93bd-4612-84b8-2a2c1ee5e870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aafc10b2-ba6c-4322-bb46-8a9cc43e8df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25ff976-260f-4d65-8c0a-0dcb9f55da3d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff71762-b192-41be-9bd4-5898136abf8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92e9e724-3d3c-4bbb-9f7b-9909e94d49ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474b3046-40d6-49a4-8df7-c525f6f66498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce6ffa14-dbfc-4a7e-99fe-aca6a710f322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d95a058c-dce8-467a-99d8-1d18702954cd",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c98f9f7-c42e-4c06-ba3e-18f11366f386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6c95907-0463-4ca5-98f9-52b94dda4e5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6528d2-db94-4f04-9153-4b5b88594c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6331ca60-cf64-4df1-9b1e-cbc1fe1a35fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2477638-af9f-469d-9ab8-543d8eab4337",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "008ec50f-caf7-4287-9d5c-e9f1e1d2ff95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "237b494e-7341-46a4-9fda-03656128fa8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ba1bf37-570d-467e-bdbf-7aa7599355df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8790b9b-3666-48ee-81bd-cdd066837f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b8f401b-c39d-45cf-942d-0aa799aaa1a5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ed3c37-46b3-4296-ad3b-b3640f942cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70fc65c5-d668-4337-99e7-955f0127186b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78432993-8fc6-4930-9d20-8e23e48f0cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "948b5941-14c8-4bf6-9a25-89cdf80d05e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da327d1-0a3b-4765-ba5b-ccbdaf1e3e6d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5707ded-2c1a-44ed-84de-4d7b90e261a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d2697a-9d99-4d44-a8aa-dccdfe8427bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6aceb2-c3bf-442a-8073-bb8a7e359a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e47921ac-72c8-4e96-88df-10d13732414c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9606d4-df73-49fb-8925-1b835930d8f3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac967ed-2b9c-4ae4-a880-4918aa80c1f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6980c2e0-1131-4546-a812-48d4710db0ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cca4df3-d7f9-48b2-967d-79604329a9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "89421fda-70cc-4138-8a90-610b861ff0a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f0668c7-0037-442a-a753-959a60e56353",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04107981-bb4a-49ca-b0d4-dfefdd1293c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b6a559e-f918-4c8d-8464-43e9870db432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed2eddf-684d-40d6-b177-8997b0a6f1e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "20c9cad3-00d3-4f84-b699-330a937c2b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94dcae5-b628-4e31-b838-3541b54fe953",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4effe90-8e23-46ed-81d3-38cdf4a46e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "057da95b-470c-4365-903e-8209aef0bc54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96267d0d-3f9b-4afc-a7b6-e8f4c4d77f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "97a4236d-b3c1-40ad-8907-f3e9c52bce01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb11026-c09c-4d21-82f4-018b518e879f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7e5272-7731-4278-b38f-0ddeafcddbf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d89b737-75ab-4c70-aac8-168280cc2de0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dac0dee-c276-4880-a510-dd1fa0914d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c31c460-2982-4738-9d35-366cbb0448cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede6a833-6420-42e4-996f-ea33484e428f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea5b5b8-8a62-47d9-9b0b-838cb6b7190e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2a9e7ae-c498-40fc-a6c0-fca43bb6b345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d231b865-973a-4300-aba7-823967ec80d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd588dce-9379-4dd6-b690-74884abeb0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10db405-4e68-4041-b194-2ee20f5c1e2e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c40a7c0-5808-4cf3-8969-83fe757677ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bcf633f-bb5a-46ef-aac7-639eba966b7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3de5e95-3c26-4460-ad46-9994fca670eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d9cf1dd-fc7a-45cf-9178-6166ae267dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b21dfb-7c2f-4d45-9a71-6bf71bf704ab",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d808d1c-a06f-45e1-b8a7-c44d354f24ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6823cb58-e311-4fe4-a0ca-c047dbc2fe81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905c1cb9-beda-4619-9d9f-212211403e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e037fa7d-c60c-4112-ada2-17f3a9a40114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315928c8-154b-4940-adb6-2eea850da0d0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94c906d-3677-4761-a36e-12a18150ffca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f070d7c-cd45-4330-9adc-6312796d8e06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc319a75-a91a-403e-9e91-b02cf03f6765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef64cd76-f4cd-4c6b-abf1-a0c60a7553b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2c7381-d6f9-4f05-96cd-335ac964a71d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d036ab-e400-4efd-8c91-8902c443d6aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5a5f70c-121c-4b04-b178-efba793fd78f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3d5e67-93ca-436c-ba7d-8808bf04c4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb424d4b-348a-45eb-88f8-71950554ba53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21dcfe07-a2bc-4ed6-8e20-7f2b3f96000d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f2363a-381a-4581-9862-91b0c223d325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca2d612e-96b7-4c17-8032-fb95f00696fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5352b4-1f6a-4632-b9af-881fc4c9ced7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55ff1b9a-4110-4809-9fe1-e5d4fe3c230d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3abca8b4-ec62-49c6-9b4e-460c245e2be7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c02a12-d88b-4d76-8dbb-b35b279feced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f529a80-9958-4c7a-b41c-696a7c6a78b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6e0dc4-13d1-4d4f-a422-bb3d9a33569d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "074369e7-8ed4-472f-9e89-3b03bbbc7771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70eccdbf-cebc-4dec-b9e2-3c1cfc5e84be",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d828627-6c62-477a-b7b9-e6529c25b4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "303b7613-3705-43fc-968a-63a9467ef140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43180c05-cfc6-4f5c-b09d-81c15885b765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdc946d8-b9ac-4a4c-95d8-a0d9eaa35efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1cd2392-f79b-4282-b8dc-d59012fa30ad",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a117457-5b02-4c82-a09f-d2e685e3a273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e849f988-bb61-47ab-bfa7-60edfa17adc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f78761-66d5-461c-bbbc-8ca66112f153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4da0dd5-ac7f-43fd-bd1b-2c6cea4ca90f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb56d22-7508-49cd-9c55-c0ded5446b4b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8c6ed8-0c5b-4b65-bfbd-e65edc22f674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "391568af-7318-4076-9fc8-d3f77dbabb40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b46f55-99aa-4480-b6b3-72e3850b9e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc562e7e-6636-4be9-8ec0-44db73754593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c6b819-f78a-4e60-8525-f4ca92936750",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3df1ef0a-48ef-4e67-9e89-fcea9c153dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bbeefab-76f2-4b68-a263-e481552cef52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188afe42-32ae-4bb2-b2f6-56b965c62b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d156897a-771d-48e6-901c-b89002ac8e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a73a637-b62d-4f1e-97ac-87304186bd7e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69deb07b-19b4-465f-906a-ecebcde1bad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea4730f2-17ab-4502-a252-42f8448fa5f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf66871d-9b0b-413f-addb-287f4e237159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b1e7d84-a5aa-4d65-a6fb-29d68794679b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab830d4c-3815-46f1-92db-b869c0401bce",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a50d34-8e62-44a2-bfd5-817793dba50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3036e20-27f6-4750-a475-229d91cccfe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd28bf8-07b2-4852-8fb2-ca18a4360f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7a04ece-f2c8-418e-b2c8-54b36beb9737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b783065e-36a3-4fa9-a9af-668cd1167106",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138efe67-8650-4aa0-9a9b-fd9f99ffff7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d418e82-1438-4cf5-83b6-2f01e934e7ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5261ab79-7431-4b11-ba8e-3314580d89c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f331e1df-28ce-47ea-af50-19bdaa09d0bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "769e6176-08cc-4e60-92ee-6b7034e1e9b7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b643a31c-6ccb-4ef0-b3db-6355fd04d461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8bb57a9-89cd-4b11-b15b-398e6980042a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bacdd42d-7e59-4b1a-a937-db34cd35c0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a50c1892-f986-48d3-8ef0-2f5a5190ae54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d47aea49-ffcc-4cbf-a0f1-e98cc42f1591",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a118f2-83cd-4b87-a6ae-666f5d288ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a21dfaf3-2d6f-440e-8bf8-f38581255576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29b6e7b-26f2-4447-8ec3-4cbd5765799e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69113de1-d496-4154-a3f5-309c17362a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e60cbbb1-d56b-4b2e-83a8-7e8e747fa342",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec94ce4-2c46-414d-8920-93315e1eee4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23db4d95-bdec-430f-b859-d3f7b0f24291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3457c09-3ab3-42fe-aad1-1fdab25d99d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c25a9fa8-36b1-4cd4-b63f-a69051c1a33b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de48ad4e-45db-4486-8c8c-c1912461e791",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae9dbe7-e3c0-447e-8b57-848c034ab293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abdc12a6-0fe7-40c0-a535-a016425564d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d25aa3bc-5bfa-4802-b2ae-ec349b6b1f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a84bc61-e5dd-4088-b6d2-b086a3777475"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "341d2af1-652f-4255-a59d-84cdeb626494",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2ca306ed-5944-4872-9f90-5a2ce8a96981",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1bc6a4-7a07-4cd1-9ffe-c1bf6f917417",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a3b3759b-3b94-44a6-9361-ddd12dc41a41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed8ae49-0c59-4c91-bb89-5443005ae0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0368764f-85fa-46ad-8db1-15daa9c8749d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dfdc5a9-32a7-473b-b767-52a762c0a59c",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281f5845-1834-4ebf-8d7e-2358ded7e8f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bade40c6-d7ea-4c6c-826f-f5b6b59eb8ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2daea63-e820-45eb-815a-f0de7c6a1dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3808af74-c98d-46c6-b558-b2b722a5bf79"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b88cdf6-6fe2-4a26-8a2c-c096ac5632db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26d26ca5-5647-4f73-b96f-4d704999e521"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5acdd426-fc25-43fc-bb98-51e940b6646f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2749684b-ec04-4c98-967e-133faa2824d4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2341dd4a-73e2-4207-a3aa-ace0a0aac7d2",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f17f6f96-a63e-4401-b4e3-82466489ebdf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "46ccb5d8-8f10-45f2-a715-b98b8f06c40b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "96b8eda5-d6da-43e1-82f8-29d51916888a"
            }
          }
        ]
      },
      {
        "id": "0ad87751-41ff-47f4-bdaa-26b4c081f379",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6f32f557-e335-4fda-8ac6-624dcc84e25c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "405b4de2-bfc9-4d05-9826-3f8698377b51",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b849ee77-f713-4630-93b4-a4ecdbf50a89",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d58f0f4-3167-40ec-b83d-f48dde62e338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9a2474-9063-410a-b387-55f9b72cd349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7462ce4a-e612-413b-b10a-5a3c0622438a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b955dd24-a45e-4543-899f-64abd1c4fb88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae3db327-fd43-4876-9518-fd5c96f425b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160a976b-7762-4ecc-90c7-9759e00f47ad",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c7cd4f2-0608-43a9-ad7d-eb7a7de344d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0976e8b9-ec54-46c9-a0d8-7e263c7e259b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b52dfb60-d673-4b15-b6af-55ddb8f145f5",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "225cc63d-ebf5-4457-8172-8e867ae8b7b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae782533-709a-4e73-805d-d675df051f2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "638b4309-191c-46c6-a18e-9f198939f274",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6533549d-4f9f-4e0a-95bd-e4461e884002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbcc3ac4-2188-44d2-a9ce-022c4650bacf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14700f60-7094-470d-ae39-79ed5a8a4059",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82532623-ffe3-4ed1-a9ae-197d455a74cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd22b623-f937-4c3b-903f-0fd2008c3b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "954694df-2349-4c34-87bd-54b420a3d683",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a39742d-1010-493f-970e-ee212ecffd50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73015a2a-3f46-44bf-a312-4e65e4b99b89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56c72bc-08ce-4fef-9070-b97d9a415197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fc7ce70-f79d-499b-8670-3a5bbd377ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56fd762d-d3dc-4f4e-b5cd-bba3e14f77a5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf91f108-0643-4ce6-8cd6-1fdaeb28eb57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "509027b4-8440-4093-950b-7dd56f26d244"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d396660f-e679-4f1a-9213-b29855f99d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae02bae-1d4a-4d48-a41d-0f8c36080ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4ffce4-6cf2-4e50-9fa9-d5686b0e7890",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920296b1-5810-42d0-8220-11edd28d56cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1e79ece-12c5-4719-97fd-c6025cf754b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0811c1d7-f79b-43ef-8712-d4c57353be61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4281c7bc-e636-475b-bc60-dd7c046a2f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c8dedb-f013-42d4-87e1-02e35af637da",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59111732-c91a-43bc-a766-497a60d98058",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0b1ca3e-b05d-4b9a-ac23-3d339c08b263"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b74e2b8-c4d3-4780-9235-0dea453afef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47824027-a7f1-4a13-8bcf-cb71a8a8871b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e115cc-f39e-426c-9825-ffbd11172280",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b053d57-629b-4d46-9851-a8e5e9ede36e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c513fd2-3520-43ed-8c89-d9c42fbebde0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ed4ff5-4f76-4f5f-abbc-9ac6088f8d09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4f511b0-48f2-4c30-a8ce-6db9538075b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e079c8-d2c0-4e3a-ae31-8f6806dcc854",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22f339b-5b09-466e-9c58-a64f6d278eeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a4ceeca-f453-486c-a151-fd586d7dfb95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5be349-2276-48d6-8918-ab8469e58563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85c1cdfc-858e-471b-80da-d00f79519a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb716234-d8c9-417b-8959-ada2fc585dc1",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7094e2f9-eeca-4b34-aa05-5ce57334bba5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a35fb60-ffc0-4bd6-a418-5698abdd6fbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52024cf6-4d2a-4222-b9cd-54caf728866d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac760a0-ecd0-4404-8eea-878ec2de1ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc953d3-b73b-43bd-a767-76dda6f44de6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b61ed9-0b84-4dfc-bc58-195834db6596",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe4f285b-0cb7-4845-80e6-63106f356c84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e78f14b-22ff-4276-b002-b152133fece1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a5fc70-9b72-437a-b1ec-2918f9e5b9b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecba2c3b-4c99-4944-87e7-bce3ed6cfec4",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "090f4c46-599f-48d6-a2db-a1feda6dfeb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2648097-1d0b-4a64-9aa5-89338bcde19d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b496f4-f4f7-42a5-920c-8c6fada2f4bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f337be63-fbde-42f3-9836-e0b9a405608d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bee25da-13a6-4d8d-9ce7-06fe83f52be2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54f5324-ab4d-4c34-aa5c-124cca08a8ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bca304e5-b162-4181-b2d0-af5c35a72d17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bdbd4a-fbdb-4b35-8fc4-1df0b7a799bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0468529-17d3-4d01-a982-180522ae8bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0caf79a-1cab-47bf-8aa7-79a9cceba2fc",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6d11d6-4dee-48f6-a4ba-5d0b654d4351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "116203a5-700e-460b-9885-6b064cfd9602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c9f2f45-45cc-459a-a699-c36b042b90cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c6760b9-1287-4bca-a0a8-445115cda62d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24e8b91-a206-4d2f-831d-92ebae39abd6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d953cadb-e2cb-4f57-8362-c578291ae20b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d852dc8-3a8c-4ec1-a7bd-6aedf6d691e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c0c8f0-97fc-4633-83c9-dcd750307a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a4fd8d9-3123-4517-a6a1-ff3a4d1a5340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866f9ec6-7f14-4dd5-9190-e6076af5d22b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ebfb00-101a-4b4b-9980-8d281ed4d8e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ed99b3-74ea-40aa-a3cd-90626b5fdf4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65cbb3f8-6a8e-432f-9123-11ab3b661eba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19d478ac-cac4-4af6-8250-7d70ba158c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6cf73de-fe5c-4ff4-b69a-1eeb01f9b83c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd84eb84-5809-4795-9a93-7297de18a117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e812f10-4ee2-44c4-a3d7-e903a240a7b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b49ad2-d690-4130-9e88-a636906edda6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02549044-3e7b-4c48-9afb-45128632838d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a36b7a5-60ea-4ec3-ab05-e644794e2831",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8515e3-fdd0-4cf3-8db0-c76a1d912aa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fbd7839-fbf9-4e7b-8835-9e91595a3c87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "086da00f-f988-4c63-a057-8602f3ee623a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50359684-75d9-44f1-9911-96355e9abc08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542bd1ce-0b7e-4aee-a41c-7f6e4e413393",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5d5ebc-00d7-4f90-8843-b323e11a3165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4fb6fe0-5d24-45cc-8a8d-2721b0b7647c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeae4343-9d73-40b1-9319-d6d1a978d4b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78c0874e-5805-40aa-9010-fc912d5933f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e130a07-f40a-485f-8517-6d930088441f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23169afd-2c41-4db5-80fa-3a79ccd0aba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1005718-43ff-4090-8963-60d6c00d985a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8a6958-2862-4539-befe-56eab72f313a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef54e07-3bb9-4777-a9d4-806c7e848cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8a7578-4a75-42a9-b274-ba473f3ba1b3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715e527f-0d18-4555-9715-a18df797807d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3087d099-d16b-44b9-b013-2c14c2b85dae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0e3fff-be5d-4475-8009-ab26bbee6d41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57b040eb-0904-4ca7-b55a-84410f01b8c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4dd01b-2915-40de-a7f1-9d1a779e2e93",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "950c2a0b-6912-45ea-8153-07dae9eb58a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a352d92-7317-4cd5-a619-2ef271a5cd58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc063121-4811-4a59-896e-12939b51248a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e2bc23-bc5b-4a8b-b9bf-7ddd7b331bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51a05cc-ba49-489d-a487-e802666b1b04",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5307656c-59bc-457a-9ecc-7d085f10fbf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39c0620f-f267-49a7-881e-b7485c5bad08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff0fba1-b1e7-4e69-aa17-e0932b48f716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a0d395-5c99-4c33-8b82-25fef8150b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2219df9c-bc41-41da-9073-f77a9fb94a33",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9585c294-fda7-4291-9a28-de5fd8cf09df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "068b70aa-3262-4707-93b8-f886dbf19824"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "809db098-3519-4d96-9a2b-748c00329d14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab5d7c6a-d30d-4408-9874-1fcdf56958f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8638164c-12a5-4937-90ad-b23fa3ed22bb",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e5529e-521f-4dfb-9010-dc6194044b55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33b30054-06fa-4ab3-b842-568d5577f0ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64cb56d-f239-47c0-8156-ab0c840ca284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a10ea4-0105-44be-a0cd-76b2a3b954c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e4d74f-12b4-4bf9-9377-8e421d155414",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530657cf-89fd-4127-8ff5-3423d80173f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1d0ad0a-9e94-4567-ad66-85251d6f2aab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e41dba3-8048-47e5-b5e7-aeec92f68151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b540595-95fc-488c-86dd-3880f6f0af89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a5b253-96b8-4541-9f43-fbc404303f19",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a408bf62-4b02-4559-9e2c-32159fd49b3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "818fe572-680d-443b-8c39-27bcb4dce5cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aef8fed-1e52-41c6-853b-2c5f1d181be9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a23b588-94d1-4443-9a04-0d3a0f430369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45cb5fd3-8bcf-4964-9b8c-c73f411cea94",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9363f45-08ca-4518-85f8-3bc24ca139d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "451db1b3-e9e3-416f-9e05-af1b8df5edd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "701b83ca-9537-48e3-b2f5-a19fe4cb7b7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff851f35-c250-4fae-89eb-fb3058c4e2ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d80fc64-e5c7-48b9-95b0-6c11f8055ce0",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e414836-dd95-4e35-a9c8-94e40bdb664d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1f76498-3423-4466-b874-238119313f6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8fd89dc-d921-40fb-9416-38095ed8b984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "178bf922-b342-47c1-b746-73a7b854eb47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e95f8d83-1bcf-4053-9b36-15878408c01f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153bf474-9fac-4ac7-a4ae-c1a6411bef08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9eaa1fb-69cd-4a27-960f-f643458e30df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0ed006-4dc5-496c-bcfd-95c8957e7643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "384b1073-7eb5-44e9-a7cd-8aa62dca00bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c40926c-c05b-40ef-b656-051c1a8bc591",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4565ba0-5c4a-4226-9de4-73c425d3c46f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f186997-370a-4bbc-9a37-6bb9f9ce7974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e7426a-691a-4b61-87dc-dfa801a27387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfdfdac0-d9e1-4cd9-a5e6-7e9805f3f5fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df5d364-23a9-43d2-9566-b38e9884e969",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b708f9-e1c8-4a42-af81-9d4121e9cd40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6796eaad-1b4e-4faa-99d4-b5b6b19a04b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e59e8c-dbc2-4ae9-a02a-1b0d6c18a67f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e1547e-b1dc-4c96-8711-a020b25c13bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc60782-ffdc-4e55-92bb-002995316668",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1821f0c6-b4e8-48d1-9c65-564e84732a96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f8cd0d8-0c69-468d-8ca7-07556ff08608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5fe6a63-9111-4beb-bf70-c3c22a4417dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2536dd9-891d-47fe-9628-9c5d65e1d438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1871d508-09d6-495f-bd87-ed08759720a3",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8b95a3-bd5b-4dd6-97e8-7f92795ecd03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e0aeea2-0689-41c3-8a4b-c91c65643e22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b273670a-e897-448f-a5b3-85da4175eacb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd95f217-a2b9-4ec7-8eaf-335faebc46a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42bb12b1-1c95-440f-ae43-0f8c25cffc11",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe680d9-754e-434d-9218-032241f01dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd619117-f356-4af3-ab9f-fad12a20e876"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3040574e-f498-43f1-8b4e-58648c364467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "387d61f2-fe70-446c-8c3e-f26d6d3c4ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590973a7-f398-4214-9a2d-1cdc27a8216d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e9a7eb-1d81-4478-9529-9759c339d084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cff8d6d-7a91-4c12-badf-e591d1d2ec2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30496390-4354-4e25-9ece-5c1228cfed84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0177018b-5a4f-4294-9471-b93766e9fa84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb1b8d8-0b0f-4046-8e3c-161a1f6da3d4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c947ffd3-0b6a-4c7a-838d-d22f86e47442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55954cd7-1226-4e5f-bcbe-d041fb4bf784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02883955-8843-4f8c-97e5-6ec31c976640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c870bc63-8f38-4fa8-b52d-d1ca5383f710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4970ba-663f-4f44-8b73-1963e14f51e8",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89ca0bc-cfe1-417a-8371-279241a6cda3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b64005d2-83ba-45ae-a5f0-012169e292f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f00936f-2175-4c51-960c-8f58ac8017da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "001a76d2-76d5-41bf-8306-750ecd6f7d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14fa3811-2ae8-4ad7-9795-747ebe416970",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "911a95bb-9e64-498c-9535-cc861428b9ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eac4dc7d-5363-43d4-82ee-07fec9bd449d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f838056-570e-46ed-878f-eb190c037bdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9cf4aaa-12a4-4602-bb2f-1891b472b22f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca14472-bbf4-4e64-8c28-996850df3cf1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff847c3-f432-4102-b42f-bacb2a51a196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b71f56f3-22a4-405e-b321-a5e5e36d8a99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0318d0c4-1c75-458e-832e-04763332ab8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40b1a2ad-411b-4a95-bbc8-0dfced325d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1050d848-fe71-4c5d-909c-7aaf12f7c79c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4301ec80-a911-4700-947d-6ea86a55fe67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa8afbeb-fa68-4205-a4b1-8f4e3472b089"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b04f6ce-78a8-41f4-9947-415c74bb077e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ba697ff-023a-4a01-a6d6-ea8d9d58bb5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8acae961-f99a-433a-8377-e1d2383a7c29",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20576119-6b50-438e-9a26-d62711b904d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a142b195-f06f-4372-8c90-5739a64dc950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d15c3bf-fbdd-48e5-8c24-e7899fa90587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0674d19a-95bc-4308-a215-87bbf8dd6800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984a02fb-0f9c-43eb-ac24-b9c039738030",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28cf654e-250e-41e7-b87c-a83b4be46f34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5c8501b-3361-4794-b001-e7bd8c853287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b4b0e2-930c-4bdc-a624-8d1ac793ea65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ec8746f-339e-4dfd-828d-5973af5a7bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5368d1-7b3a-4eeb-9325-be2b01c23341",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c02407-5810-4cbd-9e08-c8918ca9b80a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6442410e-170e-4b32-9269-93b89d73572d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33191640-a59b-403c-b5f2-990915040711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c95d38f-748d-4091-97e0-2c420b4de06a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff112a5-d810-4d22-b798-2a2ef33f0ba8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da00165f-0258-4325-b63c-5e246377e9d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3caa4acc-a83e-478c-be1d-eacc696d1daf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc15d18-c4bc-4d3f-9035-79550907a2d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "300cd12a-2ed6-4b88-8c89-3beaf9668fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401ac6a5-c51e-42eb-a01c-60a5b2cbef74",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c603a2-2ba1-445a-bae9-71c45ed4e78e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95f07a71-a6c6-485a-8d9b-47c491b64365"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b8c343-fbfa-48df-9035-c17238567353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "934e9939-8d6d-469c-a505-a1d37acf0459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a65c39d-4698-4c4f-ad76-3a11d7fdea79",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324acb87-f45c-42e3-b335-84212fa29c9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4509d68e-099e-49c2-8a11-41d1ebe73ec4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba66956-4d25-4c25-b91a-c7a4a40051d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab1b9cb-a5ac-412d-83fe-1111452451e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b69d1df-9849-4302-a946-92ea5104c6d6",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88dbc02b-962b-40fb-8b69-dbceb2ed71f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df1e1319-5dd0-48ee-a95c-96b12d6ccb0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f05e87-0ebc-43c7-befa-64299645cf37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d6ba9f-4384-4513-b24d-6ff249aa16de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bda1962-4483-4ecd-9ca1-6c96148f2e7a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a9c45f-dd3c-4f10-90c6-11f36d39adbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9123f348-3447-48f3-b2a9-92d1d20c63ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3053c3d-b131-4a07-9ebe-2d11dc9f9232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2aff98b-3271-4bdf-89a6-a5fbb020da02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf622742-cf32-4b83-b476-fd0a2911542d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ed5434-4eb5-4b25-b91a-919acfec0a1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01f7a819-73c8-4d86-b7d3-a6fcf5a769a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "366b58d0-9551-44b9-ba97-7f44d196c019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91fb559e-5b2e-4bb4-bfc7-a92a0aaab600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07be2c5f-9214-41a5-989a-f8d47f7e39f5",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a3f599-4fc5-40b0-94e3-374d93d91e5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f34353c1-feb2-46d0-aa57-98a3a36f532a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b635c7-2f72-4dd2-bc57-00a42c37eb18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea31e1f9-a0e8-415c-bae6-e6f17de7bd05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613fb55a-a197-4017-b596-b11e879fdb40",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e70120c8-cb04-4ae0-b4ed-0edb05bdcaf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54456b5a-2efc-42c1-86cf-b9becf31076b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f3f4eb-7f0c-4233-bba2-81391b1e4ead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2577082c-0d8c-42c3-963e-a122d68a42b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b317d2d9-1d05-4948-9090-659732489df4",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a914fe2-7b1b-4a16-9b07-77fde846157a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d65a123-370c-474f-b2d2-cadfd04f6ac1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56d937a-79e6-41d5-ae7e-eba2813885ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b4829f8-4319-4074-b563-6a989d8e2aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c754f38-2865-46af-a5ee-c06866532441",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf00ccdd-63ed-4c77-97f4-869749194215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ba410ba-9ccb-4e2c-8ab3-1be66beeb97a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0bb3542-1623-4dfa-a96b-1a81cd3ccf94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1290b411-5012-4c25-b6b0-1025f4772d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf37927-c183-464e-9b4e-c42fdcd6c9bf",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc948d8b-5b27-49c2-a2fc-973cafba0f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33fd9f81-1b22-4c4e-8d3f-e1df90ea14f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38acd747-5c52-49d4-aa4b-6a9729912003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "627a19a9-5e4e-4ee1-936f-e9f1e2de7b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8a00ed-86db-4e74-98b5-338ec640e51b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78539fe1-31a5-43b9-b93a-44bbc2aa3ddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7afc191-ab1c-4dfc-88d3-e337e28d1cd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dbfd68e-1b12-4fcf-a263-a402d18b4285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03e67fd3-a2dc-4b4d-857d-afe343760c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa43178-51a9-4e8f-a42b-771701b90976",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a866ed00-a691-4820-b11b-c1d16c09bd31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc0e2b5-6730-448c-a1dd-3ecdc70b81d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "480a13b4-71d9-4591-b158-5dafe7416906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e6e3e0-da34-4ae1-abeb-c16179e6fe09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52932ed-b108-4c23-908f-502401dc1111",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905ca3d0-13d8-420d-8ecc-a2c4759cd697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe59c8f-6f07-4996-84d8-ee53165b7339"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39888f1e-b2eb-4f10-abca-82a738eaeb05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "230a0834-0d78-4454-87c2-cb9b6f837ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12491d72-be23-4a7f-b76b-32401899ec72",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cbadfcb-e6b7-4d9a-85ef-d6af4114515d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a740a54-ffa6-4edb-9948-e26b269e3efa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c25d9d36-775d-426e-9c25-6864d2fe22ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "918e6e16-166b-42a4-bcb2-9020b8f2690b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5adcbbd0-c34c-4e57-aef2-bbc479d15d48",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70544142-771d-4421-986b-5cc6b4be365c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02d6ae78-0011-41cc-a4a2-e5351066e1f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2fdbada-6e81-4ac8-9b6e-003fee757518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b97c186-80c4-42a4-89da-3c669b03fc2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a7042c-7c40-4f3d-a769-a47d5617c408",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b9c44c-3101-472d-90e5-085876d3af8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54dfa31b-7cc8-407b-8a6a-b1c67abb92c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2969d8a2-1bcc-4efa-a3f2-0b7df9a6e6c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48d5224b-a4b9-4e99-905b-99c60cd3053f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9804012d-fcde-4840-9913-08d279334fd1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995effbe-e45d-466b-b5ad-67ed1d7906cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d49aa11-dafd-48e4-8ffc-dd9215a772d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "444a6d2b-787c-496b-bc48-afabd0953680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff1bc9eb-15f0-4866-935c-e205d22dc299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c44c21-dc20-45ad-96e3-6fbb1e0807d5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444cb0cc-954b-4456-9e94-a62319ac7d7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be08c7a7-8314-4524-af03-2d7c2fbb0402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "011d08b6-dea1-427f-8246-b678cef1a6fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e5de7a8-a62f-47d5-a300-501f28063ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cabfe80-c790-48a9-b023-0b5ad9d319be",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9907243a-77a1-4dd1-8441-46ba13390ddb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c866418b-f7bb-45c0-826e-f1f4df468fc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b65c6f-ea52-4cc6-a952-8325d0f4beb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78f02053-0a68-4be9-83c6-0194fbb56b29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bce6117-e9b0-4f5c-b37d-19df3d802fc0",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103cc119-b449-42f9-8c2f-569b242c4ff3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "950948cd-ddaf-46fa-88dd-9950c6278082"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1b70d3-c2e0-4dbf-9247-72bb6c3e5d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed14160e-b277-4c8e-816c-c18b39844cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5363c799-5c92-4792-95ba-bd69eae0b7dc",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281c36d9-2340-49f6-a382-a64d0ffd35d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5efc4de9-a267-4a69-85b1-55fae795daf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "640aa3d6-7d9e-4dca-bd2a-594d60c555e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b83cce-5310-4896-b318-6c602bb9937f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa89220d-2711-4121-9458-1dba51917050",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f73b79f-685d-4233-bc4f-c2030b34dc07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25fd044a-db59-46f6-a240-80b1cc98f09b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b387804-95db-4614-80be-42fb02822819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bf52d21-ae59-44c5-8b7b-1775e701ce97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0a6703-96f2-482e-8c4c-0b13e0025964",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf5e478e-10e3-459a-989b-51baef24c548",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea0375c9-a28d-4ac7-ae7a-04e9beef9021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d9e3e81-feed-4ae3-bcf4-7253df6cfc61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e5580a2-81b9-49ea-9516-5e403c2b9826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82cf55ee-1273-4a7d-85d8-1a2a8e2ebfa4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88891ba7-131f-4437-97f0-f2417ba0521d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06e26972-c8fb-4005-972e-892a89f56cde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83645125-67ac-4fbf-b3d2-9d220f632fd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db0b1a94-c965-4da5-9195-908fe3a7b12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc70f9d1-cfc9-43bc-bd6d-8578472700b4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3eec3f-fb03-4de6-8a8f-e2286139b772",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "645da6d6-7869-4e86-92af-6d64200cc71b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b3c091-855d-49f0-a5ce-10cc15fda560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a280cfe-18fc-4881-9647-aa2b777bb6fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de32b70-3e59-4544-8357-836021df59ea",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b5a50e-12be-4e9d-ba17-f442bda1c07b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe70f7e3-628f-4559-9605-c5db331c23c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d6665e-9967-44ca-8cf3-3b7a71d7fa6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1e97fcc-4693-454a-a893-6984a755b713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2b5f37-0325-404e-af3e-ae7d41d53e5f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58be67d-4614-4ad0-b2bc-f56a584541fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02fa9f82-81ce-43a0-aa2e-0787fc025800"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e64bbe-219e-409f-8449-d3497d4f163e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd99a56e-ad79-47cf-95d9-e7f702f4efd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0c8a8c-8624-4554-95f7-baabf7557ed5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b56aa7a-ed63-4f00-aa5e-d74e57a889fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88af6927-b26b-4cb6-8b39-98956b26e140"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1236c04d-5ddd-4165-8a06-df194f886a2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab2c025b-6e6e-4fe4-bd13-bb74f4681e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5aa1c2e-d367-44d0-868a-883fb6b8aa12",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f6b3055-bbe6-4bee-8204-75a610664483",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e0af30f-9255-4dcf-b039-b8e7ceccd8c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f306e4ef-2eb2-429d-b8f6-5d1b68706181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69aea663-2c75-417b-98c7-a531440a0a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99ff17b-5c83-4aba-95ac-2fbe83555410",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a9de5f-83b0-4adf-a679-ae5416cae32b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14ecd3fd-3e48-452a-883d-01fc10b1a056"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08641e9d-7b81-4d25-a035-b719b4ac828c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "646f31c7-1962-4a55-911d-812b40bbcae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13fe35a1-3636-4b4b-859a-b3084be2a916",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8139f5-d4a2-41b0-bce9-33b2ed388d96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb31b508-107b-4945-906e-423e4e524167"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88fff93b-ae87-4b40-9b66-eb5934f8e1f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d55d77e-84da-477e-906d-b6ed303795c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f50e9b3-564c-4c3d-adb0-a8e108730703",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f0d1552-e544-406b-b16b-ad5a7e9343bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b9c4ac5-9a89-4969-bf05-0be2151070da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "058859c0-6bc9-4635-b8f8-054b57e7914f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a23c0530-c0fa-4eef-b9ea-54ac24ffa5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44966c2-8996-434f-8471-d56951f67e57",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0146423-7411-4c95-828c-7fe793d60a1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "614529a3-a0f7-42d4-a252-d4eec7ca3aee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85bf9455-78f7-4bef-95c0-63250f863b76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c7dd2f4-4371-452b-828d-5e02067ae16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeed891b-ca63-4602-8057-83c471b88e1d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be1d3e18-1e87-445a-8654-1b65db51e23a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c37e487-ee79-4a9a-9f2c-f3dee539fdf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7fafb8-efdc-4028-b3fd-8c25ccd91343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98d54248-8e6e-497e-8f9d-0ea2561d6432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e4ee02-8ac4-4239-b9b6-8042d606b65c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70de1b34-1646-423d-8484-f296cbe37af4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8945624f-fc3a-4cab-bed7-0ed824c73794"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5980229-38e8-4b8f-bf62-ab00de44db2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a05350a-a144-4b04-b3ef-be1603f21a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68edf3b2-8977-4bd6-aa4e-cb039a22e175",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbdc2df-dcf7-4851-9240-beaa172c73e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de9e83dd-9421-4707-a7e8-55a72b854595"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acfa8b8f-3d5f-4317-a9ee-8b4f7c9672c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb0cd98-948c-46fd-b836-3de4cf624f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2af10b-8718-4a88-9fdb-d461281fbdf4",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be13d01-ea14-45c8-a9e3-73b82132f7f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "445f6101-db1e-405b-9a40-df8d40815178"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45bc1d41-a391-4bbb-87b3-f8aa34133089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20a2396b-5d24-4854-b232-ed8ad052790c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "456e96d1-916f-465c-9d84-f936069b94c6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50902dff-174a-4caa-9221-2f0f81cc7a81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cb6bdf8-ab78-4d0d-b980-9cfabf9f3293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61194748-5d22-4878-a15b-27e16414a2b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da717fc-1a2e-4717-8255-9cc6cd80c728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e3f80a9-08dd-4f24-9366-49273e62bfd5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "588958b5-0ead-49a6-bde0-bacc02e609dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4640048b-41c7-4a33-bfa3-4e7d0b624256"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6574992c-5f32-446c-8c5e-77680ecc634f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daaf6153-6d6b-4dbb-8b47-266a738e2c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d8ce591-ae5b-4d4d-8e03-68277e449639",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d4e783-0795-4339-9284-0ab5e518c34e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07718b18-fd42-470f-a4f5-ff74ec5dcac3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c28cb93b-a173-4874-b1a8-abdcee79fbce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d03fc547-346b-4183-9f64-cce32e101fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ca87f1-bf8b-4dbc-86f8-93e3abf0c930",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a40f313-3799-4267-bc12-5db5ceff73cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3936aa0-ec00-4916-b04d-f19f6ada5e99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4ffd2a-088d-485a-9689-e5cab7956f25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ce493d-bf6e-4409-acc6-56f08a830f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539e5b65-163b-414f-a95d-daaaf1dca1a7",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3ea87b-d730-41d7-8f35-d3086b1c613f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89bf37cf-5217-4f5b-82d9-3ec090727bcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffa250b-3265-4555-b84d-6d2fdb711328",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3fb89a2-07da-447c-bd8d-7c637b6ec64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540b6035-c4ee-4182-9f2a-4792c4a2f109",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d592d50-a4f1-4ec8-bba8-56594b222d29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b866e3b1-0c09-408e-a0b2-c29991dcf121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "849e2162-663d-4d65-9a97-9cc40e838e42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7228c8ab-5928-4bd4-a33c-65e2667591f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "208d006b-8bbc-411a-bee1-343a6ebdeb58",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b2867d2-1d7c-4634-bdd0-e1610eaf6ef7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e0dc0c6-e9a1-4296-a23f-f3c64aa53d46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e236a12b-139d-48e4-966f-e5f20e48a8d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a173c608-351e-48ae-8117-816ecebbc980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a41c7e-acc1-4533-ad14-ee13a778d34c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a959b1-531a-4150-9dfc-0ec3c41c718c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a31df001-3c47-42e9-bd8a-5f6145d5a9b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe2708a-cc2a-4244-8b7a-2a7a927d59a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f64c777d-c49f-4003-9fea-22ca77bb3336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7340828d-0449-46e8-bca3-ef0d39cf9d41",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8077169-27d7-46fc-9c2e-be695c31d369",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc0725a3-6a0c-4d7a-9ff4-d8160743176e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a83d17-3297-4167-b682-eaf820925f59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6196ec9-e831-4896-82a0-8c0688da2c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1058d152-87a8-42cc-b386-982e824fae8c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4d1184-ff0c-4235-85dd-cfca60ef1a77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "764bfdc5-a966-416b-b74d-36b459fac761"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e94032d-ec1b-4fe4-82f3-119009faa3db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7f7c542-7a89-4738-b2c6-3c4800d6bd8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee903a7-da05-472b-a632-c4b9b9d84767",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d3546f-e9f0-407a-b867-42523bb31853",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a834709-8239-48ad-8136-3b67b94c99fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81bc9650-5799-44b5-b703-56ffb203b27b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "811b52bd-dbab-461c-a75d-ebe504b55137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a164b3b-90ec-4289-b962-21df6c12214d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d210c69-e3c1-4f3c-9cd9-2aaaf9f0cbe1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8324b65-f2d7-4108-9dca-42e871ef1823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49586ab5-233c-4b92-80b1-039850840088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a61acc-3121-4f76-a1e9-634adbe58a07"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "83ecca49-8408-425d-8072-1df73046e2d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5d4bebc-cad8-4ec9-8f46-df980db7cab4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "675318ba-f343-4edc-b213-6f0ebceb0aaf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "34328038-f887-45c9-b5c8-f8dbee065149"
                    }
                  }
                ]
              },
              {
                "id": "2f883809-3632-4e95-975c-b89061b95372",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b17d86b5-4d81-494a-ae35-5de7a6b5e99b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "787f03ef-e390-42f4-8a71-591f49687d2e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "148a7cc4-b0ac-441a-8b3d-d481afa32733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8efa1b4a-ce09-4429-b5cc-7139641e8067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70631976-3e20-4a65-a89d-90691c8587c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe408c9b-0ba6-4037-956e-940f31f3f94d",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0755df-1fe1-490a-8bda-17372d5be94c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "044d8c8f-f20c-4b4e-9bc4-a190903aee41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f1d8e43-4bec-45ff-94d7-ca3ed2ae92d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8eb21fec-606f-4796-8da6-fe4cf2206574"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0109f65-ed6b-40d2-8e5b-4b9ae47b1349",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6b21aaa-ef8a-42e3-9e53-b553cb4256cc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e509b806-70da-419c-8909-eca63352e95a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53a830bf-b747-44d3-925a-aff7a3a77982"
                    }
                  }
                ]
              },
              {
                "id": "defca0c4-19b9-4842-97f2-1b24372b94a1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "dae13b0e-d258-4424-a84a-f27fc572d2f0",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58cc7ac-6dad-4d2d-a288-91b2868a9ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "421a1f36-c9a9-45b4-a9ec-e6e81e39213d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c946ad02-bb86-420e-a440-1c66f8df7673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6c32774-a5db-490b-95ca-2a2e93dba0a7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3bdd2be1-aa18-4ee4-a1ed-d92d8e700df3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4637f9bd-fcfa-407e-b5e0-66414a20929b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "60116cdd-3793-45c0-8cf0-baa3f9c9ea3a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "97f6af58-2459-4b9b-bbad-2605570e88da"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f8b2a07-b09b-4647-9c21-1ec566a4c8d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b58272e-88d1-4c72-89fe-5b82d14ec45b"
                    }
                  }
                ]
              },
              {
                "id": "6a3e54fa-bc7f-4b6d-bed2-92706db8dedb",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "45741ce4-bbe7-4b6b-b8d8-748a2f663c40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cb72737e-8137-40bf-85ec-00dcebe4fff2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8046c0d4-7a1a-4bad-9013-56d1d31e00ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "59f3a01b-831d-444b-9bfd-c4973a3c8676"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e124e81-ae70-42af-9341-90b66be2dc78",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2bee6efd-7686-437c-ba35-80257d61d4c8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "140e18d2-d287-4bf1-810d-6bf58abb008b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0a32936c-db76-48c7-a995-1b423906e378"
            }
          }
        ]
      },
      {
        "id": "b6560ceb-a612-4035-be01-7d00f5679298",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "38d46e75-923a-4daa-b0f9-e8bb2282d730",
            "name": "Negative Testing",
            "item": [
              {
                "id": "66c78edb-0a40-40ab-8e22-3be3306bd586",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6f7333f7-c37d-4ba8-8bf0-0d440b39d2ed",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "419dd88a-874e-47eb-a43d-d1cb4baf52a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "43dab251-f1e5-4076-83d3-c277f3c80ccc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23434eb2-a9b8-4de1-b6b5-b5bc18b2c113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1556d972-4d22-4e61-8056-5d698d5bfe0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17f0d77-4c55-4e7c-a4af-8fdc3ad7ace6",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d07e9c4-0ddf-40fb-9367-047200f78962",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "92b92a15-5dfe-4a9b-a680-6af7e6bfddf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e35b78-0360-401c-8aed-68775c94fdb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9addc3a-8536-4dd7-b719-fea9f193704c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3240784c-bd1c-4687-8ecd-df1746e69d3d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9fc7c612-d1cc-4b1e-8040-8808526e2c7b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "913f8fa4-6939-40f0-bbb3-0040b4d4873e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "772014da-704b-4b97-b7bc-498ccea9e6d1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1fc032c1-80e4-4e2e-8897-61e150c2ec69",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5253f590-d157-4708-bf4b-f615f2d133fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2f653e1-2520-415a-9be8-85b638e499ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "96d9e95f-1f5e-454b-a89f-c40ffcf77e04"
            }
          }
        ]
      },
      {
        "id": "416fae1a-645b-4daa-b069-d736e36da364",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0e04f8c0-2b9d-44b7-ab64-5cde30b0e3f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9c8fa0d8-988b-46b3-a665-ebfeb4661b14",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "43fd42b3-3a26-454f-9d1c-ba0511cbf2e9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e865b902-671f-4ed2-8465-34c77ae524c8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10ac3dd0-9e6f-4a08-adca-2046550ab0a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a21f2a-7b3d-48dc-bd8e-6e89df8e8d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4b99d15-1e49-47c8-8a0f-25aa24382f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439be2ca-64e1-44c9-b231-a8b4f036da9c",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f24e38-720c-4f23-9883-5527ec06d603",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "708e1c7f-15f7-44c3-846c-534c629a03e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b66d48-de16-4818-b65f-5fbdd2852c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "363f4ee6-12cb-4aee-9a99-e5ca59447be9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58f06d9c-5142-4ff8-ad1f-8337154b7edb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd7cc996-cf98-4fdd-8132-321d6db3ca5c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba886fb8-65ff-4cad-b565-b0cf6a49a57d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93ffd65d-fab4-4e31-a565-c8b48889209f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8c7ce951-a8e4-4ac3-931c-0ae3e1c78dc6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3bff7fb2-c6f9-4d6e-8c50-21c46e34bf88"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c24fe966-308d-4681-8d95-53cbfc5f8aa1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5c289f08-26f4-47a3-956c-fc4de808e4d2"
            }
          }
        ]
      },
      {
        "id": "9e1f539e-118b-47de-96d7-b03b3d5eca05",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4cd82178-a248-44a4-a6f7-9bb902627a18",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e12ede79-b1c6-4aad-aa20-e8b6810d38a0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "752c3300-efd3-4a3a-9d32-c611bfa01cb6",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb9cf054-79d1-4385-ab88-e4f3cc2ec2b8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca7408dc-0a8b-458f-bb47-a5a777f65fa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0133c8-634d-42f6-bf74-446f65102376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef2fcba4-3b08-464f-adca-57b189f68a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb62b20-3053-49e5-b379-e42c6eacd3da",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6761ba30-d2bf-4379-926a-e72d76c63457",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4873965f-ce45-4101-a9a3-1f5f5db56fc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a32d25-95d5-419d-a239-2dcafcd8a808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1169fe71-84eb-4085-8fa8-fd29fc6647cf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "903cd888-774c-4692-a8fe-c27b24e73c50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68c283f9-65f1-466c-83e8-09b6d9fc4ec0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8074857d-d699-4722-9780-a27af84bab9e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "09c5fced-0326-4eaa-9fe1-3d205057fb26"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ae95cbb1-47c4-4ec0-b39f-95dc67c4cf04",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3d509bfd-89e0-41a7-953f-e2831922fb8d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0bc966c5-2687-4f29-91f4-4c26d417b321",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c531efa4-856b-419b-aca4-19d9f25feb24"
            }
          }
        ]
      },
      {
        "id": "2dde1ad4-041d-4d6f-988c-a0c52b702912",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "183e49a7-ac7f-43c7-98cf-b43dd54002b5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c53877b-ccfe-4228-b716-86fe796389ce",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6e56582e-96c7-405b-ac6d-8a27a7570872",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "829ab904-3e3f-40e9-a6f9-71ad5de89d6e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5135d268-9e01-4dda-840b-887d65be23cc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 316.5289575289575,
      "responseMin": 8,
      "responseMax": 6305,
      "responseSd": 853.3626389542767,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1678408923112,
      "completed": 1678409019010
    },
    "executions": [
      {
        "id": "ed2c184e-a5fe-4743-b77e-a277437f0b37",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "63d5fbab-cd53-43f8-b03e-b89b755d7020",
          "httpRequestId": "11b19cc3-f341-45c4-9eea-209095af79b4"
        },
        "item": {
          "id": "ed2c184e-a5fe-4743-b77e-a277437f0b37",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9ca57a10-083f-4189-ad79-3fa938fe26c3",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 0
        }
      },
      {
        "id": "f903925d-3487-44cd-b5ee-2531ed239418",
        "cursor": {
          "ref": "4db24034-7acb-46b4-9be2-94aeed982517",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3ce9fa07-7f32-4de2-a1a1-7e7e6fdbdcb2"
        },
        "item": {
          "id": "f903925d-3487-44cd-b5ee-2531ed239418",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e207c3ff-5b4e-4c38-952c-74ee32e9f960",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "303e9db7-1887-40fc-8baf-c0af17d3df4b",
        "cursor": {
          "ref": "4bbe8644-a9e6-491f-b000-71f05ed16beb",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d058d554-0671-4440-b5a4-cb76b29b64c5"
        },
        "item": {
          "id": "303e9db7-1887-40fc-8baf-c0af17d3df4b",
          "name": "did_json"
        },
        "response": {
          "id": "4a1219b2-c371-48cb-91f1-f68b965f1c8f",
          "status": "OK",
          "code": 200,
          "responseTime": 4547,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef670ec-ffc6-4e31-9fde-f2020ec6d30c",
        "cursor": {
          "ref": "a754ce6a-7da5-4d2f-aa50-0fd69827bb55",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b4073385-c780-4ed3-9f95-0f25e9dc6bcd"
        },
        "item": {
          "id": "cef670ec-ffc6-4e31-9fde-f2020ec6d30c",
          "name": "did:invalid"
        },
        "response": {
          "id": "4063bb2e-828b-456d-8a33-84d6c5a47c1d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1346,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "cef670ec-ffc6-4e31-9fde-f2020ec6d30c",
        "cursor": {
          "ref": "a754ce6a-7da5-4d2f-aa50-0fd69827bb55",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b4073385-c780-4ed3-9f95-0f25e9dc6bcd"
        },
        "item": {
          "id": "cef670ec-ffc6-4e31-9fde-f2020ec6d30c",
          "name": "did:invalid"
        },
        "response": {
          "id": "4063bb2e-828b-456d-8a33-84d6c5a47c1d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1346,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "d7178e30-0eca-4a2f-8c69-183e9204de7a",
        "cursor": {
          "ref": "171ba573-404e-4b38-a178-7da7f2d9e839",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b1507a3f-3195-447b-81c8-86db91c8a892"
        },
        "item": {
          "id": "d7178e30-0eca-4a2f-8c69-183e9204de7a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f2cb1cd9-e334-4e19-9c63-931443478574",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f9aa68-c823-4e2a-be3c-b4e44aa2bd57",
        "cursor": {
          "ref": "3f0c3cd0-70a0-40cd-a72e-df472b970213",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5ec5325d-3246-4421-9c47-c408bc4dd162"
        },
        "item": {
          "id": "c3f9aa68-c823-4e2a-be3c-b4e44aa2bd57",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "00336aab-126c-47df-8017-5641b317e11b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c42d52-6a1c-4729-94a8-0a0b61383b9d",
        "cursor": {
          "ref": "7575e017-0b01-4804-b445-0a535b69f55b",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "43c0d98e-dc57-4af0-b75b-aac97ee3783a"
        },
        "item": {
          "id": "55c42d52-6a1c-4729-94a8-0a0b61383b9d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ccbd5260-466f-4607-a7ba-89b71bc59731",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 128,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "362abd4d-8fd5-48d9-9ea1-d929045f4b9e",
        "cursor": {
          "ref": "ba87c3df-f086-4824-a3ce-b425c9e6eab8",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "083b142e-7b83-4eb8-b8bb-9dc9c9273459"
        },
        "item": {
          "id": "362abd4d-8fd5-48d9-9ea1-d929045f4b9e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "cfb6ca66-5d82-4d4f-baff-9e43d0cc690b",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "362abd4d-8fd5-48d9-9ea1-d929045f4b9e",
        "cursor": {
          "ref": "ba87c3df-f086-4824-a3ce-b425c9e6eab8",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "083b142e-7b83-4eb8-b8bb-9dc9c9273459"
        },
        "item": {
          "id": "362abd4d-8fd5-48d9-9ea1-d929045f4b9e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "cfb6ca66-5d82-4d4f-baff-9e43d0cc690b",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "30621528-047e-4797-9372-40fc178bca81",
        "cursor": {
          "ref": "eb954a39-d960-4727-b45c-f77fe299dc96",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9a032fb3-5754-4ee6-a84d-84f65c4c1196"
        },
        "item": {
          "id": "30621528-047e-4797-9372-40fc178bca81",
          "name": "identifiers"
        },
        "response": {
          "id": "f7742d5f-125f-435f-9701-072d91fc7523",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecfb3460-b754-467d-9004-69580adcd032",
        "cursor": {
          "ref": "af7b54bf-b21e-409c-bfe2-f92d6cbf2148",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3a60296c-99b1-45b0-be84-8936687a454a"
        },
        "item": {
          "id": "ecfb3460-b754-467d-9004-69580adcd032",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "16b199d8-5331-4aab-b982-08c930d27baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecfb3460-b754-467d-9004-69580adcd032",
        "cursor": {
          "ref": "af7b54bf-b21e-409c-bfe2-f92d6cbf2148",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3a60296c-99b1-45b0-be84-8936687a454a"
        },
        "item": {
          "id": "ecfb3460-b754-467d-9004-69580adcd032",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "16b199d8-5331-4aab-b982-08c930d27baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c5ca191-411f-4064-a39f-39259b220252",
        "cursor": {
          "ref": "e30b1774-c4fd-46e3-a1c0-68eac5641b49",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "65488ef9-c038-468d-b8d8-90b3b4579bf5"
        },
        "item": {
          "id": "4c5ca191-411f-4064-a39f-39259b220252",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "bdcfb2a9-c9cc-45a5-bceb-b7951ccfb100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c15e0c-d97c-41e9-b234-b51b4da51908",
        "cursor": {
          "ref": "13b6374a-f903-43b0-80e4-0440cd140645",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1b7d0c8b-a4fc-44aa-a3f2-f2e8dcdc9c1b"
        },
        "item": {
          "id": "62c15e0c-d97c-41e9-b234-b51b4da51908",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6be6882f-3246-48af-bcf1-f57e160d2795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d29fe0d-7cae-439d-a975-043288c81811",
        "cursor": {
          "ref": "9a5d4d01-5607-45ec-ab66-b535646b5140",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f0d99580-9dba-496e-b50d-015c40eefed6"
        },
        "item": {
          "id": "3d29fe0d-7cae-439d-a975-043288c81811",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c6d132a2-fece-4fed-a152-ea2cbe0ee7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed38cac5-9101-404c-b277-3fc4694d695d",
        "cursor": {
          "ref": "391cdf45-b32a-4748-aec0-869f0efdb2c5",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "10283aca-e195-4277-b996-a9aa6e019425"
        },
        "item": {
          "id": "ed38cac5-9101-404c-b277-3fc4694d695d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "508b08ec-968f-47c2-924d-3fd208426221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee1a6dcd-9030-4765-933a-b69919695703",
        "cursor": {
          "ref": "ce0cc94f-a440-4b8a-b789-6f1ea9066ddc",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3f705a48-8baf-4890-b3b0-fc3df777922d"
        },
        "item": {
          "id": "ee1a6dcd-9030-4765-933a-b69919695703",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "22707936-d3cb-4e98-82f9-225e5b33092c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb1b9a2-c987-4dac-9837-3cfa71ea1d48",
        "cursor": {
          "ref": "b666dfcb-65b7-41b6-bc47-8e096622b814",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "47913267-2fc2-41a2-87bf-15440708d3a5"
        },
        "item": {
          "id": "2cb1b9a2-c987-4dac-9837-3cfa71ea1d48",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "23281f35-9ff0-4c7e-90ac-4f2e85ac9c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce8a02f-e495-48ab-b05c-210760d2b44f",
        "cursor": {
          "ref": "c332f0db-4645-4d10-b9f4-ac0047125dc8",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3857d8b9-5a26-4129-99f4-6cd3e148ea0e"
        },
        "item": {
          "id": "5ce8a02f-e495-48ab-b05c-210760d2b44f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a13e4358-59f8-45af-a8de-2a4940634b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0185fb-18ab-48eb-a7b0-249219991394",
        "cursor": {
          "ref": "d8253838-4ae1-4cc5-8517-8adaa72c9240",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1ff61e90-6c85-4219-8f7f-72d3ebd691a1"
        },
        "item": {
          "id": "3b0185fb-18ab-48eb-a7b0-249219991394",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "05f8de71-c68d-43e7-a274-04a5bdb33d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72951550-9330-4c1a-a4ef-2cfd6d928b76",
        "cursor": {
          "ref": "b8d39bb0-834c-482e-be4f-e3047b9c7b8d",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c2868a9e-edfa-4a55-bb09-2fd4de22795b"
        },
        "item": {
          "id": "72951550-9330-4c1a-a4ef-2cfd6d928b76",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6a553c09-63da-45bd-a352-468402536995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aaeeb8d-2e90-48e5-ac5f-eacc1543e3f7",
        "cursor": {
          "ref": "400995b7-58f6-4019-8fd3-50705552829d",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "01a7bcb6-f0da-49e3-b49a-50f81c8e50c5"
        },
        "item": {
          "id": "5aaeeb8d-2e90-48e5-ac5f-eacc1543e3f7",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b7607a4f-305e-4006-b838-56ae8c615888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb9fde3-3da2-459d-8883-21cc138a1739",
        "cursor": {
          "ref": "8790a3de-b8e9-4f26-a908-23bd77e03ec8",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "281a8995-0d3e-4dc1-ac23-7ba971e1e04c"
        },
        "item": {
          "id": "dcb9fde3-3da2-459d-8883-21cc138a1739",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8872620e-f6aa-4a72-a98d-3f2ade210ffb",
          "status": "Created",
          "code": 201,
          "responseTime": 1197,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "01de46a3-5b7d-4a79-b3e6-b1c086ea686b",
        "cursor": {
          "ref": "dcfd77fa-2ce5-47f8-bcef-5cb341e318b4",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4dc76572-e886-48c7-90f0-32f8521dd1f6"
        },
        "item": {
          "id": "01de46a3-5b7d-4a79-b3e6-b1c086ea686b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3ab5e85e-bd80-4a97-9936-389b375ad9a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9327c089-442d-4617-b200-7a1538cc5171",
        "cursor": {
          "ref": "3cdf2080-df7b-48c1-a880-6276006e5967",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "cbd499df-a06b-48d9-91a7-c635cd7496b8"
        },
        "item": {
          "id": "9327c089-442d-4617-b200-7a1538cc5171",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2fa3d7c7-fb82-459c-b512-f9c9cd09ba42",
          "status": "Created",
          "code": 201,
          "responseTime": 6305,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "9a44c1de-cf44-43a4-98f0-6370b1a5740e",
        "cursor": {
          "ref": "c8a1e851-0628-4ac4-bc88-bb3e654bf4fe",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "84ec825e-fe39-4a9a-9fe5-4ae25819a616"
        },
        "item": {
          "id": "9a44c1de-cf44-43a4-98f0-6370b1a5740e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e5eac609-bf98-4662-84bf-aceaaf1b39e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed6eea8-99ba-4ad0-a2a4-5a7d339a3061",
        "cursor": {
          "ref": "dd22ecce-a2f7-4f68-b4f1-4b47e8cd4624",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e0867f52-9722-494e-bed7-376ed126bea4"
        },
        "item": {
          "id": "9ed6eea8-99ba-4ad0-a2a4-5a7d339a3061",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "30fe6c8c-0554-40af-bdc4-e5ee787d29a7",
          "status": "Created",
          "code": 201,
          "responseTime": 4821,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "3f4575e0-a8db-48fe-a32d-f51cc1122bb7",
        "cursor": {
          "ref": "b7e4d898-3faa-4555-a966-690382e22126",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f1bc7de9-4a63-404b-bf57-1b567bf8639f"
        },
        "item": {
          "id": "3f4575e0-a8db-48fe-a32d-f51cc1122bb7",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3a25569d-1afc-4f7f-a580-6fa4032547f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7990a8b8-f846-45e9-b72e-5d9f95dc8021",
        "cursor": {
          "ref": "f9415eb7-a3fb-4e43-a94d-d4cd63cc3ebb",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d304c81f-022e-4765-9ae4-99bb0ea3e8aa"
        },
        "item": {
          "id": "7990a8b8-f846-45e9-b72e-5d9f95dc8021",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6b538be4-23e9-41ab-a830-2d683a03e391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5add5ea5-de4a-486e-8d22-16864660f2e7",
        "cursor": {
          "ref": "48dbe9a8-941a-463c-992a-c2165aed44f3",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "24b6bd10-cec5-4450-b720-1fc11fd38090"
        },
        "item": {
          "id": "5add5ea5-de4a-486e-8d22-16864660f2e7",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2ca82e4c-73f7-42a4-b037-40fe831fd934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 579,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc008ba-554f-4fd7-b2d0-be3b859f13c7",
        "cursor": {
          "ref": "82f98ce9-44e1-4da3-9ca2-7a222960c9ba",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ba21e28b-5660-4890-92e0-639abd2d39a2"
        },
        "item": {
          "id": "cbc008ba-554f-4fd7-b2d0-be3b859f13c7",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c91939f2-d463-4044-9b56-d580bb9fd510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fcfd709-2b94-4b9d-8eb6-e0fa396fe4ab",
        "cursor": {
          "ref": "f4c832d1-20a3-4887-a8d2-4dd24a520031",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "fb5e82a8-98f2-46f1-9668-c72450b219c0"
        },
        "item": {
          "id": "4fcfd709-2b94-4b9d-8eb6-e0fa396fe4ab",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ca6e733f-2557-431d-9db7-20c3ed4f584b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33a1683-4dbb-4408-8c55-d78e6b9e40cc",
        "cursor": {
          "ref": "e4aa0d63-a71a-45a0-8e19-202398a3dcb8",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "75c3afdf-9e3b-40ff-a11c-3d892449b7d4"
        },
        "item": {
          "id": "f33a1683-4dbb-4408-8c55-d78e6b9e40cc",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b6629ae0-ee3a-4e68-8bfe-97f76d055c94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37e7d47-aff5-4478-8835-31ae061b258e",
        "cursor": {
          "ref": "0018a35c-a7ce-480e-8bbb-49ca21ffedec",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fbfca5de-823c-4d57-88bd-1fa9ba497518"
        },
        "item": {
          "id": "f37e7d47-aff5-4478-8835-31ae061b258e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b4f3e216-a367-481e-88d6-c155ac0d3537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8bb54c1-6607-4c87-8347-5fcddcc111af",
        "cursor": {
          "ref": "87e6786c-ade3-477b-b61a-4464623ddee4",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6b60451f-3382-4ede-a9cb-8b6868cf010b"
        },
        "item": {
          "id": "b8bb54c1-6607-4c87-8347-5fcddcc111af",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e981e94e-dc64-4214-92f1-86a408138917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24502e2-4f05-4367-afc6-d561d80adacb",
        "cursor": {
          "ref": "e3f901da-a89c-4a04-9437-a91c3a4e39ed",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "3a194368-9fc4-48a2-a281-c6eaeadf7715"
        },
        "item": {
          "id": "d24502e2-4f05-4367-afc6-d561d80adacb",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "99fb6040-20ad-496d-a53c-f79c2abfecdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "304b2b11-268b-465f-88b1-0333946e2da6",
        "cursor": {
          "ref": "d07456c7-3e9b-4717-850b-15a56e208ce8",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "58fac642-5ff7-417d-8a37-4f9f7764d78b"
        },
        "item": {
          "id": "304b2b11-268b-465f-88b1-0333946e2da6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "408aaa73-1f86-4c8b-a43e-9df151f0ea84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1086f3e-acfd-4ec0-932c-c2c87915dcff",
        "cursor": {
          "ref": "da1e6e8c-6b50-46d6-85f4-3284cb401513",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "bc82517c-eb92-4a5c-941d-aec25e54d071"
        },
        "item": {
          "id": "b1086f3e-acfd-4ec0-932c-c2c87915dcff",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "cf10e8dc-59b8-4164-93e4-ec8176e84ae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d1ac5d-6642-46b0-9a91-5421d6d928ad",
        "cursor": {
          "ref": "0abe79c4-cc3a-4600-9e15-cd841341376e",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "07a9fc2b-a9d0-4b7c-a607-6ac6891e8dd5"
        },
        "item": {
          "id": "d0d1ac5d-6642-46b0-9a91-5421d6d928ad",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "18d0d98c-6f8d-4ed5-836e-fcbf721fe487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cddccc06-03ca-454f-99f1-1dde9fe3ba96",
        "cursor": {
          "ref": "d9feca54-8768-4733-848f-213d59096863",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c3047e93-c69f-487c-b6ee-9ed0136fa2bc"
        },
        "item": {
          "id": "cddccc06-03ca-454f-99f1-1dde9fe3ba96",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "677342fd-2ecf-419c-b02e-3cab2aa8c3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f569eb8-bce1-4548-9fe9-2bb24794b557",
        "cursor": {
          "ref": "0148f1ba-ae65-4af0-8718-eb8bf1e794d3",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "740c0f39-b9a8-4608-8c78-f6918ea32c8d"
        },
        "item": {
          "id": "3f569eb8-bce1-4548-9fe9-2bb24794b557",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "90dda1b5-bd66-4c13-95b1-86e6d6fdc2c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d897cb7a-0a13-447c-a33e-35bc3d5846cc",
        "cursor": {
          "ref": "b39712e3-c1bf-47cd-bf9a-df08fdcd7ee4",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1762c5f0-8f13-4d1b-8de6-dc451cffeb9e"
        },
        "item": {
          "id": "d897cb7a-0a13-447c-a33e-35bc3d5846cc",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d60bc932-ee92-4db5-b7f9-ac71040b9836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18cd6793-1fbe-4766-9156-a5bbac2e9d20",
        "cursor": {
          "ref": "e87afa50-99c4-4db4-aa50-0138d6b7a8f7",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c3c82d5e-a92d-4a41-9740-a2963daead77"
        },
        "item": {
          "id": "18cd6793-1fbe-4766-9156-a5bbac2e9d20",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "14a9ae10-50fb-483c-af25-be6fc433d2c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b35e693c-7416-4d1a-bb43-b6bd9c31e7ef",
        "cursor": {
          "ref": "623ab0cd-7c8a-461d-b6c5-7943dc60eb9a",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "28a0d96f-f7a6-46b7-91c5-ab17d2af4ddc"
        },
        "item": {
          "id": "b35e693c-7416-4d1a-bb43-b6bd9c31e7ef",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4248cf53-ad84-49d6-9c39-2c907e1fe271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e38660c0-7fb8-4a45-b03d-081e6891d4b5",
        "cursor": {
          "ref": "3a852361-0ed1-4554-8405-a25b3c9c8be5",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4fd8484e-6872-471f-ae5d-4438ffbf3079"
        },
        "item": {
          "id": "e38660c0-7fb8-4a45-b03d-081e6891d4b5",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "84073fbb-bf19-43c4-af22-269459378783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7b9f96-ac4b-44c0-94ff-06d2c8ae3c09",
        "cursor": {
          "ref": "489222c2-16ae-414c-b0dd-331df68c0868",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "95429fcf-a7f5-4a83-b6a1-ccd15a6a63aa"
        },
        "item": {
          "id": "cf7b9f96-ac4b-44c0-94ff-06d2c8ae3c09",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "55fabe34-3ff4-4e87-87b9-37d8e887c609",
          "status": "Created",
          "code": 201,
          "responseTime": 2739,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c08c31f9-14eb-4482-a571-a5e75c9766ad",
        "cursor": {
          "ref": "5e89b46f-40e8-4489-b61c-683fd6d3e652",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fceed563-fb8d-41ae-9a35-610c48cbf532"
        },
        "item": {
          "id": "c08c31f9-14eb-4482-a571-a5e75c9766ad",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5fc19f4b-17a4-4c03-bce1-d80a9bdf14ad",
          "status": "Created",
          "code": 201,
          "responseTime": 3103,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6bd4c636-0ce0-45c9-bfcc-5f73ffa6a8ee",
        "cursor": {
          "ref": "4ef14378-dc2e-4460-9043-eb8209d8e0f0",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3b065249-6be8-49bf-a4e2-e5cd7f92241f"
        },
        "item": {
          "id": "6bd4c636-0ce0-45c9-bfcc-5f73ffa6a8ee",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a56da61e-9ead-4400-a81c-573fec5e4a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db8c930b-6731-4bfc-b979-c33b507a6fb9",
        "cursor": {
          "ref": "5b7bf07a-8e5c-4a2d-be26-8902994aa253",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "777b72d3-b06c-44ee-9634-b3a047db900a"
        },
        "item": {
          "id": "db8c930b-6731-4bfc-b979-c33b507a6fb9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "41721aed-4443-4447-949b-25c692b91adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824c4cb7-d1ec-4b46-919a-7a78937d21e4",
        "cursor": {
          "ref": "44cea277-30cb-4d85-a782-4634153df985",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "820a50aa-2602-4c37-beee-8a1da7984b2d"
        },
        "item": {
          "id": "824c4cb7-d1ec-4b46-919a-7a78937d21e4",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2b4a7124-77d0-408d-bc77-28b6bbd9c050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf14a86-d9a7-4d7a-b954-3f47057d94f5",
        "cursor": {
          "ref": "17ed156b-a0e7-4354-836b-641ee02e34a2",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "943c4522-f095-4eac-baa6-5fd9ee01c88d"
        },
        "item": {
          "id": "cdf14a86-d9a7-4d7a-b954-3f47057d94f5",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "37d73a86-1de8-46dc-ac4f-f04ce59c83cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2969e08e-b9d6-41cf-9c01-013926a75258",
        "cursor": {
          "ref": "be0b9f96-d660-4aea-803d-84fb4077721d",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "82066be0-5922-42c6-84f4-8a2ca1043f52"
        },
        "item": {
          "id": "2969e08e-b9d6-41cf-9c01-013926a75258",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a752502c-7e1e-49cf-b7f1-c87d8cc1eff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae367ad-2cad-4b69-8fea-cbe063df45cf",
        "cursor": {
          "ref": "e6292c32-820c-4ab7-bcb8-bde848f956f1",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7f5e6129-4fcb-4a4f-921c-54aa153632f9"
        },
        "item": {
          "id": "5ae367ad-2cad-4b69-8fea-cbe063df45cf",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6a79295f-f3f1-4687-a1f0-f6e9b12a74a6",
          "status": "Created",
          "code": 201,
          "responseTime": 2947,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "03c6ccd5-9bfc-47ec-bf93-576bcb104dea",
        "cursor": {
          "ref": "4e8ee910-e0ae-4b98-96fc-7dc7a6986199",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c4eb84e1-5d8d-4683-b21b-b9647fdcee63"
        },
        "item": {
          "id": "03c6ccd5-9bfc-47ec-bf93-576bcb104dea",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "86bd7824-aba7-495b-b9eb-d0c2e25079bb",
          "status": "Created",
          "code": 201,
          "responseTime": 2509,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "376a5c42-9feb-496e-96a6-b61b0e250107",
        "cursor": {
          "ref": "4069e1a0-90e7-4fed-a381-0257d80fc1d5",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f89ef242-5a85-4875-abb8-42f2da0ed8d7"
        },
        "item": {
          "id": "376a5c42-9feb-496e-96a6-b61b0e250107",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ab388e48-43e0-41e4-94ac-ae825b00f739",
          "status": "Created",
          "code": 201,
          "responseTime": 2579,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "7816d5e6-2505-423e-8afb-7fecb90e4d39",
        "cursor": {
          "ref": "2c36a047-f548-46d6-adb7-6a88fd3a8e9b",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "06e52a66-7fb9-42fb-a41b-0585e5a185e7"
        },
        "item": {
          "id": "7816d5e6-2505-423e-8afb-7fecb90e4d39",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "614aaccd-8f40-4094-aec1-2610e0dec6b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7041de1-bd80-4120-be95-d361843148c0",
        "cursor": {
          "ref": "a7afae1d-9a22-4a84-87f4-813bda38f248",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1ff45447-4642-45c8-b757-34b58ff8c4ca"
        },
        "item": {
          "id": "c7041de1-bd80-4120-be95-d361843148c0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "fb26d845-a26f-48c6-a9ae-d1283bd9cf28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796df589-d41c-4238-bcb6-1a6a0addcaa7",
        "cursor": {
          "ref": "aa23dc94-7cb3-4686-bee9-9ac9137cd727",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e427fb50-0b97-4f77-a480-9b90c8c392bf"
        },
        "item": {
          "id": "796df589-d41c-4238-bcb6-1a6a0addcaa7",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9db309bd-d5ac-4bac-ba10-25848abcbf9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f7b127d-c7fb-45c2-b62e-176eb9b2a612",
        "cursor": {
          "ref": "947c640e-8099-4e01-ad9e-f85a9eb30cf3",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c1a70c55-24ed-4e20-9a60-827935eb1bdf"
        },
        "item": {
          "id": "3f7b127d-c7fb-45c2-b62e-176eb9b2a612",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4a1b4940-9ec2-4a9f-88fc-faa038ed1469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "225fc4bb-4195-4b64-a301-4730c20e1e6a",
        "cursor": {
          "ref": "0cbc531f-68f6-4a79-b1b9-5f6536e51ea7",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f45ee9f3-ec94-470b-9de7-6f3566fa3b42"
        },
        "item": {
          "id": "225fc4bb-4195-4b64-a301-4730c20e1e6a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ce54146f-ad82-464c-bbfd-fe3159df296d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc91479-bb98-4536-9751-6eae921aa452",
        "cursor": {
          "ref": "35a49a10-7ddd-4181-b5fd-817f108f7fd2",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "53f9b574-796f-4ec6-8711-fcda6cda6155"
        },
        "item": {
          "id": "8cc91479-bb98-4536-9751-6eae921aa452",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e5b306c6-f30d-41bd-a12a-54addc4a7b69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869c7d23-4c61-4618-ba38-bf4e8ef6766b",
        "cursor": {
          "ref": "bf6d23bb-d6e2-401c-9092-5b3c54850dca",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "adfd08b8-f5e8-47e6-86fb-cd990793bb01"
        },
        "item": {
          "id": "869c7d23-4c61-4618-ba38-bf4e8ef6766b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c0f7e1b9-ee60-43bb-9f80-726973accf8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385c955c-e1a6-43da-9895-b91a7cfb53d9",
        "cursor": {
          "ref": "063cc943-2b76-485b-9861-b0bc8faa3179",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "73ba28c2-76c0-4d3c-9664-9c3909dcbdb5"
        },
        "item": {
          "id": "385c955c-e1a6-43da-9895-b91a7cfb53d9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "6446c904-1b2c-4c55-8bd8-bafdebc45bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74111d9-d423-49de-8925-feb118a14906",
        "cursor": {
          "ref": "7e24f1f6-86ec-4ce7-b18a-6f8db9b5b0e0",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9556dc47-9593-401f-9080-22cd503f5e42"
        },
        "item": {
          "id": "d74111d9-d423-49de-8925-feb118a14906",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "fdd6b9ee-21de-4ed1-ae9b-0b0880a78b1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383fc3c9-4b69-4c09-a47f-7db0b78c1d19",
        "cursor": {
          "ref": "404fdcdd-b499-47dc-b544-b4e1cb6cd0ea",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ad6fdd3a-2adb-4d5d-ad14-ff24ab3b7fc2"
        },
        "item": {
          "id": "383fc3c9-4b69-4c09-a47f-7db0b78c1d19",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "881b7330-3fe4-420c-9f75-2840ac257ed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c50376f6-6b6c-4e12-9c80-c9371f0f9441",
        "cursor": {
          "ref": "7c2b5bad-80c0-4dd9-b94a-bc40d4cd19aa",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a84a2dac-7176-4056-872d-b6b4226e5324"
        },
        "item": {
          "id": "c50376f6-6b6c-4e12-9c80-c9371f0f9441",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "73a54df6-7189-4cc8-b7de-7595aa413f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d08ff2-20b1-4aea-9e29-ad3a4613518b",
        "cursor": {
          "ref": "1842b01f-6c94-40a0-85c6-cfbe07eb9f06",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "011b02f6-bc67-4e59-af3d-78bab8ca068c"
        },
        "item": {
          "id": "94d08ff2-20b1-4aea-9e29-ad3a4613518b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "927be135-553c-4218-9265-3334bf2ac237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "021c799b-9d71-4901-a475-e7f57a62ad3c",
        "cursor": {
          "ref": "c27a5755-dade-4a79-a54d-b156b1b5a2fe",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "deae4d65-510b-43b6-8747-7d89ed621f76"
        },
        "item": {
          "id": "021c799b-9d71-4901-a475-e7f57a62ad3c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e4bfa9c5-4932-4ae2-b92e-e31626e997ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0249b94-aa0c-458b-8476-f7475cee6320",
        "cursor": {
          "ref": "06d698bc-f29e-4ad0-9913-69fd5eb1f17d",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3fc23741-73f7-4769-a834-6ff2bb7e189c"
        },
        "item": {
          "id": "a0249b94-aa0c-458b-8476-f7475cee6320",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "449aa687-c034-4de3-bb7d-7274bb47a9b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4f4243-a579-47da-a931-2fb5a27b2b53",
        "cursor": {
          "ref": "8d2c0840-46af-45e1-803a-a362c664c95c",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "27fef599-fa09-41f2-a279-514c4c774ae4"
        },
        "item": {
          "id": "dc4f4243-a579-47da-a931-2fb5a27b2b53",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4d26989c-9c9e-4032-a696-5a4d8201988b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5c866e-e310-42ad-9adb-f55f5383cf70",
        "cursor": {
          "ref": "a808e162-a04c-4012-a9d7-b6dedc651e6e",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "626c48d9-1a81-4399-bc8a-eb64c288a964"
        },
        "item": {
          "id": "dc5c866e-e310-42ad-9adb-f55f5383cf70",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e1b1d041-da46-4e3a-914f-94e84f649e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d2bfb5e-2b51-4d56-b073-69f488c740f8",
        "cursor": {
          "ref": "e0b8baf8-bceb-4d7d-b7ef-289c40199d4d",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "31e404ad-d247-4796-8473-35d20a428923"
        },
        "item": {
          "id": "8d2bfb5e-2b51-4d56-b073-69f488c740f8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3087494a-ca8a-4523-9462-30b547242048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e7fc22-10a8-4b79-b935-55d7ce1e30b4",
        "cursor": {
          "ref": "01673c1f-d1ae-4d59-af30-0e0a93f295e1",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2aaeebe1-4641-44b3-ba28-bfdbb8ce4386"
        },
        "item": {
          "id": "d6e7fc22-10a8-4b79-b935-55d7ce1e30b4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "feed5550-d1aa-4f4d-b2d5-e2c9cb4c2428",
          "status": "Created",
          "code": 201,
          "responseTime": 2158,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "0b700354-ff80-4e89-8bbb-cc5dc3fc4529",
        "cursor": {
          "ref": "e423219a-b1d5-49b3-9e95-95840af19698",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6a715f4f-9d87-4838-a3d3-afab0663104b"
        },
        "item": {
          "id": "0b700354-ff80-4e89-8bbb-cc5dc3fc4529",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "673404d4-8256-4050-9310-ea1e6079d08e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3383b6a8-f7d6-40af-b37d-4329908e4e58",
        "cursor": {
          "ref": "45e17d82-0bd4-4dad-83ac-720ae8bef791",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "52f6c189-2f66-4212-bba3-962cb57b6908"
        },
        "item": {
          "id": "3383b6a8-f7d6-40af-b37d-4329908e4e58",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e3212865-676f-4751-a0e1-b6a98628573f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16b360f-4f56-467d-8d20-a695c0cb47bd",
        "cursor": {
          "ref": "4b9bc58f-d23b-449d-b014-5c6ce4d94079",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a0a0f9f4-dff7-438e-816b-e4a997e3fdf1"
        },
        "item": {
          "id": "e16b360f-4f56-467d-8d20-a695c0cb47bd",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4cdd8c19-8f7a-4587-90f0-a6d4d8fcc2cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c2db32a-0886-45bf-bb22-cc3e9a47924b",
        "cursor": {
          "ref": "e2a2edd3-9832-4bdd-bd88-7555ae793a85",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "24247e04-b659-4045-a65a-8ae8adb08964"
        },
        "item": {
          "id": "3c2db32a-0886-45bf-bb22-cc3e9a47924b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ccbd657d-43cd-4484-9c1b-ce5b3d8eec4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "344ea154-c479-4ded-84bc-64db1508ff4e",
        "cursor": {
          "ref": "254ad292-c58b-4a51-84c2-921e45af658b",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "635bb780-e08d-4209-ab2e-ce41d8e1ee78"
        },
        "item": {
          "id": "344ea154-c479-4ded-84bc-64db1508ff4e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "02d38442-ba4a-4233-b106-c3126b0ee01b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b5ce16-21f0-4a17-9305-fc019954e06f",
        "cursor": {
          "ref": "7ec64da4-a94e-4791-81ec-807500b73e8c",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f73378d5-0a0c-4b52-b747-ba175695b2dd"
        },
        "item": {
          "id": "96b5ce16-21f0-4a17-9305-fc019954e06f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5e7303f6-c657-4125-8992-1eed690014ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ecb79e1-47b0-46e1-9780-b66c23284043",
        "cursor": {
          "ref": "53cf3f06-a07e-4bd8-b02a-5450d37f143c",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1a09e618-5c0f-47fa-8e49-58aff3499041"
        },
        "item": {
          "id": "2ecb79e1-47b0-46e1-9780-b66c23284043",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a8d8c66b-3d38-4498-8b2d-52a6ea2ebbc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "686d6554-e9ac-437c-b090-b90fff9dc23b",
        "cursor": {
          "ref": "ac62c69b-1548-4913-b204-c36aa1f4bf0d",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ea2ca041-52e9-4a16-8320-3d6a82a64267"
        },
        "item": {
          "id": "686d6554-e9ac-437c-b090-b90fff9dc23b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8b9700a5-dae1-451b-9307-4e70886d6d0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f22143-561e-49c7-8b66-afb55bf017d2",
        "cursor": {
          "ref": "e93fcfb4-0502-4d17-a6f1-9115a01c2f1e",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "55e3bee2-2cca-4cf8-908b-1e61f00332bf"
        },
        "item": {
          "id": "f3f22143-561e-49c7-8b66-afb55bf017d2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7ac2533a-2441-46a2-ba3a-34fd9d3b598e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9c9d98-3888-477d-9045-546a3a2121b6",
        "cursor": {
          "ref": "cef64d9e-e196-487b-b276-310e52b68792",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "bff6c62b-352a-4fdd-b324-95ad347426ed"
        },
        "item": {
          "id": "db9c9d98-3888-477d-9045-546a3a2121b6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5deba0a6-b6bb-40d7-b751-be49d0afa3b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d6ff6eb-2acb-4a80-b7e1-8955308c7c98",
        "cursor": {
          "ref": "64997caa-ca9c-40b3-97ae-408d9332d25a",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e0586c93-53b2-4777-9bfb-f36833b256d6"
        },
        "item": {
          "id": "3d6ff6eb-2acb-4a80-b7e1-8955308c7c98",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2402e7bb-19c9-4d32-91dd-cec8d4a1e3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d52254bf-5bb5-4767-bcb4-0daefeb495a0",
        "cursor": {
          "ref": "04e47819-1604-463c-ae62-d15e81fd4085",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e8d2d2bb-3f20-4153-a802-79bd1e053ee8"
        },
        "item": {
          "id": "d52254bf-5bb5-4767-bcb4-0daefeb495a0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "109cd128-f00e-4bc7-964b-bad1004054ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73aad20c-9af9-443d-9d16-a3411b4e7dc5",
        "cursor": {
          "ref": "1425947f-0e59-4aa1-8f21-160b4ca1650b",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "455c240b-a054-4127-aa0f-66fcdfb14b54"
        },
        "item": {
          "id": "73aad20c-9af9-443d-9d16-a3411b4e7dc5",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a8786ebd-c372-447a-adf4-bf438e6a7a87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fcd8b72-7b7b-4b76-a019-dbd08f85e46c",
        "cursor": {
          "ref": "6339ae51-7913-4a51-bc78-45e201c48055",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "576c96ef-358d-441a-8120-b41a971537d3"
        },
        "item": {
          "id": "8fcd8b72-7b7b-4b76-a019-dbd08f85e46c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4defb837-a3f7-4ef5-8c3e-9b1bd22df5ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b976787-3224-4033-903d-43c27c488e17",
        "cursor": {
          "ref": "2631eacd-22e6-4465-967b-062aa2cfa7b4",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ae18d8b1-8cbb-4abc-8d05-a14c2e8ef8e8"
        },
        "item": {
          "id": "0b976787-3224-4033-903d-43c27c488e17",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "97372d48-5850-4d1d-ba7a-8e1b19aa228e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8515dc8-face-4b4d-8b83-50a0a83ed72b",
        "cursor": {
          "ref": "026d6f0e-909c-40af-bac6-07729990200c",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0226f187-2994-45c4-9f5e-573590724f98"
        },
        "item": {
          "id": "b8515dc8-face-4b4d-8b83-50a0a83ed72b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9e696059-dcf6-4faa-8bf4-1912a4af6d19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f7149c-ff83-46cc-949b-5e166786ce1f",
        "cursor": {
          "ref": "da06a1e2-06bc-470e-98c5-5c153037272e",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "805fcb5a-7011-4a07-b82b-c023edfa561b"
        },
        "item": {
          "id": "04f7149c-ff83-46cc-949b-5e166786ce1f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5c8ef580-5885-482e-9d17-b2c436ad5450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1a58e6-8270-49f8-83bf-fd380d31c05b",
        "cursor": {
          "ref": "f18fefe9-8178-49a7-bc0d-de34d3c558f5",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3cc0a648-1065-438e-9ffe-c243f4b4606f"
        },
        "item": {
          "id": "bd1a58e6-8270-49f8-83bf-fd380d31c05b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b15ab96a-b0a8-4594-bb37-4ac4b8b2e25c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e681a2b3-6f78-42c0-86f0-42582accfa88",
        "cursor": {
          "ref": "fb03f395-7ea1-4465-b102-45222c7bce81",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "02ff2608-d659-464c-b48f-ac5a40a3d0c8"
        },
        "item": {
          "id": "e681a2b3-6f78-42c0-86f0-42582accfa88",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "71eeb336-1334-4a75-9966-85ab45cdbb9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6d2442b-a637-421d-a026-3dfc728b58b7",
        "cursor": {
          "ref": "9027a526-d277-457c-9c48-85407191687f",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b66f6368-eefd-472a-905a-bf7d9ded2cb0"
        },
        "item": {
          "id": "e6d2442b-a637-421d-a026-3dfc728b58b7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d81bf06d-a69e-4c75-b96f-98e99dfeae81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffba142f-abfe-4a4d-862a-f9e47255fbf8",
        "cursor": {
          "ref": "1fff32f5-480c-4a49-8643-ebb329c6c401",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "39ebb4bb-5432-467f-b1a3-c35d97e0aebe"
        },
        "item": {
          "id": "ffba142f-abfe-4a4d-862a-f9e47255fbf8",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "29d95422-1161-418d-99bf-9daa50a9471b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8f1364-8f5c-40c4-adf5-49d16a53aafe",
        "cursor": {
          "ref": "b162326f-9a5f-40fe-a836-8c530eb3d9be",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6ff8a164-ebdc-4e8f-ba11-00c090b06922"
        },
        "item": {
          "id": "bb8f1364-8f5c-40c4-adf5-49d16a53aafe",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "813188f2-9058-4a3e-8db7-53c6b7c47e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc81d27b-5b2a-472f-ac1d-ced08630eba0",
        "cursor": {
          "ref": "dc75f705-0bab-4caa-b3dd-2c7c6ed14a18",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "b92245cb-4e97-4a10-9710-927b926ad87f"
        },
        "item": {
          "id": "dc81d27b-5b2a-472f-ac1d-ced08630eba0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c5aa7179-4df2-404a-8677-871316483ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a275c12f-14cd-4640-89b3-0d0713562dca",
        "cursor": {
          "ref": "64eecd54-f7d2-4bca-b3fc-ef9b522b20a0",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "107a224c-8abe-4998-9bff-ea4ef9dc3354"
        },
        "item": {
          "id": "a275c12f-14cd-4640-89b3-0d0713562dca",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "adff10c0-5f52-4df3-a071-bd3e4ab51c41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320c3e31-846a-4af7-9f78-f795677194ee",
        "cursor": {
          "ref": "6b6a8ba2-65ba-437d-9f1f-8cf5f84c3341",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ed1b3577-c722-4282-98c6-d81b609bdd8d"
        },
        "item": {
          "id": "320c3e31-846a-4af7-9f78-f795677194ee",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "5faca99e-0901-489e-adf5-35a50009ce0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb4eac6-b7c1-433e-bfc4-4a303e0e61e7",
        "cursor": {
          "ref": "a73fc003-b6ba-4804-95bf-f307ed67966a",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "05e0d892-139b-4910-86a4-973cbe67f5ce"
        },
        "item": {
          "id": "2fb4eac6-b7c1-433e-bfc4-4a303e0e61e7",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "dd890d3a-c4ad-4591-a8a9-59651e8020a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23046b87-c311-4a27-bb3d-5d8feaf623e4",
        "cursor": {
          "ref": "fdfa14bf-0112-4c43-9624-09ba1a115abc",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7763bf58-bd9e-49e5-9669-f758c768828a"
        },
        "item": {
          "id": "23046b87-c311-4a27-bb3d-5d8feaf623e4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2a60deb6-cf6c-43e7-8e92-4202a86951ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe5068d1-0728-4cfb-a7d3-c8078ba73d6b",
        "cursor": {
          "ref": "137e96f9-aee3-4438-8f1d-440d8a004aa2",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "96c0c1e5-22e0-43b4-b42b-cb6bf178f5eb"
        },
        "item": {
          "id": "fe5068d1-0728-4cfb-a7d3-c8078ba73d6b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "69f2718f-8e63-43bc-9604-b8e40d1c2aa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f583721-a2c0-4b91-8424-71ac48b0051c",
        "cursor": {
          "ref": "35812a68-9298-489e-b864-11a5d660cbd3",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9157cfc9-2f54-49b5-af56-bf8ae5a6a8e5"
        },
        "item": {
          "id": "6f583721-a2c0-4b91-8424-71ac48b0051c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "90cb0d74-2178-4c16-a8b9-e81abe07c23b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03310027-fbaa-4413-a26c-17c35b8a3813",
        "cursor": {
          "ref": "0c17c4d8-c6b3-439f-9171-d8769f72197c",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7814ae43-9e48-4c9d-9cd0-10523e87ed6a"
        },
        "item": {
          "id": "03310027-fbaa-4413-a26c-17c35b8a3813",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a43937dd-b013-4bad-951d-a23602fdb070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92bd9a74-1d7d-48f5-b04e-50f58cc74980",
        "cursor": {
          "ref": "9298aeef-4064-4b22-aa4c-62ff458dc0bf",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "3a2c0664-c045-4c15-bb81-bcdbd99b4b20"
        },
        "item": {
          "id": "92bd9a74-1d7d-48f5-b04e-50f58cc74980",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ad5c8f85-c6a4-4cd6-9f90-cb64f38c7387",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "aee6bd13-cbb3-4d67-b9a8-2625a859713f",
        "cursor": {
          "ref": "93b85e88-86b0-4135-996d-91c319a8d4e4",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d3c8e611-c9cc-454c-b513-32287cfb6e3f"
        },
        "item": {
          "id": "aee6bd13-cbb3-4d67-b9a8-2625a859713f",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "26896ecc-4296-4914-b6b1-e833697e5a50",
          "status": "Created",
          "code": 201,
          "responseTime": 2283,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "1af4f6b3-71b2-47c8-8063-1a067a191af5",
        "cursor": {
          "ref": "5752765d-9290-41e4-8dd3-7797f51441ab",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "011af1b6-ea7f-48e8-a67a-b8a78a594f54"
        },
        "item": {
          "id": "1af4f6b3-71b2-47c8-8063-1a067a191af5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3e1b0ea5-8ab2-470d-8442-941b17441a50",
          "status": "Created",
          "code": 201,
          "responseTime": 2261,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3f3175-452f-448d-8752-807313786d02",
        "cursor": {
          "ref": "452a35d1-cbe0-4e37-96d4-9aaf2104d6cc",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f97c3c1b-e921-4c1b-8170-72394a6fdf62"
        },
        "item": {
          "id": "ee3f3175-452f-448d-8752-807313786d02",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d8240c2a-0207-461c-ad4e-911c2f93a32e",
          "status": "Created",
          "code": 201,
          "responseTime": 2547,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "763840a5-5ccd-489c-a6cd-135208069580",
        "cursor": {
          "ref": "aad89c88-6e77-4f23-bf88-dbf7a204bfcd",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a4d056e2-04d4-431c-bb75-8214d91afbf9"
        },
        "item": {
          "id": "763840a5-5ccd-489c-a6cd-135208069580",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a246b926-f75d-4beb-975a-c27a3965f374",
          "status": "Created",
          "code": 201,
          "responseTime": 2851,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a34f0252-9792-4032-bad8-24115e5a0f36",
        "cursor": {
          "ref": "0764569e-51ec-44d2-9a98-78a9f1b38f46",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1a85056d-8492-48e7-9a7c-1c67a074ab62"
        },
        "item": {
          "id": "a34f0252-9792-4032-bad8-24115e5a0f36",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2d75895f-565b-4720-b9cd-39e7685939d3",
          "status": "Created",
          "code": 201,
          "responseTime": 5146,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-10T00:43:05Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-10T00:43:05Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "b96fa9fc-0f68-4f58-8e70-9273d7cb1aac",
        "cursor": {
          "ref": "c8507dad-326f-4411-84b6-99f07e80457c",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "68c618cf-7cb1-4aa9-86fa-ef5aa610d88f"
        },
        "item": {
          "id": "b96fa9fc-0f68-4f58-8e70-9273d7cb1aac",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ed61103f-6054-41d2-a6b0-ff549395c4fc",
          "status": "Created",
          "code": 201,
          "responseTime": 2679,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "38af4310-06af-4e34-a7e4-e1c993265699",
        "cursor": {
          "ref": "c394a50d-c748-4d7a-a298-737455fea489",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c154cf6a-8416-4072-ad69-a66ec3050bdb"
        },
        "item": {
          "id": "38af4310-06af-4e34-a7e4-e1c993265699",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e92bf42c-4b12-44ae-8b78-69f2f77520f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38af4310-06af-4e34-a7e4-e1c993265699",
        "cursor": {
          "ref": "c394a50d-c748-4d7a-a298-737455fea489",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c154cf6a-8416-4072-ad69-a66ec3050bdb"
        },
        "item": {
          "id": "38af4310-06af-4e34-a7e4-e1c993265699",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e92bf42c-4b12-44ae-8b78-69f2f77520f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95781e7c-d7b5-4670-8f87-f2a269421665",
        "cursor": {
          "ref": "ce082da3-b6b9-4bf9-acff-0574378eb3f4",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "23aab752-7bc8-4ec1-949f-6ff6f0555704"
        },
        "item": {
          "id": "95781e7c-d7b5-4670-8f87-f2a269421665",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "dff5ca63-1d2c-4801-a115-bfa636f39d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9712d71d-c417-4095-8eb0-f087a703f63c",
        "cursor": {
          "ref": "62472f14-1aa4-41b0-bf3d-a09eabd6889b",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "db5fe94f-f22a-4fd3-8fd7-bb96016c266f"
        },
        "item": {
          "id": "9712d71d-c417-4095-8eb0-f087a703f63c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "03f1b1a8-b629-4510-9ace-465efd5fbaa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780ecff0-0334-4b6d-81bb-95a14b31afad",
        "cursor": {
          "ref": "ad917dfa-6782-40ec-a232-953b5f8b38a8",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "fa9e52f1-c5f7-420d-a556-60c84f50f0c9"
        },
        "item": {
          "id": "780ecff0-0334-4b6d-81bb-95a14b31afad",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "920dde9d-216f-4ad7-8eed-8e091e26af14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69f56bb1-ff1d-440e-a499-ba4751677e21",
        "cursor": {
          "ref": "6414ac84-3739-4ea5-935f-d8109988521e",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "39f72523-4961-4f72-8b32-b6ebab561d60"
        },
        "item": {
          "id": "69f56bb1-ff1d-440e-a499-ba4751677e21",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "455f439d-0aac-43ae-a25c-888e9af6b770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25ff976-260f-4d65-8c0a-0dcb9f55da3d",
        "cursor": {
          "ref": "8971dfef-5a0e-4e24-844a-451eb10bb2db",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "26d851d0-036c-49b9-a34e-0a1532867bb9"
        },
        "item": {
          "id": "b25ff976-260f-4d65-8c0a-0dcb9f55da3d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cd9f8b5e-3c90-4138-9adf-7843176a3b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d95a058c-dce8-467a-99d8-1d18702954cd",
        "cursor": {
          "ref": "5b597a77-6b73-4d4d-92fb-3a0cb7797736",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ad945c7e-c936-49cd-b154-06d579751a00"
        },
        "item": {
          "id": "d95a058c-dce8-467a-99d8-1d18702954cd",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "72cd1458-8f7a-4158-b6fb-708accc5f9f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2477638-af9f-469d-9ab8-543d8eab4337",
        "cursor": {
          "ref": "aace43e1-e083-450a-9ade-73b27104546d",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "368b3097-b6be-49bb-8e56-164ba490a6ca"
        },
        "item": {
          "id": "b2477638-af9f-469d-9ab8-543d8eab4337",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a8254afa-d51b-4680-b037-c6fa8ce0eec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b8f401b-c39d-45cf-942d-0aa799aaa1a5",
        "cursor": {
          "ref": "b65d22a2-c80c-4ef1-9a60-6848d31652d3",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d061753f-11f3-4716-8a17-3a20a1a46cbb"
        },
        "item": {
          "id": "6b8f401b-c39d-45cf-942d-0aa799aaa1a5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e020d131-7688-4bed-8525-e55762cff323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da327d1-0a3b-4765-ba5b-ccbdaf1e3e6d",
        "cursor": {
          "ref": "3a3b8707-46ab-4be9-9c54-aec1b618cb18",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "e66f598c-0e3c-46fa-a825-c107f77c5c61"
        },
        "item": {
          "id": "0da327d1-0a3b-4765-ba5b-ccbdaf1e3e6d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9b89795b-2094-4d26-b2f6-d3d47e22dd49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9606d4-df73-49fb-8925-1b835930d8f3",
        "cursor": {
          "ref": "3fe9455e-00a3-4921-b4b3-c6aefc55d3f6",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ea250284-c483-4bdf-aeb2-bb2bfd2b76c1"
        },
        "item": {
          "id": "6e9606d4-df73-49fb-8925-1b835930d8f3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "468c5bb0-a4c5-40ef-94ab-58f1028acf79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f0668c7-0037-442a-a753-959a60e56353",
        "cursor": {
          "ref": "41eed483-dc4e-498f-a154-bf88095c3005",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "15b0be4e-4670-4053-bb12-e076feed2673"
        },
        "item": {
          "id": "1f0668c7-0037-442a-a753-959a60e56353",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "beb8c142-97c4-41cf-84ab-4cae068c8ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94dcae5-b628-4e31-b838-3541b54fe953",
        "cursor": {
          "ref": "0dd77169-ee62-4b16-81b8-098c22bdca80",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c3b45e7a-7449-487c-96f6-3339a752ceb5"
        },
        "item": {
          "id": "b94dcae5-b628-4e31-b838-3541b54fe953",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "bb9af1d6-764e-4306-95fe-75dab2cdf2e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb11026-c09c-4d21-82f4-018b518e879f",
        "cursor": {
          "ref": "f02493db-c2bd-425d-bea1-6ef68d587d62",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7ce66dd5-56f5-4d95-b9a4-9c6d92b88591"
        },
        "item": {
          "id": "ddb11026-c09c-4d21-82f4-018b518e879f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c80fdb6a-5bd2-41be-a650-272696e19252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede6a833-6420-42e4-996f-ea33484e428f",
        "cursor": {
          "ref": "51eb54b8-aaea-4d3e-a706-83e845155849",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "51a559c2-be34-4281-8228-5abfcdd66a2d"
        },
        "item": {
          "id": "ede6a833-6420-42e4-996f-ea33484e428f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7471d4e6-e22c-4875-9214-31faef43797a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b10db405-4e68-4041-b194-2ee20f5c1e2e",
        "cursor": {
          "ref": "cd4d352a-3513-415a-acd0-e3f663343ea0",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ad485c66-1486-41ed-a03f-df08cddab8c8"
        },
        "item": {
          "id": "b10db405-4e68-4041-b194-2ee20f5c1e2e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "05d7c913-3dea-41ac-bf93-787378837351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b21dfb-7c2f-4d45-9a71-6bf71bf704ab",
        "cursor": {
          "ref": "68b2fc55-7f77-49a5-b73e-70c2ebb184bd",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c8a7b3fe-73ab-4a72-b2c9-2440b06dc9ea"
        },
        "item": {
          "id": "b0b21dfb-7c2f-4d45-9a71-6bf71bf704ab",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0a00c232-be75-4843-9209-0ac6a66d1568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315928c8-154b-4940-adb6-2eea850da0d0",
        "cursor": {
          "ref": "fae60624-b098-4616-9f46-c7e6bfe0433c",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "612665bf-b9c4-4c64-bd7f-2d935f582478"
        },
        "item": {
          "id": "315928c8-154b-4940-adb6-2eea850da0d0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2d4db620-c770-49de-9c32-78c8eb8b87af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e2c7381-d6f9-4f05-96cd-335ac964a71d",
        "cursor": {
          "ref": "1d953060-76d4-4d0a-befa-de79cb58dfee",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8acff993-c838-4682-84e6-643072ddaf16"
        },
        "item": {
          "id": "8e2c7381-d6f9-4f05-96cd-335ac964a71d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "31a75325-0337-4975-8e87-fea807578ef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21dcfe07-a2bc-4ed6-8e20-7f2b3f96000d",
        "cursor": {
          "ref": "3b2e9750-1166-4462-be58-b5b78bdff971",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "fdc96d4b-9cec-4525-817e-0af232ffab98"
        },
        "item": {
          "id": "21dcfe07-a2bc-4ed6-8e20-7f2b3f96000d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ed7bb6a9-db35-4926-9b5a-e527aba7e58c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3abca8b4-ec62-49c6-9b4e-460c245e2be7",
        "cursor": {
          "ref": "0ec8509d-9e75-479d-8955-fba80129ad39",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "37be0779-bb34-45cd-876b-318cc6916bf8"
        },
        "item": {
          "id": "3abca8b4-ec62-49c6-9b4e-460c245e2be7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6497a614-3b05-4620-b5d7-60df0e23f65c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70eccdbf-cebc-4dec-b9e2-3c1cfc5e84be",
        "cursor": {
          "ref": "a6a4a4d4-6648-4617-9283-f1e8a1c8fd03",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e409e7eb-5174-474e-8961-9dfad8295eb1"
        },
        "item": {
          "id": "70eccdbf-cebc-4dec-b9e2-3c1cfc5e84be",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ee86eb67-9a7d-49c5-8936-ba6d4b04729f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1cd2392-f79b-4282-b8dc-d59012fa30ad",
        "cursor": {
          "ref": "56adb992-f06c-4e43-9d71-9e673ed5523c",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f7c2555d-0b3c-4fbe-9928-093c836974c2"
        },
        "item": {
          "id": "f1cd2392-f79b-4282-b8dc-d59012fa30ad",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8cff2220-ef5c-4554-ae51-82a67b853d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb56d22-7508-49cd-9c55-c0ded5446b4b",
        "cursor": {
          "ref": "c4af344d-56e5-4c84-b1c4-83fcf47a6a56",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6598c583-ffdc-46d4-aa36-e217e5f0c3cd"
        },
        "item": {
          "id": "6cb56d22-7508-49cd-9c55-c0ded5446b4b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c50cbc49-79b3-4e7a-8518-2e6b40b1e322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c6b819-f78a-4e60-8525-f4ca92936750",
        "cursor": {
          "ref": "7239b38d-6f5c-4f82-a261-522f14cc8c84",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3446e0b1-223f-448e-9390-df16ff42d9b6"
        },
        "item": {
          "id": "24c6b819-f78a-4e60-8525-f4ca92936750",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b54a0d3b-5f05-45a3-8dd4-ad91bd399d8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a73a637-b62d-4f1e-97ac-87304186bd7e",
        "cursor": {
          "ref": "256c3356-6525-4e2c-a51e-1a051181d144",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3ce64358-60d3-4c8d-91ca-15506296ef7d"
        },
        "item": {
          "id": "7a73a637-b62d-4f1e-97ac-87304186bd7e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ba11209e-ba1d-45b1-ae03-9e932f56943e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab830d4c-3815-46f1-92db-b869c0401bce",
        "cursor": {
          "ref": "c841ed69-9810-455a-83a4-bf9c2dee83a0",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "40ec8881-5438-44ef-85fa-62380c2bd3f0"
        },
        "item": {
          "id": "ab830d4c-3815-46f1-92db-b869c0401bce",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5d032209-5a4f-4b36-9217-dc71fd3bae54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b783065e-36a3-4fa9-a9af-668cd1167106",
        "cursor": {
          "ref": "acc7dabb-bb3c-48b6-8f5a-f76f46a33363",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6957ca0b-171f-4444-a1dd-5c8b894e8cab"
        },
        "item": {
          "id": "b783065e-36a3-4fa9-a9af-668cd1167106",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e5f556b6-3720-4cc5-ac09-5c669742041c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "769e6176-08cc-4e60-92ee-6b7034e1e9b7",
        "cursor": {
          "ref": "6b6c9be0-a3b5-4a6c-aa6e-86d5c877be4f",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2a08b4ad-6106-4f12-8238-d1bf56d7e128"
        },
        "item": {
          "id": "769e6176-08cc-4e60-92ee-6b7034e1e9b7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "de3a3a1f-b7ca-457e-9054-34ad8ca97da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d47aea49-ffcc-4cbf-a0f1-e98cc42f1591",
        "cursor": {
          "ref": "1696795e-82cc-457f-8a86-efba8d5ed92b",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0a0f3721-d995-47df-96f5-5a4bac3961a0"
        },
        "item": {
          "id": "d47aea49-ffcc-4cbf-a0f1-e98cc42f1591",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e723c463-5ad2-4a34-a9c7-480170b09010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e60cbbb1-d56b-4b2e-83a8-7e8e747fa342",
        "cursor": {
          "ref": "c6e02e93-d3a7-44f9-aced-2a3d92c9af32",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "73096f7e-a327-4e91-8b6d-85eeb14e7b52"
        },
        "item": {
          "id": "e60cbbb1-d56b-4b2e-83a8-7e8e747fa342",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fecd895a-a2b8-4c69-9b1f-7b6987c0d642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de48ad4e-45db-4486-8c8c-c1912461e791",
        "cursor": {
          "ref": "19971543-7a59-455e-8ca6-19f289cfe499",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "bb1077a6-d473-416a-beca-1d01fff383ad"
        },
        "item": {
          "id": "de48ad4e-45db-4486-8c8c-c1912461e791",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5a98d481-dfe9-4f10-90c0-319f03a197c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca306ed-5944-4872-9f90-5a2ce8a96981",
        "cursor": {
          "ref": "4f756e7e-423a-401b-a288-bf961ce83a97",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "28b0be57-bc98-4a79-b531-8d6f125654ad"
        },
        "item": {
          "id": "2ca306ed-5944-4872-9f90-5a2ce8a96981",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b86f5278-5806-4c84-bbf7-44f11c41e1d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "2dfdc5a9-32a7-473b-b767-52a762c0a59c",
        "cursor": {
          "ref": "e28ffae0-d8e3-4b9f-871f-d54a5f3b2cbe",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "30d25c39-edd9-4894-a8c7-f35d9b7bff4c"
        },
        "item": {
          "id": "2dfdc5a9-32a7-473b-b767-52a762c0a59c",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "571caf8a-18de-4496-a8d4-017d3f617a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "b849ee77-f713-4630-93b4-a4ecdbf50a89",
        "cursor": {
          "ref": "97e93125-6117-4388-af6e-c88e738d5106",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "cd189821-35eb-486d-b1e5-c59df842a446"
        },
        "item": {
          "id": "b849ee77-f713-4630-93b4-a4ecdbf50a89",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ac5d7cbf-e5fa-408d-9cbd-57a759d6a2b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b849ee77-f713-4630-93b4-a4ecdbf50a89",
        "cursor": {
          "ref": "97e93125-6117-4388-af6e-c88e738d5106",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "cd189821-35eb-486d-b1e5-c59df842a446"
        },
        "item": {
          "id": "b849ee77-f713-4630-93b4-a4ecdbf50a89",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ac5d7cbf-e5fa-408d-9cbd-57a759d6a2b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7462ce4a-e612-413b-b10a-5a3c0622438a",
        "cursor": {
          "ref": "bbc09790-82a4-485a-a021-2bbc61e7cd56",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1c650585-b30f-49ef-9b72-c54cfca08e3d"
        },
        "item": {
          "id": "7462ce4a-e612-413b-b10a-5a3c0622438a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "760a281a-25ba-488c-b434-58c430646a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160a976b-7762-4ecc-90c7-9759e00f47ad",
        "cursor": {
          "ref": "ac93df0c-d5ac-48d0-9dfb-fbde23050228",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d558b4f8-93a8-4073-804e-aa74e3813e25"
        },
        "item": {
          "id": "160a976b-7762-4ecc-90c7-9759e00f47ad",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "69da3f87-f197-43b7-855a-a085c098298f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52dfb60-d673-4b15-b6af-55ddb8f145f5",
        "cursor": {
          "ref": "0035201f-229d-4ddd-b37a-e579683b4025",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5522fd70-4ae5-4687-8c87-4d625c404723"
        },
        "item": {
          "id": "b52dfb60-d673-4b15-b6af-55ddb8f145f5",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "644a27ea-786e-4116-a58e-c03e1b22908d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "638b4309-191c-46c6-a18e-9f198939f274",
        "cursor": {
          "ref": "c13d7612-8c39-4ae8-9e84-1c5b5566bfa0",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "df0d6b50-6963-4efe-90ed-06aebda0ae17"
        },
        "item": {
          "id": "638b4309-191c-46c6-a18e-9f198939f274",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "81793359-c1cc-4170-a57c-b290ed469940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14700f60-7094-470d-ae39-79ed5a8a4059",
        "cursor": {
          "ref": "3fe7ae6c-adca-4daa-a622-21338867c0ea",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "90ffdada-8829-41f0-b3cc-b23db705bc0c"
        },
        "item": {
          "id": "14700f60-7094-470d-ae39-79ed5a8a4059",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "79279a9d-9cc7-454b-9a85-0197621f7e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "954694df-2349-4c34-87bd-54b420a3d683",
        "cursor": {
          "ref": "46e01ae8-4316-4da3-aa7d-43c0c43993bf",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d437d186-7dd2-42b3-82a2-cf2f87bbddc6"
        },
        "item": {
          "id": "954694df-2349-4c34-87bd-54b420a3d683",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a897dd41-7378-47e8-99f7-e449126e07d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56fd762d-d3dc-4f4e-b5cd-bba3e14f77a5",
        "cursor": {
          "ref": "a56435f7-df88-43eb-a989-f6f7ab23628b",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f67e8097-c347-4027-8a63-674426a995fe"
        },
        "item": {
          "id": "56fd762d-d3dc-4f4e-b5cd-bba3e14f77a5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "88e4b9bd-2cd2-4f47-af38-f59b3a603473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4ffce4-6cf2-4e50-9fa9-d5686b0e7890",
        "cursor": {
          "ref": "c9086c68-eac4-45a4-addd-d1ee6ef614cc",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "50e6cc96-9473-4407-aa1d-6e439aa977c7"
        },
        "item": {
          "id": "6d4ffce4-6cf2-4e50-9fa9-d5686b0e7890",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a6d7e931-7879-421d-b5a5-a6eca3b02ca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c8dedb-f013-42d4-87e1-02e35af637da",
        "cursor": {
          "ref": "08666516-161d-4ec5-b587-076b9846dff4",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6725bd21-bdd2-447b-adde-7c2561c983c0"
        },
        "item": {
          "id": "36c8dedb-f013-42d4-87e1-02e35af637da",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d729bb19-40d7-41f3-97f3-06de07a9204d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 991,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e115cc-f39e-426c-9825-ffbd11172280",
        "cursor": {
          "ref": "d71c40b1-40c1-4f74-a68b-22b2df103dd7",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d6056fcd-b083-4dec-95d1-a5d39e8e1cdc"
        },
        "item": {
          "id": "12e115cc-f39e-426c-9825-ffbd11172280",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "1f9b40ea-0990-4ad6-bce8-ef26eb9b1037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e079c8-d2c0-4e3a-ae31-8f6806dcc854",
        "cursor": {
          "ref": "960fee5f-2e14-4f71-ae37-a28ed9119b89",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1a6fab73-2d32-4f18-a086-bf3b77ea7b3c"
        },
        "item": {
          "id": "30e079c8-d2c0-4e3a-ae31-8f6806dcc854",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b3c24917-7aa2-4649-9bfc-756f2238c334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb716234-d8c9-417b-8959-ada2fc585dc1",
        "cursor": {
          "ref": "46c1c25a-0d86-45e3-b14d-de739a92fe35",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7fdc14e4-2e05-47cd-8559-ecf194841c71"
        },
        "item": {
          "id": "bb716234-d8c9-417b-8959-ada2fc585dc1",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "13cde08f-b718-418c-954e-c25596d87734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc953d3-b73b-43bd-a767-76dda6f44de6",
        "cursor": {
          "ref": "8c6b7a8a-f0ad-47d0-9168-3b0135e82dbb",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d702fe61-7e4e-465d-a56b-7c8c20ae8394"
        },
        "item": {
          "id": "fbc953d3-b73b-43bd-a767-76dda6f44de6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "07a2b546-bfd4-41b9-a8b2-9bd165b3d769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecba2c3b-4c99-4944-87e7-bce3ed6cfec4",
        "cursor": {
          "ref": "d662bb1d-f7c7-4748-aa9d-19163c275570",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "efd77dfb-c658-4275-924e-717159b2608d"
        },
        "item": {
          "id": "ecba2c3b-4c99-4944-87e7-bce3ed6cfec4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "8c22f9db-d9b8-4a52-b623-7f167527ec5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bee25da-13a6-4d8d-9ce7-06fe83f52be2",
        "cursor": {
          "ref": "40bf0934-96df-41fc-8dbe-e6fd11abd96e",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e08722e7-b5b3-48b3-81d0-fc209d80b473"
        },
        "item": {
          "id": "8bee25da-13a6-4d8d-9ce7-06fe83f52be2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8ad13cd5-8cac-4d9f-91f7-2dd020f21d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0caf79a-1cab-47bf-8aa7-79a9cceba2fc",
        "cursor": {
          "ref": "ee5b2f5d-d11e-4e71-96a6-4396426e2cf1",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "97f87a39-d306-4061-a78c-77c1eef82224"
        },
        "item": {
          "id": "e0caf79a-1cab-47bf-8aa7-79a9cceba2fc",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "870be783-61b6-4c39-97de-a3569fad72bc",
          "status": "OK",
          "code": 200,
          "responseTime": 324,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "b24e8b91-a206-4d2f-831d-92ebae39abd6",
        "cursor": {
          "ref": "e90be53b-9725-429a-94e0-021ed2b574c1",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "04dfeb1a-5a35-47bf-92d4-9a089f6b0f4f"
        },
        "item": {
          "id": "b24e8b91-a206-4d2f-831d-92ebae39abd6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "af6d8886-f1a9-4739-82be-522f9b223970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "866f9ec6-7f14-4dd5-9190-e6076af5d22b",
        "cursor": {
          "ref": "ba7cac58-9828-4a12-bbc1-45d9db3c8aae",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9cd93d69-e18c-4e3c-a784-2259b1c16caa"
        },
        "item": {
          "id": "866f9ec6-7f14-4dd5-9190-e6076af5d22b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "cb3e83ef-2a5c-47fb-941b-970e1159020e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6cf73de-fe5c-4ff4-b69a-1eeb01f9b83c",
        "cursor": {
          "ref": "596b1b27-b5d7-4551-900e-d242a5521df9",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "59be9718-3151-4fa1-b9d9-2e8f179d140d"
        },
        "item": {
          "id": "c6cf73de-fe5c-4ff4-b69a-1eeb01f9b83c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3255fcc2-98b0-4a0e-87bf-130afa4424ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a36b7a5-60ea-4ec3-ab05-e644794e2831",
        "cursor": {
          "ref": "1f0f3ef7-24b5-45e9-b55f-41cba50a47e2",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f8997366-4715-458a-b11e-b550cbe63c1e"
        },
        "item": {
          "id": "4a36b7a5-60ea-4ec3-ab05-e644794e2831",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f3e5c505-09e9-476c-a96b-e5df70ab91c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 477,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542bd1ce-0b7e-4aee-a41c-7f6e4e413393",
        "cursor": {
          "ref": "381ef8ea-fa7e-4c42-b18b-df32b08021ab",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "834e3de3-44c5-4e52-a97d-c1c7e0d11148"
        },
        "item": {
          "id": "542bd1ce-0b7e-4aee-a41c-7f6e4e413393",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9471412f-3b35-438a-a7a4-78d1fb92264c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e130a07-f40a-485f-8517-6d930088441f",
        "cursor": {
          "ref": "5da59ff5-165a-4326-855a-1e6ce8a6d605",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "306284d9-8e51-40ff-ab6e-acf7ab59fdab"
        },
        "item": {
          "id": "7e130a07-f40a-485f-8517-6d930088441f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3754cc27-4f5b-48d5-b33b-7b04291f9988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8a7578-4a75-42a9-b274-ba473f3ba1b3",
        "cursor": {
          "ref": "5e9b6253-acc2-431b-910f-7fb613d89b94",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "40dc71e5-2507-41a6-901b-423d116580f4"
        },
        "item": {
          "id": "8e8a7578-4a75-42a9-b274-ba473f3ba1b3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "40dca4aa-50c2-4fa3-afd6-9912832a327b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4dd01b-2915-40de-a7f1-9d1a779e2e93",
        "cursor": {
          "ref": "50593afa-91e1-4011-ae1b-b0c2c61dc9f4",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "98878e48-629c-4ac4-aaf8-3387812a27a9"
        },
        "item": {
          "id": "6d4dd01b-2915-40de-a7f1-9d1a779e2e93",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b5c4b38d-bafd-4711-b6a9-0421181375e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51a05cc-ba49-489d-a487-e802666b1b04",
        "cursor": {
          "ref": "a34da962-86de-4dc4-ad48-21c3aded7316",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "671183cc-d8cc-42df-af07-6e6b31286455"
        },
        "item": {
          "id": "e51a05cc-ba49-489d-a487-e802666b1b04",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "33c90cf7-5564-48ca-a3c2-f0b15e6be708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2219df9c-bc41-41da-9073-f77a9fb94a33",
        "cursor": {
          "ref": "2adf902b-398a-45b8-aa0d-fb87ab102019",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3b96521e-a6c8-407f-a95b-72a1baec6158"
        },
        "item": {
          "id": "2219df9c-bc41-41da-9073-f77a9fb94a33",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d83e0939-24d0-4ae8-a76d-655f7839dff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8638164c-12a5-4937-90ad-b23fa3ed22bb",
        "cursor": {
          "ref": "9f4c2838-79cc-4ed8-80f8-1af799f20be3",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "30c4fbad-d03d-47c5-9444-d6325701e53b"
        },
        "item": {
          "id": "8638164c-12a5-4937-90ad-b23fa3ed22bb",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "fa0bc323-5a30-463e-8e56-a80244621168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e4d74f-12b4-4bf9-9377-8e421d155414",
        "cursor": {
          "ref": "7974d2d8-521a-4361-ba0c-ed03ebe624bb",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3d78eda9-d12c-48b1-beb5-75b873fa696e"
        },
        "item": {
          "id": "d8e4d74f-12b4-4bf9-9377-8e421d155414",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c3694929-6994-45cc-8b2d-a290e38bd86e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a5b253-96b8-4541-9f43-fbc404303f19",
        "cursor": {
          "ref": "4328a580-2975-4c59-8b0f-08af1b73a95e",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4fbf36c8-40cb-441a-a650-20f6f1f0da1a"
        },
        "item": {
          "id": "57a5b253-96b8-4541-9f43-fbc404303f19",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5d794475-7806-4fc6-9e1f-f2fd06f4e84e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45cb5fd3-8bcf-4964-9b8c-c73f411cea94",
        "cursor": {
          "ref": "54a0d88c-e158-469b-9ed9-82dae4925a57",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5ed0d423-2cee-4701-ac06-963bdb4ba158"
        },
        "item": {
          "id": "45cb5fd3-8bcf-4964-9b8c-c73f411cea94",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7a8712e5-5d3e-4f29-964d-2098409ca754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d80fc64-e5c7-48b9-95b0-6c11f8055ce0",
        "cursor": {
          "ref": "2a7c5336-492d-4702-97e1-2283825bf8da",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d688658f-5a1f-40d1-9e4c-5538175c65f5"
        },
        "item": {
          "id": "9d80fc64-e5c7-48b9-95b0-6c11f8055ce0",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "422c6327-16a5-47da-bc81-2e9dbedfa931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e95f8d83-1bcf-4053-9b36-15878408c01f",
        "cursor": {
          "ref": "704e88f9-23c1-4593-9ab3-c9bd51391c39",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0f0aa390-9c43-43b2-9ccc-861a05146501"
        },
        "item": {
          "id": "e95f8d83-1bcf-4053-9b36-15878408c01f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "027b3f33-8ff2-4cbc-b594-8437392e762d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c40926c-c05b-40ef-b656-051c1a8bc591",
        "cursor": {
          "ref": "a4a6c03e-34b1-478b-a5ce-d17786571bd2",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5004d443-fb36-42ca-be4c-2405957517fb"
        },
        "item": {
          "id": "2c40926c-c05b-40ef-b656-051c1a8bc591",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "00450648-2b45-49f3-8c35-cbced6d3377f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df5d364-23a9-43d2-9566-b38e9884e969",
        "cursor": {
          "ref": "a2c6b8a6-2331-41af-a7c6-acbc2d3435d0",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0454c93d-d1fc-41a7-90b4-73f8ca785ef2"
        },
        "item": {
          "id": "0df5d364-23a9-43d2-9566-b38e9884e969",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "dd322bde-c2f3-41ac-b65b-e892dee7740f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc60782-ffdc-4e55-92bb-002995316668",
        "cursor": {
          "ref": "ac861bee-6d25-4514-a611-52007faebcd0",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "bdc30cb3-561c-458c-85f9-ab72fe91faac"
        },
        "item": {
          "id": "2dc60782-ffdc-4e55-92bb-002995316668",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "24c549f9-9b65-4cc0-8a03-8fd4cfe880a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1871d508-09d6-495f-bd87-ed08759720a3",
        "cursor": {
          "ref": "e9d72f0f-c5a3-4835-8267-3507a72d25f2",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "1ab70ece-440f-4bbc-aa5f-a38a11124a05"
        },
        "item": {
          "id": "1871d508-09d6-495f-bd87-ed08759720a3",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "caaa79ed-c365-4119-b639-f7ce01121512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42bb12b1-1c95-440f-ae43-0f8c25cffc11",
        "cursor": {
          "ref": "eec517aa-4278-4096-8f36-56ef2d8dcf9a",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ffbc5765-3fc3-48cc-8926-91131685860d"
        },
        "item": {
          "id": "42bb12b1-1c95-440f-ae43-0f8c25cffc11",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0bcefd7b-93b4-4eb5-987f-b4fc58b0a201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590973a7-f398-4214-9a2d-1cdc27a8216d",
        "cursor": {
          "ref": "4081305d-eb0b-485e-8532-63b1c9670370",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9632dde0-2b01-4f65-8ee0-f01d3485a767"
        },
        "item": {
          "id": "590973a7-f398-4214-9a2d-1cdc27a8216d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9a16b8cb-bc83-4063-918a-b851b109521c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 770,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfb1b8d8-0b0f-4046-8e3c-161a1f6da3d4",
        "cursor": {
          "ref": "2c30f4f2-ce5c-4f78-bec4-92b65da81373",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "1ddeed64-b949-4cc6-b106-6015b348d29c"
        },
        "item": {
          "id": "bfb1b8d8-0b0f-4046-8e3c-161a1f6da3d4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1e4ee0ab-07e5-485f-86da-e0ee2bded363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4970ba-663f-4f44-8b73-1963e14f51e8",
        "cursor": {
          "ref": "f7828aa6-628f-4975-8488-a613a60f5b0c",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "da19e065-18b9-4644-bcae-ecdc5ce21a1f"
        },
        "item": {
          "id": "ec4970ba-663f-4f44-8b73-1963e14f51e8",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2fe9d810-099d-49cb-9984-2ae4129aa04a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14fa3811-2ae8-4ad7-9795-747ebe416970",
        "cursor": {
          "ref": "1c5847c0-7698-42b9-bf42-f20466464a2d",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "49de525e-19bd-4969-a2a8-6715577e9795"
        },
        "item": {
          "id": "14fa3811-2ae8-4ad7-9795-747ebe416970",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e0b12f04-758e-4857-9c73-db1538faaadf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca14472-bbf4-4e64-8c28-996850df3cf1",
        "cursor": {
          "ref": "7481fd67-7ccc-477b-83bb-7993e009e5d5",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6c8be737-0334-4571-8e84-a070017c525e"
        },
        "item": {
          "id": "3ca14472-bbf4-4e64-8c28-996850df3cf1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "0271bc34-c1a8-4d10-ad5c-a8b724bba121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1050d848-fe71-4c5d-909c-7aaf12f7c79c",
        "cursor": {
          "ref": "24ea11f0-a4c2-43a3-a867-628d829c9f55",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5734d64d-f015-4cf6-9e64-0d9a4091cb74"
        },
        "item": {
          "id": "1050d848-fe71-4c5d-909c-7aaf12f7c79c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "93b38e93-ee3d-4920-9554-9be8fd34bb5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acae961-f99a-433a-8377-e1d2383a7c29",
        "cursor": {
          "ref": "eca15250-649b-47e8-a902-be75f0d8c458",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c0ea9069-02a3-413e-819c-d7a91a527519"
        },
        "item": {
          "id": "8acae961-f99a-433a-8377-e1d2383a7c29",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7888161b-d4bd-44bd-b870-752aafff7e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984a02fb-0f9c-43eb-ac24-b9c039738030",
        "cursor": {
          "ref": "7ab24ef3-3a77-46ae-871b-01de3897a761",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b660ca4a-4712-42db-956e-9028c872ee56"
        },
        "item": {
          "id": "984a02fb-0f9c-43eb-ac24-b9c039738030",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "27eaefe1-566a-461e-ab22-91848b13cd49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5368d1-7b3a-4eeb-9325-be2b01c23341",
        "cursor": {
          "ref": "fd9a9bcf-d81a-4249-8f51-add5284ba645",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c175eba0-338f-4a56-b3ad-3f3b3fb671b8"
        },
        "item": {
          "id": "8b5368d1-7b3a-4eeb-9325-be2b01c23341",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b84290d8-2bc1-4b53-a279-fe71b0477854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff112a5-d810-4d22-b798-2a2ef33f0ba8",
        "cursor": {
          "ref": "755fe6be-195a-443a-8ef7-b3ea7b7a19ec",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9855062a-1a9f-44f6-ba96-cc05a21a3638"
        },
        "item": {
          "id": "3ff112a5-d810-4d22-b798-2a2ef33f0ba8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "73fabd4a-1a62-4876-88a9-9cb87609667f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401ac6a5-c51e-42eb-a01c-60a5b2cbef74",
        "cursor": {
          "ref": "d98330d4-6464-4dc1-8b49-e487ce1c1a74",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a65557ce-4550-4ce5-8f76-6046a02d992d"
        },
        "item": {
          "id": "401ac6a5-c51e-42eb-a01c-60a5b2cbef74",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "fc404e69-8055-4419-825b-6e6355ed64df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a65c39d-4698-4c4f-ad76-3a11d7fdea79",
        "cursor": {
          "ref": "2a5d34b3-f31c-40e2-b389-687dd072ac6b",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c2cdb2b7-b7c6-4d3e-8ef6-4169f9cd2e64"
        },
        "item": {
          "id": "3a65c39d-4698-4c4f-ad76-3a11d7fdea79",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5d862ef8-b200-4e3a-a83e-97dc544b3b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b69d1df-9849-4302-a946-92ea5104c6d6",
        "cursor": {
          "ref": "bcae9376-f824-4dc6-9a33-07be7a07db0a",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b6152779-f750-49d8-bf51-744f78fbfa8d"
        },
        "item": {
          "id": "2b69d1df-9849-4302-a946-92ea5104c6d6",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d0631806-0fbf-44ec-ae76-a6ab0b90ee79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bda1962-4483-4ecd-9ca1-6c96148f2e7a",
        "cursor": {
          "ref": "c5f30ba1-a2d5-47bd-9cac-979424cd43f3",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6cb4dce2-6f4f-490b-8ae6-bf56fe809f6f"
        },
        "item": {
          "id": "6bda1962-4483-4ecd-9ca1-6c96148f2e7a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5ee1af65-fe89-4d94-bd50-bc71cd9c6caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf622742-cf32-4b83-b476-fd0a2911542d",
        "cursor": {
          "ref": "aa35b781-7322-4ed4-a5a1-713e0aa86430",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b177b53d-fe41-4402-87d6-f1a0119214ed"
        },
        "item": {
          "id": "cf622742-cf32-4b83-b476-fd0a2911542d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "663e1afb-6bcf-47dc-a2d2-1d9bc6a609d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07be2c5f-9214-41a5-989a-f8d47f7e39f5",
        "cursor": {
          "ref": "3ca61d56-e6bd-4bfa-b66c-f14472f53fac",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "91513397-f3b1-42bd-886e-9244468399a3"
        },
        "item": {
          "id": "07be2c5f-9214-41a5-989a-f8d47f7e39f5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ba8a838e-5e37-45e0-a87c-6e4bd14aa919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613fb55a-a197-4017-b596-b11e879fdb40",
        "cursor": {
          "ref": "391bed9c-1552-4094-af2c-28d7251adfef",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "4ccdcc21-0db8-43cc-b25e-ad0fcbdee812"
        },
        "item": {
          "id": "613fb55a-a197-4017-b596-b11e879fdb40",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ac356a5e-a1d1-45cb-b457-edad64c5a8df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b317d2d9-1d05-4948-9090-659732489df4",
        "cursor": {
          "ref": "06ee1b89-49c8-4672-bc5b-d527d887c4d7",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "07b7128c-4d46-468e-ba5b-51a7f33cce68"
        },
        "item": {
          "id": "b317d2d9-1d05-4948-9090-659732489df4",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "be17ce5b-cd2d-4b3d-8846-49d0e03dda5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c754f38-2865-46af-a5ee-c06866532441",
        "cursor": {
          "ref": "16e47e20-d809-40e0-988b-15d464a1f2bb",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6f733e12-8b51-4e8b-b81a-12d3c9233202"
        },
        "item": {
          "id": "1c754f38-2865-46af-a5ee-c06866532441",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "4e928625-7201-4e59-bead-3e57e3f46751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf37927-c183-464e-9b4e-c42fdcd6c9bf",
        "cursor": {
          "ref": "067854ca-bc21-4924-8f10-50def43bcc5f",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "fbba3ab7-5280-4d81-84a1-db7f6335c43f"
        },
        "item": {
          "id": "abf37927-c183-464e-9b4e-c42fdcd6c9bf",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "227d4238-ddbd-44bc-b6dd-6cdc29566a40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8a00ed-86db-4e74-98b5-338ec640e51b",
        "cursor": {
          "ref": "24d95b36-ccfb-4cce-ab17-d671c3b9d2c5",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4a5f5197-71b9-4292-85a6-cfe1330e6386"
        },
        "item": {
          "id": "cb8a00ed-86db-4e74-98b5-338ec640e51b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "cb7f636c-7e47-48ae-a772-85029dac90d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa43178-51a9-4e8f-a42b-771701b90976",
        "cursor": {
          "ref": "c32c64a4-b281-4265-882e-db20354e94ea",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "73324e42-7abe-4a1e-acb4-4cc1b246d511"
        },
        "item": {
          "id": "caa43178-51a9-4e8f-a42b-771701b90976",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ee5d3552-3fd0-42c7-bf03-b3b4c41b439b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d52932ed-b108-4c23-908f-502401dc1111",
        "cursor": {
          "ref": "94698882-f808-4839-8fb6-be1e0777f9a0",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "813db630-67ad-4186-bb1a-6b78661af7a7"
        },
        "item": {
          "id": "d52932ed-b108-4c23-908f-502401dc1111",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "921a15f9-5495-435f-b97b-394e98eae483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12491d72-be23-4a7f-b76b-32401899ec72",
        "cursor": {
          "ref": "c5909b51-03b6-4c63-812f-e6bb6f746bc1",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0063ed22-e17e-4897-8092-c05ffc0c633a"
        },
        "item": {
          "id": "12491d72-be23-4a7f-b76b-32401899ec72",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e6871f4d-47f4-40bb-9403-4da86abe5ecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5adcbbd0-c34c-4e57-aef2-bbc479d15d48",
        "cursor": {
          "ref": "f417d85b-d049-45c2-9002-178b02d814d5",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "479368f8-f002-467f-a433-86dd5424ad3c"
        },
        "item": {
          "id": "5adcbbd0-c34c-4e57-aef2-bbc479d15d48",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "366cf626-19f2-4499-ada8-1633e6951459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a7042c-7c40-4f3d-a769-a47d5617c408",
        "cursor": {
          "ref": "131d6efe-b443-4e13-93d6-f0ec099db08d",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9e42ea48-9f8c-4c02-95da-e69fdfc193a7"
        },
        "item": {
          "id": "e9a7042c-7c40-4f3d-a769-a47d5617c408",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ba6e36d5-b7b2-4e56-a351-bee4d3833e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9804012d-fcde-4840-9913-08d279334fd1",
        "cursor": {
          "ref": "d2b135d5-9766-49b2-9b93-4883a3277ae6",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b65463c8-3cc0-49c9-9b82-f66790ac688e"
        },
        "item": {
          "id": "9804012d-fcde-4840-9913-08d279334fd1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "305e679c-1203-493e-b47d-efe61caca6bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c44c21-dc20-45ad-96e3-6fbb1e0807d5",
        "cursor": {
          "ref": "0978909c-648e-48d2-9f2f-7449fe41ceb6",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3dce01b0-f63f-4629-b5e4-6b9603b9f41b"
        },
        "item": {
          "id": "e8c44c21-dc20-45ad-96e3-6fbb1e0807d5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "44b60de3-b3e0-467b-9bc5-70bf44caf275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cabfe80-c790-48a9-b023-0b5ad9d319be",
        "cursor": {
          "ref": "08c6b57b-02d3-4778-8d78-7b0273bac346",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0fc6a1ed-ebae-47cc-b38b-1d1444131b51"
        },
        "item": {
          "id": "9cabfe80-c790-48a9-b023-0b5ad9d319be",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5095ecff-e61f-4d20-befa-b95d5bce16c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bce6117-e9b0-4f5c-b37d-19df3d802fc0",
        "cursor": {
          "ref": "d7fee923-8be0-4886-aabe-1ffa61f8e0ae",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "740f9c32-09e3-4215-82a1-7dee49f523da"
        },
        "item": {
          "id": "1bce6117-e9b0-4f5c-b37d-19df3d802fc0",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "649346d4-ad7c-4603-bd66-cf48b877971a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5363c799-5c92-4792-95ba-bd69eae0b7dc",
        "cursor": {
          "ref": "0cedd0e8-1242-421c-bf17-b0974ad28c09",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "14a8961f-9406-456c-ab5e-870249331d19"
        },
        "item": {
          "id": "5363c799-5c92-4792-95ba-bd69eae0b7dc",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "fbe29a24-f740-4b5b-940f-1a03f832d33e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa89220d-2711-4121-9458-1dba51917050",
        "cursor": {
          "ref": "2d54aa1d-87a9-4dd9-aec6-3cce0b2944ec",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "837b71ba-73af-4e97-8ae5-91fa3c1c9235"
        },
        "item": {
          "id": "aa89220d-2711-4121-9458-1dba51917050",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9a9a2fdf-abeb-4d96-b3f6-e16251e5c710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0a6703-96f2-482e-8c4c-0b13e0025964",
        "cursor": {
          "ref": "8a2d5c66-b697-4469-82b9-4791fd0ae6ed",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "20f4711c-3926-4f5c-92a5-52e539806b57"
        },
        "item": {
          "id": "be0a6703-96f2-482e-8c4c-0b13e0025964",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b3342074-309d-40ac-b698-970fa25839c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82cf55ee-1273-4a7d-85d8-1a2a8e2ebfa4",
        "cursor": {
          "ref": "fcae1680-3b39-4336-ab10-7eaae77c6288",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e672a5cd-74d3-40c9-84f6-6c784ff9c2d5"
        },
        "item": {
          "id": "82cf55ee-1273-4a7d-85d8-1a2a8e2ebfa4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4144cad3-b766-4175-a853-c4be11832c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc70f9d1-cfc9-43bc-bd6d-8578472700b4",
        "cursor": {
          "ref": "a520ef1c-af3c-426b-96a1-890a2b0b52b8",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a618e8d4-ed58-4448-9065-6094d331d1b5"
        },
        "item": {
          "id": "bc70f9d1-cfc9-43bc-bd6d-8578472700b4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "cfa3615d-6db2-4311-a030-b0ecacd62ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de32b70-3e59-4544-8357-836021df59ea",
        "cursor": {
          "ref": "ecdd2528-7ea0-4f07-955b-c204703e7f2e",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "72aebade-1ff4-41cf-b5c0-33b3d452304d"
        },
        "item": {
          "id": "2de32b70-3e59-4544-8357-836021df59ea",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "796793fb-eaf2-4e4f-af8d-b534d21d4759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc2b5f37-0325-404e-af3e-ae7d41d53e5f",
        "cursor": {
          "ref": "dba8b97b-ac08-4cdd-8a17-f07912a469b6",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c542343d-b677-43d0-ad84-a91f09e55e33"
        },
        "item": {
          "id": "fc2b5f37-0325-404e-af3e-ae7d41d53e5f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "60924c16-0a1a-4f2c-a794-a80ceb4b8746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b0c8a8c-8624-4554-95f7-baabf7557ed5",
        "cursor": {
          "ref": "549d52d0-583a-434d-a751-8b1e24c25b90",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "63218642-477d-4d5f-92b0-343e06c14845"
        },
        "item": {
          "id": "5b0c8a8c-8624-4554-95f7-baabf7557ed5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "895933a4-11f7-4cde-a671-37eb831fd70a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5aa1c2e-d367-44d0-868a-883fb6b8aa12",
        "cursor": {
          "ref": "7495f73e-c7c1-4623-aabd-0e049f680caa",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "221cc391-3564-4854-a968-f01d34e7edfa"
        },
        "item": {
          "id": "b5aa1c2e-d367-44d0-868a-883fb6b8aa12",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ca62777c-b39d-4003-a8fc-21d46043d459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99ff17b-5c83-4aba-95ac-2fbe83555410",
        "cursor": {
          "ref": "47de41c1-a104-4586-afa4-1c7d71aa5b5a",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "21b71b8e-f842-40f3-80a6-cdb52bc6fd76"
        },
        "item": {
          "id": "f99ff17b-5c83-4aba-95ac-2fbe83555410",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "8df26f2e-6d33-47f8-b1bf-fd864854a49f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13fe35a1-3636-4b4b-859a-b3084be2a916",
        "cursor": {
          "ref": "ce3d6c06-a0a3-4c88-a3df-a198af56a236",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9b3577be-7c96-4f3a-b6d1-0dfda3654639"
        },
        "item": {
          "id": "13fe35a1-3636-4b4b-859a-b3084be2a916",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "0e2b76c9-e5a0-463b-a493-1e23b77884ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f50e9b3-564c-4c3d-adb0-a8e108730703",
        "cursor": {
          "ref": "b42576c7-2d78-48ce-9d31-499a498a972b",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "753c5336-ea3e-4ba2-b4f1-48a2903e0b56"
        },
        "item": {
          "id": "4f50e9b3-564c-4c3d-adb0-a8e108730703",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2fbe6723-6f82-4754-8646-da28a056fba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a44966c2-8996-434f-8471-d56951f67e57",
        "cursor": {
          "ref": "acd68520-5c63-4f62-b984-bd5c63b35636",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "eef7aecd-16f3-490e-bf5c-e6a247e98393"
        },
        "item": {
          "id": "a44966c2-8996-434f-8471-d56951f67e57",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6a416118-1aeb-4925-adc3-4e37c288519b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeed891b-ca63-4602-8057-83c471b88e1d",
        "cursor": {
          "ref": "7f5ed16e-e477-455c-b105-6f5ee83b407b",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c24a06ca-7f59-40e4-8c45-a7d5c37193ff"
        },
        "item": {
          "id": "eeed891b-ca63-4602-8057-83c471b88e1d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "cabb9ece-031f-4032-9e4e-749d654ab24c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e4ee02-8ac4-4239-b9b6-8042d606b65c",
        "cursor": {
          "ref": "7a8abf25-77f0-4407-87d7-904fe366a749",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6b35e41b-3783-438f-a51f-249459720ada"
        },
        "item": {
          "id": "c7e4ee02-8ac4-4239-b9b6-8042d606b65c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7fae9294-f44b-441a-8de5-d7d1145fb27c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68edf3b2-8977-4bd6-aa4e-cb039a22e175",
        "cursor": {
          "ref": "9e8f76da-4d9c-4893-b7f2-5776e33042c9",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0f821073-2839-47e8-9390-431c7ba28445"
        },
        "item": {
          "id": "68edf3b2-8977-4bd6-aa4e-cb039a22e175",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "66d505e0-1696-4327-86f3-40c5092f74ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2af10b-8718-4a88-9fdb-d461281fbdf4",
        "cursor": {
          "ref": "1cd01351-6a2c-47f0-8794-c17e8698a412",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "05439227-b30d-4151-a82d-f0bac5bc57c8"
        },
        "item": {
          "id": "0c2af10b-8718-4a88-9fdb-d461281fbdf4",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "6680e671-103b-407d-a8f5-2ac151c94c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "456e96d1-916f-465c-9d84-f936069b94c6",
        "cursor": {
          "ref": "eec085a0-12c3-4387-8778-b681df9ad82f",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "db71b493-1612-4096-8e5e-51e6f2f22b27"
        },
        "item": {
          "id": "456e96d1-916f-465c-9d84-f936069b94c6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ec52c2c1-2f4d-4a48-a1d6-63aeade41cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e3f80a9-08dd-4f24-9366-49273e62bfd5",
        "cursor": {
          "ref": "00ebf36e-291d-45ce-8a99-9a178626822d",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3ece161b-b385-4b25-b0c7-bc28a88b7fa7"
        },
        "item": {
          "id": "2e3f80a9-08dd-4f24-9366-49273e62bfd5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "dbf94d35-68a4-4fe2-af67-a1904124be09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d8ce591-ae5b-4d4d-8e03-68277e449639",
        "cursor": {
          "ref": "412eda4e-bab7-4e32-8c4c-939a7e656fbe",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "73b1eaf4-dd92-4ded-80fd-5251d05a0f0e"
        },
        "item": {
          "id": "4d8ce591-ae5b-4d4d-8e03-68277e449639",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0e63be97-5eea-4a6b-9bc7-b0c01ea2e176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ca87f1-bf8b-4dbc-86f8-93e3abf0c930",
        "cursor": {
          "ref": "49cfb37d-cd8e-4acb-8fe8-4b224c19babf",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "52cfb9e0-621e-4ccd-90d1-d2571cb76b47"
        },
        "item": {
          "id": "c4ca87f1-bf8b-4dbc-86f8-93e3abf0c930",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "672c6242-896d-4b26-9e63-66ad68d830ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539e5b65-163b-414f-a95d-daaaf1dca1a7",
        "cursor": {
          "ref": "87e09678-8af9-4dbf-bf89-1f6d3bf9413d",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cc192e44-ddb6-46f1-8a4b-51efcd8c7e69"
        },
        "item": {
          "id": "539e5b65-163b-414f-a95d-daaaf1dca1a7",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ee601996-c76b-4539-9b32-b3cd18ed56d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "540b6035-c4ee-4182-9f2a-4792c4a2f109",
        "cursor": {
          "ref": "26aa743f-47b4-48b3-a4ae-52abaff4deea",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a43a991d-57c4-40f3-9184-8f53f3b8c3f1"
        },
        "item": {
          "id": "540b6035-c4ee-4182-9f2a-4792c4a2f109",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7f2951de-a69f-44aa-81c7-35b19bf50ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "208d006b-8bbc-411a-bee1-343a6ebdeb58",
        "cursor": {
          "ref": "125982e4-3250-4ecd-ba4f-32c0ff22037a",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f078eb9b-7cb1-4b1f-9ff0-22dacfcd048d"
        },
        "item": {
          "id": "208d006b-8bbc-411a-bee1-343a6ebdeb58",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d3eb7cb1-27be-4435-a696-691c97f652c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a41c7e-acc1-4533-ad14-ee13a778d34c",
        "cursor": {
          "ref": "ecf488f6-83d1-4098-be10-5b2487d79b82",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "31932dda-5198-4c5c-838e-b267919175a3"
        },
        "item": {
          "id": "67a41c7e-acc1-4533-ad14-ee13a778d34c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "bedb0905-ba7c-436b-87d0-f1582a310580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7340828d-0449-46e8-bca3-ef0d39cf9d41",
        "cursor": {
          "ref": "2cb7a356-a835-4535-b262-328f9c96fbbb",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "048fdcb0-073e-4b15-9475-183e13fef765"
        },
        "item": {
          "id": "7340828d-0449-46e8-bca3-ef0d39cf9d41",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f27e91ec-e06d-45e4-a848-69d7da6cb7e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1058d152-87a8-42cc-b386-982e824fae8c",
        "cursor": {
          "ref": "d78454fc-4624-46c7-b2ed-a1a953fe628d",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0a33ae80-af32-40be-9270-3a2c243dce2f"
        },
        "item": {
          "id": "1058d152-87a8-42cc-b386-982e824fae8c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "475841e2-992e-445e-8111-ce697309c8d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee903a7-da05-472b-a632-c4b9b9d84767",
        "cursor": {
          "ref": "b54ce3a5-cf1d-4b98-b0b6-d4d0ef80fa10",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ff5ec7d0-40b8-48b5-8573-f248bcc2d647"
        },
        "item": {
          "id": "8ee903a7-da05-472b-a632-c4b9b9d84767",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "74d6b604-8738-4523-964d-1708f9573bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a164b3b-90ec-4289-b962-21df6c12214d",
        "cursor": {
          "ref": "38250b22-6ca7-4835-90b1-3c09f3678ea4",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b9831f51-a2c6-456c-9cdd-d802202f9d9b"
        },
        "item": {
          "id": "7a164b3b-90ec-4289-b962-21df6c12214d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6653b37a-16f4-4c61-9bd4-d18f3eb6e73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17d86b5-4d81-494a-ae35-5de7a6b5e99b",
        "cursor": {
          "ref": "fa68b245-dd74-4875-a444-8aaefbfd4910",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ad32c3c8-ed98-4357-b47d-7bedb861ceb0"
        },
        "item": {
          "id": "b17d86b5-4d81-494a-ae35-5de7a6b5e99b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1477210d-2713-4eb6-8409-c2e1984d1950",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "fe408c9b-0ba6-4037-956e-940f31f3f94d",
        "cursor": {
          "ref": "d0049f44-549e-4f9e-9532-59f291550b72",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a1bb3af1-6db2-44aa-a088-8f21fceeb8a5"
        },
        "item": {
          "id": "fe408c9b-0ba6-4037-956e-940f31f3f94d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "ab8d7254-2274-4a45-a18a-696f90e507e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "dae13b0e-d258-4424-a84a-f27fc572d2f0",
        "cursor": {
          "ref": "aaf8896e-3046-46ed-84cd-dc51bb004322",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c9fbfee1-9e52-4599-9959-29eee7d972d8"
        },
        "item": {
          "id": "dae13b0e-d258-4424-a84a-f27fc572d2f0",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "be675630-977f-46e9-9227-4dfe0b05a013",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "4637f9bd-fcfa-407e-b5e0-66414a20929b",
        "cursor": {
          "ref": "37b59f04-e62d-4e7f-8f56-30a8d56545c3",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "fb42ba31-f221-4b77-98b5-8ccfd23c8f8e"
        },
        "item": {
          "id": "4637f9bd-fcfa-407e-b5e0-66414a20929b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "78d7c8eb-298e-46ce-8a0a-1e9c1d7d5153",
          "status": "OK",
          "code": 200,
          "responseTime": 2429,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3e54fa-bc7f-4b6d-bed2-92706db8dedb",
        "cursor": {
          "ref": "1b2dab20-f0a5-4586-808e-fe8fb6bb01f8",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a6e28d51-63c4-4286-b413-8f830ac07c85"
        },
        "item": {
          "id": "6a3e54fa-bc7f-4b6d-bed2-92706db8dedb",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "bf51b653-d50c-4f63-b818-f227ba78df9d",
          "status": "OK",
          "code": 200,
          "responseTime": 2931,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7333f7-c37d-4ba8-8bf0-0d440b39d2ed",
        "cursor": {
          "ref": "e09b437d-43c3-4ed7-a841-4278eb315e9a",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "27f0b338-b9f0-4e4d-ba9e-b6eed4e84742"
        },
        "item": {
          "id": "6f7333f7-c37d-4ba8-8bf0-0d440b39d2ed",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d2374d6d-5a41-422b-9a49-614099111635",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "6f7333f7-c37d-4ba8-8bf0-0d440b39d2ed",
        "cursor": {
          "ref": "e09b437d-43c3-4ed7-a841-4278eb315e9a",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "27f0b338-b9f0-4e4d-ba9e-b6eed4e84742"
        },
        "item": {
          "id": "6f7333f7-c37d-4ba8-8bf0-0d440b39d2ed",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d2374d6d-5a41-422b-9a49-614099111635",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "6f7333f7-c37d-4ba8-8bf0-0d440b39d2ed",
        "cursor": {
          "ref": "e09b437d-43c3-4ed7-a841-4278eb315e9a",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "27f0b338-b9f0-4e4d-ba9e-b6eed4e84742"
        },
        "item": {
          "id": "6f7333f7-c37d-4ba8-8bf0-0d440b39d2ed",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d2374d6d-5a41-422b-9a49-614099111635",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "b17f0d77-4c55-4e7c-a4af-8fdc3ad7ace6",
        "cursor": {
          "ref": "0c2a0de2-ba02-48b9-8458-4a3c6f267573",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0931c663-f748-485c-a987-d388105f1fca"
        },
        "item": {
          "id": "b17f0d77-4c55-4e7c-a4af-8fdc3ad7ace6",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "d7b1931d-c3e5-4f4e-86b8-79d1fa2e311f",
          "status": "OK",
          "code": 200,
          "responseTime": 369,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "43fd42b3-3a26-454f-9d1c-ba0511cbf2e9",
        "cursor": {
          "ref": "4eaa0e26-c75f-4b72-b1e4-1fc8a6ea0cea",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7718b4c7-9331-43bc-97d8-387a5ee070aa"
        },
        "item": {
          "id": "43fd42b3-3a26-454f-9d1c-ba0511cbf2e9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2cb6ebe6-079b-4bd3-b7fb-6f0ed47e1818",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "43fd42b3-3a26-454f-9d1c-ba0511cbf2e9",
        "cursor": {
          "ref": "4eaa0e26-c75f-4b72-b1e4-1fc8a6ea0cea",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7718b4c7-9331-43bc-97d8-387a5ee070aa"
        },
        "item": {
          "id": "43fd42b3-3a26-454f-9d1c-ba0511cbf2e9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2cb6ebe6-079b-4bd3-b7fb-6f0ed47e1818",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "439be2ca-64e1-44c9-b231-a8b4f036da9c",
        "cursor": {
          "ref": "39ead403-c031-4c76-a368-5d6f572d1479",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e8f7aa16-defc-42cd-8606-aa00654d2563"
        },
        "item": {
          "id": "439be2ca-64e1-44c9-b231-a8b4f036da9c",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "68b38df4-9903-4a8f-840d-1d0279611ee1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 152,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "752c3300-efd3-4a3a-9d32-c611bfa01cb6",
        "cursor": {
          "ref": "f05ae1c9-0adb-4890-9178-78ea775cc9b4",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3dc00f82-e94b-47e2-8b42-ecaf4bab8b9d"
        },
        "item": {
          "id": "752c3300-efd3-4a3a-9d32-c611bfa01cb6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "398a406b-7c14-45b7-9fcf-5907860908c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "752c3300-efd3-4a3a-9d32-c611bfa01cb6",
        "cursor": {
          "ref": "f05ae1c9-0adb-4890-9178-78ea775cc9b4",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3dc00f82-e94b-47e2-8b42-ecaf4bab8b9d"
        },
        "item": {
          "id": "752c3300-efd3-4a3a-9d32-c611bfa01cb6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "398a406b-7c14-45b7-9fcf-5907860908c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "adb62b20-3053-49e5-b379-e42c6eacd3da",
        "cursor": {
          "ref": "a139025a-f67a-4d18-ad65-826f494df5d0",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fb8d2d68-9b19-4d51-a764-43db49b211d0"
        },
        "item": {
          "id": "adb62b20-3053-49e5-b379-e42c6eacd3da",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "efcd3b53-266d-4bca-aa4d-cc6d7e78d702",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}