{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "27c6b3b5-a36e-4d7c-ac90-5579a58fec18",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3216f187-208a-491e-983d-981da7b9509d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "31634e70-e4b8-4a48-ac50-1462f6d6ca73",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5384f255-547f-4b24-9a5c-45004ea13f2f"
                }
              }
            ]
          },
          {
            "id": "b6cdd7f3-891c-4095-89f8-a6919424aa8b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "97729b5b-d17d-4af3-9fb7-ccbcf730a7e2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fbb4e97a-a092-479a-9a32-651b2c6786c9"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d333f2c4-c9c7-4019-91ac-1379a3b1856d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "60437ada-2927-4acf-ba28-f7405249f504",
            "name": "Positive Testing",
            "item": [
              {
                "id": "88dbb256-8e78-40a0-a064-2d88651df75f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa58f0ab-00b7-4e9b-a52e-4f6d12cc0de9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c39217e1-e5b4-4f7e-931e-0f0bb399602a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bdb63bd6-40e0-49e6-9b48-272c83003f12",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3f2802bb-96db-4acd-a4c0-856a0c268760"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6e2dd62e-d9de-45f8-ac3a-20dc824a56b7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ec4f2b7d-6b71-46c6-b197-f53efef9afe8"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f14083b7-e9a7-44e4-89ab-5d61406cfe4c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c2c81408-d809-4169-b23f-b6e1c05370c5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "886bd1d8-ab02-4c03-87a8-745d76f3f018",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "864c3bfc-221f-454b-a756-ac81b8f91282"
            }
          }
        ]
      },
      {
        "id": "b2ef0eef-908c-4021-acaa-5f0ef771824c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e0900204-4636-4638-870e-f8ac20c6aebb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "44e652f6-409e-489d-a16f-b6cdf22b9133",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cffdf894-28ef-43ff-9b3a-deae39ef64b7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc070d6-e50a-49c7-9a1e-59c3b55575f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc8be574-f7bf-4e62-a161-0f7e04d6f5a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701b9dbb-8283-43b8-a4ce-0f96704c1e2f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f10563a-bc92-47db-8f0a-10c14ae5c27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d17a520-8076-4454-a65d-4db761e69519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d075f1a-49b1-43e8-b4d4-e8eedf404e44",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d2bb5b-78a5-4c2a-86cb-e55cc6082f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8e1ec13-564d-4ebb-a470-16a87832a941"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cb07e2d4-5611-425c-b7c8-69c6d031b612",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4e19c526-5e7a-459a-be24-14af3bc523bc",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06755ae-57c7-4824-8a76-b93c7991cb7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84400b0c-4bc9-437a-ac28-f29d87a16f05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2743f2ce-66a6-4025-9122-25e1743c9625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87572636-11c6-4f54-b2e7-f746fd6362d4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4b5ae49f-1ab1-4e26-b8e1-70ba2aabcb4b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "05287d43-3de3-4b48-98d7-2d3c3959b3ea",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0813ebb5-5392-4af0-9fba-ac5844e5dbaf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a81944b6-02ac-4676-a71d-9f9ceb0b9641"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fc1b0185-c784-4888-a4ee-a9c410a25d96",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "8122079b-a1be-4c24-93ed-2971b9baef7e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4745634-a190-4289-840a-0034d08d31f2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "690bbe2c-493f-4b37-95f3-8cd9e7a2eba6"
            }
          }
        ]
      },
      {
        "id": "2a888854-4172-4445-97e2-1dbb64c2a31e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b31bac97-0f21-4644-84be-3aafea797e6d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "faebfcd9-fec3-40f3-bd34-4f2dd0dbb270",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7e36831e-3641-40c0-9272-58baf3d41fe2",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "251133ab-6191-4ca1-9877-b0a0302debbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc04c17b-a884-414b-8ec2-9787cd52196a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf5e959-9a9e-4504-b948-fe282b35d2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90024e6a-5109-4f12-b08b-c6cafab86ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec857f2-ab85-4f09-8b7a-1f471ae02a57",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e69048-d919-4d1a-ad0e-22039c8762f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "879b7dbd-5040-462d-9066-5172a99aaf89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dfca485-313c-4de6-bc04-1476f9d10a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34fdcbe4-3b0c-449a-9332-ee93201a7b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfca083-37fb-48fc-b61c-545c4e3a82d3",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3110fa-1eba-4003-bc75-37e2e7816795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cedbb715-87ca-4ae7-879f-7b5d54799815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7424c838-d91f-4452-a99b-fd32f5798534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee08952b-9d1a-4986-ac98-bfcc028bf98f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f948272-fb4c-446d-ab6d-e9536197e6fa",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c3393c-6dd0-4a5f-b833-1f7da00a463c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a133efd-c7c8-4950-89bd-91d4911af9b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0762cc19-5406-4242-aee3-deb53bc345b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "192f4508-419f-4efc-b4a9-1c03013b4235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e47ec363-7b67-4a6c-8de7-a13bcf288a3f",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5fc815-9aab-43cb-8705-7e370a02264e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53644ab3-16f2-4ec3-8adc-678143c2dbac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1264a7ca-7580-47ea-9394-d066932dec72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eae9e910-83c9-4ee9-a897-41120e5fccd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721bf3f8-5d61-4919-818a-bbaaafc1b7a2",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "010c81f1-0a56-45b7-b18a-4622112317b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b98a4cf-cc30-4c60-bd2d-af3bc3c9cb10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b344fb84-6d93-4cd6-90a9-4f1a590b18ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec539d87-74e0-4fd1-b40e-f59bf6882286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c28164-675f-4843-8f60-9956d87a81d7",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f399ce-2a0b-4562-a66a-a5036e83ee6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2af4628-4948-42f0-a87c-67d1df8da2f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b636dc1-c806-4661-88c5-cb7a557a90d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c938a67-111d-41de-a576-bd88a2a055ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc9e431-d917-4187-8a6a-fedc08bcc3a2",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b32140-5378-446a-ba6c-2433f8493ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de1d41ef-5499-4250-91a9-7b3f9d0d1f01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7b3b55-37d2-488a-bfce-1ebe660faf2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9587fad8-e261-453a-ac7a-4cab1f06c93e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "682a7de5-5db9-4b8d-a611-9853c17dad42",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21fab6b4-1e06-47d8-986c-0e2522204f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b0ede7e-b5f8-4b9e-afdf-11c64e1ab930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e66db6-87bd-43d0-975b-e13bf9635d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9bd4769-a83f-4cad-92cc-61b79b2e18b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53a3354-20d9-46b6-bf13-f377b9aaca02",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60b6878-f208-4f61-90d6-44f271b4ad9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55620c29-548d-49d9-918c-f4fb0a1caba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a96e6f-716a-4dbd-9b08-554c697e75ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1483a238-a2dd-4100-b246-300a859b53a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b496bd07-076a-4ecf-89d2-6a58f9fb55c3",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82987bdb-f0dd-444b-89b5-04c7046d7c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f03def4-2c0a-4723-8660-67bae9336dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4bf3c37-395c-48fe-843b-1db2ec14b4a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65b56e57-720f-4dcb-8c81-c1f2b0be7156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b337068-8820-44f5-aa26-056bfc5c4b20",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc207af-ad8d-4ec2-9825-e47ed8ab8bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2680fb3f-1675-49ed-a42e-f9ab9c1f590a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d5c600-8567-41ab-b7a8-946734e6b850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8071c184-c707-41e8-9e6a-c053cea295d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8dd178c-a863-4234-badc-c4ff2ee651b9",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd3b181-aded-4d23-89fe-604d00dd765d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddb114c2-5c04-4b5b-90c8-67688b149732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f95f68-e1f9-4fb8-8828-9d175a74cca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5353bac9-22a4-446c-a36e-78f60e69dda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e80c74-9aa8-4b18-a759-e36e3e38ddb6",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b306bef-f354-4c37-aeed-13bf2eb4b1f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbbdb541-5055-4c7e-bf4a-fbdbacce7dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b6a977-a97e-4c36-a205-50c71454089f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f405acf-c10d-4b42-a555-e265d3d6ec5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5449b499-1f56-4dd2-8cd1-b661471e7a28",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a836b7b9-6abd-4036-a809-239233a37a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7352325a-d32d-4ba1-9b59-57d54e792a90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74bb72f-3389-470d-9a1b-66f13cc0915d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b37b3f74-d33f-40c8-bcce-417f9c7ff8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1d2bdb-b64c-4041-8300-95db3f6c0baf",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cee7a27-800f-41d0-a232-6670ee621745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0998d672-0892-4665-b32a-daddcb930faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3b6c1e-6129-406e-ab49-ee7894c5c211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4142beb8-f895-49d2-94dd-6b7cae168612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33047db-6615-44a2-9c77-6adbd83f30fd",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb6aee2-1c50-4559-a872-96d328f584ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2cc08b9-725f-4fb6-9051-1aeb5ced0829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b232bad-42d1-4f21-92e3-02c00dd9bde6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac222ff3-f13b-4cf5-b2ce-9584a8c5406c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650970d8-40ac-496a-a136-22213b55ec25",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6c86f4-2d1e-4be4-864c-69886b33d72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "379392eb-7024-4c0c-b7f5-954d69994889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34a5100-9433-43c7-b18c-1e6114d0a77e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6712862b-a2ee-4817-8b22-cf2026dd361a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b47756-7101-4b0e-9fbe-bcecbd747175",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8da02ca-10ec-4d2e-be36-5140d32f644d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d5dbbd0-b221-49b0-b610-efd0faae2abe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48819dd4-5296-4bab-bcf2-1052a3548937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a9bfca4-dd34-4eb4-aec9-92d9857e3fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "372ef314-e451-41a3-aa0a-bf61a1d80662",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54785157-b967-4a01-ad09-def3704fbcfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b9b5a24-6cbd-4d39-9aeb-0f19b65b0f00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e013313f-9f59-408e-856a-9917cdcb5962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a442a3aa-23c7-45bb-8ce4-2c7b103f26dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df766988-79b1-4e81-bfba-be52dd20339e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e460b05-59c2-4e65-9b1f-a1495804c7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be94d561-1e30-4e8f-99a7-00ad651f6089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "805bb31e-6070-464d-8c94-2eeefcc08efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b237d4b-e2c8-4aba-805a-b4dd966d8d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef6fe91-da0c-4edb-aeed-fd1deed6170e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "635beead-543c-4614-bb70-e6b15917cec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee86fe6-d38c-4794-a959-e9d32bdd66bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677e0ae3-d274-4c4e-a23f-65ee141c739c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a528d7-b08f-465d-ab77-7e2ed3491127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390de08c-72cb-4cf8-aedc-e035139684b2",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12048ab-0061-4387-94bc-1e0b48dceafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83a59d35-cd74-4d50-b4f5-2c2fca2fc8f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8219958a-4580-4740-b76e-037c93db3bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9e1afdd2-9cd5-4778-8574-83e4970d0a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75125fa6-92d9-4620-938b-c337ab05b3bc",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b7135e-3c60-4059-8fe5-4821fdd54ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71b55041-47c9-449a-91d9-2968f56c95da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b81ada-2963-424d-bf87-4f52c9d09845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "edcc17ce-4846-4c02-8e65-a298d824cf7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afdc0234-3cd6-4e4e-9d8f-c4adeac31d13",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b3736b-a016-44e3-9a07-01583e335f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62f3583f-4b38-41e8-be8a-d137e855cf72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621ab226-b0a6-4ea9-a9b4-f61d9388482c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eade2071-74ec-4a33-9088-c8e252206ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c344f4-6576-4ec7-ac13-85ed2a0ddaa8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "724965ae-6112-4010-9a51-5720cc9f6ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "949bb48c-9d6f-47f2-89e9-1ded8b34f7da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c0a23a5-5d4f-4db6-a0db-1b3fd1a53558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f9814b9-24fa-47be-8472-b15c26bf41a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c2f310-f458-4e25-b092-91a074c95189",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9264ea0-7dfa-4c78-b474-c27cb8a34e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b772e6-1fad-40db-8912-d722c9d5a095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed2e9d5-325e-45e9-8d65-2b5cafe8fa0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "07cffdd9-518e-4cd9-ac5b-fe19c44d9005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a882a7d-a5eb-41e8-b0af-2f90b6115815",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2d4ba1-4acc-4ba7-8f85-2e60ad882721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae48866c-7b1e-4105-871f-50f213eb8ea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a486ea-3669-4cfc-8ecc-298d8fb4c34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdf05a07-077e-47a9-95d8-ff103b655128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b7dc7e-b73a-4c1d-8de4-7df2a83dcb4b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec52f7a9-3913-4d0e-86bf-16d722f6a8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "834408c3-4ac7-4f0e-9e89-6671fca755a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f76f815-4074-4379-aef8-18765cdd4ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8656bca5-ce2a-4caa-b23d-666d87f6ac85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88308c1a-d254-427d-9daf-371844e60b63",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8218201-b0cf-486b-9ad9-a4e52c0cc69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c5436fb-16c9-45bf-ad1c-d4504a110ad3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ac9a51-2367-4b15-b370-48334461c84a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "19ee7ce3-4998-4033-b253-13cb61d03031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bff510a-4ad2-4e20-b5cc-ba801468fc30",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41551065-2fee-40cf-97f5-5723913a74f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de9adfc0-8693-4138-922f-73db4b2ca748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb7359c-8ad1-48a8-9b6b-8b52439cb706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe139cab-bf01-456c-ad18-297f18f4c394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2216dbe0-3d45-4756-aae4-d95eea31cf33",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "134d948e-df98-4608-881a-f64cc5a1027a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c35350b6-ac6b-475c-a0e0-44490f2224fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86547662-0310-4a66-8e80-9ace944dba5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1359973-51cf-4bf8-b7bb-7e12dc802c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b54923e-e266-4675-8f98-9911a3222d44",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5953b7af-3239-4b7f-b8bb-9368647740c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "289ff880-0b70-4d52-b5bd-b20362952513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ff7b74-b987-4e8b-970b-de0a330bd009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af62ed2a-ff82-4a60-903c-27194985c041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b83822-b233-4635-b1db-5da8651951d9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1731c8-fe86-45bf-97c1-c01be30217ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0498e2dd-a04b-451f-8775-1a0bdec82cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa63db0-2fe6-41e0-a671-bb58452df306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0833c49c-3b16-49c1-8d0c-9e8a8029bb3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a350f398-8a84-40ac-9f28-401a5376a225",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26418159-f87b-425e-b481-e6df4cbfb408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "328f45fa-45f9-48e7-8ef6-af55d404f846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9190e96-a284-43c7-ab11-c85d44f7679e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1d08d805-98ee-48fe-a7dd-67c8774d8de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d633d9-9c0b-47c1-8c03-0e373caf620c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2057372-4f0b-4962-a3a2-48463fc44327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "83235b8b-ac83-49b3-9313-28816df76a43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51cf7442-5917-4ad0-a701-e4edc2ffb1a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1d942ea6-b636-4ba6-b751-88a54be77ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b370f3-406c-4bb6-a38c-1c7511bede9d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d86e703-6c50-4ec3-aa9b-b0d4dabe39e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc62467f-3032-47e6-9d1b-bb1629772b0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad74d3eb-0dcd-4bdc-a9e8-91aa82b99391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2f7380f-50ca-4d9b-be84-7643f0931bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6b0e6d-282b-4463-9cce-38952a7805a6",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e0fb58a-7fd4-4e4e-968d-172631c54608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2225adba-2a31-4021-b333-d8436004de67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1e3571-46dd-4349-b4c8-398e8518bc8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "166f74fb-428e-4fe6-9761-f8dfe8f380e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "937e1f68-5739-4864-a6bd-04c51a7ee390",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdebf60e-3ff9-4100-86c8-3dae55840cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc09132b-3397-4a0d-a4f9-51eddc0536ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3afd1d94-172b-42db-8145-7d78522619b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c20a43ce-e204-4eb2-b968-e93f702df48f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0913ba-27be-455c-bc59-0bf03fa79a35",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceaff2b7-15cf-495d-84d3-4ba1409c2247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8f49090-5823-4af2-98c3-023cc5ad52e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d1881a-cad9-4b1c-a7f5-6f9e050cd69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a52b0d85-531e-4b8d-8428-ecbd98a364f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66a9642-b57d-4a7c-af20-6562e50787f0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68381e3f-6c3c-4cf6-a07d-4eea5da15a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de88251-48c6-4270-a845-a2b857faa347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bdecdc6-58fa-42dc-849e-2872f5a607fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b3d3cf4-5ed9-4624-b8d8-e56767b7f2f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93976431-1414-48f8-b1de-97c91cc11189",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1224e07-7af0-4b4d-bec8-c1595aa70eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c0ad05-09a5-4da4-b45c-8c84efffb7c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14def98c-bae3-402c-89b9-f3726f6a78f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "141971c0-5689-4bd7-b905-033971d808a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c45b26-07da-49b2-b6d5-78542c5dab6a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48cb4443-9dae-425c-9bc2-28f89def0399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e4b82a3-4119-456c-babf-847909aa849d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe9db56-6c46-4311-805a-8b15ecb79bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9125028-276e-45d8-b18e-cc07005d905e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2de38d2-6d7c-4ebf-a9c6-effeea76da63",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef289e6-4184-4e2e-9096-20976f002539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d81390c0-58e5-469f-95ac-caac37f0fedc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7751085f-9c52-4732-8209-93533c754ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "48785379-9a52-4c27-a145-6c257704f09c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340cb21f-5cbd-4326-aee2-d5018f4681d0",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6823a992-b610-46b8-8122-97fb4f81e8b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a464e19c-8698-4955-a4bd-86b46e98dca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627e73a6-2025-4c17-b0f5-39d544490cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "592ab88d-caef-4d73-b1c1-c3983a7124e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fbc5875-01a8-41df-8d7e-e4bb18eeb92e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d913c7-bcb8-4e3a-abc9-344c080a84f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe1e719d-b78f-4c56-9321-8c2cc2276a48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f249131-f622-4879-868a-1220cfd7ba79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ca2d137-eabb-4be7-8a6a-a17adefb51b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c844536c-0ae1-451e-a844-7e518c02736b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be63f4fd-fe29-4bef-8ca7-3fa9d76de7fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3979538d-d38c-4662-98b6-a7019ffdf8c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5855b34-f6a5-4e98-b921-1def5bd7dfbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2ca2b69-9d49-42df-81e2-87ede4042800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d03f81-bd05-4d45-8471-02117e7365e9",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a7d6fcc-2cb3-4a6e-a2eb-572ae66d39af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "389a5984-3b5b-4644-8683-0b045d88d8a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd67688-728b-4197-adf0-d098692209f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f8f4752-8066-4d6f-a501-4e36168b4013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9729bf7-92d7-4e46-b11c-a62f104cd99b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f346886-b3de-4813-9e44-dd858248c690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eea2df5-5de9-4807-bc96-ed29832c8f1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6596beb8-da1d-4b21-8a94-e1ac606baf69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f801ec3a-769a-44e8-8b34-70f6df5d5655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568933b3-ca2c-4dee-b0fd-5dc107d46c53",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af3518d-5039-4909-a7c0-df9027256bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46aef3ff-09de-459e-9006-961d9a5cf079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf35d33-5462-44ef-8382-86b51a80149b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fe635050-27d1-450c-8740-de599af692bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6770246-8398-498b-aa56-7aea3e077c18",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f40c3c-89c8-4ba4-9c79-3eaef2ecd876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c036750f-e9ca-4bef-bddc-4d66b4697b37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f44e042f-f106-426a-a0b0-ff3cc7a5c9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "40aa0782-a9c2-4d8b-a6fc-fb1bb2a8cf2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94292686-a553-4a26-bc50-54038dab12ec",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab5a58d-edd9-4fcf-a494-1af89011618c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a642cdfd-8d72-419b-9899-d33206f31b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda33f65-2104-4586-9242-84379ba607d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "320ff623-98e9-4fdc-a3db-6d23b7ae05f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e1b727-cade-428a-b47c-b9f4ef19464b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa849a33-3a8b-40cf-a98e-821381109394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b97ffb5-25d6-48ff-9ea1-4d4a1b8e4322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e1a0d39-2818-4ff3-af42-cce081d0afff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "87ee1527-e338-4f9c-a26b-aed37c1382ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a0b747a-9964-4956-a7fc-f94a60c3cb91",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d93b9aa6-1c48-4e98-9166-bd7faf53d175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cac83593-1d54-4f6f-93df-ae1ba0474910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1c375c-6afa-4b50-8520-dfa801135ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f2b564-4c8c-4802-bf9a-ec9bcdf4f645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61467e64-c3c5-4406-9e16-29f258e8d045",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9afdec3-e128-462a-9bd4-5df823bae6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e127b9-6045-458c-a1cf-2a381903ae56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baaad753-3230-462f-826d-42817e8ad592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9f0d118-ea45-4194-95c6-1ec14df958c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ea6703-2acf-4347-beb9-e5316eb5e4f2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b501dcf9-9e2a-4794-aa12-32d0444fe9b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51eac18b-fd45-4a9e-8e3c-0db7c9230238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eeca712-aee0-42ae-943e-3d70ee4a9fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f1c707e4-2aaa-47df-a474-c3fa63eec115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05019a6e-33bf-4471-8b3f-968d16eeac91",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ea0995-c35f-43e1-baed-a662086f3490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf5ccef7-3eaa-44a3-93ba-f6c511a63650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45c64414-8830-4d11-8f0f-d801c3d19b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0d16e35-ba5a-42ae-9edf-94a4d69ed885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3853c8ad-98cb-4fba-9077-579b986d6d34",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf1034b-d6d1-47d8-ac21-964baa6d7e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78d4df80-d86a-4aae-ab7b-5edb94117a96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "454d3724-6540-4996-9cac-e96d55df5f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff84bdab-545e-42ee-811b-04526746a665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64eb5669-ca5f-4950-9c73-92e45b08a881",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18038e00-2d15-4a01-bc98-981312ced2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6ac3454-1f5f-4651-9b33-3e24c9924199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ddb710-6dc0-4703-b447-630d1b36c0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7512f52d-0389-4a0d-b2bd-412292256ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619aa08a-716d-4d72-9e49-41513f19ce0e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d126a9-05ee-4c0d-adf2-7efa1511cbf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba3ec9fe-9764-4861-b74c-ceff1826c7aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8095c921-23b2-4fb9-8c66-e1852fe095d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4537ba79-f98d-42d6-9f12-ab53f7a2e230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196a7402-34e2-4b81-b5e0-57f0242efa45",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f11ff0bd-a8cc-4850-a52a-c2c68aa62db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eed1bf2-45b2-472a-92c7-1ca5b4510f00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1238f22d-86a3-49ed-b9a6-34c9361c89e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c18175e-6413-4e54-82a2-f44737e7ba94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb9c7fe-4ef5-4ba5-9849-faaf9ce8653d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec033e7-c29a-46b6-b125-426af2f71971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75725764-ffaa-4258-af19-3c18554aed00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae28036e-f9a2-4bff-86ba-1ff163fc7fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "395dfc02-8be4-4957-bd66-2341b3c89acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6a57d3d-5cdd-4fe0-bb31-80e1e36cbcc3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7334b31-da1d-4f86-aeda-9329d646b6b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c56334e-fda7-4443-9403-a6c677bc6089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8050d1d3-5f6e-4e4f-a999-cc52ae1af01c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "70a0278e-c434-47dc-a1a2-9a2bc5aedad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f239b46-0990-4c39-a598-df95dcffe8b6",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c2fe03-b52a-4087-b091-4d61edcd6bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97f6b3a8-6d87-42d0-aaff-9c3ada5a06e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71ef2ea-2d1e-4d0c-a85d-90ca62696ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6133b5c0-401e-436d-936a-4a9882509ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623ca4fb-ef47-47ab-8825-10a1fded5641",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "027ff0dc-b7f0-43e2-8c56-4234dd184870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3629df3-77c9-4da3-8509-f7694e063aea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d650eb-0c80-4fe5-9458-22da39448124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b88406d1-3f2f-490b-b3a8-e52568793289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45fc1521-13d6-4545-8c0a-3b89c7c80a49",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf02396-1a71-409a-95af-740d91d0bf84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83148123-9053-4077-b945-09e54a583113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd88e05b-4afe-4247-9fb2-6046653eb4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5f3dc71-778c-4601-84ac-a7223cdbf000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53eee98-25af-4a6c-ad44-d28039119345",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "897588cb-9c93-45f1-9722-25e510c92f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a128c193-3df5-4dfe-a367-a9890611c8cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18850d07-4b12-400f-9885-0f954158d874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ee6632b1-605c-48b9-8a6f-4c2b8fea58ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7598c2b0-d72c-401f-a25e-f3286afc4dd7",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3acfdab5-9ffa-4840-816b-7d61cdfe2b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df2628dc-ad86-4e89-9aa7-23f6e178b7a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365e8aed-9d18-4959-b1c3-d1c41ccdb110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b6607f5-fcea-4d90-a759-499a9325b823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56558257-e5b3-4e33-8962-76a2b47b30b7",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03ef5ce-4e15-4b47-8b4b-cbce8a22de02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85fc24df-e755-48b9-8d72-27d61d67b657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75dd9f5-23ab-48e4-bc80-a1aeb9e1a463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e80dd659-8cb4-47bd-87ae-83aea20c2197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d5803c7-2525-47b6-a3de-528f97dd03e7",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a214076c-abc7-40a6-9321-63f814749e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01d31c58-3e00-443f-85ba-145651b39b8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff936287-2a98-4011-84b3-bc77067bab6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9e079d6-0054-458c-9b3a-422aec129b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7fae276-c0e2-4331-9ba0-0c561b6e2c52",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3685560-2601-4257-ba36-466da2cad61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beef2c4a-b454-4cb8-91fb-71c4aa9f545a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b93818b-ca7c-4097-8bc5-d40a9220db3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7cefc16-2480-4841-be2b-491f5fc44cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb63468-178c-4500-8a54-29c08e6805f3",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "460676b2-c575-48c1-a408-ad352e6244c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5417a9d5-54ad-4be2-9332-34648ed6a22d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a3792d-f2f4-4e32-bd71-5f235457c327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b6ff88e-a58d-4b40-b226-ab151331f205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153cab26-2f32-405e-aa01-3993be7b451b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03196cea-b0a1-49d6-afda-0f409c9804a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a1a93d-62e5-4936-9540-788896afc3f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5934590f-0c43-4356-8459-bd30807ad6eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d854133-bd85-4d9b-80d3-2b1dad62cb1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed6a29b-f3f9-4b9f-9122-581efc1ddb32",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5ddb2d-b6df-48f4-be1e-2455bb20e550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "474cd73d-42a7-4bfc-9577-5c56d78ac4e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e232255-c9f0-4198-99c0-d0dab8c21513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bf5bb1dc-8f72-499e-99ff-0b275762344f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61499fa4-5a19-4d77-aacd-69ea1f9e76ad",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2bc5b4-51b1-4d24-bacd-d196a8b73ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba6a6311-2bc9-4f67-811d-e951554608e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb9d935-382a-4c30-b447-f6e7976db2ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "66cd61e3-e692-4f56-9312-b52c2ee50e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e2fb6c-55d3-4d30-80d9-f61f76a05d03",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72389162-4f36-4d41-8466-de83ae912c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c360b8ac-3fb9-49af-b897-c09835c38e64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf3c616-2dcd-4b59-9f13-550370043854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c02f67b-270e-4c64-afef-7a5b1f03c20f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b507d4-fc76-4984-8feb-80ac11051363",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4af5e04-7c4c-4e7c-8d5b-befd693ada1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b35ab2db-514b-42a2-9fcc-60823f77b419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9d55d6-3756-4553-98bb-4e2080f92f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "374a3b52-cd44-49e2-81f3-cf05c7703783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15fb3c36-8c30-4418-827d-9f37943e48d1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf735c7e-51cd-42ef-9c48-abbd4200cc6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "588b676b-e58a-4216-b4b8-2b18c0f63386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8473efe6-3191-48fa-bfdb-3251efdb16ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b64bfff0-fdae-4328-8fe2-084be851ed64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f95e133-6718-45c2-b84d-65bb7020fd75",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb58d12e-cbd3-4e69-a313-6b34bfdb10b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "001f7f59-e2b7-46ce-949f-cc2523ff3160"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84b7ccc-48ca-45fa-835b-f4e3a14de831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "590a3c7b-6f24-45de-9f6e-a5450115a803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a620e59-54cd-453b-8b14-dca4320258b9",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39433663-ee00-41b2-a4af-83c32c047774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "156892c2-ec2f-4cd4-95e6-6d4ecc1e2206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc085a4-62ee-49cc-a992-cb8d93b0dd02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd9ac89c-3454-4b58-a36f-33fbe0f2e0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad6020b-c5ca-4727-b187-433e2e5d0f6e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "024af321-447f-4d49-b88c-c0f3c5f3d779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e4749a4-057c-4829-8a39-b38f8e9de260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc99e4d-590a-4f67-928e-0872bac099bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "78f228ff-a337-4338-b6d3-f9d3110d822e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a213a453-d0ea-4787-83de-a8c05f8eacef",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48e6ae4-8f7d-464a-be1e-74740a2238c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ae6548c-7139-44a7-a2c0-367409967502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b153a6-7823-4672-a423-fe64c67ccd64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac791d24-5aa2-49d7-955b-d9a718840ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f158c46-4898-436b-8303-73577aa1b895",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33fdca0-de6c-4d54-8a22-e283246e334d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53f7d2bb-b90b-4cea-ad33-bccb3d436380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2fc9e3b-da40-4d93-8192-fc53e5427f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "068ade2f-f92c-4d41-abbc-3b4dd4d36584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ebb340-5fa7-4145-a1db-40e288096398",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa961d8-e4c1-40bb-a227-7acc2754ecc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e31690b5-d0f1-4564-ace7-c456bcfddc94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7773ac-1d9e-40e4-a40b-027c9ec2f302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "25249d73-3bde-4aa5-bff9-241b8e1878d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf8a386e-dacc-443e-ba2a-eb27cf138809",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "809fa162-4955-4384-9180-55219315ae64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b658d0d5-d8bc-408c-9ec2-1c9b1dc0bab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c725bf53-01c2-4acc-9549-cb84b59a7f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "54aecad3-d9dd-478e-9797-097e45bee131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b5ee599-6fc2-471e-b92d-95e55ded981e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c62298-1297-4e9b-8da7-39325ca6c1b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90f7f508-ff6e-43ac-9a3d-5076ca8c7b1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca6ec55-d8e4-4197-a117-e34ae8a425ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "00980807-79d8-4bbe-a78c-c55845ef70de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395268f5-fae3-407a-95c3-06b05fb42b2d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e0b443-8c60-4069-a2a2-f70a6aac8459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "917c94c1-c8ac-47a3-a77d-fc559176a96e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467a4a81-9e08-4653-a34e-b96ed2ca1744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8916db15-6e7b-4c22-ad8e-361a7f3801f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ba167c-79bc-41c6-b670-0c71f99c278e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd338138-39f1-4b8f-8bae-657b74cb3213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03391303-eafd-4986-adea-94c6914f11e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c47756-2c84-49f3-9cc4-3723bef44109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7828665-e671-4e22-b995-87e5b54ee11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaba89e8-9412-4a7f-9b5b-12c8ea5dcc16",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc984cb7-01de-470e-949f-c9c34d7f0dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894e5ef3-0800-4c3b-b810-e5d1a8a93500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72b79a5-4545-46dd-9c78-c47cc68770b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9af39488-7260-49a2-bd09-58e549749a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1503a02-fc5e-460f-b72b-d2903e46e829",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3823ce2-8a19-4d9b-bbb2-3003bd4dde93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d6c1d14-5c3e-433a-875f-cfbe2b0042e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf623872-8a81-46e2-a048-616c4fa8c2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "50d5d949-ad02-49ef-837b-d9f86f03535f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1552677-10c5-4774-9892-eea18189f921",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04eb78b8-de10-4b2c-b942-f7b59c0b16ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f49ab3c2-9c6d-4155-94c5-39564287fdab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3666a1bb-d0d7-4887-8c9e-e354e7333533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfa6984d-9d1f-45e7-9158-6f82ac4a799a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f2788a-7d24-42ab-990d-497d060d772a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "866600ad-c7cd-4496-8a11-464496f5a469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e75b793f-ab95-43ed-b6ee-fae318f28bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f0a92d-4de4-4284-90a9-a2c7af744493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9652e120-cc69-41e7-bbf9-224583c4a322"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fb6d3687-4f45-4463-a69b-a9d6181f074e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "76bd452e-d8aa-450a-89bb-511f52d1798c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611662c2-3ace-4736-99b9-1a1abb255cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5744ab1-cf46-48d3-9eae-4bb53b1129e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fff47cb-79c6-4f97-8e92-86df8279b461",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be98c007-4526-4cef-b5e9-5c054f24cd2e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26d144b1-b4f6-4a7c-b6fe-71efb0d5f53e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "faecc51d-ce65-4d78-a2ad-e36991947560"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d53a67e4-480b-4cca-89d6-e56a4791a852",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee745896-bb21-46be-9abe-b75ae896cfb0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "83b4becf-12e8-4481-a5c9-53e4fc2cd8f6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "236b435a-0809-4bf9-bd82-553c0ad7014b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0e584d1f-2399-4f41-8b93-da07afb2997e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "56361d74-bb9e-4449-91c8-eb12f718a3f7"
                }
              }
            ]
          },
          {
            "id": "e6f461fc-6340-4af9-809b-715558282759",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7f39b685-28b4-4457-af7e-fb89cfe51343",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "32523132-a2bd-4fdc-afd4-afb81ab723b1",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01537110-2024-4d98-b065-bcc58f351d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "653b8fdc-3bfe-4e64-8a70-6237b8ba08d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b9e3d2-02af-4f6f-9c4a-88f3757c13c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380c400f-f2b9-401e-a10a-6aac32680f40"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "acd52ceb-9a47-41e3-90a8-198586982934",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16e69113-5053-4ada-81b7-7ce51de1ef22",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "28ffc47b-fc55-44c7-80b4-48f7e7f0b989"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "406235f7-5234-4b95-89fd-32831ce4ded5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "76a397e3-c9c5-48bb-9e55-b0ca4aedea43"
                    }
                  }
                ]
              },
              {
                "id": "afb12bfe-1357-49be-840b-b4062a7d72b8",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e445df6-8c1b-4ffd-b0bb-9f854a08052c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d4b1c532-0e59-4045-9a67-2338b2ec2325"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4ff23dd-c467-4147-ba1f-e61413decd50",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dca7f630-6063-46d0-8499-cdee46b0fef2"
                    }
                  }
                ]
              },
              {
                "id": "8d79c89d-07cf-47af-9a7c-b5412b06def5",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ef2bc64-c685-4fee-bbb0-248a763f7b3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b5fe0ee-7252-41da-905d-1308e073995c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "570d240f-dcc9-4740-bf62-881f119afe3a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3db8a0d8-be61-4143-9356-1c5e90fff29c"
                    }
                  }
                ]
              },
              {
                "id": "7471add5-d4b5-4426-9fce-4ea1a52d3beb",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "56511d2c-29f1-4dde-9705-38a642c2c060",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9014507-0612-4ed8-8270-9d3cdc3df2d5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7cfb3b29-fe0c-4298-abea-efe97ec25270",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7eaa5b14-dad1-4f3d-a50e-2190f6814ead"
                    }
                  }
                ]
              },
              {
                "id": "bb581f60-cda1-46e0-9cab-9ffe10b0bb85",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f1b18fd-8902-4901-ba60-2cf12ea9187d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "762fde0a-3f30-4a08-af65-dfe5cdc0fd73"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26db0eae-1fcf-46e2-bc2a-8484ce3c2996",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "75ef49ff-8955-4388-9873-4493842d452e"
                    }
                  }
                ]
              },
              {
                "id": "2d761771-a0f0-4070-983b-a886b92b0d86",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfffce6e-fa5f-4189-bdba-22ec95a470a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c7e2daab-f0dd-4ba9-99ce-7b092d589b22"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7e941b5-9d13-4317-8c19-aba051986676",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5b4f8585-19af-4dbf-9f8d-ac57308e1ca9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9f48f0ce-6a65-419e-982f-47c4323506c9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7b64b205-2552-488c-be3b-875e493061ca"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a3408bc4-33f3-460a-afd4-4daccac517d9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b9b064d6-6997-4cc6-9a06-cbc3b3eeb897"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "afb102d2-676c-4246-b400-89f9c72a6940",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5740ad17-985e-44df-b112-2491d037d4af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1243f0a8-4008-4eac-b060-980ba9c16b92",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "90a79e9e-ddd1-4512-b80d-03c129887a79"
            }
          }
        ]
      },
      {
        "id": "04f4b28e-c71d-4574-b11b-a3b34cf3428a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c36f7a47-89a3-4307-b6df-c7b06d3392c3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "02d8ced8-ab5b-4aed-b9a7-37eb666ef43b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ddd64808-3c59-4375-9489-b5a743b34594",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85de0fa-47ea-4051-9dd1-7fd3985ee506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd6bb3f6-10f4-4d8f-abae-a53ea72befe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08fac7c9-6f6c-4df5-8570-233d096e57db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "61d35d8b-868e-436a-a98b-c0d74358bbff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b945db-011e-4186-ae29-8c6f0cc3b866",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff8896f-1f30-4f18-9416-e31d8d67367a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be3160d6-90b0-4912-996a-78df747e463a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07b01e6-4dde-4e08-a7e9-9939998de13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b275a575-e1d1-4b90-af47-1fbb9aa17f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b54065a3-b0df-46f6-860a-f785682a81ba",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06966cd-68ee-408c-ab41-d471b406a8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98c1cbd9-bc34-44cd-be08-bde8511a3ac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d1806a-0330-4db1-bf97-2e33cd528f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "feafc220-caa9-4539-af68-dbef53dfce05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5822dc3-1e36-462b-82b7-fac7a078f6d9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3837cad0-2db3-4713-b07f-543b9be5b6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50c88d97-82d4-4fcb-8039-bcd0fbfe38b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c77c37-9c82-473f-928e-59845d8c67a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6409ef4-8cee-4c30-ab49-7a05b96560f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b2c9d2-c6fd-48f2-a3f3-7b7941667709",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82740218-97b4-4431-8a5c-cca8561ed690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16d41dc1-5005-445a-92ce-58a06210d037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccee769-f956-4069-a2cb-e2e9b01bc033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "329d9a88-2d98-4063-b00e-95ddc3916832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5950eed7-ee4d-46ad-83fe-9fd65f2d788a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c47c242b-4fb6-4328-83af-4bfebc5409f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b610533-26d8-4491-afa3-b7dc0aeec475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2365d776-5408-4eb1-889a-95a18393c247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "97ae6ddf-636a-4da9-a46d-1d63241bf230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d8b485-3543-42e9-b4d0-8ec9baf1bc33",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7c33ae-257a-4172-8bc4-f321e7940551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d3f1c72-48bf-4dfb-818d-9eb611f14e47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f260fb-d439-48b8-8cf7-2f443ab28108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "65967b99-a332-4337-ab75-c25cf14e4969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f2c769-55df-4ce5-936b-43676fd2e301",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b469d9c-58c5-4f94-94eb-8f33be6c9c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1759a7ed-6542-4a99-a7d4-d11ff852b40e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95426720-1314-49a5-8df6-51bb0a90dea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "70419a84-bfdc-4304-8e9a-4f2c8f1aeea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca815ce-0c6b-4696-a227-711fad254498",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a0ecef-b194-4ea6-8f92-aec41f64375e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "869c82aa-ce4e-437c-929c-6ca1f9300af3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be158709-f973-4378-b8a0-467678c2677d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6c96906-81c8-4c27-ad7e-cd11ffe3e546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a962bfe-5d49-4e8d-8cf4-76cde56cb554",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa72cf0-1bb7-47ab-86f1-80897e3a707c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa56ee98-b4b5-4a4c-9260-89dcc04b2524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b12dcc9-b750-48a4-90f0-63a8cb86d6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "751c0ba7-e450-4f6e-b4f0-d6bdaca19624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8419ea6-acb1-4554-be0e-a9561b328030",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37b6c0c-0c69-4f75-9348-1fe712e3cabb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fc69887-d3df-4021-8d60-35d02463922b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b78bc0-93dc-4ea3-b888-9fa82580cfe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "77187575-ecc0-45ed-b305-e90417a92a18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08eaba95-cbea-4241-9923-525ce919541f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "194d4981-d3c9-4ca1-81f7-bc2cb500f86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1758f53c-a85a-40d2-badc-d9523d40e865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "664e3006-6f7c-4ccf-a7ec-d88ad9957276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3195baec-80e8-49b4-ad60-ef7def2a6f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a72bb3-c637-4838-94ed-12bee588d76e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da20fda2-af35-4380-a35a-83d36456764c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87ec2bdf-0a1d-4e90-b079-817c1a4e6daa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ff3682-cc52-425e-a97c-a1802c7830df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bc7974b-340c-4c4f-8f4e-79980798ead8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c7946e-d2d8-487c-a56c-4e72a4c72a43",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d83ebd8-2f34-47ac-9ffa-d843310f782c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4e5fc04-48c4-43f4-a21d-0abc88532453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988792f9-1769-490a-bf1e-15095025a7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "278940f3-fb3f-4496-8c36-1032e3805a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8a7170-351b-4daa-909c-f013cf8fdb67",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f0bcee-8b16-4dd0-8b9e-704604df7c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35c9f96e-1eb3-47b1-8534-b1c481329afc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a7cb4a-87ca-4027-b0c0-b4d649d8a60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e341144-3eb4-4dfa-b2d3-aabc91dfd35b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc0e57a-0083-4a55-b0ba-16ee1e5835fa",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2efd77-1529-458f-9605-f9857aa95602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ae15d14-09e4-4f90-bb10-c6a8242e668f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a41ac5-2726-4423-997a-128c821c0307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "79952b3b-78a8-4fbe-9159-47edf2eb3734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a78ea4a-8beb-4483-ade9-c174fc3e57b8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "444af18c-b641-416b-8e8b-a33c3e0b58e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "defc7270-bac8-4874-85ed-efff5bce8f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03aeb9b5-d327-4e19-a1e4-b063a6719a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3559e521-b420-408a-a95c-9c5b131c855e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3035b763-d19a-4372-9db6-a1fe91407b25",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a2f537-f19f-4778-b1f0-4e01c67c6f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95259a24-64de-47ea-b289-368c72d97981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19eb8f63-c75a-488c-8abc-788b12f95c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "69db247b-fb40-4a60-845f-c9672269a3a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e1f0bf5-3e59-4fba-ac11-da7476a02f9e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae3d31c3-c641-45dc-880a-34dc62aac43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a48d2310-429c-4e66-b4b9-a2e1e0c550dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a02a653-de23-425c-9415-61032f39db84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1fd8f98-0d89-4032-a560-dab132f6bdcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6afa672-8968-434e-8725-c509ea0adf12",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8de0ac0-7b9a-4988-a0e5-3c7759068a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a1702a-3422-44b9-9585-118d432badb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a4210d-f9cb-4c53-8ad4-ec99d08d83c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "169ed592-bb6d-488b-98a7-1e4d097f0106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c7e2f7-fc67-4ea6-82d2-61433b617e35",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7a2f86-5120-49d5-8bfc-8b83f27afae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0755dd30-9dac-4966-adc4-015a2e245f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43088c61-7749-4260-be5b-cfff775a2718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b8ac13a-81ff-4176-aa6d-c0105a75baba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d17179-1a3f-4dc2-8787-ffbea6c5fad2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c8d3aa4-2485-4fb9-a518-d6786516910d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f970fb6e-b4fe-4e16-ab7e-dffedb67086b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474c6c4c-7263-43c5-a0bc-2ed4808a222b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9c8f035-312e-4732-8661-b98a42c16b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434365b0-ad6f-4d12-b79a-abb2859b1443",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21477287-e5a4-4868-9413-1531d42515ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb30e2b-ecdb-433c-9bdb-3bd1b042a9cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253dd6e7-62da-4a2f-aff9-a9746ef72b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5da26e67-7920-4e94-a0eb-d7041c8e78f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb2889c-49b1-4c4b-86b7-c743f6d4be25",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1c0dcf-2558-4128-b882-a7f1bfda4901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85509759-2c84-40da-be49-f2ad34e2460b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59aec5e2-4d6c-4057-8d03-cfe4e63b9382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b73f3aa-948a-4cb2-b1e3-ef0d5d6abed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0751bff3-540b-4d0e-bc3d-2be234883909",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cecc653-849f-4481-9ab5-89b48996f7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "360bb434-ebf5-4f8b-9119-22877b2b9f97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06704a27-4562-4b98-8863-3d10aae61c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f14e087-b1fa-4ded-8659-92f4a8bcae5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0bd0dd-88b4-45c6-b06c-d79929b2901a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5407f933-907e-444d-99d3-e6666e1698f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ebf18d-4275-4ac3-a497-b7928707d090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d46f18-2b02-470f-be2b-45a1c1afde2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "103c2822-b798-47d1-97b7-93ca8e9ddc96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3491308d-6b02-4a83-8d35-d91859d2d66d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1164868-4df1-40f1-a0b4-4b314273d258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c23bbe12-db39-460b-9c02-302e969425ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f95e7ce-9f49-444f-9caf-ac9ee8f6789b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61ca6d91-7bb7-48f5-963c-894c3dc59045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3dcc085-61be-41b2-8304-89c8cd931d9c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e5d2dfd-3a2f-4128-bdc6-bedf887736c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c82355-3c57-4dbd-9c07-c8b20aa9527a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12065bf9-0845-4ca5-9a83-a4e8682642c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69e4c6ee-1fda-4917-8754-65053d4fb900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a97d94e-383a-4b10-80f2-efe714efbec6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "388a0005-af25-473c-901f-a1cc87b29bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f46aea-2e91-4173-aec6-e7342cfe767a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e81d399-3fb6-4dd8-8e0b-a855d4df987e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0b633e6-8ff8-4ecd-ad2e-7823576d9f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ac36e1-2ae8-44d3-abee-78fd435b6854",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5598a43e-bf15-42c9-a7e9-04c308c515aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09763251-ffdd-4db2-873e-d4bf95496b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37c0215-915d-4ea6-8939-1d73e56fad35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbb4d9fc-1e00-436e-980c-1c5fe514c2d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f2b66e-eaae-48a3-a4e3-40dec9b1fe4c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "563bfebc-268f-4ac4-96a1-e92d311d18bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e89e76-9483-43f4-a864-081092bf17d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28290a4c-6acc-4dc7-8bba-6368c50db2bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06bef5c7-afb9-427f-8a84-d663ca244d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8edbef8-ee09-4f9a-88c7-258c7a48677d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c5f82e-5b3a-499c-9c86-b20bdbedcc57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df985ba6-4008-44d4-bc6b-11916c496e91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61fe49a0-0b8b-45f4-9607-acd25d8eb114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d761865-5095-4216-ad76-d4249e274d5b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "50bedc42-ef85-41f3-bb63-dda1549e0531",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "395f9e40-a8df-46bd-8300-9d264d37d177",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f238004f-d050-476e-9acd-435f28e519b0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9aff8158-b5bb-4817-a37d-fcf22003a475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "768f530e-6901-46e7-af71-01c4d748b3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23be0afa-5996-4fb1-981b-48db915c471c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c696888-b347-46b5-88af-a62df8cc0332",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d19f9fd1-4099-4a63-8969-36725e4c4ee5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1972369-c563-4398-af8d-349d2bf9411f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1edc4b21-5802-45e5-bdec-bcdc4f43b769"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "60ddba59-b0c4-4a54-9517-6506d2bda4a5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "df0a1eb0-ef66-4a9d-8c7e-4a647540d4be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c07df0f8-52f7-46ce-9ac0-f82177cbc1ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee188acb-9e92-411a-91cb-3002cfdfa2f5"
            }
          }
        ]
      },
      {
        "id": "55e37a7a-28d6-4176-a79d-d959d2d5aff6",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "21e5de19-80aa-4bfb-acfd-93954feb19da",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eb8dc54a-92f5-41c8-bfa4-3dff0b74c631",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "26b3897b-a5a5-4c16-b0e7-f97a2c78ed4a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e7b530-83ba-4ec8-a51b-c4679ee302fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2334904-271a-4e77-976c-c0f610ef7fa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d20a87-f6d5-4fad-8c42-d2d3d103d73a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e81356ff-a37e-4e22-9950-6e0e3ee6c5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a34bc2-23ee-45b6-9d74-eff1a0d0aa56",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d2fe1a-5969-4569-bbd4-03b247d672b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4e685f9-df69-481b-9d7a-42810713054d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c03cf7-93ff-4ef9-a6a8-87aa92dddbbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "59bc0648-8897-431e-bac3-e2da061d14dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee17c5f9-3338-421b-85d1-a2839616dedb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0230c22c-185c-4d13-93bf-2a79b0f951fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62b5f653-6aac-4004-aa4c-4d1a2886247a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56433853-747b-4157-9dee-00d9f35aec40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd2d6947-a445-456f-a5d0-82f333c7d365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000cb18c-a7f3-411a-8a2d-d01aba428de6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab03cc9a-2a49-44bf-a103-2cca79e7eca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de352c57-a550-4929-850b-f4afa6908f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbfb605-db63-4ffd-9801-68297415ed2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d82f3509-6189-4ae0-a3d9-5a3039270abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e087e264-5736-4d9a-8e4a-991c9a9f1f0e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34d01c0-7448-4a0e-9b8f-203e328a35bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e29d9a5d-907e-4367-b33c-f26021a81815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a3be7b2-45f8-4b33-a881-92d546b6b34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88b99a83-2394-4b98-b53b-96339a922333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6960e0a9-1943-4793-8ad9-73e7d0c113b6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f231851-3b46-43cc-8539-cbfb9ef35c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88631822-4b94-4bb8-99c0-b4b82eacd803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20611580-52e7-4bbb-a73d-b74e25aa4b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "12347f08-842a-40bc-a71b-d7786567a01e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0407d6-014d-4bbf-8738-a0728aa6bb14",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa33057d-7777-4139-9fa9-8af9279d3668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73822a8d-3f8c-48a6-898b-bf86191eb059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d234eb-1f49-4127-8b98-8dbb6757e35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3658d96-7e23-47cb-8368-fa2723436a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a75158-933f-41eb-bd11-3674635e5663",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62db771f-6a97-4676-9f53-2666fd0b5b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99755dc1-1a9e-40dc-9f61-40c69db1ab91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d643551d-48fe-4093-a37e-2d1dfa1d4ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a30b610e-e563-4641-9a1d-99951dcd7c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e5426c-65d7-4aba-bb7d-3471c6f5735d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab21e16-8daa-4d2a-bc7f-8b274d39206f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7327d5a0-5f21-4562-b3a1-62509ba2b574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e061655c-ebcc-440b-ba75-f7e8d88528da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39302a7f-9406-4723-a548-ddab13b5480b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7026319-bd23-4a4d-a20a-6903a6268a5c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ff265d-f9d3-4296-b98e-a1d10bef3c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93338936-6d32-4a11-b9ec-9c8cd4c50f9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9c0dee-abb4-48ac-ba69-6d651a2d098f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f98a433d-2d03-4d8e-9390-bdfe68650f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24eaf92c-96e5-4441-956a-ce79d8966219",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c156269-8adb-442f-9ea9-ee306dbfee33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88b0df32-e607-4f7f-9ac8-f363a4ab2699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6776abec-7581-4e3f-81be-a76dee2a0bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e4b352ab-d219-446a-97f5-75ef05205331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c60440-1fae-440d-9477-341d62589a40",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac5e298-b0dc-4f22-8a83-f800ef5f8b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2382686c-b700-431c-9883-f2c7918d5764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be413a9-32f2-4ac6-8ca3-824f912dd88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a0e720b7-0fa9-42de-86c6-82fc820bb8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02acb80d-f7e4-475e-980f-459bfe0eff64",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b0157d-91af-4b64-8fca-6f2751287466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad38a4e-cafb-4bf4-97c6-0899cf7c4aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff5c6c6-d4ff-4e6c-8de0-96c8e422b16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d3c89e5-9ced-4c52-9e8b-1a22acbf780b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f70a99-cf47-4dc4-bad9-e368d6df5417",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afe8c7a-b8b1-4fac-a57f-1cc31bd834cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73322214-ba4b-44aa-ba68-bb3f65701f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee03c2e6-a7ef-4265-a10c-882e352b8dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "67c0256b-4c90-4ea0-8bf9-837a201c541d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3729f8-7033-4263-a969-6b7cbfd1cdd2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d604dafb-1dcc-43d8-b808-7778c0703f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23327fd1-97ea-420a-9309-a30f47e6ac9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943d9fbf-c439-418d-8362-47573f9b1e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b378ccf-ef47-4467-aa94-2af0b58b43fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c6a6b3-5b52-4af5-8221-e5a73f66fdce",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e938327a-1369-48e6-a621-2052acf14791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe13e04c-3210-47b5-aff4-8751abb91fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa4cc39-e567-4e6f-829a-f1ec391e2604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "49da8849-c23f-4b66-8549-44cb9ddba6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a8918d-4ffd-443d-8260-c2dfe5129ef1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58961885-e99a-4934-a205-3a9ce78c104c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b72fdb-a3c1-42d1-a7fd-d806a47ca0b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9705032c-ac84-4237-a25e-3301a8eb3e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "143c6c75-52e3-48dd-b4b6-4ba12580ef9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e75da414-2a34-455a-8413-555cf73a3da4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beee9088-6e26-4f77-9a01-1ed84aa196e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cefe1f8-4eb2-4799-a144-0bf02fc44fe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac694767-9fd4-40e8-a5a8-b13a362949c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac2fe1af-36fd-4f92-af58-3882280ba444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0100ceb2-392c-420b-93ef-eebc3df064e7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f57501c-9269-4d78-9b89-9e548ce8b7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7be79b64-f314-4d59-8eff-d5417d18c8f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651064ec-7134-4f98-9d85-0028c3934d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c16cc23-88dd-41eb-bc37-7409bf8ed926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3feb77f7-4c7d-4246-9864-9d6d5633b11a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc26b88f-4742-4a0f-8beb-5d67ba26c1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "106e8959-4af2-40c7-bd5f-142cd086be60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c55b68b-08cf-4703-bdd9-55b9835264fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f62bdda-ca9e-482a-9ff5-1845a7b22a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af674c7-0de4-4fea-a61f-ef7988f7cacb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca121b0-355c-4e39-8b62-c5bcfb55fae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95007dee-8542-4a84-8d4a-ad8a9edff440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c7141b-58dd-444f-8d68-9185a4aae1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8613a561-7231-4906-95ac-7c795a224bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc45228-129c-437b-a646-474f831268d6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d43a150d-f886-4c66-999f-63389e929886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a33751-74f6-49c0-90f3-b9dc36b89656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fbc5442-887e-4236-b4ff-be87e8cf4c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf7a44ea-9fff-415d-84c5-769544af9ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a7105e-19f1-46eb-8b8d-3e6224b10fe5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c1f1a5-1364-402e-b655-7b1cb14bb499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "345531c3-b066-4509-9ded-5a6c364fe3a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "011c5ab9-6556-41fe-b27b-37bde517e62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0635edbe-6daf-4a41-9d05-5cb0f79cf4a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d14b5b-df2f-40ad-bb04-8e566c8d95c6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac4f12f-29c9-4096-929d-9d3013f88d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4989a291-8471-4019-ba27-3d5457c1e905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29564dc-6787-4463-baf3-029f4bfd61b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9a6f8b4-3ccd-4a00-90b0-233751088c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ec4c55-810a-415b-8127-ac6fc38c6ec0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5c149e-bdb1-4429-a84d-58fa3f1277ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8da625d3-2875-488b-91ca-8d2304811ae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "190ee8c9-121b-4365-a3ee-848a20c52389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18bc0119-7352-4343-9420-82e8fc4d7945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d142400a-cec2-4f39-92a3-2b1870bf8bd5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079b2af3-ec2c-4822-893b-1b306ca983cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f77f0a65-5fac-4e46-a3eb-5213833d261c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a193a5b4-988d-4908-953a-5f296ee1b306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01f13cb9-c44e-4f8f-ae66-e72ace00f31c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "060ce012-1f85-4c58-8107-3760315f3a35",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee43e6e0-dd9f-47fe-bcde-a9e4c3083cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90545ae7-8890-4644-a63d-45d2aeffb40c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e476aecd-4134-40e0-8ac8-c02c2c23e29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "732091ad-0712-45d0-9223-a9562d342923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6731d434-7649-4b78-ae1c-cea273b47f6a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c29b32-7569-483f-ace6-33c001a9bfba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "018c84c8-32ae-44a1-af67-51f23509481a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf595e7c-2001-45d4-9082-cbd6543312ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71b98dbd-d7cb-490f-a3b6-52725f8d3350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "574dcfd6-d619-4a3f-af53-761473dc91a8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40018b0f-69f0-468a-923d-e348de87c34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c5f032c-8dc3-4aea-b57f-0773f41b9865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc0ee3b-3a73-41e5-8f88-1f04aa6c0661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ff42b66-6f80-4584-9e89-17e5e3402183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345344c7-e65a-4312-b6e1-bb563ec632ca",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c6d6f18-d415-41a5-8e3c-cf49f811d042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91056854-779c-473d-baf0-c52ad879b0c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6fc9f45-9b8b-4685-aa40-7550ddb1cb63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6ec6b04-dcbe-494a-8751-9f78f222b382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c904550-c8dd-4181-a5fb-015c59012377",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ed9f72-c002-43e2-9b25-31a9d558be30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e54e0825-da92-4f4e-bb19-f58ce6207e20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d676a89-363a-4896-9d3c-f89a93161caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54a8b452-954b-4109-a846-f912c711fb37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c99575b9-dcdd-4183-95d8-8527904c7e4c",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c879e7-d02c-4d28-803e-a2b5e35a79d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f209c9f-c3e6-46fe-8695-14930e197824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef32db36-57e4-48f8-b687-d2be523065f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f384f5b8-e14b-4a68-b378-9dda69bf966a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14490629-418e-41e5-9d5f-42fe6229876d",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c49e65-1b8c-4c22-9941-c39e25070cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e27467b-9662-447d-810b-d6f4e17872fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd56116-6ff7-418d-b4b5-6f668c44990d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bfd8544-2bdd-48c5-af1d-877c63c954ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afaf801e-1b28-4448-9786-6862a44cf1e8",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56fb8368-0f36-4396-a308-645a9d63f023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1faffee6-ee89-4ca7-b9ad-9ec3ca3e093c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88cdd170-669e-4224-9c39-ba4b4b506a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "210d542a-53a2-43f2-8f0d-598b0051cfc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc0a340-f5e1-4a21-8f7b-d8d681550498",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "075e7f68-6371-4a6a-9cb7-416b96ea0fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a066e94a-7102-4e94-9654-23e8038af9d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3cae90-de14-454c-b505-59dab52cdf02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "842bb3cf-a576-43bb-ad37-2eef750cf854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ea9498-a7d7-464b-aa46-b594b0d1e971",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a27e4d-4f45-4ae6-81bc-3155adec1f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d5ea11e-b14d-452b-bb0f-d94e67b5e9b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c5764d-ebee-4ec7-9d9c-6b523556cfe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "564d3569-0500-48fb-b286-d96e19c35989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3747072c-448f-48f1-a4bc-703315533661",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef678e13-fa49-4e1c-ae19-bf555cd080fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6abbdbd0-2ab9-46f0-b121-851d95437ac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "807d4d5e-5995-48f9-8e45-05c7a13c9df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51f1b210-5e94-4256-8202-dc6b5e3af6cd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d78d8003-8d87-4ae9-990f-f15196c88763",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f67edee9-3f2b-4cae-9a70-dc89dc5edd68",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ddc79d1-de23-4f0f-a7a5-f24df106c7b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a0e7ce4b-214c-4d12-9708-3c10c7d4d42a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54c39d4-4571-46b5-8256-b665cc343ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3ea0186-9440-46de-8310-1bafa84eefbf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c66155ad-6ac6-4ce0-8693-fa140b2b9f94",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a1b8346-cc96-459d-b802-7f35c1e689af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9390c6a3-2c18-41d4-b65b-fe9a88e10e8e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f70f211e-45cc-4ae5-a814-e9bf13c9b464"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9dc72f92-3202-4bb2-91b9-64bcd92815ec",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c1edb70c-579b-4120-bd6f-396b0012b7ce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d75bca68-19a4-4bf7-9830-93a348109327",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c034d5c9-8a6a-414f-a22e-5b0a459a9787"
            }
          }
        ]
      },
      {
        "id": "77436691-92cd-485b-9bd6-e0e6a89b44ac",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f1a9e1e6-cdab-4171-b51b-b4e940a0222b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0b52e40e-61f9-4407-894b-a588b8ced12d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bb4ec609-3026-47e5-a4fd-0e5b3722e1c6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb18001-2e1c-4346-8b48-d9e051cf82d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9be94b1b-5425-47f6-bd14-2fb3e42680e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd944e91-fba8-4f32-90cd-86f2215a1c4e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5410bd1b-046c-4c40-89ef-93f3afd3ea71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59ac28ea-3405-45d0-9da3-8320d2d76a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd02808-9607-4484-9c3d-dcf4b0d9eb37",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5cdea0-d4bb-4b5d-b062-09b7dfa7712c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e18053-2497-40b3-8bb6-8aa0f251a667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83184699-449e-4f62-9061-91ced5f4c247",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a7da22-2a9b-4194-be18-82da40749ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5016def6-875d-413e-96f9-f85a64bf42fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78034a8f-a27d-496f-9146-1ade833d5c4e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1477818e-9f30-4a79-a8fa-74161229a443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d54f19ab-2ea1-4fa2-a09c-eb85828b807f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a874543-6e0a-4dcc-924f-01e26787cd89",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b194b0-8e41-432d-a467-1957218b0527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "968ce4e9-5548-43ef-a2c6-9bd7105ee375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2776fa7b-5625-4dfa-ae0d-d5ad9ea4fe9f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8025c93-9f85-45b6-ac09-58e4448ae508",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "498ad77f-96cb-446a-ba4c-8f779c8636dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a9c149-c666-4ec6-9677-6cc581ed896d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d506e90-050f-4acb-ab7f-c09d78ac1f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c1a7d5a-8247-4f33-90da-6b0fbe5b1f45",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8994bd8c-3220-43b7-8aaa-d3edbd3539d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fb1a2dd-4962-437c-a096-af6e11192281"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7f52ea-506f-494a-98d1-d6161ad0c325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89ff9569-9658-4758-86a7-d247bd834704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f56197d-4fea-4f9c-bfac-04afd882245e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7a4844-ff50-4cd3-83fe-97d4c74054b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d43f4e0a-0f49-456f-98dc-a4d98204d069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c129e4a7-b5f1-4b45-bf5d-81dc18cfcd18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d4c5ba9-8236-4706-9910-e2ca0a3ed16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d24740-6c84-4111-b08a-397f33c159f3",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6332e486-bd31-485d-b4a3-3c7d22c2b732",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "805cc640-68dd-441c-8be8-9f8c519f573c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96073de1-e925-4aaf-8660-d3a5f67f5b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4ec55de-d21f-4daf-8811-a5fae5bdc460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a827c7bb-5362-483e-9d56-cc57fdaf1ee4",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25708de0-c548-4ee2-9863-798c21b4869a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f22197de-56e0-4c0d-8bc3-fa01b3d3ce56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3bb8314-101e-4a8f-b664-f8e6c69df677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a806fac2-4eba-4b59-b38d-433ecbee38a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833def92-649f-47bd-b67d-43142998cc58",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241eeac4-8237-4fd4-9ae5-fd24958dc0ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2161dce9-6123-4ccf-97ff-1831d37e37d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37cc8e86-7828-4383-971c-57c7235ba103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c78779b1-7255-46a4-a6b2-1c3f89259c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62d70e9-fdad-4068-afee-019ee93f5519",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92632d13-77b6-4941-8423-a52dda0e98b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03b97aa2-9265-4393-a91a-9265be4ac4d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3c109d-4059-4030-8b5e-952b6bf08b86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad377e4e-c167-43ad-88cf-e573f42470fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42b2ff6-3df8-468b-b97b-32240be2e6a0",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba7d2574-b1ce-43fd-9a52-3e8d927c03a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af7dcdf6-a935-46e2-8ea9-fd3abf6300ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4199bc-6fee-4d5e-9a85-2b582255be4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1df57d1d-cb7e-441e-a1be-5d07a3f88d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da2841f3-c7f5-4e7c-a816-15602ac87608",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d31aec7b-f41d-4ab2-a13f-907eaa778fb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a3f8157-383b-4a68-a1af-b290ff0e3981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f72a0dde-b42e-46de-91c4-0a77b62bfb1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1b223b-6af3-47e5-a4a4-e1da36e978e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35a5509-82ad-4bb2-ba97-73f8c86c04dc",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b72b10-eaff-44e6-af52-7a2e8a61566b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f410f4ac-ae29-4d25-bd41-2be34880295f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "514604b9-17e0-43bb-a780-c51d6841360e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e9db8f-c697-4650-bd11-2bc029e3b6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3269cef-7ab7-4870-8f1d-85495f79c77c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc983f50-0977-4104-b944-a27f47f240c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d87bd270-85b9-4abf-835a-1595f487d435"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a43d8e1-eee1-4f8e-b0c3-29451de14a1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d30eaa9-7044-46ba-9b8f-c9fe797c2e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5425aafd-7490-4d77-8b56-eed76507ef43",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db42f49f-df10-45fb-84b2-822ed92d47a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120bc5c5-b7d5-466c-85e5-dcf5c3560bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab6408f-dac3-4ecb-a534-61b3a158f4dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8452ba79-6d0c-4221-b8d3-ae8b8ae3a8b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b14f640b-17d7-4304-91c5-d64efb6314e4",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0c3fc2-22ce-49c5-9063-3e3a7ccf8619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a058bea-a290-48a9-aca1-31861eeb803b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c20ebb74-e390-4e07-bcde-ae81a7f64915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "247a6d21-e5ae-4f72-aa9e-b2624675cb69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1498ec-3f45-46d0-a35a-86d455d77830",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f576b52-ee37-49cf-9a43-452e3ed069f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5381122-5e01-4651-8420-85c0824df54f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1354ab8a-05cc-4850-ba84-ab78dae6fd9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f519900-ad2f-445f-bb66-04319bbb6489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c39f4ebb-12e5-410e-b38e-0177bb5065bd",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e69ed13-aa17-4769-8e2f-6c038ca77338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "461c5f65-f64c-4394-98c2-4cb0079081b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a8972c-552f-4a4d-942b-1a8b251b35ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6edfbe85-0f2a-4b6a-b137-9c1021b1bd15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee384ca5-dd64-4986-b601-0228e66c04d0",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b793b2a-7585-413c-957b-33f87a4a3ded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c871fd10-3fdb-4641-b4f5-b49894f8eb91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0e53ac-8ce3-48ea-ba54-c06b5d4af961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74b3d670-6025-4cb5-b464-88066701cf4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8909ce81-0b7e-47b7-bd8f-b14c4f8c9f95",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "685785e8-9b33-4c43-b8d4-56f98aef032b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca775f49-d213-479d-8417-0e8e766e26f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5ebe44-3ff0-473d-94fa-37996bd6f7ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a50b9c4-6f01-4d04-a7f3-acbc58d642e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72754b1-d0c7-46b9-a239-e559685afa6a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ab2563-32c2-4ab0-bf37-e619d7294330",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "288f7490-a336-4704-9573-f6a2ecd5c557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8846e4d2-7a1c-49cf-b6ab-8749e6edf0d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9214dc5d-4954-443b-8c63-69f7f9071972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38331014-03dc-452d-ac89-734760a1fd69",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5481446-d80e-4675-903a-1708f396e352",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "616d44d1-0740-41fc-8337-dd0905c1209a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90775e5e-ce89-4c9a-8820-16c8b5d531c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bb70f10-da19-40ac-8fc9-0abd49e9bd62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fecfaba2-9330-46af-b599-f2633c32602b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13a6354-5807-4389-b7d0-dab081fafb04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d0bb5ef-21e5-414d-b530-9fd6d4cbc407"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad862cc8-aaed-4007-a9c1-3626849f5521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ea24fa7-4d55-4dea-aff3-d6f2d66e5ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc0ff6d-a277-4fa9-ace2-dd6d2c621b27",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b02972-104a-4a3a-a66b-3c23c950620b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b67ea02-4170-413a-8506-56f6cb02dec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "194a07cb-0080-4cbf-9391-d0db501f39b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e94aee7b-a642-4411-afeb-853ca7674fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541d49bc-f680-438b-b50f-52ccb4a0e5ca",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a18a05-66a4-40c0-9a22-1a361c296fdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9dbe5bd-6b2a-4b50-b4c9-f9045ffb2d54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74266ab-c04e-4c77-b378-6dca8a7a53c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e88f413d-6bbc-4e0d-9e25-e73675cc4fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c980eb-4ab8-429e-ac4f-bd10c7a60c8f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f7c932-5053-4167-8aa8-97c427d84acc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57a57a9b-17c4-4554-8fc2-6239b4e790be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2fe1336-3ccd-4a64-bcfa-5561e0587b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "590daccb-5f4d-4fdf-bbc2-d089b8e5bf90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feefb0b5-86ee-40bf-aea4-dca8698e6c8e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f65caede-6c0b-43e1-9db4-39440fbda81f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75524f9a-de9a-427e-a84d-11356831101c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46b3d0e-3a2d-4f83-9cc5-f268575503c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5ee3e1b-d12b-400b-b565-e3c074f84814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc0aaeb-2929-47c7-99a7-1a0e5eaeb45a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3046c0-adb3-421a-a82f-ab4f3a1df6fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "729239dc-74e0-4f03-95c4-2bac95806d23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0abfcd-dfce-4089-9a3a-8596e01d5110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b41cf5ec-e421-4029-ae3a-69a687c80948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8c0443-9cbd-4484-97a9-e74afe872af3",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe13c932-e78b-43ed-b4fb-a62e364863a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6f03400-44f3-4d6d-b224-7a6b7a74bacd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92905d3c-d3c7-47dc-8e34-6f1fde9365cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bfcf7ef-3730-4ffd-934b-f0c5e19bd87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5482d828-0ff1-4427-a2f3-68bd7416a3b7",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0072e23a-f0fa-48b0-b582-a725aa23d4d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1e937f2-26c3-4b83-926f-96ed44d5f0ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b27336-804d-4384-bf61-7d24517ce8e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cac4ff93-bb22-4dca-97f4-a5fb6ea09db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21c00252-9b62-40c0-8c6d-217ce917c896",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105b6854-5906-4f8f-a64f-aba382891e5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c245fe8b-b7ef-4971-801d-e5ea64ad85f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d569b863-7ba1-47be-9f12-d545f4222518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba35374-15b1-42b2-ad31-c7a983ad8c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a07600-956b-4f10-89b6-87b463f57587",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c14b71a-e539-451a-89c0-846e24829107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7efc33b9-fe1f-4ade-8829-eb39aa13f757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99629d4a-c866-4df3-9c73-48dc7195855f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb2e0612-471b-42c9-9a5d-5b6ca6f1b300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d41f23-5dc2-4f19-9742-4faa01f4dfa0",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd0cba3-cb13-4e74-a8f4-8d1addd34813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "797fa6c3-096f-4a26-8e8a-e7c5887c8909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64fb6c41-f06c-4c3d-9ac5-0fb5353d3283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55acc026-4525-4e07-b29c-f299bc50536e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6332fca4-983b-41bb-ac7d-aa6b1a2e3266",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ade659-a85a-403c-a663-66d30e475964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43c13af2-105f-409d-8b63-188bf4fac04a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e27501-bb6a-4ac5-851b-7042b0a16cb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6a354df-4663-4afa-9788-db19f0027d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc43ea3-bfc1-4bf4-a2f0-66b7881e1bf3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619d4c29-faed-4ebe-8bcb-12bd250ceb89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f8bfd5f-c3ba-4efb-83e7-aa835d3e7711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c65696-3ecb-441e-a992-d40aa6cfa746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5c73749-8a38-4a0c-bf88-348ba42dabca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58329af6-59b8-41fa-9c1b-78b41daf28da",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8084b47-10a1-4c64-a63d-642ba8262156",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "376f8741-3f76-49fd-bf27-4d7a25aa362f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c542e0-9253-4c59-9434-23edabcc789c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c15e85ef-0fd0-444a-88d5-06c1adf13926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019973b3-d73e-4126-a448-cd90ccbabee7",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a226e4-77b7-40aa-9fcd-4d35249b4049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61668fc2-6ef8-494e-8842-682a28acd25b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22fa2ac3-d2f4-4480-bb97-820a0dc33d5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ed22bee-d08b-4ead-abb6-044db40c454e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed4ad9d-048e-4440-bb41-af84c9aa0b74",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3fbe29-a253-4586-9e0a-6ddaa6411fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "460d018b-6982-4d92-a556-996c182ce8df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0489c0a-96cb-4bb5-81c0-81b272866711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2256c032-652e-4a0f-9046-638732d5a33b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0146b96-9bec-4f0b-8753-f80d4bfc8146",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b173e5-bc29-4116-a1f7-fdbec3887006",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc1356c2-4e25-4856-80c7-a7c65fa7764d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c4ba46-65ff-4137-9a94-efc7fe806c88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95ad4a03-462d-4623-9e3b-5236a9525a7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab62641-8299-408f-b7b5-207335dc2433",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8406a2b-07a8-425a-8323-ae10d7843c40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b076a866-4a1d-4407-b677-94f14db46db9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18cdd9e9-ef0e-45d2-956f-e96d4ea1199f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "197b3700-4bee-41e6-94e9-1b1b6c437833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3cc1d2-7add-4a8a-bd9a-b82422b733aa",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e985facc-4624-4bee-ad96-55b47576a318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd543a5-7b96-4b6b-bba1-3cba759a25d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f72c938-0cd8-4372-b08f-b1402c2d0039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ec0e7b-957b-4c44-b74f-3992d2013fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e97a30a-f056-4e09-b857-4bd440b9690e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc74c5c-d674-4e7e-a1d4-67a9566bb63b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b01c3f2-de21-40af-a392-ebdd352a8cfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c063df-3b20-48a8-8f9e-d660b61b9603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "438ec1c1-2b1a-4491-a91b-4e58de916b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "774e2712-8e10-4946-8171-66d7e8021656",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56989250-51fb-44a2-ba3d-fdcf47543b40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66fd9160-e9c6-4367-b144-b53069a22833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39e16e2-ee91-45f2-ade4-303d44360fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2a76856-6c3a-4796-8ada-2f6ea98b0866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425b4d08-2f1b-4281-9626-9d74932c2ea6",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67694ca8-bbc3-4f72-a131-8d4bdd9c4690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9b528e0-d428-413a-a2f1-6954ddb1674d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c08dd5f-3c05-4fca-804d-b390d61eb532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76689eee-8114-46f0-bb26-8172fc0fed81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59748995-b83b-4df9-9cd6-e114ffa16abd",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf706482-b204-4afe-bedd-ce6fbc646dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9c4f075-d908-48a0-a928-364e41eb125f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e156715a-2c94-4e28-9b85-d2910e31729d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f26b5102-7087-4f20-ab15-6c7499ccc078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6759e3-5bea-4d39-9cc8-2a4182f9bcdc",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b26e5e3-b7af-4162-bcb0-78e881f93624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca0f1f43-a11d-4fee-a3b5-daf2d5dcd391"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08767162-a3a7-42a5-8f26-8c19fe96596d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "038f34c2-484a-4da6-86b8-29f5d1ebfadd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a725517-c1b2-426f-b712-f46ed6f47a61",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6741b1a0-d7f9-459d-9cc3-3018f0e398b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b419b6e7-c8de-44af-83dd-2183b57c4002"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c3a00d-9d2a-48ad-b463-0130f34fd57e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a570da24-ece7-4382-86eb-8fec1556648b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57f2d86-e610-473e-b665-0001c8c27c9c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4601fa-46f6-4a48-890b-4f34c73fa8d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7570dd0-4876-4a6d-96f9-251e2efcd609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88772ca5-ec16-419a-ae55-2c5708012a8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92ea0131-3437-48fd-9847-04f3c7efb93a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa167dc7-2419-44b6-88bf-bbb0cf924e55",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af751f9-b243-46f1-aee8-e0082358fc37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e7b9202-bc37-4047-80c3-f5468bfeb5b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46752771-1eed-4e5c-afad-02102a24fbd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "275b4b3e-81e6-455d-9f3d-a980c0383525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f8f355-b870-4c75-ae44-51be8a41bffa",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37980f57-9e13-486e-b43c-8dab9668e8c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95652c06-71a8-409a-8613-b808c4879722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89312a2b-106c-4390-8215-06e65f7da8ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d059d0ff-5e94-4c7f-80ab-e42aabbb9faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da3a8a0-61b5-46c1-9a5e-cdd5316c1ca4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893b9695-b57e-427d-b97f-e037c8c60c44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f99478e5-470c-438c-b37c-16d0e49f423c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8587ca90-51a3-4e24-939d-8442058e29d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4857635-38ee-4d75-9db8-786367d2b729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4acc623-d0ed-4a74-9e73-7a880d946770",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0764c88d-0556-48a4-86cd-96c7633077e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f7feaae-13fa-4fb8-99a3-f2fdc813a69c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea9ba61a-77aa-4cdb-a8cc-9758b81d545e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b8e0baf-728c-4f6a-9741-2c17033f6902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d515cba-dc98-4c41-a4f7-c698dbb42dcb",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7232d23c-653b-4a76-839c-d49724d73e97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40cf5777-dca3-4c8d-b6cd-794eaab26d18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11da5e35-63d0-4d1d-b4c2-c566900ba683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dba1333-82c8-44f4-867c-6e9cbb9b2a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d5fffd3-8544-43ef-8113-55cc05642e02",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce52a69-393c-4efa-8324-a330b7d9e468",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "542ee295-9766-4c1f-9284-1eb1b9fb2b76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bdab27-47c5-4c4e-b7a7-9e71b50b74c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0c09ae9-7689-4cd5-96f8-8486238b47ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3de1539-efc0-4aea-a66d-e928ebe9ca04",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbdc0efe-5c8c-4340-8866-aa5b68cef379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51d5b5c-f2e5-4cc7-9a84-2838a5f3ab30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6172e40f-f4d5-4acd-bd15-a6c1eaa7ad5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e61cca9-f40e-40a2-bbaa-16f8fa45c70f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a8c491-98a3-4c63-aada-eb8342c08309",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373bbf2c-9428-476d-a385-93c586498806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de513cd-565f-445e-966b-073af1e2c874"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04cf3227-ba9d-4356-a31b-5eccd22a503e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2aff970-6825-4244-abd9-07e125763b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e094ac-98f3-4393-bfd3-39c1da672164",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47aaa4e2-7b95-4be7-b3cd-272b000cb718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f506d8c6-60c4-4463-b8b6-3c3ccd8f8a64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ff9a76-d663-4d9e-97ab-c0c178a4b786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05f82ca8-d743-4e70-bb95-97770f00d7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "594b11fe-3a29-4f3c-9b07-306bdf0ed08c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "602f52fe-905f-4a95-ab77-e8d600eb9f40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3eec276-97c6-4324-9158-e8b927d2da63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c09ebc3-bebc-4ee8-8113-21a940c41030",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecc229ff-5d29-49aa-8eeb-4f67a064cd7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbadd6a6-1abc-444b-91e8-5e86e75f8c4e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99cb8bc3-0c08-4a5a-8431-095c3da1d55c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5f1afbf-4685-49b0-8941-ad0a07df791c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ccd1c2-36be-4c0c-869e-c7c78d666dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c854f71-9640-4adc-807f-238001abf423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9ddb1d-e200-4624-8ff1-58e730517f70",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0088681d-4d1e-4975-950d-92969c5a4ebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49f28ddf-1f75-44b7-954d-181e204a5fd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "366efc9c-c6c1-4070-9847-a6e5e960cec7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4904d790-e59e-4157-a90c-b55dac342d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a6fe06-5571-499b-9299-8534b39d3328",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dff560f-26b4-444c-9479-91f617de6f50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "824f6817-33a7-4286-9ae0-bbace355eb90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5399db9d-5a03-4a35-bc41-53b34a5131f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ab8627d-3bb5-454d-822d-761495c5be08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "189961ab-024a-4edb-b758-1f7078c6560d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624ef4e6-d25b-4a29-b11e-e84e50d9725a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e48a6497-fb15-4bad-bd1c-be655c0d3394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "156433e3-4273-4fb3-af13-661b12c25a97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c13bb4-747b-43f4-bae8-37f7290befa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae6071ad-fe75-46cc-bd7a-cfda6bfe7a4d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "286b29ab-1ec8-4df1-87ce-2b16f6ecc8c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fb63797-8cec-4228-aa9b-77b291ec39d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3707b7e7-a5cc-4bff-87ac-a1a9e1579552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f351b3e-08c0-4475-8ea5-21b1c3f35a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115e6224-a8f9-43bd-ad03-bbda7ba548df",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd34a605-69be-4579-b2de-fd5bff6bff1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c21fdab-5a39-47a9-864b-3fadc09a2d49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b9a1bf-b33c-4cae-b511-5a4bd654ef5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7113c7e3-1943-4953-bc48-471bc6927beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e665879f-59ae-4954-85b6-583698f337bf",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "534cf475-834b-4a31-95be-e69f627be3d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55cdfc86-8390-4625-8015-0ee7647a23e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d90647d4-74bc-4e8f-8b47-058259f98de3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f2b114-e17c-4468-9c5b-ca93d45827dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd5753ce-deed-4ab6-b023-63116c001f50",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8052402f-51a9-4873-8fef-3dbea4f78768",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cb062ae-024d-4c4c-997c-dd7b3f4ea1d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc894b7-5c34-4d18-9664-e62bd1371f28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9d28711-c0ce-4630-ae9a-d73b506b6a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48575815-9d29-4923-9c36-f64898501bd5",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d213b01d-ed22-42d3-befe-33b6b2ee700e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7eafe16-d2d8-42f4-854e-84dc095e9061"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8683b8b4-d74f-425d-8cc3-3b639b89a4ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52b1764f-901e-4c2b-887d-9f22e4fc459b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a341beac-3416-4b88-ae79-b95e8bbb5bb1",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe3acfa-c74e-4a80-9d25-69567709c85f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5820b68f-0d42-46cb-ac88-0d0f30abe56b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57fb0b76-0fbf-4194-946b-b31e31d4147c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a9c0052-5531-419a-992b-1d3fcc72a60a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfede09a-6166-4559-96de-46377bfe3e8d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9edd36d1-2937-4637-938a-20e5d52fe92f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f96f42b-3131-43a0-9f9c-38c83932cf4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6254ff8c-474f-4039-b313-9ae0a3d3e6b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "212f51e3-fa18-46c1-a582-cffd8471b412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06565e1d-65d5-4144-af02-d1d4739a453d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbda03c-af1d-4cde-b767-56eae7c4b1c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6937aea5-fb6b-4479-8678-7d0626809d1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba848f28-40da-4290-af52-ba2e8a28f3d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36ab1f2b-7188-425e-a077-9e6c26cf323a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7b14e8-4a88-450e-a3b0-00047d65d24d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ac1c7a-f28f-44ae-a856-e71b2963a132",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10227a5a-0705-4dea-be9c-415696f15018"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ab7147-79d7-4e33-8a06-cdf667f3b644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58c4d1cc-0294-4080-988e-7222f1080d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425683e0-0536-4474-912c-e6cdb72a52ad",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae84135-6726-49c3-8894-a06eaf46c13e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3b0f5ae-a362-466c-aea8-a2ee2ac16298"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "318ff2c8-536e-454d-ab8a-b9ed48a904a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98c18298-6edb-461b-92f7-d9544586599f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c65b15-ba7f-49a1-9424-1a7c4df28d5f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d7df14-5551-4e3f-b2af-b765a4995abf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "381da056-7e76-45b9-bcf2-484d369e9ddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8a5b7c-65b5-420c-ab39-4e0e9386a463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64ca37fa-ec79-4a82-a95a-5e44e581bb51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4348552b-66ba-4228-adc1-38a47ede5153",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572d5359-23dd-4309-b8ad-a547f920cd5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7cdf650-e35e-48e7-945f-2e3d3ed7f075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54267ab0-6671-4d7f-995c-dd0e3e20cb07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90c5c4a4-9389-49d1-8c9a-02fa2f712e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe44302-4029-4df1-a393-771adc88c847",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85392964-384f-4484-b1ce-d638b0fdb108",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "015d9c40-ff49-4880-8746-58299fac0b72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c558fbe-5a30-44bb-ac10-e5db2f51610a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7720d267-a65a-49ea-8cfa-2324b1dc86bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49450501-d5f1-4a6b-b20d-f617135ecbc7",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e864327-8416-41be-987a-95f1c8af8d9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad706664-c5dd-45d3-9962-f94a7151e85d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9be29d1-62dc-4b90-8520-25c33a31294e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01863a86-1cc8-4677-be44-3c5b8d5e6351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc8e9cd-c47f-48b8-8748-2554fb0f9df4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "230733fd-e62d-4782-a1ca-59b47753f86a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3acc8c53-3930-4c0d-ae40-a8641accefe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c323c33-19d2-4797-b5a5-02d11a5fd9c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "588b975b-7fea-4ae4-9216-75cf9014607f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57453665-8810-4d14-aefe-aad6f0e666e9",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a105da5e-ac67-4638-8177-af4148b7472d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e43a2db0-4af1-44bd-a893-837699154abb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d1cc65-9347-4f2e-94c5-460bf291a1a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43893f48-fe80-48e4-8c21-a3d7fd2683a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e33fad-82f9-43fe-831e-bf801de02770",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b481e0-6c33-401a-b119-5e19724e68b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01a45904-4fe7-4859-8a6c-ebf7a82bb1c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2824ef30-5547-4d05-a483-35faff8b4836",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40f992f8-aacf-48c9-a3be-28ca66e89e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c17c9ef0-6241-4834-9614-b35764dda949",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb79598-23df-44ad-9856-2e1ff0ae018a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bdccb98-55b7-48bf-abae-23cd5e784b3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8306000-b4b1-4283-8d14-50e360a3dc5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40929af9-3b8f-40b3-b66f-29aef1207ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f50687-6113-422e-8ded-c5eb1c8c4982",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7345b0-6cc6-4ac7-af9c-82999714e5e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbc323b0-a0a8-440f-a48e-c63564ab2785"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6332b0d-d2df-407b-a449-afa38526c69d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a667ad5-827d-4357-8451-6584ea9caab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec241e5-e02c-4caf-a1f9-6b115f45aa51",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b406cd-442a-4f51-8052-9ceb2658aea0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84d77470-4861-4e21-9142-1b0cdc628f27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f05c66a-6f31-41d4-9ac3-76b89092d3e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea292c9-1fd2-4db5-b18d-21e8bd5a07a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd00a70-796b-4e97-b211-00804ca7c2de",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90883406-c157-4d1e-8fa9-cc34d5574db0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f1055e8-962b-4bb9-8543-dea179d5494b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "439d128c-7d50-4d5a-bf05-aaa1674a7a66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e9abb06-3809-4e31-ad13-91032e9bce12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b40a74e8-29f4-4f1f-8f6a-1a814c801a64",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a1337c-9e37-4274-8576-7aabf3556ec5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44b2afea-1df4-4cd2-b1ed-d564aa59f0ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bfbed6d-90e9-4c23-a2b5-f884deb572b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea7d48cb-8232-48c5-a8df-69724270e0a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ea7638-cbb6-449f-8928-8856d216c00f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc136a80-4d8a-4fa1-9fe5-011a1857c51f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4271b2a1-7924-4630-a44d-a344af16eb83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d9d7aa6-1d55-4e2e-ba38-f3b3c72ef365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9846bb6-ae8d-48ee-8542-9b5fe18f2c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e89672-0d12-4e22-b82f-f234f0d9300c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97579f96-dcae-4819-bfc8-05ac5c4699a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25f149c6-ccb0-457c-8bde-3233d62179eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b93ec5-48a1-4bd3-ac15-c45e80f62ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed0dac78-f831-4baf-a78a-9230e2e4f7c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baaa5026-700a-4792-87a1-76ee455df145",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065e0295-90a9-4bd2-82d0-a1240e21b248",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "866957dd-8966-497c-973d-3115e1cf62b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a5506e-bceb-404b-a45c-687f33845453",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f9178b9-8e9b-4457-82b3-bae83c81c5e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b36380-29f8-47da-b39b-c3d619b6402e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de2ece4-1e00-4732-b688-825a2f0a0e28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c09a6b3-5e8a-496f-8bfb-86bdda197421"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83140db8-37b4-4624-be97-6befb158bcf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a7236d2-33e6-415f-b1c4-518dc03ec7ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf64eb8-3d5a-4e01-b7fc-671e4e02884f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117f1039-8ce8-4c59-b60f-9b05766924c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac5225db-931f-41ce-ac4f-a01cb930428c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36230a55-1c3b-495e-94d0-bec921943751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45bbf0e9-4604-43df-80b6-0db323400661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc0e23b-4402-4bc9-83d0-7ed4c2f01faa",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117a02f1-48d6-47b5-9606-2adc334a26f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18de6675-0116-48b3-bbfe-78890d954867"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde222b4-b2c1-40ba-9594-f4b129b24cba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92b6261c-38d1-4fe1-88aa-2be63d5ad7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3129331-10b4-4da9-8f5d-1b02ba440060",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f776a6b-2aab-46a2-867f-b9c5a0dd780f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4379dc84-cda0-4b8d-8d4c-436e91754d63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6165ced6-ccba-491a-b6aa-ca2fc03ce35d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0079a597-14c9-438d-96da-d257b77cb314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4cc352-3a92-417a-b58f-7ebe2eb27c6d",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066f6c5b-d032-42fd-8aac-5043ce0663d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4a14552-dac2-449b-aa36-e5350310f784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63da386e-cf4a-4b92-9de5-46e69f47b5d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "278aa771-2caa-4525-8134-c29c44d6519e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d254e86-1702-46a6-a64b-c7a27d77fd8e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a8bade-f29a-4fc1-8387-bad7a887ceb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f3dfe6c-d70a-44bb-98f2-8e6b8317c72d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b5a00a-60f8-40c0-ad34-72b379466dad",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e78bd21-cfe8-4b23-8bc3-21bed97d6f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3606849c-2861-4c82-845a-9d0d05a172f4",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78e113a-7a83-407e-bd25-0609c73a988d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f54380ca-54bb-4b8d-a557-3cd4ee8e4ebf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a82907d-dc3b-427c-94ff-39b874ab9055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51f44897-67ee-42c5-a958-2a4b30993226"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8691e6f-02b1-45fb-a7f9-788babe7226d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db5b2b70-1578-492a-ab5b-9772ac5f6d55"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "25ffd457-37f5-43d9-9fd8-4a1101d899c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "87bd331e-8a60-47c7-b650-8c79c1ef1953"
                    }
                  }
                ]
              },
              {
                "id": "04314729-9a11-4e06-9cc6-6b58d11a3f62",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9dfa56a8-789e-4301-b7fc-21dff4a0ae0e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a29e7d-b070-47d2-b7bf-2676dbad8844",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4e069dc6-58c8-4e74-8282-82620b6c7310"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb8fca3a-f449-41b4-b979-4ea43308388d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82835c88-e098-4a76-985d-de32d324a885"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d262c6a5-227e-494c-a906-63d31f0fc23e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50ebc819-cd17-44ba-96a3-a07454966ac0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e64204d1-12bb-431f-b466-1a83d56fdd2f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e2c9dbf-1e86-45ac-9fa7-5c569781cd92"
                    }
                  }
                ]
              },
              {
                "id": "bb6f0d51-45e3-40b9-9a28-45151dbf1207",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "070f88c8-26c8-467a-9be9-cf1eec24d392",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4e841f-b89f-4437-ade8-bc2cfdc34151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "3ea8a1ae-28eb-4b36-994f-3c5eb84a7678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "932afdd0-8ca1-45cf-b8c8-cbc55124b77d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d80e50c-a321-4281-a3c2-53ea206bdc0b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "44e33392-24d0-4c40-b323-254f114bfdf3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "46be24f6-b47e-429c-8bc3-7a3b13b6a11c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a72198d0-abf3-45ae-a153-5ae2c198555a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3ad7496c-47cf-43eb-8bec-a12813370375"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f515293-f12c-4447-97e9-1854f41fb4b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ab20891-2f9f-4f45-8134-dbdad75c9535"
                    }
                  }
                ]
              },
              {
                "id": "d8813bf6-0bfc-43cc-b007-4925793cd7f2",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6027a55e-715d-43d8-919c-a29b3967d911",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a5a2bf69-e35c-4f15-bd31-fadc6783d410"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b82da316-985d-4d70-888e-0235e85c4421",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0595a90-6afe-49dd-b87b-29bd47c6aeb2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3736e95d-4404-4162-aca0-0f2be4e48597",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6c1253fd-b5b8-4772-bf16-11de1a49256e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5e669587-c3f8-483b-b5e0-8a62ea9a98d0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e3c491a-95d0-4905-923b-aa58623863ce"
            }
          }
        ]
      },
      {
        "id": "27d1054c-e3fa-4b23-a8cd-0097490bc83d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f065dcd0-ca34-46f3-9208-bf32b8895b2b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d8273e7f-60fc-413f-8f49-8b0d34dc1c45",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f5461291-9b7b-47ee-9d49-433a6db5dbc2",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d24cd4-68c0-44cd-844a-6bc1afc240f0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5434cfde-ba76-46fc-b7be-608453598ba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f59108-74e5-4096-82c5-e09f772f3115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d56bce59-0197-4258-8438-7e16bff948a8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4b94e0d-9aae-42e9-87a8-74c7e0619d7a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14b69d42-5149-4e27-8c21-7c5db10c271e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5cc11a9-e04d-449e-82fc-1cd689ed31dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e88d2d3b-13a8-4423-8bf5-32ae89177a79"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed851610-e636-4f20-ba4e-7131abb1f120",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ded1bb86-e312-477c-8154-5862162d1dcf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "efdf1b9a-6d8b-4a68-bd8a-99dc82b7ffb0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8f3ceec2-085d-43a6-9d95-d517eda78f4c"
            }
          }
        ]
      },
      {
        "id": "a4422c43-9f92-4c50-9f49-4f9c25a9db78",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4be7ef91-87d4-4638-a1c9-7b0c3b821cc9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b231ad9-7aaa-4697-a05b-2f7f0b36e246",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f9a83d4a-0e65-4798-997d-169dd3bbef98",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7694eb8-b63d-49e5-9c4b-74bd4a907558",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd7c7ab3-0424-4099-b405-6a5e2cc918d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87deb677-4380-4eef-b9c1-36ef12b31d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9afc6e44-a37f-4b56-b15f-948d93387156"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4976bad3-f7ce-4862-b7b7-3dd1a03e02b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44e58e75-0da2-4b8c-89ea-1f92edc49159"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b8c190c-ff10-484f-82b3-60a441c87b5e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e366c5fd-a1e3-45f6-8f8c-8f6fb732d343"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e8f78748-e077-42e1-98fb-78271ecae1ce",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6e67ee2e-0626-4ca6-bede-f1a9a6b38afe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a10542bf-7cb4-42d8-8836-14525e7dc364",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "74534ae1-a666-4056-aa0a-ffc085dcedcc"
            }
          }
        ]
      },
      {
        "id": "2d30ab85-072a-4d62-94bd-90241aee993a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "7d4bed60-1114-4944-a26a-cf64e3f8544d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3e651639-c470-467f-88a8-6eb078ad44c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bbf7c509-6a27-4af7-a7d8-65b4a8299e33",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8895f3c-030b-4b6b-a4d9-d344da0e3071",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eaebb189-5705-44da-8545-6316900dae86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca74702-1e2e-45bc-999a-5ffe485b52e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd928145-496a-4403-b85f-75d9db9a5332"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01e5094f-869a-4385-8d72-aba56d42a50c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2bb2fcb0-9e29-4c8f-a570-329e045da7f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a461a430-aed9-424b-b7a1-3df1c2ec8869",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c06e3347-32ba-4aeb-879d-3c0edadfea5c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f9d6d940-ad30-44c2-9aa8-e0bd65e3733a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b13575c6-07ce-47c8-b0bd-008e84a05bb2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7309a17c-5247-4574-b6c7-d779d214878f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "51217f9d-4759-4653-9df7-406a1449193e"
            }
          }
        ]
      },
      {
        "id": "f836f2c8-dff8-443e-bf23-2c39215802f8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "713b4f9d-6f00-4a65-8be1-778768d947d2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e7a5bc9d-649a-4636-93ae-17a12b29631f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4eab7668-82c8-4a5e-9003-28f0e6f453ce",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9dd2f0dc-4ac9-4457-9c08-328ad8fa27db",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04ca3c3f-1c49-4c10-92db-8328cbf9025f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 118.62807017543855,
      "responseMin": 5,
      "responseMax": 771,
      "responseSd": 81.0795705213397,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1709685249875,
      "completed": 1709685293318
    },
    "executions": [
      {
        "id": "3216f187-208a-491e-983d-981da7b9509d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1f8118a0-1a57-4f55-a5d4-853fe77a9e41",
          "httpRequestId": "176ff732-b4b0-4300-aa5f-794b7aff93e1"
        },
        "item": {
          "id": "3216f187-208a-491e-983d-981da7b9509d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ab39d35a-b27a-4ebb-8807-84afb13d130e",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "b6cdd7f3-891c-4095-89f8-a6919424aa8b",
        "cursor": {
          "ref": "1ceadc9c-4c3d-4ddf-af43-2045eb20bf2f",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f678f8c5-6694-4af4-b572-6f8c91239d68"
        },
        "item": {
          "id": "b6cdd7f3-891c-4095-89f8-a6919424aa8b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "4d90f482-dcb3-4b83-8d58-40eccb39e05a",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "88dbb256-8e78-40a0-a064-2d88651df75f",
        "cursor": {
          "ref": "25786e64-d583-494e-8525-5b9085b8060a",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0df1f281-1b00-4f10-b86b-f911800844b2"
        },
        "item": {
          "id": "88dbb256-8e78-40a0-a064-2d88651df75f",
          "name": "did_json"
        },
        "response": {
          "id": "83ec1430-20c6-48bf-b4da-003db0be0f98",
          "status": "OK",
          "code": 200,
          "responseTime": 253,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cffdf894-28ef-43ff-9b3a-deae39ef64b7",
        "cursor": {
          "ref": "f52fba7e-cdbc-4b7c-bab2-8b39d3eecd1b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3f1fe738-651a-43ca-a923-291e324515ca"
        },
        "item": {
          "id": "cffdf894-28ef-43ff-9b3a-deae39ef64b7",
          "name": "did:invalid"
        },
        "response": {
          "id": "69f0343c-e021-4cbb-bbaf-f8967e4e1c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cffdf894-28ef-43ff-9b3a-deae39ef64b7",
        "cursor": {
          "ref": "f52fba7e-cdbc-4b7c-bab2-8b39d3eecd1b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3f1fe738-651a-43ca-a923-291e324515ca"
        },
        "item": {
          "id": "cffdf894-28ef-43ff-9b3a-deae39ef64b7",
          "name": "did:invalid"
        },
        "response": {
          "id": "69f0343c-e021-4cbb-bbaf-f8967e4e1c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "701b9dbb-8283-43b8-a4ce-0f96704c1e2f",
        "cursor": {
          "ref": "8813be31-c1b8-4968-9ec4-c9254d7e0982",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2ce17b8d-6291-44b7-905c-3b5f693cb137"
        },
        "item": {
          "id": "701b9dbb-8283-43b8-a4ce-0f96704c1e2f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9b4c83f2-f8d2-49a8-a57a-b4041da62770",
          "status": "Not Found",
          "code": 404,
          "responseTime": 149,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d075f1a-49b1-43e8-b4d4-e8eedf404e44",
        "cursor": {
          "ref": "a02db6bd-aeb9-467f-bd2b-d1df309806cb",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "55cd92cb-5c6d-4794-84ce-8604dcffaf19"
        },
        "item": {
          "id": "8d075f1a-49b1-43e8-b4d4-e8eedf404e44",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a3f8e307-cbc2-4795-a809-52d7f816b200",
          "status": "Not Found",
          "code": 404,
          "responseTime": 95,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e19c526-5e7a-459a-be24-14af3bc523bc",
        "cursor": {
          "ref": "95b529fd-396b-4c17-82ff-34f28880d5ab",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a99cae94-556f-48d0-b729-195855633bcc"
        },
        "item": {
          "id": "4e19c526-5e7a-459a-be24-14af3bc523bc",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f981f52b-9666-4e97-974c-2daed4e2634b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05287d43-3de3-4b48-98d7-2d3c3959b3ea",
        "cursor": {
          "ref": "91b6412b-542b-462b-b6ea-914f80888fbf",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5430a754-77c9-491d-83a0-d1ce41590c03"
        },
        "item": {
          "id": "05287d43-3de3-4b48-98d7-2d3c3959b3ea",
          "name": "identifiers"
        },
        "response": {
          "id": "bb9a3620-7e01-45f4-81df-c25971c58616",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e36831e-3641-40c0-9272-58baf3d41fe2",
        "cursor": {
          "ref": "c5a5c401-f9f1-44ec-b60d-9e16160baa03",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a2711029-8d46-46d1-b5bd-0cc9b2bbae25"
        },
        "item": {
          "id": "7e36831e-3641-40c0-9272-58baf3d41fe2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fea0f9a2-0f24-401d-aed2-008d26c85305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec857f2-ab85-4f09-8b7a-1f471ae02a57",
        "cursor": {
          "ref": "cbd3b2e9-9aec-4608-8a86-8371ba9a1087",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "56420898-f8fd-4448-af7b-6107045fe1a3"
        },
        "item": {
          "id": "bec857f2-ab85-4f09-8b7a-1f471ae02a57",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "55a8df3c-4435-4b20-8610-9150a98c50b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfca083-37fb-48fc-b61c-545c4e3a82d3",
        "cursor": {
          "ref": "61e13803-e9b7-480b-a2b5-e4e242b35e2d",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b9bd715c-3808-4f45-a56b-df13b3141544"
        },
        "item": {
          "id": "dbfca083-37fb-48fc-b61c-545c4e3a82d3",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f2275e40-d561-4d19-bb6b-2397fbe2469d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f948272-fb4c-446d-ab6d-e9536197e6fa",
        "cursor": {
          "ref": "b3ec040c-c73c-48bc-bff4-65c1c15e54ce",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0540177b-dee4-4d04-b77f-7b7962bd1581"
        },
        "item": {
          "id": "7f948272-fb4c-446d-ab6d-e9536197e6fa",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "8e807fa2-70f5-4b3e-a5ea-459f91294398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e47ec363-7b67-4a6c-8de7-a13bcf288a3f",
        "cursor": {
          "ref": "a9d2e883-c217-40ea-b8df-d1785d54082a",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b839ead2-5e46-4260-ad98-5d7c6ba73137"
        },
        "item": {
          "id": "e47ec363-7b67-4a6c-8de7-a13bcf288a3f",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "da2febd3-f5e1-44d0-bcea-8a3a6c1e2b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721bf3f8-5d61-4919-818a-bbaaafc1b7a2",
        "cursor": {
          "ref": "8229bb95-be18-46b7-887e-4f58586b75d3",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8a25497c-fd52-4567-95fc-68440cedc68c"
        },
        "item": {
          "id": "721bf3f8-5d61-4919-818a-bbaaafc1b7a2",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "da72b5c6-9f95-41e9-bb7c-d115c14821a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c28164-675f-4843-8f60-9956d87a81d7",
        "cursor": {
          "ref": "1e18c17d-33dd-463d-b5ec-3f4be568c2bc",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "afed32e3-c53f-49a7-8bd8-f3022e6e5855"
        },
        "item": {
          "id": "42c28164-675f-4843-8f60-9956d87a81d7",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "43893288-6f89-471b-b040-1fb2b5ea4d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc9e431-d917-4187-8a6a-fedc08bcc3a2",
        "cursor": {
          "ref": "82d0f38d-a6a5-4a99-9992-2753ce4e3db0",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "38512724-d0d7-4084-abf8-3c018be57094"
        },
        "item": {
          "id": "1bc9e431-d917-4187-8a6a-fedc08bcc3a2",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8e568c4f-b442-4c24-b0b6-b7887d2b13b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "682a7de5-5db9-4b8d-a611-9853c17dad42",
        "cursor": {
          "ref": "fcf2304d-6e9c-4d66-8636-204c0d6c1499",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7a0c50ae-3eaf-4a6e-bd87-e1d2b5f37efe"
        },
        "item": {
          "id": "682a7de5-5db9-4b8d-a611-9853c17dad42",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "196e70b0-4aeb-47c9-b9bc-297370635825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53a3354-20d9-46b6-bf13-f377b9aaca02",
        "cursor": {
          "ref": "0a9af965-a2de-439b-8083-f0ac3e9a6893",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1f3d2118-73d9-40f7-bab1-04a69331b9b7"
        },
        "item": {
          "id": "c53a3354-20d9-46b6-bf13-f377b9aaca02",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "58f169a2-832a-4a54-a881-50746fdd5c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b496bd07-076a-4ecf-89d2-6a58f9fb55c3",
        "cursor": {
          "ref": "c7a323b8-0388-4eed-a322-4140cc045943",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "70321042-1e32-4716-8561-f540affb160a"
        },
        "item": {
          "id": "b496bd07-076a-4ecf-89d2-6a58f9fb55c3",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b1c29b0b-72ca-4f44-9ace-54ea8c46e6a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b337068-8820-44f5-aa26-056bfc5c4b20",
        "cursor": {
          "ref": "c3020a76-e4b7-4b10-a95f-6f2163ca7c2f",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "fb0d3a2a-a5d6-4930-a8fb-11bdba7e64fd"
        },
        "item": {
          "id": "6b337068-8820-44f5-aa26-056bfc5c4b20",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "52667115-67b0-4419-bf73-955de86a6c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8dd178c-a863-4234-badc-c4ff2ee651b9",
        "cursor": {
          "ref": "6d553338-8609-42d9-b6e1-d678be1e4340",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d2533887-a339-4c86-beeb-71469f68d5b9"
        },
        "item": {
          "id": "f8dd178c-a863-4234-badc-c4ff2ee651b9",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d82c650e-871b-43b5-83b4-25dc4b90e276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e80c74-9aa8-4b18-a759-e36e3e38ddb6",
        "cursor": {
          "ref": "19d08b81-ffcf-4997-9ec8-b2a338404d8f",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "28099da2-5958-42d9-aba5-bbd558de2230"
        },
        "item": {
          "id": "36e80c74-9aa8-4b18-a759-e36e3e38ddb6",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b2204f8b-ad85-4bdc-970d-a2486e51e725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5449b499-1f56-4dd2-8cd1-b661471e7a28",
        "cursor": {
          "ref": "f6568955-ccc1-40e2-ad00-bc278ea93958",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "16fc53b7-880e-4dec-af82-5db3b432a814"
        },
        "item": {
          "id": "5449b499-1f56-4dd2-8cd1-b661471e7a28",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4ad5b73a-7919-4cde-a22e-244afb1c3027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1d2bdb-b64c-4041-8300-95db3f6c0baf",
        "cursor": {
          "ref": "4da4dcf5-ce75-47c1-b460-83c258aca9e1",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "de3313a9-217c-468c-9dd6-7c4a55b920cd"
        },
        "item": {
          "id": "fd1d2bdb-b64c-4041-8300-95db3f6c0baf",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ec307ff3-a682-4469-843a-d89b51e0f455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33047db-6615-44a2-9c77-6adbd83f30fd",
        "cursor": {
          "ref": "e46711be-4a54-4407-ab0f-dd5d753f73cb",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e89a4a98-57fd-4dfb-88c4-9b6d08d56d11"
        },
        "item": {
          "id": "d33047db-6615-44a2-9c77-6adbd83f30fd",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b56ecd58-8c40-41ba-984c-14e7a8e50283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650970d8-40ac-496a-a136-22213b55ec25",
        "cursor": {
          "ref": "1dce0fc4-37ff-4b67-9cab-bb41aa247dcf",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "908b1f21-7d97-40a2-9b47-4b8f9e09e280"
        },
        "item": {
          "id": "650970d8-40ac-496a-a136-22213b55ec25",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5d811491-1526-477b-b299-4336cc8de87e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b47756-7101-4b0e-9fbe-bcecbd747175",
        "cursor": {
          "ref": "73de6d7f-c0f7-4c51-a87a-6ff27fa82721",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "88503d45-148e-43fd-8fef-13d37541fd69"
        },
        "item": {
          "id": "49b47756-7101-4b0e-9fbe-bcecbd747175",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d08873ca-a69c-4066-bbb5-cd11c3ae760e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "372ef314-e451-41a3-aa0a-bf61a1d80662",
        "cursor": {
          "ref": "592e3b57-747c-41f6-b446-5fedfc6a8e68",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d0aa673f-07f1-42e3-9dd7-40f0e5232ff5"
        },
        "item": {
          "id": "372ef314-e451-41a3-aa0a-bf61a1d80662",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "533b26bd-381d-4e9b-8cc1-322aabc1a126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df766988-79b1-4e81-bfba-be52dd20339e",
        "cursor": {
          "ref": "0bf5f50c-6958-476e-8d2e-e4cc2a51244d",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "deb3627b-4981-4f38-982c-3c1c77f79203"
        },
        "item": {
          "id": "df766988-79b1-4e81-bfba-be52dd20339e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f68a295c-f5c9-4cfd-be08-92efd8193f5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef6fe91-da0c-4edb-aeed-fd1deed6170e",
        "cursor": {
          "ref": "2b49da38-8e56-446a-825e-caa795942172",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a3b97f0c-82c4-4293-9344-60b23866b4e9"
        },
        "item": {
          "id": "3ef6fe91-da0c-4edb-aeed-fd1deed6170e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "68f88d13-6b11-4077-989d-faf60d3c4fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "390de08c-72cb-4cf8-aedc-e035139684b2",
        "cursor": {
          "ref": "5ff1119b-b09c-4dce-8328-152966523e1c",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0cb2b1aa-10ac-4df2-882c-ea643cbcf9ff"
        },
        "item": {
          "id": "390de08c-72cb-4cf8-aedc-e035139684b2",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f4bb5846-e121-471c-9023-09da00e05b69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75125fa6-92d9-4620-938b-c337ab05b3bc",
        "cursor": {
          "ref": "bd1cc7c0-568c-4bcd-8781-57a4bf1e84cf",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7391823f-bf3c-4ee9-b9ec-b8216917c254"
        },
        "item": {
          "id": "75125fa6-92d9-4620-938b-c337ab05b3bc",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c6eba6b6-01ff-410f-8a0b-e4256759f25e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afdc0234-3cd6-4e4e-9d8f-c4adeac31d13",
        "cursor": {
          "ref": "17425b19-ce41-457e-b635-d12597ca653a",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "227469cd-7dfb-4800-a262-5344bd6c5507"
        },
        "item": {
          "id": "afdc0234-3cd6-4e4e-9d8f-c4adeac31d13",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "17a3924b-166b-4dd8-b75a-e5d67ac8861e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c344f4-6576-4ec7-ac13-85ed2a0ddaa8",
        "cursor": {
          "ref": "97d23e00-6447-4ab7-9f5a-45862e88bf4f",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "669ac4a9-1e7b-4329-8a04-8a48d688e239"
        },
        "item": {
          "id": "43c344f4-6576-4ec7-ac13-85ed2a0ddaa8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e79fcd65-57d8-4ee8-a951-2f9964479c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c2f310-f458-4e25-b092-91a074c95189",
        "cursor": {
          "ref": "0d694887-a2f4-4e63-a78f-ac166821af19",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a769c6c4-f9f1-4276-b2b5-13dabb7df3ae"
        },
        "item": {
          "id": "63c2f310-f458-4e25-b092-91a074c95189",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "465a1980-c7ce-408e-b664-c35675774bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a882a7d-a5eb-41e8-b0af-2f90b6115815",
        "cursor": {
          "ref": "54b597f7-ed3b-4123-8d5a-446b706cdff1",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7458ea8e-8b78-4692-b5a8-0e32bb538d98"
        },
        "item": {
          "id": "7a882a7d-a5eb-41e8-b0af-2f90b6115815",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "98099552-6f2f-49ea-97c2-fa70636660d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b7dc7e-b73a-4c1d-8de4-7df2a83dcb4b",
        "cursor": {
          "ref": "b604a2f0-2d16-4db6-9d19-3aec59ad2787",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2dfdb512-db66-4a59-9c9c-c1598b33c15d"
        },
        "item": {
          "id": "55b7dc7e-b73a-4c1d-8de4-7df2a83dcb4b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "606196f6-9aac-43d3-87c1-0abeb7c31c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88308c1a-d254-427d-9daf-371844e60b63",
        "cursor": {
          "ref": "a9dfaafc-6fc1-42ca-bf24-6398e6cd8bed",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e7c305da-ea13-478f-8266-5ef6da5f9127"
        },
        "item": {
          "id": "88308c1a-d254-427d-9daf-371844e60b63",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0e81f7a7-41a7-4d30-9f62-7e5bcef0f6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bff510a-4ad2-4e20-b5cc-ba801468fc30",
        "cursor": {
          "ref": "88786ddf-a693-40ac-98c7-8630691a87e3",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "deaebfbb-7808-445c-9dc6-36bbc07d9bfc"
        },
        "item": {
          "id": "6bff510a-4ad2-4e20-b5cc-ba801468fc30",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f345d94e-c702-419b-9387-93088b127d94",
          "status": "Created",
          "code": 201,
          "responseTime": 771,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "2216dbe0-3d45-4756-aae4-d95eea31cf33",
        "cursor": {
          "ref": "86b0e656-44d9-4b39-8eeb-fe2170eb905c",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c00d1907-deee-44be-883f-d43534f88415"
        },
        "item": {
          "id": "2216dbe0-3d45-4756-aae4-d95eea31cf33",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ba0388f1-660d-44a4-b33e-2cb97668bff2",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "7b54923e-e266-4675-8f98-9911a3222d44",
        "cursor": {
          "ref": "7bf7f1d1-9b88-4391-8daa-51c8666afaaa",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f160b9d4-a426-4eb5-93c3-2d7191257189"
        },
        "item": {
          "id": "7b54923e-e266-4675-8f98-9911a3222d44",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "529e42ec-29f1-48be-a46c-42f3582f6ead",
          "status": "Created",
          "code": 201,
          "responseTime": 361,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "02b83822-b233-4635-b1db-5da8651951d9",
        "cursor": {
          "ref": "1cd497b0-9020-4313-9cb1-ce71a309bb5b",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b7cf1ceb-8e9b-4c21-84d8-f945add4a1cf"
        },
        "item": {
          "id": "02b83822-b233-4635-b1db-5da8651951d9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1e031677-960e-4c8e-8de1-a951b85a1d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a350f398-8a84-40ac-9f28-401a5376a225",
        "cursor": {
          "ref": "26bb8651-ed33-4186-bbd2-8c36931860ef",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3d535233-ced9-4433-9b52-1122a84eac53"
        },
        "item": {
          "id": "a350f398-8a84-40ac-9f28-401a5376a225",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f43ecb07-91b3-4882-9ff1-dd22c47fd9ce",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "b1d633d9-9c0b-47c1-8c03-0e373caf620c",
        "cursor": {
          "ref": "8cdc1763-2fef-4e1e-9d04-c8f70e52dbfe",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ecf5ec51-9a6c-40df-9fa5-683fb108b11b"
        },
        "item": {
          "id": "b1d633d9-9c0b-47c1-8c03-0e373caf620c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "40dd70c6-9715-46f6-a223-9e7789f8cc7e",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b1b370f3-406c-4bb6-a38c-1c7511bede9d",
        "cursor": {
          "ref": "d401628d-554d-42c2-a664-530a067c44ea",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2953293e-6c1e-4d26-b8d1-471a766b13fe"
        },
        "item": {
          "id": "b1b370f3-406c-4bb6-a38c-1c7511bede9d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "48b9bddc-5c76-4f29-aa68-ce78f628d919",
          "status": "Created",
          "code": 201,
          "responseTime": 362,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "dd6b0e6d-282b-4463-9cce-38952a7805a6",
        "cursor": {
          "ref": "0436e1f5-083c-4686-9194-f9b0393ebb67",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "38078c17-89e9-4f04-8249-43920e38c834"
        },
        "item": {
          "id": "dd6b0e6d-282b-4463-9cce-38952a7805a6",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "23c94520-b775-4273-8d85-9cf0485394d7",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "937e1f68-5739-4864-a6bd-04c51a7ee390",
        "cursor": {
          "ref": "4c5c209e-53e1-40cb-a60a-8cff04b2fbb6",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "53dc9d7f-2d36-469b-9414-cd79f7bee8c1"
        },
        "item": {
          "id": "937e1f68-5739-4864-a6bd-04c51a7ee390",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9229bd36-abdb-4af4-a6b0-c83a0b22abd5",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "6c0913ba-27be-455c-bc59-0bf03fa79a35",
        "cursor": {
          "ref": "6c4c391e-5011-41ed-a6a1-946d48b0f12c",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b64ae5a2-8dbf-4a45-88f3-32d953dac3aa"
        },
        "item": {
          "id": "6c0913ba-27be-455c-bc59-0bf03fa79a35",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2b19891b-117d-416e-9197-1cc1fc01f1f7",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f66a9642-b57d-4a7c-af20-6562e50787f0",
        "cursor": {
          "ref": "4756fa1a-3f6e-47b9-8917-1ea67af6e66b",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ff14b5e1-a799-4dd1-8f7f-de1084feb892"
        },
        "item": {
          "id": "f66a9642-b57d-4a7c-af20-6562e50787f0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "dbfcf784-aef3-4806-8e62-8b69a67034d1",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "93976431-1414-48f8-b1de-97c91cc11189",
        "cursor": {
          "ref": "cff129c0-376b-4340-9ce0-0a44d5c95cdb",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "243d0d0b-7973-4a89-a1ad-640bd0e5fcd3"
        },
        "item": {
          "id": "93976431-1414-48f8-b1de-97c91cc11189",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b2de8909-d2ca-48cf-b930-6ebf76a74c1b",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "49c45b26-07da-49b2-b6d5-78542c5dab6a",
        "cursor": {
          "ref": "f29e7777-350b-48a9-9f61-ebed5f658261",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8cac6656-5b99-4bca-8a4b-bdfb7fe640e0"
        },
        "item": {
          "id": "49c45b26-07da-49b2-b6d5-78542c5dab6a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f3230530-cc94-40b9-af73-50fddea04cc8",
          "status": "Created",
          "code": 201,
          "responseTime": 367,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "c2de38d2-6d7c-4ebf-a9c6-effeea76da63",
        "cursor": {
          "ref": "7c3d8916-7d3f-4c71-a71b-847736a3e340",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "36326fb9-7a9a-4c0f-99b5-898ca841691d"
        },
        "item": {
          "id": "c2de38d2-6d7c-4ebf-a9c6-effeea76da63",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3d8ff561-da95-44d1-b4ed-de7dd50e49e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "340cb21f-5cbd-4326-aee2-d5018f4681d0",
        "cursor": {
          "ref": "9af7c2fe-470b-4bb8-b1ed-97b80af9af85",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9b17dba5-f267-47f4-be77-47eb293c3e30"
        },
        "item": {
          "id": "340cb21f-5cbd-4326-aee2-d5018f4681d0",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ca2d7e39-1e1e-4372-80df-5f9fd469d4f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fbc5875-01a8-41df-8d7e-e4bb18eeb92e",
        "cursor": {
          "ref": "c64fb6f7-b09e-4b73-8f6b-5ba979f1a87d",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "fe292107-0f2f-4073-8ef4-cfa58f89405e"
        },
        "item": {
          "id": "1fbc5875-01a8-41df-8d7e-e4bb18eeb92e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a2a26b0d-40cb-48cb-beb2-c7b4d8134914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c844536c-0ae1-451e-a844-7e518c02736b",
        "cursor": {
          "ref": "f7fe095e-60ea-4ffc-9705-5c06b1a94b18",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d0fb6c32-cfe6-462b-a422-f472b80c8b7b"
        },
        "item": {
          "id": "c844536c-0ae1-451e-a844-7e518c02736b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f45c403f-b955-4181-bfcc-b4762965f5fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d03f81-bd05-4d45-8471-02117e7365e9",
        "cursor": {
          "ref": "17ad9b63-1da2-48e6-856d-5a41136cd1c5",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4b994c6c-f17d-4a52-b121-e8303e44fe9c"
        },
        "item": {
          "id": "30d03f81-bd05-4d45-8471-02117e7365e9",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e7e7b8ac-4e4c-480b-841b-9213e918d6ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9729bf7-92d7-4e46-b11c-a62f104cd99b",
        "cursor": {
          "ref": "192859b3-2eb8-499d-9e78-61cb697560ca",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a4e1a4b0-bad4-43cd-9506-945b87cb08f0"
        },
        "item": {
          "id": "a9729bf7-92d7-4e46-b11c-a62f104cd99b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c7245361-410a-4dd1-9edf-5793bf7b117b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "568933b3-ca2c-4dee-b0fd-5dc107d46c53",
        "cursor": {
          "ref": "25baf2ca-52df-4517-b4cd-47a656e2061c",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1b995b13-5b1a-4f68-975e-095a7608b5c1"
        },
        "item": {
          "id": "568933b3-ca2c-4dee-b0fd-5dc107d46c53",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "259bd017-6f54-4c12-b761-2af6dec2eb8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6770246-8398-498b-aa56-7aea3e077c18",
        "cursor": {
          "ref": "6f4cbdb8-01a1-423c-94f6-37d795e23751",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "cff7e2f8-e1a1-47cc-9e25-92acca7655d0"
        },
        "item": {
          "id": "b6770246-8398-498b-aa56-7aea3e077c18",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1562a8d5-dddc-409a-9b31-2c39e87c2546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94292686-a553-4a26-bc50-54038dab12ec",
        "cursor": {
          "ref": "0774ce60-065d-4b0f-a823-99a84fccc2b2",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "834900cc-d8ae-457c-8b34-d25138b04e6e"
        },
        "item": {
          "id": "94292686-a553-4a26-bc50-54038dab12ec",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f71cf460-adb4-4b32-a2de-43ae2bc4e05d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e1b727-cade-428a-b47c-b9f4ef19464b",
        "cursor": {
          "ref": "f12707d3-bedd-468d-b752-035a1c28ca1d",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b07e12fd-2578-4bb8-af71-109def103dcf"
        },
        "item": {
          "id": "07e1b727-cade-428a-b47c-b9f4ef19464b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6e1c4d55-4045-4782-b14c-eb378b89fd13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a0b747a-9964-4956-a7fc-f94a60c3cb91",
        "cursor": {
          "ref": "3669a501-3071-4bd2-aaea-426b572e51c8",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8af49e32-3798-4249-aba2-870661715955"
        },
        "item": {
          "id": "3a0b747a-9964-4956-a7fc-f94a60c3cb91",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "15fb4bd3-27c1-40f2-b52a-600c07b4ca99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61467e64-c3c5-4406-9e16-29f258e8d045",
        "cursor": {
          "ref": "d02fdab2-d2d1-4c0f-9098-4d7d2311a195",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "17088745-2e6d-4145-a4cf-049aa10d35a8"
        },
        "item": {
          "id": "61467e64-c3c5-4406-9e16-29f258e8d045",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b398ec93-17ad-40a3-a048-bb210bce32e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ea6703-2acf-4347-beb9-e5316eb5e4f2",
        "cursor": {
          "ref": "d33207a1-0032-49a6-83be-f58219265746",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e18cd996-fbf3-4e35-8a16-0579984f0874"
        },
        "item": {
          "id": "b2ea6703-2acf-4347-beb9-e5316eb5e4f2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "0645b8d3-e245-44f6-84f2-1f8a41b4a53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05019a6e-33bf-4471-8b3f-968d16eeac91",
        "cursor": {
          "ref": "d32e6acf-7805-45ba-b61c-1eb979cf4303",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "12966f65-ca5b-4ba2-8733-a37d4f1d904f"
        },
        "item": {
          "id": "05019a6e-33bf-4471-8b3f-968d16eeac91",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "de2ab296-32e0-40ee-b549-153ea5e674a5",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "3853c8ad-98cb-4fba-9077-579b986d6d34",
        "cursor": {
          "ref": "abffa38c-d228-4db7-87e5-4185b7c14c08",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "27557f82-6c08-4014-844d-6cb3fb911ec5"
        },
        "item": {
          "id": "3853c8ad-98cb-4fba-9077-579b986d6d34",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2eedd152-0310-463d-9837-dee6b70e789e",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "64eb5669-ca5f-4950-9c73-92e45b08a881",
        "cursor": {
          "ref": "d7f69bc2-8ae7-41e1-b18c-e09a41cff880",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "390a5518-22ed-4edd-91a8-a3ed453f3817"
        },
        "item": {
          "id": "64eb5669-ca5f-4950-9c73-92e45b08a881",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "76f9f3b5-5df0-4c45-a2ec-157c8083fd80",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "619aa08a-716d-4d72-9e49-41513f19ce0e",
        "cursor": {
          "ref": "62c62abb-cf59-48a5-97e8-56cf9aed61bd",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "68a5b2d5-9b21-4c1e-b9b7-4dd2ea4d4c50"
        },
        "item": {
          "id": "619aa08a-716d-4d72-9e49-41513f19ce0e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "95839078-70ff-4d07-a8ed-6f10060610cf",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "196a7402-34e2-4b81-b5e0-57f0242efa45",
        "cursor": {
          "ref": "04f844c3-49b3-4caa-abba-320437d6e6fa",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6e46a2ea-da7b-43f9-919f-2cf3469506e3"
        },
        "item": {
          "id": "196a7402-34e2-4b81-b5e0-57f0242efa45",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e2018a6e-c084-4b8e-b314-f2ac807c72b9",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "7fb9c7fe-4ef5-4ba5-9849-faaf9ce8653d",
        "cursor": {
          "ref": "2c8c7f5f-439f-441a-8b69-9bf43bd046ba",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3aa1bf33-d5d7-490a-b522-9a16c491461f"
        },
        "item": {
          "id": "7fb9c7fe-4ef5-4ba5-9849-faaf9ce8653d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6d309015-88d0-4838-aa9e-a5fb29a1e7d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6a57d3d-5cdd-4fe0-bb31-80e1e36cbcc3",
        "cursor": {
          "ref": "9a56d505-32b3-4f89-8f2d-7486eff382de",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c61c83eb-1dbb-48e6-8de5-e2f20165e184"
        },
        "item": {
          "id": "c6a57d3d-5cdd-4fe0-bb31-80e1e36cbcc3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "74637dc7-87d8-4391-b27c-f4b1ece51f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f239b46-0990-4c39-a598-df95dcffe8b6",
        "cursor": {
          "ref": "ac1b3c0f-66cc-4065-9737-dba57410c8a0",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "fc430727-7784-4e1c-a5ed-7c2e0d3856e3"
        },
        "item": {
          "id": "1f239b46-0990-4c39-a598-df95dcffe8b6",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1df671b5-d3f9-4c43-811f-74ed642030f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623ca4fb-ef47-47ab-8825-10a1fded5641",
        "cursor": {
          "ref": "4bd7c8d7-ae1d-4705-a94d-7fde69a034dd",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9f33dd92-f149-43cf-8760-040e13dd8523"
        },
        "item": {
          "id": "623ca4fb-ef47-47ab-8825-10a1fded5641",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e654658e-c45e-4260-b9fc-4cbe073f38ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45fc1521-13d6-4545-8c0a-3b89c7c80a49",
        "cursor": {
          "ref": "790c6165-dc97-4749-aa69-8aa9ee38e50d",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8ab8d8d9-a835-4369-9cac-b7958c9b1c8b"
        },
        "item": {
          "id": "45fc1521-13d6-4545-8c0a-3b89c7c80a49",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "65f2bbef-ce79-462d-94c9-b27748a66565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53eee98-25af-4a6c-ad44-d28039119345",
        "cursor": {
          "ref": "8707d1d9-7bab-4c66-b962-94f80ea42f8a",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f7157926-3b72-4ea1-a2f1-668303ebf0a7"
        },
        "item": {
          "id": "f53eee98-25af-4a6c-ad44-d28039119345",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c5333555-3e29-4d01-864f-a7261a6b542e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7598c2b0-d72c-401f-a25e-f3286afc4dd7",
        "cursor": {
          "ref": "a58ed741-6cd9-42e7-aa0e-19e34dafae6a",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "500dad6d-dc8a-450b-bea1-dfd3cd946ce7"
        },
        "item": {
          "id": "7598c2b0-d72c-401f-a25e-f3286afc4dd7",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5048facd-2130-4a28-9374-78d0826e68ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56558257-e5b3-4e33-8962-76a2b47b30b7",
        "cursor": {
          "ref": "400131b5-4aff-4880-9412-29636cb69e59",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "496fe94b-62ae-4fd5-93e0-e57db7d9ca74"
        },
        "item": {
          "id": "56558257-e5b3-4e33-8962-76a2b47b30b7",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d5faa903-4ded-4e8b-b3cc-88ac419f4716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d5803c7-2525-47b6-a3de-528f97dd03e7",
        "cursor": {
          "ref": "b41fbb63-0deb-416f-9b41-156dc1ccfb14",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b730cd6c-58d6-4f3c-9c23-94933eb92f34"
        },
        "item": {
          "id": "7d5803c7-2525-47b6-a3de-528f97dd03e7",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "34d7a9fa-a29d-4e37-85aa-ce27665fc63d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7fae276-c0e2-4331-9ba0-0c561b6e2c52",
        "cursor": {
          "ref": "d3f199fd-a787-4787-a22a-c16577dec2ff",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "34202ddb-667f-4834-8a18-9454fcf3d466"
        },
        "item": {
          "id": "c7fae276-c0e2-4331-9ba0-0c561b6e2c52",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5013db38-5b5b-43ce-aadf-1fe22a479e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb63468-178c-4500-8a54-29c08e6805f3",
        "cursor": {
          "ref": "e7701d25-a42a-4f43-999c-d0fcd1872b68",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "97431e12-9435-45df-9cf2-4cb03108517c"
        },
        "item": {
          "id": "7cb63468-178c-4500-8a54-29c08e6805f3",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a45b5881-71c9-4a1c-aee3-9e8fda85b60e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153cab26-2f32-405e-aa01-3993be7b451b",
        "cursor": {
          "ref": "0bac7a1e-de9c-4a74-ad72-8b375ce9a034",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5862c2a9-54e2-4f3c-a24d-8187eb641c5f"
        },
        "item": {
          "id": "153cab26-2f32-405e-aa01-3993be7b451b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1372b01f-cb40-453a-957a-2ce6a695cccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed6a29b-f3f9-4b9f-9122-581efc1ddb32",
        "cursor": {
          "ref": "31bd4f2f-e621-4390-b046-ae5e87cef928",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "aa1c840e-2e32-47c2-a7ae-9d355a9f96fc"
        },
        "item": {
          "id": "2ed6a29b-f3f9-4b9f-9122-581efc1ddb32",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "322d2e08-dfad-41ee-ba6f-e7870d2d1de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61499fa4-5a19-4d77-aacd-69ea1f9e76ad",
        "cursor": {
          "ref": "7cb43878-5345-4f33-b7ad-b0e32e8c05f9",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7fa0b3b7-5916-417a-b136-894dd3f15600"
        },
        "item": {
          "id": "61499fa4-5a19-4d77-aacd-69ea1f9e76ad",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b4b4894e-4798-4e53-b681-5171f3383443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e2fb6c-55d3-4d30-80d9-f61f76a05d03",
        "cursor": {
          "ref": "56fc11ee-0abd-42d8-9a44-61c89ed8e38a",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6dd9ba89-cf39-4a8c-8ae1-2c8e210d1fff"
        },
        "item": {
          "id": "43e2fb6c-55d3-4d30-80d9-f61f76a05d03",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ac60307d-7b1e-4e66-bb97-75e89e3a3830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b507d4-fc76-4984-8feb-80ac11051363",
        "cursor": {
          "ref": "581121ab-8bdb-49f0-9ae4-e1f06708865e",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "10d63c67-4c1c-46ae-95d6-6a1f6bd205f2"
        },
        "item": {
          "id": "d8b507d4-fc76-4984-8feb-80ac11051363",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6b55869b-1542-4286-89aa-51376aa54552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15fb3c36-8c30-4418-827d-9f37943e48d1",
        "cursor": {
          "ref": "5d165792-3384-4a51-a33e-615d129ad9ee",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f43e801e-f012-4554-8519-9e69340bb688"
        },
        "item": {
          "id": "15fb3c36-8c30-4418-827d-9f37943e48d1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f703e310-c1db-4798-b2ea-7a355165bb76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f95e133-6718-45c2-b84d-65bb7020fd75",
        "cursor": {
          "ref": "2e20b477-5b10-4f60-9f18-c8c3ad79c396",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b94b95ae-cb76-466a-aa24-d3d2681fecdd"
        },
        "item": {
          "id": "7f95e133-6718-45c2-b84d-65bb7020fd75",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "961d25f1-5833-4a55-9991-33c74ffdc28d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a620e59-54cd-453b-8b14-dca4320258b9",
        "cursor": {
          "ref": "1a58d949-6ad8-461c-bf20-7a875f1b06cf",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1d49d502-6d6f-4358-af9c-957cb9ab5523"
        },
        "item": {
          "id": "0a620e59-54cd-453b-8b14-dca4320258b9",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0829d1ae-43e5-455f-85e3-104d697997b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad6020b-c5ca-4727-b187-433e2e5d0f6e",
        "cursor": {
          "ref": "dccb2d8a-e8ff-4ad1-a39b-c27bb6fbe9a7",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d18d72a0-69d7-4492-84a9-eeccd2eb377d"
        },
        "item": {
          "id": "2ad6020b-c5ca-4727-b187-433e2e5d0f6e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e33bca18-42e1-4d76-883f-32936a8573df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a213a453-d0ea-4787-83de-a8c05f8eacef",
        "cursor": {
          "ref": "6e7d25ce-1d98-4be9-85ed-5796d326be57",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "cb9f3737-39a8-4c80-9911-11d02c1d9336"
        },
        "item": {
          "id": "a213a453-d0ea-4787-83de-a8c05f8eacef",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "48a9f148-b23b-4bbe-a686-7a3ae8620c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f158c46-4898-436b-8303-73577aa1b895",
        "cursor": {
          "ref": "dd587a9f-578b-4740-b9e9-a1f9cf3e4b39",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e519c337-1049-4abc-9b15-d15ebc359989"
        },
        "item": {
          "id": "2f158c46-4898-436b-8303-73577aa1b895",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7f49f022-aacb-48e7-a71b-a9ce9a86fd4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ebb340-5fa7-4145-a1db-40e288096398",
        "cursor": {
          "ref": "35f14be3-fde9-4086-bd73-bcb4ed658884",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ff4d1ccd-0c3a-4748-a434-71bd753c488d"
        },
        "item": {
          "id": "e0ebb340-5fa7-4145-a1db-40e288096398",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2af3071b-e637-451d-b4a8-7989cb7fb242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf8a386e-dacc-443e-ba2a-eb27cf138809",
        "cursor": {
          "ref": "d5bb168b-3d40-408c-a161-f5436dee87a4",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "57844447-1e34-409a-92f7-ee11696d6dc5"
        },
        "item": {
          "id": "bf8a386e-dacc-443e-ba2a-eb27cf138809",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e88e774a-eb33-4cc2-a6dd-163530951d08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b5ee599-6fc2-471e-b92d-95e55ded981e",
        "cursor": {
          "ref": "e2f66558-8e32-4030-9913-827b66c34906",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a6751484-fed5-406b-bce1-09372b261519"
        },
        "item": {
          "id": "7b5ee599-6fc2-471e-b92d-95e55ded981e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3e4e1745-0eb0-4fb7-b840-6ff19dfad108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "395268f5-fae3-407a-95c3-06b05fb42b2d",
        "cursor": {
          "ref": "41e3b38b-5929-4c33-bdbe-84ff6b89a854",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "781a0fbc-ef43-4476-8760-01eefe99c47b"
        },
        "item": {
          "id": "395268f5-fae3-407a-95c3-06b05fb42b2d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f889070d-2ac9-4e92-ad00-1632835375fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ba167c-79bc-41c6-b670-0c71f99c278e",
        "cursor": {
          "ref": "9aedfd4c-bf87-4f66-878c-4c00197d0e34",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "00b5ab29-87c3-437b-aaf9-f644cf077a3a"
        },
        "item": {
          "id": "10ba167c-79bc-41c6-b670-0c71f99c278e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d7f49bd5-5967-4b9a-a142-4270840a7ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaba89e8-9412-4a7f-9b5b-12c8ea5dcc16",
        "cursor": {
          "ref": "e807605a-8c4d-492e-97fd-3843ccfafbe5",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e804c0ed-b2a6-465e-8f83-5225e6bedb11"
        },
        "item": {
          "id": "eaba89e8-9412-4a7f-9b5b-12c8ea5dcc16",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "46f11c2d-cb04-48a5-86a4-7ea117f0897f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1503a02-fc5e-460f-b72b-d2903e46e829",
        "cursor": {
          "ref": "0817d569-a1dd-48a6-8e97-2b805777e58e",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2693b79a-017d-4e9a-bddb-8d967c2da04c"
        },
        "item": {
          "id": "f1503a02-fc5e-460f-b72b-d2903e46e829",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7fd071b3-ec01-4f69-b5a8-cb630ff3029b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1552677-10c5-4774-9892-eea18189f921",
        "cursor": {
          "ref": "95ddc6cc-9de6-4371-a174-6116b27b0ac2",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a9b99cd4-4680-46df-b3d1-d72e4ec3692c"
        },
        "item": {
          "id": "b1552677-10c5-4774-9892-eea18189f921",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ab6548af-e5c6-446e-8238-18dc96b14a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f2788a-7d24-42ab-990d-497d060d772a",
        "cursor": {
          "ref": "8088aa6e-5b18-41d8-b70a-1623959d8399",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ba3cf041-d2f4-4a05-b4a2-63e903a5e80f"
        },
        "item": {
          "id": "90f2788a-7d24-42ab-990d-497d060d772a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d8353e9c-2612-493d-8c3b-a01bb70bb974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76bd452e-d8aa-450a-89bb-511f52d1798c",
        "cursor": {
          "ref": "fbebfd1e-100f-438c-9a2d-7ca511f1de09",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0e73127b-f311-4b2b-8602-cd98d955a6cf"
        },
        "item": {
          "id": "76bd452e-d8aa-450a-89bb-511f52d1798c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "be586a96-b7e7-4081-87ed-c57efa68d458",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32523132-a2bd-4fdc-afd4-afb81ab723b1",
        "cursor": {
          "ref": "9e63a57c-01c3-46ea-ae9e-91f45e022e1a",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b73cce3a-ccaa-459b-86c4-f5e7a6813e61"
        },
        "item": {
          "id": "32523132-a2bd-4fdc-afd4-afb81ab723b1",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "27a66ee9-b7ff-43f9-887c-06a5135733c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "acd52ceb-9a47-41e3-90a8-198586982934",
        "cursor": {
          "ref": "8d022843-f126-483c-b735-83eb3aacb9c6",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "496249a6-0b1c-4d90-8c49-ab42409cc9a6"
        },
        "item": {
          "id": "acd52ceb-9a47-41e3-90a8-198586982934",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e3093a5a-6cdf-4a45-a299-193540533ce4",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb12bfe-1357-49be-840b-b4062a7d72b8",
        "cursor": {
          "ref": "ad1d4cca-70dc-4eeb-bf8d-65498a7a2f16",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "250638a8-143a-4761-a7eb-bee194aa1c64"
        },
        "item": {
          "id": "afb12bfe-1357-49be-840b-b4062a7d72b8",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "66adc134-2116-483e-9b1f-cbeaa24b2c45",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d79c89d-07cf-47af-9a7c-b5412b06def5",
        "cursor": {
          "ref": "411d8425-0e66-4d1f-b489-52e7886c051c",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "23b89dbf-d8c4-48df-82a0-8fbbad91b07a"
        },
        "item": {
          "id": "8d79c89d-07cf-47af-9a7c-b5412b06def5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "63748b68-1392-4c03-8776-02476b2c33b0",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7471add5-d4b5-4426-9fce-4ea1a52d3beb",
        "cursor": {
          "ref": "9e9aea0d-5984-4ddf-b824-b0086254a67d",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "efc3afbc-2913-4142-89a9-9a7afc596e98"
        },
        "item": {
          "id": "7471add5-d4b5-4426-9fce-4ea1a52d3beb",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "12880524-5d1c-4621-ba48-dfeb832a5fc2",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb581f60-cda1-46e0-9cab-9ffe10b0bb85",
        "cursor": {
          "ref": "0882eed4-8fef-43bb-8333-49e32ff71569",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3dd3af47-03f3-4c1a-9e09-d6b506600163"
        },
        "item": {
          "id": "bb581f60-cda1-46e0-9cab-9ffe10b0bb85",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "59504a03-26cd-470c-902b-4519d96f1916",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-06T00:34:29.576Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-06T00:34:29.576Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "2d761771-a0f0-4070-983b-a886b92b0d86",
        "cursor": {
          "ref": "95447213-23b4-4aaf-8f76-3f73feb2d87b",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2c5d1665-37f5-46ec-8196-e965ec6d22e2"
        },
        "item": {
          "id": "2d761771-a0f0-4070-983b-a886b92b0d86",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "50098b1f-7fa3-4297-bd38-8343df3e15aa",
          "status": "Created",
          "code": 201,
          "responseTime": 352,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddd64808-3c59-4375-9489-b5a743b34594",
        "cursor": {
          "ref": "808982d2-804c-43c4-846e-3285d09d7fbc",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a6b0a6bc-a4c5-4c5a-86bd-f392736be845"
        },
        "item": {
          "id": "ddd64808-3c59-4375-9489-b5a743b34594",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e6313ead-8749-4b48-afed-8c4813057d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b945db-011e-4186-ae29-8c6f0cc3b866",
        "cursor": {
          "ref": "527995cc-be5f-4f5b-8d45-df240a03505b",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d91dddd7-2259-4345-aae7-d3199abe79d5"
        },
        "item": {
          "id": "f0b945db-011e-4186-ae29-8c6f0cc3b866",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ec16ac6c-f309-462e-8de4-f9d855d09ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b54065a3-b0df-46f6-860a-f785682a81ba",
        "cursor": {
          "ref": "42d2a900-3ffb-4b99-9fff-960d4c50ddba",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f668ccdf-604e-4426-90b5-8444d0a1c522"
        },
        "item": {
          "id": "b54065a3-b0df-46f6-860a-f785682a81ba",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f70be24b-8246-4007-a853-3c6eb0289483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5822dc3-1e36-462b-82b7-fac7a078f6d9",
        "cursor": {
          "ref": "3f003e84-656f-4406-bba3-24e15508373c",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "24ae9f17-9f3a-4976-a562-1f88027767f7"
        },
        "item": {
          "id": "d5822dc3-1e36-462b-82b7-fac7a078f6d9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "06ddc84a-6e47-4e90-9291-655dd6280227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18b2c9d2-c6fd-48f2-a3f3-7b7941667709",
        "cursor": {
          "ref": "1d77280b-832d-4b59-8ed2-749b3ade5bc9",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "852a5e05-4c85-43ad-817b-2ecf9b7481da"
        },
        "item": {
          "id": "18b2c9d2-c6fd-48f2-a3f3-7b7941667709",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "33b5d472-618b-4191-b1e5-a07bfe67ac69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5950eed7-ee4d-46ad-83fe-9fd65f2d788a",
        "cursor": {
          "ref": "0b36897a-6bcf-4c9b-b2b3-c3d981ec0fa5",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "bd8cbe69-96e2-4d69-9d38-ca2d05284344"
        },
        "item": {
          "id": "5950eed7-ee4d-46ad-83fe-9fd65f2d788a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "90c67abd-9fbd-4561-8808-1a0010b69b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d8b485-3543-42e9-b4d0-8ec9baf1bc33",
        "cursor": {
          "ref": "486b3c76-4c07-4d2d-8a6c-c51905d4d8ec",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "fe0f5b22-aaf0-4205-8939-04f0811bce1d"
        },
        "item": {
          "id": "60d8b485-3543-42e9-b4d0-8ec9baf1bc33",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "17d1e42f-8fb4-42f6-a68d-a45e37a0994f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89f2c769-55df-4ce5-936b-43676fd2e301",
        "cursor": {
          "ref": "71080da9-8154-4c0c-bc77-30a57c34846f",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c9fb77dd-2316-4513-93fc-ddac4b7619b6"
        },
        "item": {
          "id": "89f2c769-55df-4ce5-936b-43676fd2e301",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4c9db327-48e2-4a94-b59b-71dae04d02a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca815ce-0c6b-4696-a227-711fad254498",
        "cursor": {
          "ref": "ceb935ce-9467-4437-a18e-115b6d69f95b",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8513e6a8-c2db-484d-9c19-08097b9ea904"
        },
        "item": {
          "id": "aca815ce-0c6b-4696-a227-711fad254498",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9fa46068-0062-465f-8a8e-54080cd5a9d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a962bfe-5d49-4e8d-8cf4-76cde56cb554",
        "cursor": {
          "ref": "200608c8-b79a-4003-a2ef-1fca0d034cf1",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "fe026593-7f08-4c36-8bd4-eda658da8d62"
        },
        "item": {
          "id": "0a962bfe-5d49-4e8d-8cf4-76cde56cb554",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1fed6e33-bdc3-4f56-b27e-2b23b5550150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8419ea6-acb1-4554-be0e-a9561b328030",
        "cursor": {
          "ref": "9bde3824-8a44-41eb-9bdf-f204083bd3f7",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "7bcde49e-0790-41ae-b743-23f88a86e58c"
        },
        "item": {
          "id": "d8419ea6-acb1-4554-be0e-a9561b328030",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "689f165e-54c3-4b2a-bfac-d932f5889910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08eaba95-cbea-4241-9923-525ce919541f",
        "cursor": {
          "ref": "abaa1036-ba9b-438f-8577-3dd1b99ea1e0",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "86a8043d-c063-4bb7-9fa1-d88701a32a80"
        },
        "item": {
          "id": "08eaba95-cbea-4241-9923-525ce919541f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3d139ea9-d7ad-4950-9b8d-92ec424caa93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a72bb3-c637-4838-94ed-12bee588d76e",
        "cursor": {
          "ref": "5f6f4b23-96f8-4e68-884b-c76e9936fe80",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2e6b4322-c715-4f1f-976a-91f2ec981950"
        },
        "item": {
          "id": "73a72bb3-c637-4838-94ed-12bee588d76e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8b653ce2-efd4-47d0-beef-b7316b05f9e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 137,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "76c7946e-d2d8-487c-a56c-4e72a4c72a43",
        "cursor": {
          "ref": "a24e236c-4b7f-4adc-b8bd-1e23f88dc261",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "fd8dbbea-9556-4dea-8674-9279160e9e22"
        },
        "item": {
          "id": "76c7946e-d2d8-487c-a56c-4e72a4c72a43",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5ebcd9a3-1366-47ca-a12d-4b0641b16889",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 136,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "1a8a7170-351b-4daa-909c-f013cf8fdb67",
        "cursor": {
          "ref": "01ff1b61-7bd8-4981-8ead-94e7e52ae04c",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "51424235-b1c6-4656-9440-e5febe901e0f"
        },
        "item": {
          "id": "1a8a7170-351b-4daa-909c-f013cf8fdb67",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "36323a8a-9c18-4072-844e-4b731eebc501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc0e57a-0083-4a55-b0ba-16ee1e5835fa",
        "cursor": {
          "ref": "9980bbae-1587-4717-9705-e6e796ebb608",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c83b8bb1-c2c3-4feb-9798-3a8bfbc85ea3"
        },
        "item": {
          "id": "bdc0e57a-0083-4a55-b0ba-16ee1e5835fa",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6631b8c7-37c8-4a85-8480-649576f53c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a78ea4a-8beb-4483-ade9-c174fc3e57b8",
        "cursor": {
          "ref": "7bac2766-4d40-4aa7-83a8-845ac9198fbe",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "17cd02dc-8d48-4251-a903-7f96f6d85188"
        },
        "item": {
          "id": "8a78ea4a-8beb-4483-ade9-c174fc3e57b8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2707f2c2-0a73-42ae-be70-2bb8ee7d56c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3035b763-d19a-4372-9db6-a1fe91407b25",
        "cursor": {
          "ref": "10e95951-2471-4a46-ba92-8c1f3f8c0cb9",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "35bfd961-0ef1-433e-ac87-2149cf02de36"
        },
        "item": {
          "id": "3035b763-d19a-4372-9db6-a1fe91407b25",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b2bc983e-e9f1-4893-ac7b-4a57e8a0dac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e1f0bf5-3e59-4fba-ac11-da7476a02f9e",
        "cursor": {
          "ref": "b3f0b07c-7c5e-4351-af6a-e9594b2e083a",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f471cc7d-0b01-4134-8155-95cd00cf0291"
        },
        "item": {
          "id": "0e1f0bf5-3e59-4fba-ac11-da7476a02f9e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "93f32d6b-7fdc-42fa-bd97-992214912a60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6afa672-8968-434e-8725-c509ea0adf12",
        "cursor": {
          "ref": "0dc46f94-f6e8-412f-8446-2fa0558f2c88",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f659a0b2-98b4-4d89-beac-eec1d15c3dae"
        },
        "item": {
          "id": "f6afa672-8968-434e-8725-c509ea0adf12",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "232a839a-8f5b-47a1-90a6-83a89d5e3388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2c7e2f7-fc67-4ea6-82d2-61433b617e35",
        "cursor": {
          "ref": "42821099-ca96-4e0f-977f-f8a5bcd1d5d6",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c6136143-8616-46bc-af6c-c9701acf8d31"
        },
        "item": {
          "id": "d2c7e2f7-fc67-4ea6-82d2-61433b617e35",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "59d132ba-c44a-46be-941f-34e88054322e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d17179-1a3f-4dc2-8787-ffbea6c5fad2",
        "cursor": {
          "ref": "eb1f2ff9-a26b-4c6a-bcad-266a2f7fad9b",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c99b6090-52c8-43d5-bc7e-13163505efe7"
        },
        "item": {
          "id": "b8d17179-1a3f-4dc2-8787-ffbea6c5fad2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "477329d4-a2be-45db-8d80-81fd050cc5f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "434365b0-ad6f-4d12-b79a-abb2859b1443",
        "cursor": {
          "ref": "4f03881f-b5d4-4d06-b178-6b4d4861cc48",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "940a5898-3a06-4842-abac-ccb442258f0d"
        },
        "item": {
          "id": "434365b0-ad6f-4d12-b79a-abb2859b1443",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b2f871c8-6fcd-45e2-bfd7-e7390956fca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb2889c-49b1-4c4b-86b7-c743f6d4be25",
        "cursor": {
          "ref": "82bbe07f-0187-4070-b2ba-bfb183468087",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "fedca991-aa3e-4b26-b65e-05e416e26969"
        },
        "item": {
          "id": "ddb2889c-49b1-4c4b-86b7-c743f6d4be25",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5584ca94-a6a1-4ed4-aaf4-6bc542a6a139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0751bff3-540b-4d0e-bc3d-2be234883909",
        "cursor": {
          "ref": "f78d598e-13f0-460a-a82d-7f3d2de6720d",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ad712cab-1034-48f2-9e9d-e19c2935c7ec"
        },
        "item": {
          "id": "0751bff3-540b-4d0e-bc3d-2be234883909",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "09ce9ece-7a5f-4016-8002-5a7acb9b18f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0bd0dd-88b4-45c6-b06c-d79929b2901a",
        "cursor": {
          "ref": "e1a8bd2a-979a-4142-ad77-0df8f2a3070d",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4269a348-e41d-4bfd-90b9-b9623a9b89dd"
        },
        "item": {
          "id": "3e0bd0dd-88b4-45c6-b06c-d79929b2901a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "99ecb3ea-f825-4ad4-b37f-4bfd55fb3e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3491308d-6b02-4a83-8d35-d91859d2d66d",
        "cursor": {
          "ref": "9fe4be62-44e9-48b1-9595-a1a8e025dc39",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e39b4fec-266b-4aff-b594-ae67decabfbf"
        },
        "item": {
          "id": "3491308d-6b02-4a83-8d35-d91859d2d66d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fd23c170-4b3a-4378-a5e7-6f77e09ba969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3dcc085-61be-41b2-8304-89c8cd931d9c",
        "cursor": {
          "ref": "0ae2d9ef-7fb6-4a84-b936-2a8551c1bb3c",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "67131f07-fefd-4746-901a-3b499da83c73"
        },
        "item": {
          "id": "f3dcc085-61be-41b2-8304-89c8cd931d9c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "40e164df-8d3a-42c1-9beb-966d28a7b41e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a97d94e-383a-4b10-80f2-efe714efbec6",
        "cursor": {
          "ref": "d6780b4d-0de7-4ce8-9a2b-06e2d728f921",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "888d6ec5-cd8a-4d22-acdb-84cd7d614b4b"
        },
        "item": {
          "id": "4a97d94e-383a-4b10-80f2-efe714efbec6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "50ed27b6-1cff-4573-8544-1b4715f75e60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ac36e1-2ae8-44d3-abee-78fd435b6854",
        "cursor": {
          "ref": "16dfc4a5-d678-42d5-850b-a02f78fa9cb7",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c18d6337-2506-4fe4-8969-39fa3280c9d9"
        },
        "item": {
          "id": "38ac36e1-2ae8-44d3-abee-78fd435b6854",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6d0f8401-3109-4076-a9b2-41899cae82b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3f2b66e-eaae-48a3-a4e3-40dec9b1fe4c",
        "cursor": {
          "ref": "d372d863-10d3-426f-b561-522142fa47a4",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "97ad6fee-4f5c-478a-be6b-9140bd7f2d5c"
        },
        "item": {
          "id": "e3f2b66e-eaae-48a3-a4e3-40dec9b1fe4c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e1b210b3-cf19-46d0-9f07-ae39f8f027c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8edbef8-ee09-4f9a-88c7-258c7a48677d",
        "cursor": {
          "ref": "645310a5-5cd7-4aa2-ada9-7e4f9653c293",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a65fddef-b244-4d9c-b32d-900732192496"
        },
        "item": {
          "id": "f8edbef8-ee09-4f9a-88c7-258c7a48677d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "81f95593-ea00-4327-a8f0-7fc87f688c52",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 131,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "395f9e40-a8df-46bd-8300-9d264d37d177",
        "cursor": {
          "ref": "d756b7d1-224a-474f-be13-62793c5f6e7c",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6d4eea4c-9f8d-4721-a855-f25ece439940"
        },
        "item": {
          "id": "395f9e40-a8df-46bd-8300-9d264d37d177",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3451e9f3-7743-4c55-b245-fa605a62759b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b3897b-a5a5-4c16-b0e7-f97a2c78ed4a",
        "cursor": {
          "ref": "dd78bdf0-d8a2-493e-ac6d-b13e32172f9f",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "fb8a70e4-0b03-4bf8-8d4f-d363d84a0070"
        },
        "item": {
          "id": "26b3897b-a5a5-4c16-b0e7-f97a2c78ed4a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "073cc530-8187-45ef-9702-b4955139b8e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a34bc2-23ee-45b6-9d74-eff1a0d0aa56",
        "cursor": {
          "ref": "0fa0760a-a875-49e2-8930-6e31b6f6f86d",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "717e7964-8de0-45ea-8564-c90abe6cb18b"
        },
        "item": {
          "id": "e7a34bc2-23ee-45b6-9d74-eff1a0d0aa56",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "af3137b4-759e-45e3-a118-eea7668c1462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee17c5f9-3338-421b-85d1-a2839616dedb",
        "cursor": {
          "ref": "c134c677-dbe7-4ec5-bab9-c228b14caba6",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0a2c3a4e-5d51-4f14-a14e-a629f6b17eec"
        },
        "item": {
          "id": "ee17c5f9-3338-421b-85d1-a2839616dedb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "78cc114c-ae0e-4fd2-9cf3-0240d6003a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "000cb18c-a7f3-411a-8a2d-d01aba428de6",
        "cursor": {
          "ref": "45a5d487-6b06-4c08-9f15-6039c846ffec",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b4fc7c89-f53c-4356-8b99-a95630597806"
        },
        "item": {
          "id": "000cb18c-a7f3-411a-8a2d-d01aba428de6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "856d8784-7c90-4b92-b075-85d923167bbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e087e264-5736-4d9a-8e4a-991c9a9f1f0e",
        "cursor": {
          "ref": "cb699f55-09a5-40a1-b01e-afb9fc788362",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "cbd78fc1-9dcf-480c-bac9-ce7281b33f08"
        },
        "item": {
          "id": "e087e264-5736-4d9a-8e4a-991c9a9f1f0e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "dd7988de-979c-41a8-a067-c4f66de62237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6960e0a9-1943-4793-8ad9-73e7d0c113b6",
        "cursor": {
          "ref": "9b496e40-d61e-4ee7-8aad-1b7ae08b2ead",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "88a3359e-f1a8-471e-aa42-f5b429c6605c"
        },
        "item": {
          "id": "6960e0a9-1943-4793-8ad9-73e7d0c113b6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0c91a3b6-486c-41bf-9e60-ce52b59f8a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0407d6-014d-4bbf-8738-a0728aa6bb14",
        "cursor": {
          "ref": "45d6155d-a39e-4543-8836-51370ba61408",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "060f26ba-f945-4ba0-8281-58c82f868fea"
        },
        "item": {
          "id": "ba0407d6-014d-4bbf-8738-a0728aa6bb14",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2dcbfd55-f90b-4579-a3a4-514ddbd2cda5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a75158-933f-41eb-bd11-3674635e5663",
        "cursor": {
          "ref": "98a84c4e-bc99-448e-9f8b-9478b7595171",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "897f8cce-2def-4470-a14d-75828aba1672"
        },
        "item": {
          "id": "60a75158-933f-41eb-bd11-3674635e5663",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "45a6b235-ccff-44df-a45c-bd5cb4001837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e5426c-65d7-4aba-bb7d-3471c6f5735d",
        "cursor": {
          "ref": "b72822e5-b8ed-4781-8a85-9e56bb7bc85e",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7fb1bf5b-3bbb-40e1-a762-0ed4bf71993f"
        },
        "item": {
          "id": "b6e5426c-65d7-4aba-bb7d-3471c6f5735d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d4002246-0ca4-4d44-8aef-5ae92588d85a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7026319-bd23-4a4d-a20a-6903a6268a5c",
        "cursor": {
          "ref": "485e0749-61ee-43fa-8751-72824983f64d",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0edb638d-b2df-4ed3-a555-cd5dd3a5569b"
        },
        "item": {
          "id": "d7026319-bd23-4a4d-a20a-6903a6268a5c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b9b0d925-e327-452a-a645-7c4c921539c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24eaf92c-96e5-4441-956a-ce79d8966219",
        "cursor": {
          "ref": "33816645-5d0f-4966-8f48-bd4849585d76",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6e561ab1-42a2-4222-9985-f56c25114111"
        },
        "item": {
          "id": "24eaf92c-96e5-4441-956a-ce79d8966219",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "66987787-189c-4a9c-b6a0-d564c1e9b583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c60440-1fae-440d-9477-341d62589a40",
        "cursor": {
          "ref": "d2c846e8-4fb7-41f0-8d49-0b8c81d02492",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0b278e06-2e88-4ff2-91f2-7df3ee4a1663"
        },
        "item": {
          "id": "23c60440-1fae-440d-9477-341d62589a40",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "26ac29d9-e437-46ed-8ae8-b8f03e550f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02acb80d-f7e4-475e-980f-459bfe0eff64",
        "cursor": {
          "ref": "04bc6014-a92c-4f20-9d63-2a5dee1c9c4e",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0277313c-c5be-4810-bd62-fad0688ec295"
        },
        "item": {
          "id": "02acb80d-f7e4-475e-980f-459bfe0eff64",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ba96634e-4329-4001-bf2a-63936b334ba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f70a99-cf47-4dc4-bad9-e368d6df5417",
        "cursor": {
          "ref": "33e27bfb-ebde-44ea-822a-42926cf3aa83",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "488aac15-7f8f-4474-881a-d4831207458d"
        },
        "item": {
          "id": "73f70a99-cf47-4dc4-bad9-e368d6df5417",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "16e9e01f-34e3-4a1e-b905-f65b3366574f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 132,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "8a3729f8-7033-4263-a969-6b7cbfd1cdd2",
        "cursor": {
          "ref": "36c0e925-1146-4882-b86c-471fc8379dd6",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "99f6d92a-a2de-4771-9a45-7284e0dc82f7"
        },
        "item": {
          "id": "8a3729f8-7033-4263-a969-6b7cbfd1cdd2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "06612210-81a4-4c88-86cd-0fb9e3de034d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2c6a6b3-5b52-4af5-8221-e5a73f66fdce",
        "cursor": {
          "ref": "ad0e109d-8d3c-472b-bdcf-43c0d613f6a0",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "2a1a5225-5362-4cf5-ac3c-13c78c751d81"
        },
        "item": {
          "id": "f2c6a6b3-5b52-4af5-8221-e5a73f66fdce",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "28f8e58f-2e8a-4a4a-a6e6-16b24e1bc596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a8918d-4ffd-443d-8260-c2dfe5129ef1",
        "cursor": {
          "ref": "ee74c098-2c07-47a2-b51d-092ef7040305",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e9fe5117-ffd3-4e9f-9ed7-d78d7fbae344"
        },
        "item": {
          "id": "54a8918d-4ffd-443d-8260-c2dfe5129ef1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8c786031-96ab-4a1b-a7b6-a856e4417f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e75da414-2a34-455a-8413-555cf73a3da4",
        "cursor": {
          "ref": "f04142fe-a1ef-4f44-a703-3e859fe50b7a",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "af6bd4bb-ec0c-4f78-9ba9-c5ebbdc28392"
        },
        "item": {
          "id": "e75da414-2a34-455a-8413-555cf73a3da4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a794f24d-db67-4d36-823f-243a5911a26b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0100ceb2-392c-420b-93ef-eebc3df064e7",
        "cursor": {
          "ref": "b12d1fe4-e7f6-4463-a56a-5ff68c666439",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "64619546-a19b-45e0-a98b-a317f8a1f6d0"
        },
        "item": {
          "id": "0100ceb2-392c-420b-93ef-eebc3df064e7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "672f03e2-12ef-4011-9bc0-9c4a6f83eba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3feb77f7-4c7d-4246-9864-9d6d5633b11a",
        "cursor": {
          "ref": "33c504ed-76da-476a-9894-44e044a9812f",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f6484568-0b57-423e-9cd3-a5334c378507"
        },
        "item": {
          "id": "3feb77f7-4c7d-4246-9864-9d6d5633b11a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "085982ae-56de-4f03-8249-64b0b6732efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af674c7-0de4-4fea-a61f-ef7988f7cacb",
        "cursor": {
          "ref": "c6cf0ae0-60cb-4005-8761-fa6be50a062f",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b14d5ed4-40c3-484e-9db6-bb329e449a36"
        },
        "item": {
          "id": "0af674c7-0de4-4fea-a61f-ef7988f7cacb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c5dd9c04-ee8f-4bd6-bbb8-c589cba37855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc45228-129c-437b-a646-474f831268d6",
        "cursor": {
          "ref": "00f2d6b1-ce26-4bee-b80e-2f7586a46add",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "93c97794-568e-42ce-9548-8f2e2afe8077"
        },
        "item": {
          "id": "4bc45228-129c-437b-a646-474f831268d6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "aab0e9a5-b4de-4447-8c34-3b61444f104e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a7105e-19f1-46eb-8b8d-3e6224b10fe5",
        "cursor": {
          "ref": "f3584aac-3987-4a4f-97e4-0f120dc69a26",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2731bda5-f8fd-462e-b155-7b4460d638f5"
        },
        "item": {
          "id": "95a7105e-19f1-46eb-8b8d-3e6224b10fe5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b8b0194c-19ab-431a-9d99-c5e75cb8df53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d14b5b-df2f-40ad-bb04-8e566c8d95c6",
        "cursor": {
          "ref": "05ee6bd5-bd9d-4995-8386-50ef506821d2",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fc7b1570-9a8d-43fe-bf9b-45eb94f21ac8"
        },
        "item": {
          "id": "71d14b5b-df2f-40ad-bb04-8e566c8d95c6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "446267ae-f5fb-4a8f-8f22-763b7fdafed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ec4c55-810a-415b-8127-ac6fc38c6ec0",
        "cursor": {
          "ref": "7aa12d66-cf46-486a-81d3-4a78b7dc46c7",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9c30ebfe-aa9a-4e2b-b96b-9fd7cb3d83c5"
        },
        "item": {
          "id": "66ec4c55-810a-415b-8127-ac6fc38c6ec0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fc2b6de4-5387-4051-aed2-fd102d011b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d142400a-cec2-4f39-92a3-2b1870bf8bd5",
        "cursor": {
          "ref": "dbe8370d-725a-4f78-b14d-362e27e06950",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ab9a9497-76ee-4b16-bed6-7533d67e04ac"
        },
        "item": {
          "id": "d142400a-cec2-4f39-92a3-2b1870bf8bd5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "39164ba9-36b7-4374-916e-98314638e8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "060ce012-1f85-4c58-8107-3760315f3a35",
        "cursor": {
          "ref": "4a365ab9-6ba8-4f3d-861b-c2162a3f1ba1",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "08d77473-f48d-4c4d-bf4a-219970899874"
        },
        "item": {
          "id": "060ce012-1f85-4c58-8107-3760315f3a35",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5908dcdc-b8a4-4ffb-a57d-c56477dbadca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6731d434-7649-4b78-ae1c-cea273b47f6a",
        "cursor": {
          "ref": "40aca0b7-d77c-4e1a-b8fc-05594efd9c4c",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "411e691d-0bee-4339-ad85-d7cdd881a4c4"
        },
        "item": {
          "id": "6731d434-7649-4b78-ae1c-cea273b47f6a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "72b01c59-81c8-4240-9a03-9d5a865a822f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "574dcfd6-d619-4a3f-af53-761473dc91a8",
        "cursor": {
          "ref": "be1d5a98-f2c3-4271-b89c-53314add9765",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "2fd2b49b-6c39-4abf-88b8-e51e572aa999"
        },
        "item": {
          "id": "574dcfd6-d619-4a3f-af53-761473dc91a8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "05c314f8-7ca3-4f1a-8584-cb7ea1ee687d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345344c7-e65a-4312-b6e1-bb563ec632ca",
        "cursor": {
          "ref": "9fd6a397-57fd-47ee-8ee2-a096990e754d",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9838b06f-d89d-496e-a74c-9a37bda67a7e"
        },
        "item": {
          "id": "345344c7-e65a-4312-b6e1-bb563ec632ca",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "957046e6-ffac-4d68-b7a0-33cecd32fa5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c904550-c8dd-4181-a5fb-015c59012377",
        "cursor": {
          "ref": "93002a6a-517a-4b15-a010-12a4ca194f0e",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "05607f36-ad60-447c-9e22-ceb766d3fd66"
        },
        "item": {
          "id": "8c904550-c8dd-4181-a5fb-015c59012377",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f272e3f4-5f96-418f-aa57-6e7dc58e3586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c99575b9-dcdd-4183-95d8-8527904c7e4c",
        "cursor": {
          "ref": "aaa7d1a5-6e99-4ca6-b759-ec4789cdb2e6",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d7aa3825-e930-463f-b692-2bf7214f32bb"
        },
        "item": {
          "id": "c99575b9-dcdd-4183-95d8-8527904c7e4c",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "90ddf231-0db7-4013-88c0-5c02e4944c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14490629-418e-41e5-9d5f-42fe6229876d",
        "cursor": {
          "ref": "c50ebac5-edd5-4870-b8cd-66c5e408f2b7",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2fb408f1-aa27-4b2d-a527-ecabea7ca79f"
        },
        "item": {
          "id": "14490629-418e-41e5-9d5f-42fe6229876d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b7670e6a-6210-4fc0-91cf-f9f0ba8cc3de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afaf801e-1b28-4448-9786-6862a44cf1e8",
        "cursor": {
          "ref": "366915e5-bcfa-49af-838e-54a3deff70f3",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9b634cbd-b9d8-4237-ad32-88f96203bd51"
        },
        "item": {
          "id": "afaf801e-1b28-4448-9786-6862a44cf1e8",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "282abd84-0a74-4e21-b7f2-5a3e7f5e6992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc0a340-f5e1-4a21-8f7b-d8d681550498",
        "cursor": {
          "ref": "e0802c53-4705-435b-9190-99c2e4c33657",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "76717d06-d9d2-47b3-9888-b3c7fb386d94"
        },
        "item": {
          "id": "dcc0a340-f5e1-4a21-8f7b-d8d681550498",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "2d14f5a0-4ebc-4717-a780-f5795248b555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ea9498-a7d7-464b-aa46-b594b0d1e971",
        "cursor": {
          "ref": "b5889bc0-21bb-42fd-85c3-20935c3c663a",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "6d30f098-2c62-40df-85ac-2b0040c687c8"
        },
        "item": {
          "id": "72ea9498-a7d7-464b-aa46-b594b0d1e971",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "da880acb-bd9f-4dfd-af29-224ff58bf018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3747072c-448f-48f1-a4bc-703315533661",
        "cursor": {
          "ref": "aa4ec7fa-fa73-4894-bbad-7e2e136cb102",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "21a0d652-0bec-4ea1-9324-8f04aec21f3f"
        },
        "item": {
          "id": "3747072c-448f-48f1-a4bc-703315533661",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "cfbd88aa-9140-4d04-9cbc-a85173c00866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f67edee9-3f2b-4cae-9a70-dc89dc5edd68",
        "cursor": {
          "ref": "c8bb0c7f-6474-421a-b56d-4b2739eef157",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "34cf6bd0-e568-4b1b-a800-9aff11866faf"
        },
        "item": {
          "id": "f67edee9-3f2b-4cae-9a70-dc89dc5edd68",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cdafa945-00f7-4f2d-99e5-2281f43c63be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4ec609-3026-47e5-a4fd-0e5b3722e1c6",
        "cursor": {
          "ref": "d8eb0b5c-4fb6-40a3-8b6c-21672aefc461",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "42178c8e-25b5-48ec-907e-f9d5ac720649"
        },
        "item": {
          "id": "bb4ec609-3026-47e5-a4fd-0e5b3722e1c6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f3b622fc-d335-4237-b793-897222dfb0f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd944e91-fba8-4f32-90cd-86f2215a1c4e",
        "cursor": {
          "ref": "215b3a54-c866-4170-98fb-00995e0fa6ea",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ad881a6c-f122-4fc5-94de-634fc6066388"
        },
        "item": {
          "id": "fd944e91-fba8-4f32-90cd-86f2215a1c4e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b43aeca0-6b5e-4dc7-a153-9362cb7ce387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bd02808-9607-4484-9c3d-dcf4b0d9eb37",
        "cursor": {
          "ref": "c4dc8ad2-c14c-46d7-87b9-bae9bb58382c",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a07fb7cc-ff18-4aac-b302-343bc1fb60f1"
        },
        "item": {
          "id": "5bd02808-9607-4484-9c3d-dcf4b0d9eb37",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b051e27f-b3e5-4125-9390-8898aaba6abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83184699-449e-4f62-9061-91ced5f4c247",
        "cursor": {
          "ref": "8169de64-3119-4633-a002-374fb4cb6e0e",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f51b4b5c-460f-467a-a129-57b6cf741946"
        },
        "item": {
          "id": "83184699-449e-4f62-9061-91ced5f4c247",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "62b24ef0-dd13-48a6-87f1-20786f8ab7a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78034a8f-a27d-496f-9146-1ade833d5c4e",
        "cursor": {
          "ref": "52bf3ce4-340e-410c-9d5a-41b8e6697dca",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "154c8d39-e4cc-4fcf-935d-87dab962acdb"
        },
        "item": {
          "id": "78034a8f-a27d-496f-9146-1ade833d5c4e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6e71f79e-b2be-4ea4-a247-0b8ca6d54b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a874543-6e0a-4dcc-924f-01e26787cd89",
        "cursor": {
          "ref": "37aa5668-39b4-4682-b7bb-22690136498b",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "44b24874-13d5-41a4-8ced-7c013169407c"
        },
        "item": {
          "id": "6a874543-6e0a-4dcc-924f-01e26787cd89",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d99200af-72dc-4739-aee6-ac29d8997f7a",
          "status": "OK",
          "code": 200,
          "responseTime": 183,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "2776fa7b-5625-4dfa-ae0d-d5ad9ea4fe9f",
        "cursor": {
          "ref": "6e7bef0e-1d66-4783-85d9-0418c172b7d9",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1ade2c1c-bd2c-47a4-861d-59a5294071e1"
        },
        "item": {
          "id": "2776fa7b-5625-4dfa-ae0d-d5ad9ea4fe9f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1948c186-547e-4115-b9b2-540234df0bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c1a7d5a-8247-4f33-90da-6b0fbe5b1f45",
        "cursor": {
          "ref": "6fdd73cf-8885-425c-9665-e41d6251b697",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "414c13d7-4ec2-4bfa-88b1-5a5191e70efb"
        },
        "item": {
          "id": "5c1a7d5a-8247-4f33-90da-6b0fbe5b1f45",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ab1ec805-fc44-4050-909c-9e514da6b438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f56197d-4fea-4f9c-bfac-04afd882245e",
        "cursor": {
          "ref": "8656adbf-ec75-4663-90fd-95a007a19989",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e17b3493-ddc2-4743-b089-6046cabb4747"
        },
        "item": {
          "id": "9f56197d-4fea-4f9c-bfac-04afd882245e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ecb4d8b2-c621-4078-b82b-f92c1bf2ef7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d24740-6c84-4111-b08a-397f33c159f3",
        "cursor": {
          "ref": "022d291f-7a6e-4969-8b88-c05256ec0e19",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "23ca129a-1c98-4297-92b2-96d8cd5e788c"
        },
        "item": {
          "id": "42d24740-6c84-4111-b08a-397f33c159f3",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9664b87e-cc15-4993-88a3-d6de1126e63d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a827c7bb-5362-483e-9d56-cc57fdaf1ee4",
        "cursor": {
          "ref": "54bd718d-9f8b-4f53-925c-a495dedb712d",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "27b1a36e-66f0-496d-9c8d-bbbc96fe3a85"
        },
        "item": {
          "id": "a827c7bb-5362-483e-9d56-cc57fdaf1ee4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "fb33b37a-43ff-4a22-98c1-6f3c098e94d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "833def92-649f-47bd-b67d-43142998cc58",
        "cursor": {
          "ref": "eb98f594-0bde-4a98-9f5c-98f61864ecb1",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8d716f82-cc78-4f76-89ff-3b0e633519fe"
        },
        "item": {
          "id": "833def92-649f-47bd-b67d-43142998cc58",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "45ff9a31-5d9d-4595-8570-1ac5f85adc35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62d70e9-fdad-4068-afee-019ee93f5519",
        "cursor": {
          "ref": "213db793-6822-4385-aef8-02dd85a15a4c",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "241306f0-e32f-4a25-8785-1465a429c7d2"
        },
        "item": {
          "id": "d62d70e9-fdad-4068-afee-019ee93f5519",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "150051f2-4e79-48ca-a84a-daeb03827fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42b2ff6-3df8-468b-b97b-32240be2e6a0",
        "cursor": {
          "ref": "4e52da31-9b5b-4654-8156-2bbbb9bc93a9",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6375e767-d97b-4557-bfb1-0d90a53f9b7c"
        },
        "item": {
          "id": "b42b2ff6-3df8-468b-b97b-32240be2e6a0",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c1d3a47d-fca5-4733-9205-2afa17b3e357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da2841f3-c7f5-4e7c-a816-15602ac87608",
        "cursor": {
          "ref": "610f3127-a49b-4cf2-bd4a-825c33698e78",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6ca0d8ed-af28-40fa-983a-c13b05d69676"
        },
        "item": {
          "id": "da2841f3-c7f5-4e7c-a816-15602ac87608",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "59dde300-8dd1-4f27-9e49-719971cb48f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35a5509-82ad-4bb2-ba97-73f8c86c04dc",
        "cursor": {
          "ref": "e99816b4-ce27-41ff-a623-14ff6dfdd655",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9ae7a27e-bc8a-4522-9262-62fd3beb20f6"
        },
        "item": {
          "id": "e35a5509-82ad-4bb2-ba97-73f8c86c04dc",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7b1478d3-7767-4c57-b957-66636843a4f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3269cef-7ab7-4870-8f1d-85495f79c77c",
        "cursor": {
          "ref": "af4b8628-d25e-4cfa-93cd-276651e9d201",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e03e9736-059c-4077-b663-e7f26c223fe5"
        },
        "item": {
          "id": "d3269cef-7ab7-4870-8f1d-85495f79c77c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5d1867cd-d62e-4b08-ad98-a839e4c8e45b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5425aafd-7490-4d77-8b56-eed76507ef43",
        "cursor": {
          "ref": "1b733dbf-e3e6-49dd-9e2e-51618bf30335",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "03005a31-27ec-4313-a91c-2e5d74b996ba"
        },
        "item": {
          "id": "5425aafd-7490-4d77-8b56-eed76507ef43",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "7b4c7c78-894a-4bef-ae2a-952942812c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b14f640b-17d7-4304-91c5-d64efb6314e4",
        "cursor": {
          "ref": "2aaa9459-8199-4527-93d3-05720b006cf8",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e75294a1-36f2-42b7-a599-0486f80b6089"
        },
        "item": {
          "id": "b14f640b-17d7-4304-91c5-d64efb6314e4",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e5b12437-cd37-48c8-8d2c-79aab2bdd105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1498ec-3f45-46d0-a35a-86d455d77830",
        "cursor": {
          "ref": "8ce1efda-226b-445b-a39a-83af67bbb1c3",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "1aa40a95-7aa8-4576-865e-7e09cc290e7d"
        },
        "item": {
          "id": "cb1498ec-3f45-46d0-a35a-86d455d77830",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4f9c7ef0-bf47-4a91-9fda-9770195d6c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c39f4ebb-12e5-410e-b38e-0177bb5065bd",
        "cursor": {
          "ref": "3efd6e2a-1c0a-4bb1-b830-0744b8b2c7f7",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3c29e6e4-9605-439d-bec4-805b803c2f91"
        },
        "item": {
          "id": "c39f4ebb-12e5-410e-b38e-0177bb5065bd",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f120d71e-a49f-48bf-a183-60878d9d269f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee384ca5-dd64-4986-b601-0228e66c04d0",
        "cursor": {
          "ref": "e8d5baa8-35b0-4802-92de-2a6b3927ffe7",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4632af44-afaf-471a-a03f-c6fce4b9fc86"
        },
        "item": {
          "id": "ee384ca5-dd64-4986-b601-0228e66c04d0",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "fd9027e2-6aa2-4efd-8c66-d64b6f069d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8909ce81-0b7e-47b7-bd8f-b14c4f8c9f95",
        "cursor": {
          "ref": "f6893bad-39d9-47df-9d87-16794998077f",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "4d165ab6-a134-4cfc-9137-f208eb0f56fe"
        },
        "item": {
          "id": "8909ce81-0b7e-47b7-bd8f-b14c4f8c9f95",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7b50656c-4a8a-4f5d-bd6d-e17d0bbdb41b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72754b1-d0c7-46b9-a239-e559685afa6a",
        "cursor": {
          "ref": "d4fe507e-f3d2-4ead-ae80-0c1031ac699b",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "587c486f-4485-44fe-ac71-0df0b8992047"
        },
        "item": {
          "id": "a72754b1-d0c7-46b9-a239-e559685afa6a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e656d415-99c5-4fd0-ae9a-7fe284c96e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38331014-03dc-452d-ac89-734760a1fd69",
        "cursor": {
          "ref": "d0f473cb-6e97-4261-84f7-9782a9968f4e",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b8102683-cbcd-4ab4-b6a7-5464b486828e"
        },
        "item": {
          "id": "38331014-03dc-452d-ac89-734760a1fd69",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7019dfec-fcc9-4eda-98f8-2879db67d6ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fecfaba2-9330-46af-b599-f2633c32602b",
        "cursor": {
          "ref": "f64149b1-3b77-46dc-888a-19b516bd94b2",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4ecbdca1-df22-4580-a8fa-0ab26ea24bec"
        },
        "item": {
          "id": "fecfaba2-9330-46af-b599-f2633c32602b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a7eaff52-55dd-4ceb-b72e-08397dcc4fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc0ff6d-a277-4fa9-ace2-dd6d2c621b27",
        "cursor": {
          "ref": "fdafb13a-da63-4bec-9cf4-9e21da03db40",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "34654e8e-87ca-48b6-840b-1ba2887347f7"
        },
        "item": {
          "id": "0dc0ff6d-a277-4fa9-ace2-dd6d2c621b27",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4a42edab-12aa-4a83-9be1-be9a757459a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541d49bc-f680-438b-b50f-52ccb4a0e5ca",
        "cursor": {
          "ref": "6f83cdd3-2f39-44de-ba1a-896646c6421c",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f1f0e4cf-67e7-4cfd-b198-10c33a282fcb"
        },
        "item": {
          "id": "541d49bc-f680-438b-b50f-52ccb4a0e5ca",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "abf40b02-9f02-4dc4-9926-18081e80ef2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c980eb-4ab8-429e-ac4f-bd10c7a60c8f",
        "cursor": {
          "ref": "ac2d408d-4e37-42d3-b21c-ec4996951d83",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7eb51766-10fb-4e87-bfce-9e19f976d9ed"
        },
        "item": {
          "id": "51c980eb-4ab8-429e-ac4f-bd10c7a60c8f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "174afa52-e720-497b-8f4a-94a4ee2c1e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feefb0b5-86ee-40bf-aea4-dca8698e6c8e",
        "cursor": {
          "ref": "f642e004-0513-44b9-a4e4-90fec0f4c8f9",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d002aeb7-7ea3-4413-bce3-075d8e36cb0b"
        },
        "item": {
          "id": "feefb0b5-86ee-40bf-aea4-dca8698e6c8e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "453efbbc-58c1-4070-b4bc-84055a498c38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dc0aaeb-2929-47c7-99a7-1a0e5eaeb45a",
        "cursor": {
          "ref": "b27c18fa-3986-4ec4-8f4a-dafddcb70e43",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "60e78236-992a-4ef1-8f57-eab190f62bc8"
        },
        "item": {
          "id": "1dc0aaeb-2929-47c7-99a7-1a0e5eaeb45a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7575e805-1759-45dc-8b8f-8f94a70fdec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8c0443-9cbd-4484-97a9-e74afe872af3",
        "cursor": {
          "ref": "88282d5f-74e3-4e8c-aa29-cf4a9367c2c1",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b16535be-b236-4cf8-9060-689fb22e413a"
        },
        "item": {
          "id": "cb8c0443-9cbd-4484-97a9-e74afe872af3",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ffa091dd-6b34-466e-a7dc-75fcf1c05758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5482d828-0ff1-4427-a2f3-68bd7416a3b7",
        "cursor": {
          "ref": "35be4a0b-2d35-4301-8cd3-56a2bbb9d577",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4db335ba-84b5-44f7-b816-0707be5ec92f"
        },
        "item": {
          "id": "5482d828-0ff1-4427-a2f3-68bd7416a3b7",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "40e259b5-05a7-4398-ac22-8ab9c3f24a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21c00252-9b62-40c0-8c6d-217ce917c896",
        "cursor": {
          "ref": "2950e84f-c772-4efa-9d3b-14864690f183",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "34387ec0-3b1f-42d1-9b6f-8693394f2bd6"
        },
        "item": {
          "id": "21c00252-9b62-40c0-8c6d-217ce917c896",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1c9730bf-76d7-42bb-b626-2fe1b5bc0f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a07600-956b-4f10-89b6-87b463f57587",
        "cursor": {
          "ref": "0f197a79-36a8-47ca-bf87-e2250336a01e",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a08f3b4f-161a-48b9-a142-752f4ec06de8"
        },
        "item": {
          "id": "d4a07600-956b-4f10-89b6-87b463f57587",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1b912c6f-1685-4a6f-9328-b4851a89f5bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d41f23-5dc2-4f19-9742-4faa01f4dfa0",
        "cursor": {
          "ref": "e3c60806-45d2-4c34-a54d-f4d8f6b74497",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "19e83a70-15e3-4e85-9c2e-f8b3edcdc47e"
        },
        "item": {
          "id": "62d41f23-5dc2-4f19-9742-4faa01f4dfa0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "80a52b04-41e2-4f58-a8f4-d0d46cfdbc92",
          "status": "OK",
          "code": 200,
          "responseTime": 202,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "6332fca4-983b-41bb-ac7d-aa6b1a2e3266",
        "cursor": {
          "ref": "b527a130-9c53-43ed-9d94-4688f4346dfc",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c09a9409-3185-4210-adcb-02760d2bc268"
        },
        "item": {
          "id": "6332fca4-983b-41bb-ac7d-aa6b1a2e3266",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8342b308-b475-428f-8535-5eef11e1228f",
          "status": "OK",
          "code": 200,
          "responseTime": 202,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "afc43ea3-bfc1-4bf4-a2f0-66b7881e1bf3",
        "cursor": {
          "ref": "3acd405d-2385-4a4e-8da6-64d67e1d174c",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3df1dbdc-58fc-4d5e-89dc-8082267252ca"
        },
        "item": {
          "id": "afc43ea3-bfc1-4bf4-a2f0-66b7881e1bf3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "652fed78-1cf9-4678-988f-e591c056acdf",
          "status": "OK",
          "code": 200,
          "responseTime": 209,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "58329af6-59b8-41fa-9c1b-78b41daf28da",
        "cursor": {
          "ref": "7fbbea42-1666-4a8f-82d7-a31d0bb8ba6a",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c8526af3-4a3d-421b-bb7f-105c38cc35eb"
        },
        "item": {
          "id": "58329af6-59b8-41fa-9c1b-78b41daf28da",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "05bff765-b248-4bb6-9dc7-03c20c6880a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019973b3-d73e-4126-a448-cd90ccbabee7",
        "cursor": {
          "ref": "5c744c7f-68f7-42a6-b2cb-d75fe74e47fe",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "08199377-3ad7-4ec1-869e-3f11eb0549e1"
        },
        "item": {
          "id": "019973b3-d73e-4126-a448-cd90ccbabee7",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "23848f4b-858a-4d1c-ab5a-7b611fb3b28d",
          "status": "OK",
          "code": 200,
          "responseTime": 202,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "1ed4ad9d-048e-4440-bb41-af84c9aa0b74",
        "cursor": {
          "ref": "3923eac5-7062-41cb-bc85-c2c9eac445be",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "515fbd73-f1b8-43ee-99af-ebde9147d295"
        },
        "item": {
          "id": "1ed4ad9d-048e-4440-bb41-af84c9aa0b74",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b9b42bce-60bf-46af-a103-53bc9cfde135",
          "status": "OK",
          "code": 200,
          "responseTime": 186,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "e0146b96-9bec-4f0b-8753-f80d4bfc8146",
        "cursor": {
          "ref": "3dcf1fa8-70cd-4f72-ba54-30c43f394e70",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d2fe43a0-877b-4b6c-8c11-8c9edd94870f"
        },
        "item": {
          "id": "e0146b96-9bec-4f0b-8753-f80d4bfc8146",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "08a12430-058b-44d1-84df-0f55a2a1d932",
          "status": "OK",
          "code": 200,
          "responseTime": 182,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "8ab62641-8299-408f-b7b5-207335dc2433",
        "cursor": {
          "ref": "a601db10-eaf6-414c-bf7f-6aa81cb05fdc",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d9431afe-2612-4a9c-8ecf-42af497a4db6"
        },
        "item": {
          "id": "8ab62641-8299-408f-b7b5-207335dc2433",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "153456db-1494-4170-af6a-cdafcbe7ae7d",
          "status": "OK",
          "code": 200,
          "responseTime": 196,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "6d3cc1d2-7add-4a8a-bd9a-b82422b733aa",
        "cursor": {
          "ref": "7676f39c-1545-4a42-99e5-0c6f93bf6dae",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "7ef9e78e-0821-437f-80d1-e957b204efba"
        },
        "item": {
          "id": "6d3cc1d2-7add-4a8a-bd9a-b82422b733aa",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "255d6971-58d9-4af8-8fb0-90ce722748a3",
          "status": "OK",
          "code": 200,
          "responseTime": 189,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "6e97a30a-f056-4e09-b857-4bd440b9690e",
        "cursor": {
          "ref": "3129515c-c27d-4454-b441-ef0b3d108cd7",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ccd76e44-8115-4978-af2f-7ba8008ff0cc"
        },
        "item": {
          "id": "6e97a30a-f056-4e09-b857-4bd440b9690e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e92312fd-f292-4e30-ba48-d0653c82b27b",
          "status": "OK",
          "code": 200,
          "responseTime": 192,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "774e2712-8e10-4946-8171-66d7e8021656",
        "cursor": {
          "ref": "b4688286-7c68-4eb9-a88c-1eab3f112090",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2f513adf-b753-4e5b-9b39-079f9aad7adb"
        },
        "item": {
          "id": "774e2712-8e10-4946-8171-66d7e8021656",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e0a30519-0791-483a-b36f-96e683a1773a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425b4d08-2f1b-4281-9626-9d74932c2ea6",
        "cursor": {
          "ref": "1001d102-367e-4954-b1c5-9491dd41e919",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2070ec85-1599-4e63-a4e3-3149a79c563f"
        },
        "item": {
          "id": "425b4d08-2f1b-4281-9626-9d74932c2ea6",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5d9775e7-f41a-49fe-9479-15c54ad04fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59748995-b83b-4df9-9cd6-e114ffa16abd",
        "cursor": {
          "ref": "b1bb2752-9854-462e-927e-54ddb2c4f8c9",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "509c59b6-f1fc-41d1-bf49-856f36922ace"
        },
        "item": {
          "id": "59748995-b83b-4df9-9cd6-e114ffa16abd",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a5221fae-2440-4149-84f9-e4a15bf9ee90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6759e3-5bea-4d39-9cc8-2a4182f9bcdc",
        "cursor": {
          "ref": "c40e6d06-79a9-4961-a982-fc1360134cde",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "09bb089f-8a4c-4870-8ec7-bc16cdff69eb"
        },
        "item": {
          "id": "ed6759e3-5bea-4d39-9cc8-2a4182f9bcdc",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "01829d13-80d5-4a0a-b2a2-c894f8583596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a725517-c1b2-426f-b712-f46ed6f47a61",
        "cursor": {
          "ref": "59205f61-7927-4567-bcd5-fb3bbfb69f21",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "627318dc-c130-45d9-912c-3f7041e3aa96"
        },
        "item": {
          "id": "1a725517-c1b2-426f-b712-f46ed6f47a61",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "b500b0d0-bbe9-49a6-a1ab-886f1d04acca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d57f2d86-e610-473e-b665-0001c8c27c9c",
        "cursor": {
          "ref": "5b78e6cb-3243-467c-aadf-a8a8960b83f7",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "deb11238-f621-4216-bd2c-9ff64d47eaf3"
        },
        "item": {
          "id": "d57f2d86-e610-473e-b665-0001c8c27c9c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6e57043a-f8ad-471d-98d4-911a334abd5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa167dc7-2419-44b6-88bf-bbb0cf924e55",
        "cursor": {
          "ref": "cfa00ffe-47c9-4953-8b5e-7cc3d942d297",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "056044e0-d304-4ba5-8d22-32c098de64e9"
        },
        "item": {
          "id": "fa167dc7-2419-44b6-88bf-bbb0cf924e55",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9d8656d7-6ad1-4230-9ae3-3678f48d225b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f8f355-b870-4c75-ae44-51be8a41bffa",
        "cursor": {
          "ref": "73c3097f-61c2-4c5e-82bc-f829b32d4903",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ef23331f-b979-41e3-8d9c-cb90d0e110a7"
        },
        "item": {
          "id": "80f8f355-b870-4c75-ae44-51be8a41bffa",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "122f4e98-8806-48fc-bef5-c7565a5d5630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da3a8a0-61b5-46c1-9a5e-cdd5316c1ca4",
        "cursor": {
          "ref": "62f30415-165a-4423-8027-36197d656c46",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "30956aa3-112d-4235-8c7a-0abd54b74ec8"
        },
        "item": {
          "id": "7da3a8a0-61b5-46c1-9a5e-cdd5316c1ca4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a35dab99-46f6-4007-b844-66f3b828d1a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4acc623-d0ed-4a74-9e73-7a880d946770",
        "cursor": {
          "ref": "c27c9f04-7dfb-4906-941c-8ecaa95f0f27",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e624944e-ab45-4f80-995c-684a6510a838"
        },
        "item": {
          "id": "c4acc623-d0ed-4a74-9e73-7a880d946770",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6484fe53-6d1d-4961-ae8e-d7b40c8c78e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d515cba-dc98-4c41-a4f7-c698dbb42dcb",
        "cursor": {
          "ref": "6b72599f-780a-44eb-bbe4-0ffbb5cfa502",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7f9d8d0a-b52a-4e85-8ca8-6b27c141211e"
        },
        "item": {
          "id": "6d515cba-dc98-4c41-a4f7-c698dbb42dcb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "cfed4737-7d39-429b-bf17-02c8cff742cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d5fffd3-8544-43ef-8113-55cc05642e02",
        "cursor": {
          "ref": "3ea0da90-6cac-4a9f-8959-63df8463e1fd",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1534e89a-4a89-4f40-8344-17cdde7c7aa1"
        },
        "item": {
          "id": "8d5fffd3-8544-43ef-8113-55cc05642e02",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "93ba466e-c2d3-451b-b4ac-21e916b8c88d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3de1539-efc0-4aea-a66d-e928ebe9ca04",
        "cursor": {
          "ref": "5859727c-3a40-4a1e-9271-33a4b612c17a",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "86eb347c-5969-4778-ad9b-5404ce353199"
        },
        "item": {
          "id": "b3de1539-efc0-4aea-a66d-e928ebe9ca04",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "286e071c-df83-4163-a39f-133fef043869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a8c491-98a3-4c63-aada-eb8342c08309",
        "cursor": {
          "ref": "0683df7c-4764-4fc1-a630-2c92b978380f",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a8d7e485-0771-41b1-b20e-a7c77d2f694a"
        },
        "item": {
          "id": "98a8c491-98a3-4c63-aada-eb8342c08309",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e437e2e1-35b1-4409-bbf1-c275137c2573",
          "status": "OK",
          "code": 200,
          "responseTime": 203,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "53e094ac-98f3-4393-bfd3-39c1da672164",
        "cursor": {
          "ref": "8978ff91-1685-4fe5-85aa-9120ec993096",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3e7a2b0c-6912-43f8-b6d1-379a5c6f96b8"
        },
        "item": {
          "id": "53e094ac-98f3-4393-bfd3-39c1da672164",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "da56a276-c93b-4a7b-9781-00a172354a30",
          "status": "OK",
          "code": 200,
          "responseTime": 189,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "594b11fe-3a29-4f3c-9b07-306bdf0ed08c",
        "cursor": {
          "ref": "9f8d500e-8f4f-4c6e-991f-4b62e8e64960",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5fa1c5de-f4aa-413c-a059-2cf971545ccb"
        },
        "item": {
          "id": "594b11fe-3a29-4f3c-9b07-306bdf0ed08c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d5a6d993-7c47-4e17-be1f-dc2737710f7b",
          "status": "OK",
          "code": 200,
          "responseTime": 189,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "bbadd6a6-1abc-444b-91e8-5e86e75f8c4e",
        "cursor": {
          "ref": "52d4e4ce-9a98-4f19-a2f1-de0b77e2915b",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "dbede6e7-69d2-43be-ac41-9d33d24d3186"
        },
        "item": {
          "id": "bbadd6a6-1abc-444b-91e8-5e86e75f8c4e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "86be919e-e86b-4418-a51f-bbe49b6e2a02",
          "status": "OK",
          "code": 200,
          "responseTime": 186,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "ec9ddb1d-e200-4624-8ff1-58e730517f70",
        "cursor": {
          "ref": "fc67d1b3-9cca-41ca-ae92-1133f9047212",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e1fee5cc-6575-45f5-a85a-ff3754370bf5"
        },
        "item": {
          "id": "ec9ddb1d-e200-4624-8ff1-58e730517f70",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "fd53bf87-e704-4ca8-9075-c69d7267d387",
          "status": "OK",
          "code": 200,
          "responseTime": 191,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "35a6fe06-5571-499b-9299-8534b39d3328",
        "cursor": {
          "ref": "87fe52ee-1116-4928-923e-ce2c1369ca26",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ff48bd3c-b609-4318-8fff-bc0feccd04d2"
        },
        "item": {
          "id": "35a6fe06-5571-499b-9299-8534b39d3328",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "91ac718e-e76c-4d39-8a69-389951d134b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "189961ab-024a-4edb-b758-1f7078c6560d",
        "cursor": {
          "ref": "0183f21f-3892-43ef-a360-6aa86d93fee6",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "287e0828-5392-44f7-ada7-d247dddc212f"
        },
        "item": {
          "id": "189961ab-024a-4edb-b758-1f7078c6560d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "04e34b77-8e42-451a-aec6-2c6a60d4494b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae6071ad-fe75-46cc-bd7a-cfda6bfe7a4d",
        "cursor": {
          "ref": "2a883f65-3387-4ae0-b297-2861233430d9",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f93a4b8c-606c-4703-b754-cac9effec1a2"
        },
        "item": {
          "id": "ae6071ad-fe75-46cc-bd7a-cfda6bfe7a4d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "3913b6fb-89b7-4d9e-a272-e0916ab2a21f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115e6224-a8f9-43bd-ad03-bbda7ba548df",
        "cursor": {
          "ref": "ad20ca9a-ad4d-4c4d-970e-8c11cab219d5",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "44964ccb-bea8-4431-90b7-85d26a5b2eb4"
        },
        "item": {
          "id": "115e6224-a8f9-43bd-ad03-bbda7ba548df",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1dacf400-ab1c-4e0a-b544-b03f27de08be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e665879f-59ae-4954-85b6-583698f337bf",
        "cursor": {
          "ref": "bc915d30-98cb-4484-974f-22d27fd0c0dc",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "19140d5c-8e2c-42c8-a93f-3270650ebfda"
        },
        "item": {
          "id": "e665879f-59ae-4954-85b6-583698f337bf",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "55de0910-bc23-46a0-a936-b4868f761667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5753ce-deed-4ab6-b023-63116c001f50",
        "cursor": {
          "ref": "0d088292-627d-4f6d-bfec-2bd2d42aab4c",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a000e53c-faf4-46e1-99c9-f500b75bcbff"
        },
        "item": {
          "id": "dd5753ce-deed-4ab6-b023-63116c001f50",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a333e187-235d-40e7-a5dc-2427009d7344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48575815-9d29-4923-9c36-f64898501bd5",
        "cursor": {
          "ref": "00c7060f-1d08-4cec-996c-85c6a0f98b23",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "42dbd398-494b-4806-b790-e2851fc2f1ee"
        },
        "item": {
          "id": "48575815-9d29-4923-9c36-f64898501bd5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "65422bf9-0a2a-4167-8c1c-226be85940d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a341beac-3416-4b88-ae79-b95e8bbb5bb1",
        "cursor": {
          "ref": "30484f18-82f1-41e5-bb16-2f5ba3a3ebb1",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4669fbb0-6b72-4b14-a9ce-83cd5f080da9"
        },
        "item": {
          "id": "a341beac-3416-4b88-ae79-b95e8bbb5bb1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "32427bf6-d836-4118-b2e5-2670bddedf9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfede09a-6166-4559-96de-46377bfe3e8d",
        "cursor": {
          "ref": "fc05ccfb-a6aa-4283-9d97-e6d63b3ac2e6",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "aa955a00-f817-4e05-9c10-eb14fa0af736"
        },
        "item": {
          "id": "dfede09a-6166-4559-96de-46377bfe3e8d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "07f9b067-dd11-4eb7-8fea-c5aaceda4be9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06565e1d-65d5-4144-af02-d1d4739a453d",
        "cursor": {
          "ref": "cd90f895-217e-4cbc-8479-6e9b2ec69b07",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6f9f1907-6d19-48cc-8093-3ba293c3eb2f"
        },
        "item": {
          "id": "06565e1d-65d5-4144-af02-d1d4739a453d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5ed0ecc9-b2f8-4440-99a7-59c05ff896f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c7b14e8-4a88-450e-a3b0-00047d65d24d",
        "cursor": {
          "ref": "2a69c539-cfda-4971-a7e3-3719dccb8581",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "678588f6-ef56-4717-bf27-5308351954ab"
        },
        "item": {
          "id": "2c7b14e8-4a88-450e-a3b0-00047d65d24d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c1b4f483-3c9f-41ae-b4f0-e2fe2d873079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425683e0-0536-4474-912c-e6cdb72a52ad",
        "cursor": {
          "ref": "7c256133-44a2-4b8a-809c-1eb7a09dcef0",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "4c80e57d-e772-4539-af04-6d7012318dd4"
        },
        "item": {
          "id": "425683e0-0536-4474-912c-e6cdb72a52ad",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "46ea4f0c-9d21-4e93-9318-a1df1dbdfefa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c65b15-ba7f-49a1-9424-1a7c4df28d5f",
        "cursor": {
          "ref": "8477342d-2f2a-46fc-9594-02b7b6e9812f",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "a70448c4-0fd4-40ea-ac48-f7f9fc634fd1"
        },
        "item": {
          "id": "f3c65b15-ba7f-49a1-9424-1a7c4df28d5f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "11239209-11d8-4d81-a4b5-2c81f4bc11b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4348552b-66ba-4228-adc1-38a47ede5153",
        "cursor": {
          "ref": "0bf59536-2f73-49c5-8514-dfad2abca905",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "457cae4d-0ba9-4447-885c-2b64c4cb7d12"
        },
        "item": {
          "id": "4348552b-66ba-4228-adc1-38a47ede5153",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e14eb94a-68da-45ca-ae4f-4c1505f30112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe44302-4029-4df1-a393-771adc88c847",
        "cursor": {
          "ref": "cf4b0692-c5b3-4aad-8402-c4cbc3fa6e3a",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "a408d182-6f03-44fa-aae0-0b1c521bf976"
        },
        "item": {
          "id": "ffe44302-4029-4df1-a393-771adc88c847",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2a1fdbfd-7b83-4920-b884-d560c2bc3482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49450501-d5f1-4a6b-b20d-f617135ecbc7",
        "cursor": {
          "ref": "975e4b18-d6c7-46a5-90a0-8795f9bca5e4",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "61e3050b-d374-42fb-b584-0a9c39138261"
        },
        "item": {
          "id": "49450501-d5f1-4a6b-b20d-f617135ecbc7",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6ffd6a61-11b7-44bb-a4a9-b39f9703cec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc8e9cd-c47f-48b8-8748-2554fb0f9df4",
        "cursor": {
          "ref": "74df9c1e-7d8d-41e9-bcf1-c6b44614b92a",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "6192e6e8-316c-4edd-86e7-75d135275925"
        },
        "item": {
          "id": "6cc8e9cd-c47f-48b8-8748-2554fb0f9df4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1aeed34a-75da-42d3-a980-7355e386df0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57453665-8810-4d14-aefe-aad6f0e666e9",
        "cursor": {
          "ref": "c64ac103-1abb-4439-a582-fda8e87ba659",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "a24f3041-6e93-47f1-96aa-53e88c637558"
        },
        "item": {
          "id": "57453665-8810-4d14-aefe-aad6f0e666e9",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a2b79156-47e4-48c7-9831-95ff0e18c887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e33fad-82f9-43fe-831e-bf801de02770",
        "cursor": {
          "ref": "fa5969c5-1169-4243-b349-6c71c426bb73",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "b91229ad-b45e-499c-b83b-9677c5cadeae"
        },
        "item": {
          "id": "62e33fad-82f9-43fe-831e-bf801de02770",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "2e7fbff3-6b75-49fc-bb4a-8e3b34c0236b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c17c9ef0-6241-4834-9614-b35764dda949",
        "cursor": {
          "ref": "8f9b6fa7-7d6c-47d5-b7fe-66097cbc4e55",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "ed915b8f-14bd-4aef-a61c-7f513c9fa450"
        },
        "item": {
          "id": "c17c9ef0-6241-4834-9614-b35764dda949",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d08d2f9a-45ff-43bc-b95f-24c23921481a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f50687-6113-422e-8ded-c5eb1c8c4982",
        "cursor": {
          "ref": "d5c05a55-9c07-418a-83e7-11915293e81d",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "77542251-e617-4e66-bbaa-32651f80a809"
        },
        "item": {
          "id": "64f50687-6113-422e-8ded-c5eb1c8c4982",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4794e74e-6248-4b91-a21a-ddab0737b5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec241e5-e02c-4caf-a1f9-6b115f45aa51",
        "cursor": {
          "ref": "61c3f7f1-63eb-4591-82c1-1e29ce0cdc39",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "99194612-81cd-4f39-b059-9cfbeb65d556"
        },
        "item": {
          "id": "dec241e5-e02c-4caf-a1f9-6b115f45aa51",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "aec68a68-3fb3-4f26-b3a1-5ede9d0f7922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd00a70-796b-4e97-b211-00804ca7c2de",
        "cursor": {
          "ref": "ac175445-eea2-4e18-9eeb-6acfda7f7746",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "e4584eea-e3d9-4f7b-976c-3e1f69853d3b"
        },
        "item": {
          "id": "ffd00a70-796b-4e97-b211-00804ca7c2de",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "258c99e0-8b2b-4008-806a-0392b8a080d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40a74e8-29f4-4f1f-8f6a-1a814c801a64",
        "cursor": {
          "ref": "f9580697-f44e-4961-b525-b066d14afba9",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "2a351066-b857-42a3-80a4-1f219e29a313"
        },
        "item": {
          "id": "b40a74e8-29f4-4f1f-8f6a-1a814c801a64",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ac755a25-2c64-46f0-b250-a25fa99312b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ea7638-cbb6-449f-8928-8856d216c00f",
        "cursor": {
          "ref": "6a62998c-295c-41b9-bf8b-86e1209f7542",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "d0a1ddcb-1c92-420e-b5ac-ca8c8b3de80a"
        },
        "item": {
          "id": "87ea7638-cbb6-449f-8928-8856d216c00f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0a2d1819-5b7c-4a68-9f81-ec350efd9c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61e89672-0d12-4e22-b82f-f234f0d9300c",
        "cursor": {
          "ref": "cf63bd77-33f0-4a03-bddb-1d8d50998dfc",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "8871d610-b9c4-4e44-b910-a6442e4620bd"
        },
        "item": {
          "id": "61e89672-0d12-4e22-b82f-f234f0d9300c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1f0f963a-bee9-44cf-ac68-f1117c53526f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baaa5026-700a-4792-87a1-76ee455df145",
        "cursor": {
          "ref": "4d142a05-df84-4947-ac85-73a391735e1b",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "fb72c4d1-edcd-4695-8d9a-c9478e4451c0"
        },
        "item": {
          "id": "baaa5026-700a-4792-87a1-76ee455df145",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "19f6b962-a56f-46e8-98c9-e69bb230ee02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b36380-29f8-47da-b39b-c3d619b6402e",
        "cursor": {
          "ref": "878e80ca-959e-4c12-8feb-1e108a7fd08e",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "d57124f3-e0a9-44e9-9d15-f8cb7b9ac928"
        },
        "item": {
          "id": "07b36380-29f8-47da-b39b-c3d619b6402e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0acadce6-384b-4fa2-91e7-9ca66a48b331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf64eb8-3d5a-4e01-b7fc-671e4e02884f",
        "cursor": {
          "ref": "0045689a-1764-4e0a-ab55-c40bb06bce9a",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "5f556dd1-0617-4801-9658-8c5910bd7897"
        },
        "item": {
          "id": "ecf64eb8-3d5a-4e01-b7fc-671e4e02884f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2ec1a28a-86b6-42f9-a177-a999542e0e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc0e23b-4402-4bc9-83d0-7ed4c2f01faa",
        "cursor": {
          "ref": "3a6c72fa-e21d-43a8-8b10-f6b7b14f152a",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "97c8c488-3cc6-4cc5-853f-220328803fd6"
        },
        "item": {
          "id": "4bc0e23b-4402-4bc9-83d0-7ed4c2f01faa",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "574be9ed-c15f-4c65-b245-28d995bb837b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3129331-10b4-4da9-8f5d-1b02ba440060",
        "cursor": {
          "ref": "4b21a898-dd2a-40a9-8479-d0d9e2ba0148",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "1ff6249c-2b7e-4ffb-8c49-d23d6215b15c"
        },
        "item": {
          "id": "e3129331-10b4-4da9-8f5d-1b02ba440060",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b76e9f71-5c7b-45d6-8755-cfbd36d6430c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4cc352-3a92-417a-b58f-7ebe2eb27c6d",
        "cursor": {
          "ref": "bf0631a4-6aee-4c95-845f-5b64bae45be4",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "f6f6656d-7023-45c7-be94-e173bbf71d20"
        },
        "item": {
          "id": "1d4cc352-3a92-417a-b58f-7ebe2eb27c6d",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "adab733b-9ffd-40a5-8dbc-72bb4681bea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d254e86-1702-46a6-a64b-c7a27d77fd8e",
        "cursor": {
          "ref": "16720a17-ee5f-4bd5-aec6-4bc1777d4c6b",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "81b4cf90-8651-45e3-acb3-4cd4c4098725"
        },
        "item": {
          "id": "1d254e86-1702-46a6-a64b-c7a27d77fd8e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "62a938f2-d753-4943-85b5-0f8d54d51bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3606849c-2861-4c82-845a-9d0d05a172f4",
        "cursor": {
          "ref": "0900db4e-4ca2-4c82-a145-3f82fa0978f5",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "5696364e-6b7f-45de-b521-cb59d5f27331"
        },
        "item": {
          "id": "3606849c-2861-4c82-845a-9d0d05a172f4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "3a2bc9e3-56b6-485c-a1c8-d72ac61ff714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dfa56a8-789e-4301-b7fc-21dff4a0ae0e",
        "cursor": {
          "ref": "76c80b86-5e4f-48f5-9c0b-5a4a824e53b7",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "bbbf4986-ff1b-4fb6-a017-5423acaf8ebe"
        },
        "item": {
          "id": "9dfa56a8-789e-4301-b7fc-21dff4a0ae0e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9194420b-e679-4932-9ed8-81486c57e69b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "070f88c8-26c8-467a-9be9-cf1eec24d392",
        "cursor": {
          "ref": "dd1da03b-c3b1-4e66-b698-ce1d71e77e0b",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "6f61520a-469a-463d-b913-94dada2e1c20"
        },
        "item": {
          "id": "070f88c8-26c8-467a-9be9-cf1eec24d392",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "19af1bd5-2a74-41c7-9fc4-3e1ad3fcbe97",
          "status": "OK",
          "code": 200,
          "responseTime": 196,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "46be24f6-b47e-429c-8bc3-7a3b13b6a11c",
        "cursor": {
          "ref": "610a98c2-45e3-4842-ad00-501d93db1a77",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d16768da-9d72-40f7-a733-fa6a662a6467"
        },
        "item": {
          "id": "46be24f6-b47e-429c-8bc3-7a3b13b6a11c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8afb4cf3-6a34-45cb-bc01-f6e737761f51",
          "status": "OK",
          "code": 200,
          "responseTime": 194,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8813bf6-0bfc-43cc-b007-4925793cd7f2",
        "cursor": {
          "ref": "56305922-f0f4-4904-a596-be8a5cfdc15a",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "010edaac-0738-42ed-9df9-0a72b871178a"
        },
        "item": {
          "id": "d8813bf6-0bfc-43cc-b007-4925793cd7f2",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a105c964-cac6-4966-b6aa-c9d55405837c",
          "status": "OK",
          "code": 200,
          "responseTime": 221,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5461291-9b7b-47ee-9d49-433a6db5dbc2",
        "cursor": {
          "ref": "07bb1ca5-bca8-44c1-bb83-ec12761a1406",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "07eee71e-1cbf-4daf-85ce-7fec707e43b9"
        },
        "item": {
          "id": "f5461291-9b7b-47ee-9d49-433a6db5dbc2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1038a9a9-95be-4f0c-85d0-70ea0c1d0e25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5461291-9b7b-47ee-9d49-433a6db5dbc2",
        "cursor": {
          "ref": "07bb1ca5-bca8-44c1-bb83-ec12761a1406",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "07eee71e-1cbf-4daf-85ce-7fec707e43b9"
        },
        "item": {
          "id": "f5461291-9b7b-47ee-9d49-433a6db5dbc2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1038a9a9-95be-4f0c-85d0-70ea0c1d0e25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a83d4a-0e65-4798-997d-169dd3bbef98",
        "cursor": {
          "ref": "9ce8cc6b-9ce6-4fc2-a833-714f7bea057f",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "56fa5968-0be4-44aa-8b02-c471e1b5fa64"
        },
        "item": {
          "id": "f9a83d4a-0e65-4798-997d-169dd3bbef98",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "66a7a73c-619e-4cbf-86a8-5832032909ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf7c509-6a27-4af7-a7d8-65b4a8299e33",
        "cursor": {
          "ref": "31437109-c11c-48eb-867e-214627b7f2ec",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "b3109b7e-df69-4db0-8f67-50f7b7972e52"
        },
        "item": {
          "id": "bbf7c509-6a27-4af7-a7d8-65b4a8299e33",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0403b307-f9b8-45b9-9795-dbe9c39dd6c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}