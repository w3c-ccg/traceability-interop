{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4f6447fe-dab7-4f7e-a6ef-7a1e8f827843",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fc980fbb-a06a-4d99-bec7-ba1f4cdfe2e6",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "665c2d9d-a020-4bff-8c8f-da2b71f859ab",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ec3a2bab-b219-4ab6-8c11-833ea25cb2ba"
                }
              }
            ]
          },
          {
            "id": "283ab5e4-9de2-4f2d-a652-ea29bf0b94f1",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a1b75057-a4a0-42d2-9610-23cd8dee7753",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "41ecc461-2525-4813-9c03-7f9abcd516dd"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0242aae0-492e-49c3-95bb-0f21f14d53ae",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c8e30781-a470-4a22-9571-5c740cce8461",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b72993f3-95cb-4b82-9507-c056258be1dc",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "292ee277-517e-4623-8edf-d8eef90b15d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6244a93c-fc70-4f29-846d-02bcabac0c7d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "55eb7290-8d0d-413b-8904-095bc45a17e5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ad9260eb-2321-4487-8f79-b3f6d6d8879c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a252a7ad-ab08-4727-bf3e-7db1623f7843",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ede93f80-e281-4e37-b9fa-4c9c2d96da69"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9ef3fdab-84ff-4aaf-8f11-e1dd898206ff",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a8b30fa7-a712-4094-9efb-cec883b2a27d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a5c8de2-4f08-42b0-8744-b31a067100cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b1627bb7-d0c9-4ecb-bc84-9eb1f992bd46"
            }
          }
        ]
      },
      {
        "id": "577ea5fc-1c26-43b4-ab83-60cec5d4fc2f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b60319d2-976b-4e02-909a-9b03e6b3f9e1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "29a352f9-61cd-44fc-8b30-8f038f5e67bf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "39cc5d82-c8a6-4ed9-95c8-ede116082eb3",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a684b4-b223-42ad-ab19-94debb28b281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23d8cbb8-912c-4246-92ad-354e608ec827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4fc843-19da-478c-9584-65457f7ad810",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b865bc5e-005a-4c0a-9025-c82f41477bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f0147f4-0662-423e-8b05-68b457b34989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832acdf3-187a-4f4f-9739-24d187ec6a65",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0449dc3e-1ed0-407c-9170-7e6490688f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6950ff9a-27d2-4842-8e78-5b48d78417d9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "48b61c8a-f898-4960-8172-ac5d6b5d6fb0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6e13a895-07f6-463a-a992-f33ff646073a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6361e6a0-705d-4ff6-ba36-fa43c6e15ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "54364ea1-7af3-4769-a1e6-8eb6faa6cbbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed306534-73cb-4775-925f-bf1d325a34be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8208a994-7e98-450d-b8fd-aa3c88f03a2f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e3ebbd79-3cd6-4289-8afb-2b9fe22b0b19",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e6077557-4e77-4a56-a31f-8d0c65b26aa1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "494f1ef6-b212-4ede-9026-829c0eeaadd6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "40b1c144-2052-4a4b-aca9-50ef244d61f2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2fd03ffe-a247-4399-923c-c28a80f5d360",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "cafe4dda-1528-450a-8b52-bdc2d64af9a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8770f4c5-6f63-4a9f-8b15-a1e03f882fd0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b90927ac-9eaa-4d7d-b274-e766d76a2ece"
            }
          }
        ]
      },
      {
        "id": "76c76439-09fd-420c-81d7-1b6441f9531a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "817c061a-dacf-43c5-af10-583f3eaeede8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "99966b6c-89d9-42d0-bdf5-cbca22447fc2",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "79633a8c-787f-4382-91ea-acaee3c2767d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ecc42f3-1281-4113-bd07-b95654e7e1aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "688fe879-f0c9-496c-ab7b-8cd67813e549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44bdf79-0e59-4fba-9d15-4a0a79caa4e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8dc5fef2-64cf-4269-b196-15d7bc506154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25afbd6-fab2-4dac-b845-c23eec268906",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4b633b-14a1-4780-b406-f69ff7578839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce6ebdd-321e-4cb0-82c1-ed94f970f867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777f8b5b-8a95-47ad-ae77-f2326a0316b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17e9f305-c3e2-4fff-8a25-76eb6f3ace73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f259e360-5270-44d5-acfe-4230c3e45268",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95975911-a2b8-4c1c-8af6-9b6b15884e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c9daaf4-cb47-4d1a-97d9-f273f295e08c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80597cb5-47f2-4f19-a61c-937194238594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b962d280-c151-4c78-82c0-4c18bba6983f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17553fd7-f540-4794-92a9-52a8c6f1d53f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "856267c6-decd-4dba-9aee-c7f079d334a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab978283-851b-4277-817a-da94aa972095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d77d0c-5289-40fd-847b-181e3cdecbdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48404781-6f1b-4692-ab24-c830ffeb113a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e09379c-bf5e-4b01-9008-474da2e3773c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de807410-d6ad-46cb-ad5b-6018d9fde33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64251ac7-372b-4887-b372-a9809ee8ca16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593d86f6-ea56-48f4-99e7-cd8180a13c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "788d24d5-8f45-4b8e-848d-d768a760012c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da11a65-aa52-435b-8c8f-88ecc3cb6ee1",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b214cb-2420-4567-97fa-3e6c75d86b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66fe6c85-77bd-4bd5-bea2-ec8930f5f6ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867eb478-119f-4ba1-a529-14cfe638dcf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3bd891ae-1ff3-434d-84b5-e999e19765d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e007e7-34ed-4a98-b2f5-5ed56983d9ee",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22da8861-2c9e-4748-a0b9-ee545c58836e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e85c22e-6395-4d1d-8b66-231bc8c6b128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2a5008-c492-4d56-8810-7971ef802f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c74bf346-832c-4074-a612-d44b8ca5bb8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7918e575-e572-4263-b13d-25b66a925d52",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80695e2c-3275-494e-bb0a-725cee80c427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492f9610-e3f3-4717-b515-1aee8c30d6ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a048d031-ae36-4fa3-89a3-4aa8c6fc82ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33a358b4-ca66-487d-a701-6d14a22fbd19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a5a2ab-eebe-400b-9b2d-a144cdd8b8a4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "163b2629-c308-49e7-843b-cf75f97285d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7036bedd-619e-49b0-b3c8-866a586335c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f371966-e7f4-4adf-b9ec-685ac3611226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "046ac125-541b-4f3f-a2e7-36d57fd6e73c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f47aed2e-fc93-4f6b-863e-86bd19dd7fd5",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05020c6-5f4b-4f66-b118-4a19f2fdad30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "179ea420-3d26-4785-beb1-2966a8fbafe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754ea14c-dd8e-41bd-b116-d355d6b292bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bafa0ed-1421-43c5-8106-610ef65db403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe3d85f-23c0-4598-bd8b-831a281a18e2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce147f47-fbac-4a9b-9685-bb23a2e78067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "276623ee-7db7-4d82-b2f2-d69ff915e818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4e0d1d-0036-4654-9808-7f9ca43a101a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fdc8a13f-aa7b-4b27-81bf-dee4390031c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a182a3f-ed75-4d2d-a168-9ea05d07a426",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1c9365-f78e-4479-a2a5-4aa8607cfce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef9104c1-3d16-4f5c-9252-7ba8bfdb2c19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb37aa2e-214f-460d-b25d-2fcdc20de092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a4865f9-cfae-4366-8e49-417e32ea9f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a77f8c8-320a-4022-bd6b-f84c6c3dbe18",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b4c104f-b620-492c-9d3a-c7ded7696c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12391382-e223-4ad8-b43b-d8ff4576b4a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74eb6bb8-590c-4220-adc6-1e7c81badd98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19c322a3-a796-48f7-897a-b33227d04724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e123f2c4-0646-4b08-af74-f607dd809030",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f98a5f1-06cf-49c7-b2da-8fb976239c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7706bb9a-77f7-40e3-9c28-6cf9129fe15e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c3f5f9-13c8-4604-a2a4-deb35018242a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b08c984-a194-49e5-9a79-5d8cf44024cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3d0c5e7-d4f6-47d7-8b4e-2f2b11d5ad23",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452a6947-b9b6-4c2f-aa91-8b8222cb4885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07475243-6759-46e1-b984-2f3759cc8abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "104ad629-38b6-468b-8d63-46ab3dee61ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5676c6e3-e19f-4f43-9773-a49b70fffc72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b07bf4-5d8e-49e7-840a-3c51c33d2eba",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e54189-938f-428b-9746-782f98f61d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "901fac88-c91d-41b4-a578-b3994891a9f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce0deb9-8f0d-4763-b2fb-afebe41c5e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e9344d5-0ff4-41f6-9d88-fc5594197cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4474177f-f3b7-4777-a42c-863dd41f320f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "931e8534-39a2-4b58-8158-6f27a205a2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fe3bb95-4743-4ad5-94ed-a7e9570b475c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10a23e5-c16f-4ba9-833f-3f8d108a463e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "927316cf-e31b-4011-aa37-077692c9a949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2289b16a-0a8b-4397-815d-0cd4b2338b15",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1efe25-efa7-4873-b395-ad7bf7a03046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b55ffb5b-2fb3-417c-ab71-b02a6f4105db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ea81ac-85e8-40b0-a8bb-55d1d93ae8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "231a8e65-58f3-48e1-8cb4-9e4ea792d1d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7579d322-2d28-4d5e-91ca-a76ad8a188b2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4949e247-c5bc-40f6-88bf-32059045dfe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4e7936b-70f5-439d-b224-9b66a36528f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e309e62b-6256-4ff6-8c23-114bc3e47826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ca5c5fb-a3ce-44fc-9072-24094896f200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b9d1f2-5556-429b-a9ad-6270b723b50f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9167f91c-df04-4e18-a926-88d101ea7084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f916c913-0048-4811-ad3e-0fbcbfe00f42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113013ec-08af-461b-a8a6-c35fb464e4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5153b25-b300-43df-9b56-970699f9213b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3746a9-7db7-4489-92a1-2fd0be76b44e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86108583-5eac-4b25-b116-3e358f0ee204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df612e5-7440-4951-b69a-85cf33775d08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a368b31-e576-4e24-a686-2e1aa0c83426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0730d560-d04a-4787-a335-8a8066b5eb2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f32e9ad-eb5d-4097-acbf-85b063890abc",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aefc391-e56e-4780-a04d-69597534cc83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea6a8b7-39f3-4697-9bc4-fe9b918e9966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350a2197-6f76-400a-b6d9-5c286f6f9448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe02c02b-2f7a-465f-9c57-38092858ad3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16917ce7-6489-4527-8e94-636618c136f7",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3311994d-36d1-479a-93ac-f9a3bd73f077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b51d868-c771-45ea-b6d3-0f2c2407cccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "118be1d1-cf42-47e5-8add-abc641b0366b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0da6e5fe-8889-4bc9-acf5-9f0ffaa09229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0734fb75-5b88-40b7-90ba-5c359b49e6c3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dbc8bd8-3dfe-4cf9-85b9-16768f9934b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b83f66d2-2f5a-4a99-bfa8-8ad7a69a54c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ef4993-c544-4a14-bf63-017abc319cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "23044851-38ba-4726-b6f4-fa504848e448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8c71c3-4092-4782-ac25-37e4a8816a1b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e12852-e002-45f2-afca-89c278fb1a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49ead1c-7fd9-4e7d-9c96-80e61da82a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a7350c-4fbb-44b9-b1d0-abf7bb910acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd0253f2-a5ab-40cb-b75f-36af4d342c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b3502d-e0fc-4f6e-861c-d9db49b99d87",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b74ddb-c005-4be8-868f-e04afc62d7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2930f7ad-d3f7-44f7-bada-0f0310d30195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a41c24b-e715-4495-acd3-b1b48e92354f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0c4879d-27cf-42b5-85a1-a22929651884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8454966-3a4d-45f6-bcc7-1d16b8548807",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f2ffe2-fddf-4e22-b5cb-cc9bf06d65d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b02a01f1-2ee4-4bd6-baf0-d51c11d26562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d099f90-c9d8-4ece-bbc9-89fd801ff909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "788a2bbb-a62a-49da-901b-79bbc1ae9a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972566af-2f57-47d6-90c6-aa0a956f2ad5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd2b0d5-1ea7-4310-8f30-7967f80eb2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95b22327-3df0-439b-a731-c7aac425932e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df665dfd-e782-467c-8265-2575983baa93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "42c864fe-c845-4f68-96bf-278817f9b058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe22422-a11c-4c61-b585-3e03c18e5122",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "174ee3c4-1241-4eb1-afd3-e9a1a3b2af61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38b156d2-91a4-4209-a39c-e0bcb0757322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f4f045-6634-47de-a2c6-f9bc35b5b0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "abb45a00-7d65-4e05-b6e2-c18569e4b44d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a72c6a-f83b-4acc-9896-a8a09a11506f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e244beea-3e56-449a-94e7-fe0cb3e90e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f6c6801-9c60-4c90-968e-07a07e10c00a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ab4f73-4c6c-4159-9286-1ec962d4170f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "feeb2b05-3cda-4716-8462-441fdc8be895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a63c7430-4366-4db9-9c4b-edb1bf110f77",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c205f8d8-edf0-450d-83de-965abd666ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b6e727-db26-4d6c-9ea4-78f3ea869527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96352578-2c63-4b08-827c-585c9c2d983b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "099d60ef-c5cc-4a9c-be7a-98ab6ed480da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81655597-4ccc-4e15-a268-917118d93039",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcfec9ce-10cd-4e6f-ad4c-8ea976c25b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d07a0be8-1ee3-473a-a15a-5320b65adf24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5415031-68bb-4d34-8662-70e51bfaac8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dd19563-1729-4511-be0b-739c290f08a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc9514c3-ca02-4ab4-a50d-046250ef76a0",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a4e0dc-1160-48f4-81bc-522afd85ddad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81bff6bf-0a20-4048-b58e-863e5fa6fb45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66724260-44e3-4b78-8d2b-a8e8d209ad63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5debadf-abcc-4e42-801d-53fadf05553b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8f2d7f-e298-4aba-98a3-4a2fd0ce3e17",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "120ba837-4559-4b7c-8f3f-65ae68d46fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a688592-565b-49ec-9018-8e97c7796897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc195770-398e-4dbb-9b8b-05a4c797e4fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f08d8d5-a0df-43b6-9679-7bcffd7ac3aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9d52e3-7450-44b9-87c4-e151a0abeac2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df7294d-5b68-4d29-b368-cc8440fc7988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10254840-b400-4507-8dbf-0e838c66d25a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc647b4-4ed9-4ac5-8052-ad39f6c5a95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d716f0b0-af24-4250-8a2e-2c7def8f92a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b5e59c-ccda-4e9a-867e-be8d4c793099",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f4906d-435e-40cb-b318-4ae500238227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c8ce763-2840-45d6-a299-a5865127d571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12fca46e-fc45-414c-b484-24690d381b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "259d7d69-d3ca-4623-b604-930301701f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86fb404-e858-45d9-a44c-0ec8f4fc2826",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f8c5ed-3085-4c96-8189-7a3c633c0099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d7c87a6-4a0f-4c8c-a3d4-a4a3131acf68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96dbc8a2-bb7a-435f-a804-43059eb50de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "41927100-237b-43f8-879a-0bd6e27960db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849acaf1-d669-4ee9-b1cc-19bf3ec986e1",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a5d24c-7c42-475c-ab3d-658d5724f746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fc98829-a9c5-4e6a-8ba4-c4c6a8710b5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2c56e1-46f7-404c-8663-2639d926238e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "495ba728-289b-4b10-b00c-2f228a160dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2375c8-d3a5-4d94-83ef-3def0cb041e7",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be14576-8e8f-428d-8d2c-94a360e28429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "433a8415-2ee1-48a2-8c26-37b23a3aa436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a103fb55-d50d-42ce-a692-769b015237e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "edc7c8d4-0527-41af-808d-6caa7bdbb2b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5134462f-11c3-460c-a90e-b92ea089a254",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03db5e3d-7316-4066-8ff5-187f957d6c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb4d86d-bb63-4ffa-a8d0-b515e994f476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13204044-35fd-42ba-b80f-017d678cb34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4673f26-4086-463b-8c9c-545cadae2c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dabdf243-d3cf-4bba-8b36-7c6f1bc0f85f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc962ed-230e-4af1-b501-d6a6baa0e937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83d3fa4b-414f-4f8d-8cf1-ee55fe5d8ed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145e48ac-dbf8-41ec-85fc-0ea228f2d6fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "28a3d9ec-538d-4035-a17f-b9999502c6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de3d595-43f0-4813-9b2f-9b12ed378e2f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10eddc00-78a5-4e4b-b43a-21833ef515fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab8d96b3-5277-4776-ad66-552eed7a03bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df6a017-8a73-477e-b783-7741d0397c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e6b5f5be-bb18-4e8b-ab48-bc3bc5edbbff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4fc205-7642-4c8a-a4ba-b510d4fffd52",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab561c06-4970-4592-91f4-bdcb4d4f9232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba874f24-af5d-48b2-a804-496fa1f82056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba124b36-d6b1-4afb-9219-5726de490372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0888405f-e30b-49cc-b385-5287c1bfce78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08638b99-b055-4b4e-b08e-bb2c5c6ad8d6",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98332ed-dd26-4a68-b1c6-f5ccb59242c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f67cab9-a090-4bf3-9896-9eed7a50a279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d29547c-2382-48cb-b5cb-8eb5e1316a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "36ca3264-d232-47cf-9b9f-9a4578796235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5b664f-380a-4053-b422-e6f0c288d656",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ab74b4-cdec-4305-87d9-c5bceea87eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20207749-0baa-43db-9c5f-7ce89bbcd847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5fafeec-3401-4586-81e2-97384f12459e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f9c0aec-1e45-4c17-8202-18e010a2e95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0755675f-7727-4eb8-b21d-9e66c14eafe9",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "119e6e46-730e-4d94-b21c-f7287af00800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fdf232d-6c40-4843-88ad-94a0ac996d69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b92935-2e8f-473a-9d9e-ee767539343f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "683bdfac-ed7d-442b-9def-1e1641c2d5a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f83b41-c311-4c4b-9146-9b734fa9a9d2",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f42518b-bf4f-4d36-8c98-aa2278dc0c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bcf6dfc-7637-4274-bba9-619f6ad1f771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02bb41b-8f16-4fd2-845d-dda42a653cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a532c90-00ba-4e7e-94c2-34cccd8557dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a49b83c-6018-49a1-a472-b904813ea68d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019f833c-a722-410c-9f84-d0a94ae299ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "026126e2-3269-455b-a091-dab538baa231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dadf23f6-cf1b-491c-8195-1734fee5e5a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53f3d457-89b5-4dcc-a464-f2171d277124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76901718-0108-4cb6-b7c9-41dae3da41b8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2172c64-65d1-4d7e-a3ed-89597291bbe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd6b9528-99ca-4482-a6a8-0545d790f902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "579d838d-8849-45f7-9a3a-2cf698f1b36d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1dff89c-2646-48f5-8596-a4f1cf9acdc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fefabb4-ffab-48e6-8ce2-6a0e306da38f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15804337-b886-4fdb-b21b-97ac6fa8d19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73307882-18ab-4f16-86ef-0746e4a3db40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3777f0-4e5b-4186-bd75-517464cd4106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "67222877-4637-4ecf-abc6-1453887c4af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79dd209-2092-432b-8817-2d475cd57bc9",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6463b5a-6629-447d-8c0f-dc01566a92fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a405e369-7795-488b-a585-5ec074428b37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b72b836a-dfa1-4211-b403-865ea57c7a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "961a27e1-d7c6-419b-b1d6-8ffe33933688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02c598e-60e5-4d9e-aa5b-828c8fcba67a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2890346a-6dbc-43b3-808f-4092429c21f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85b22641-f7e9-4080-a43d-2459d91b2358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca5b04e-abd8-43b7-a9b1-337f0b3ded90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e41e17a-d778-4311-96e4-1c4ef017e8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff4d2f7-9c5e-4f3e-b4fb-10578ed083af",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c53d141-6b8b-4138-8a03-4b6444c5543c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "116edfe2-144d-4a77-bb9d-28a1e5a347cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5845ec-e909-4214-9cb2-befe1f085094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "39089812-67f3-439e-be82-209150b70998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08bf1d7a-6845-4250-bd6a-f421e52f9472",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cafbecb-52a0-4f71-99a0-402980242aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45fbc9e6-65e9-4c9f-9af9-59ccc61890c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e21cf4-2992-4204-9f13-924722a4da1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "333da05f-83ab-4ec4-8bca-600b6ef0db51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2a60d3-b0aa-4f3f-83cb-cc8384abb0e7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40821012-704e-4fc7-9471-8479110ec454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b46be28e-aa98-4814-8080-d1341d6937a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c095b1d-e4f2-4d0c-906e-a15c2b86eaae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "329e04d9-39a1-4cef-a455-d907470de3b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61960047-3dbe-4103-8fab-3663f4d59044",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4cda77-1733-4774-b707-0ef718f9fe69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d53bf315-5b61-434f-8a7d-9259bd6f171e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ebad4f1-1250-4ffe-a5c3-5ce5901111d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b4308e71-562f-4595-9275-b2be989a4e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2fe6c8-73ce-4688-8e51-b3cd34ba75df",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98cba159-7418-42a2-a8eb-1cf59f2a4532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78fedb1c-25ea-4c68-b0a1-3bc0644c9235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00303bae-bf1c-40f0-b4be-1c1dd36c90aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "55069511-443e-4d68-8dcf-e51ac1d8dde7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365dac38-aeb8-4201-b63f-8db9504ea1ba",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42efec2c-04fa-46dd-ad77-2a2aa325cd73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c926db14-6faf-4ed6-b661-b78a5fcfdc92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db11ea5b-b8a0-4ff0-86b6-8fef7ba5810b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc89e48a-7ca6-462b-91a0-9307c742f90f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bfd476b-8a6c-4087-9bc1-110e96e4adc6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a9b1c4-53a8-440a-bba5-9871515c058e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6e66b8c-d48d-4f13-a30f-22206cd7fd43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b8987c-34ec-4088-ba83-3c90ca124394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3d3d908-deb8-44e3-b01f-791aad4d1b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84c59f6f-330a-4bde-8889-9d3a694e5c97",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e591a8-9e4a-414a-8092-38c297ce5226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e25c134-e2ed-49de-871b-d6a890ed986e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ea7829-4e1b-460a-84a5-0756b96b9e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "be2bc50a-94b0-4b42-bf3c-cb30f762423a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5560ead-4526-41cb-a804-2f0efa929594",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1097df19-9f41-4f18-9934-33a2c7cac8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfd83801-f2ff-4a75-bd25-9fa95db7f442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cff365-f798-40d2-81f8-80c9cf19205b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "95eb8eac-76fa-4ae6-bf9b-eade5c7c5dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39097e15-ba77-4025-84ea-b30878b87b30",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2844efff-0c67-45d6-a5fa-cf64537e6f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "becef2a5-3e61-4f07-a260-f33cf37c2418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac012e7-c1a3-46f5-b5a6-6a46755a8efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd17398b-924c-4b52-9c3e-c23ddd15452e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0588aa6-41d2-4a5f-b95f-5f25801e4966",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f3eab7-008a-4d61-96c5-1b188a087e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e1a2f00-7440-4db4-936e-56c6250e7352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88dc85f1-ce92-4a84-b48d-cab09d944eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2e17f06-cca6-49b8-be2d-85e4d9f95d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8816b7c1-ba0a-491f-8ffe-3e37a54b1faf",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0912ed44-7c6b-4902-95d3-e58a9bd6d16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b27b6a2-3efe-4c31-b686-6cc1420d6c4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cadcf05d-5f7a-45ee-81af-a152e60b00f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ba3148a-6d2f-43b6-a5ee-0870b73954df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f407fe6a-daec-40eb-9aab-e0e8d7e5bae7",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba1609d-de01-46e7-a018-ec40a4e5a5bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc47b3ef-0434-4fb2-b50b-ab4343a28574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82fdf925-47fb-4343-88b1-de38dc7bf8be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "84abb89e-a467-4637-9787-b5806b99cf49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ec78bc-bc49-4c87-9a69-686e04216974",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efecedc7-44a7-48f4-b9cc-f32bce1f44f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c23e84a-3192-4a31-ae5c-068758090fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a4f1f4-f17e-4c6c-a9ba-a3c53aaa498f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3094d6d-f1b3-4067-ada2-f8b6e20f5d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "635d3b3c-cd7c-4c61-b1e0-bfb46a597c28",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0df52a-4f17-4286-97cb-a271dc2e3873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b5ba7a-4d09-44ba-a032-69be2e847a5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69971834-db87-4898-9971-ccfff3eb0bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f0cac3d4-818a-4e72-acd1-054667c637e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef89710c-1663-4bcc-8f08-3308fe12e423",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "953bca73-f7c9-4160-8e9e-44d15dc5d64f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5dd84d5-6954-494c-8aea-9c6d46123ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "601a528d-d526-423e-906f-1fa923f1e098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a747401-aa31-4482-ad0c-6fe7a414b19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c55e53c-b5a3-4b52-abe2-be48764a8969",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f601e27b-e6ff-4186-a8e0-96a0f911fa50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd11fe73-8d23-43f0-b044-4270cd6e54de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c49e7f-1c5b-4d3f-8c2a-3320adc61500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "edc37b52-f35d-4fc4-85fb-58047a6d932d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ad2fcd-4d72-424a-b1dd-ea7aab11fec1",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3cccb01-c227-4872-9cda-fef932870896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc68110-36cc-4bfd-af4f-2749c1d1405f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d170d93c-7455-42b3-b638-c323e7044c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f4fb4fd-97f9-4ab2-b761-5099eb45d03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25755bb6-9aee-43dc-a182-2afcc7f7147e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9ea028-d27f-4106-8bf7-9ca588146086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab10c0f-45af-498b-9411-6285ba832448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a668f6-474f-4a16-b949-bb0cc2a85a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "db669d2a-5859-47dd-a8b4-14623165510b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90943a0e-204f-47e4-9c28-2e37adb3a785",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15009eb5-5aec-4840-9b3a-eccbddedae1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c61a2b27-87f3-4613-a2f4-129d746ec5a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e67b69-a7e0-43cd-92ab-541070cf02c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "62df8b9e-441a-43ca-8f69-ffb0a6ee8f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37215c85-3ec4-4e2c-9d21-745591e197e4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7261e9dc-f8f6-4d21-8176-4d338ea4749b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a593ff4b-f311-4fe1-bce7-5d481950efcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02e0a3c-29d9-4b08-9462-84064ba1912c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "253639ff-3b4c-46f1-9224-630d48cb366a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "211e2f51-ae12-41b1-be2b-bca38f145ca9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "064c901c-7228-4719-92c9-423f4f2a1a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "372bcd5d-e9f5-40ad-8a30-6919a85c40a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8af1cc-4f9e-4e30-8766-9533dcfa1160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "db5c979e-4ab6-4ba7-8917-f0f8c62933fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941eb35d-ac7c-440c-835f-044270cbf299",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a1e639-5da9-4d03-a2ba-63472ce65e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "900d0221-54ce-4b98-8143-fb8c3ada3bb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3765c44c-d010-43f6-bafc-0e3e73172655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce706579-09a6-45d3-9667-c5c7a0895a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3899fc48-54ad-4e9b-97c0-1b1ed71d77cb",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "788b9e82-de8d-4525-85a5-a9e0243674fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff1cc066-252b-4866-b792-fdbcec6b1b9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94416168-45aa-42b7-85e5-dd5cfe7df68d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b75a792f-1adf-4a5d-a8a2-2684b983de2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891cf289-44a1-4ae0-8bad-c09728fbe0f4",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a0a161-01ab-406d-a0a1-4ad4ff30d714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea37dd39-f199-4650-bf83-a73e11bdb7a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ddb7c5-8fa6-4c10-8568-f0a3d9d30eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "192cb5a8-636e-4a4e-ae04-b78ad6361884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452c8e21-6b73-4fa5-9bcd-69df672e2b07",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1b3f24-e0de-4dcc-bf83-a3e94727bae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7913b388-2d0e-4dd4-9981-e9b624c26cd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e5bfa2a-8d6b-45d2-928a-23328b2513a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4518f01e-f927-488b-a157-410c9edef7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c16bc4-7d7a-4d75-bcdf-573317df9133",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "217dc958-a4c7-4849-a6a9-0ab542305e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61270753-ef0b-43b5-b118-ce74a66e31d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f24cece7-89c9-42a8-a6d1-f21f16aae644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c23b0a19-af8a-45d4-8626-26bfa46aac3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303b1ec3-0673-43c7-852f-cfb757e2d82d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "232e2b3f-cfbd-4a6f-bb8c-107ec2569c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7863100d-e945-4f20-ada7-359d062391b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbdbf028-8ed7-4554-926c-209621cbafb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "97473999-78b3-4ed5-b594-be0856552126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a937b9-3ff5-45c2-b710-24a677323487",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0e9758-c9a4-45bb-b071-ada8fe8896d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d27d8e72-f19c-4f61-abce-c1f6b3fa9bfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d7b0a2-ea2b-4b4d-86c5-f29930d65e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1284bd48-8833-44d9-a127-8d7601366590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a63475ef-45c1-4334-9b5c-48903684f595",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8538ce08-17f2-4cfc-8c93-5a3db2a54213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be70da5-a8d0-4a44-897b-51e37c2ec1af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d1ec88-806e-4646-953c-ee75a7854816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "51b34105-cffe-4ec3-9cf2-bab7f3cc09d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c96d69b-a00d-49f8-a9a8-ab7dc20b0107",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "788035ca-ae36-49a4-af64-d7b3fe647170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fc53d7b-70b3-4762-a550-eef66e873b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45290222-9105-4c40-b188-6c47a89b6ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "085effd4-37eb-4f82-8687-2db7251b0f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4a4283-4af8-4ab0-83e9-89c98432d940",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced1b081-41c2-417b-950b-10b2f0da9818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d8e1d6e-8e31-4367-94b1-3ee8ca920eb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d280bdf7-5bbc-46c1-9c99-ba4310547956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "28533474-7355-40a6-9bef-a734eaeac7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a92f72-4107-45fb-b291-1027eb7cbb0a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327c70a6-343c-4110-b6da-05821d4a7003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57bb1472-5bf7-497e-9284-ac8fb4b4def5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5886166-c9b1-446e-a095-20fe7e0cd3ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "132dc84e-9a3d-449c-8de0-159b4b81f114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f33e67-7308-4747-b5e2-b8e86b3eaa19",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e2c2e6-e05e-4cc1-8646-5e28228b671f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcab07a7-dfee-427d-9bac-6f2d11b0571e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e2a6571-77da-4383-be2a-ba85ed8ac4b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d4fc3ed-c014-4f50-96e3-4288c33311b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccfb99ca-d3ff-447f-ab0a-5dbc372d9de7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec21a842-e97a-4186-a748-b064edc431e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eae35209-546d-4eb5-aa23-1b8eb43c8015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc88faf-c1ea-4cd0-a22c-e98db95457a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae08cdf0-e938-497e-aa9c-fae61447630c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60ea2d4-ea9e-417d-a56d-259ecfabaa3c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69895591-efbf-4270-af4a-31a53661c7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc7fbe73-dcdd-4cca-852d-7c602275580a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a1ae077-ef87-4433-bdbe-dd8114bac53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3cda1110-76f6-491b-a681-9859d44ef2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d2fa84-3c44-42ab-87b6-28ba5bea934a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6268b01d-a8b2-4412-9193-1872257f0252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f097cd1-8c6d-440c-987e-158e082265c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4733d02-ae84-44b3-856a-d1cc31544856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b31ec9f-33be-4eb1-9228-1c5f2c53b22f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ef2516-7ab4-4cb7-930a-936e8bdd4548",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7838214-b7c4-470d-ac03-f9f8d21414f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a02c68dd-8ab5-4dd9-b634-42923e27d626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d86c9d-41fd-4916-baca-036314765de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ec02d94-6fe1-4890-9fbb-1b73add9f6ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd19eca-75d5-4dc0-ad4a-72d0e4464655",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c29d40-1da9-4f94-95c9-498e42a62b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01227ec2-ab83-4de5-9f07-6ab54014bafc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c44ac5-af58-456c-907d-6f7c6a9eeb96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "78d148eb-c5a4-4950-aebc-d20073ffc40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf01227-58a7-4854-a732-64bc68c3888e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17a319a-ec16-482e-b01a-20a77d51d6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "68f6c709-0bbe-4cbf-9d2a-88898b664746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b98f475-612a-4e14-9355-ba9d58392811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4445320-98eb-432e-929b-c39752d88308"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c7ff777d-31f1-4540-a5c5-e4efc96be761",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "784de2c9-c78b-486b-9632-b7a24bf2c96c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5256c0-ca1a-4acf-aa77-036259b49e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a68616c5-4e42-4f0f-ad5d-e94256d2794a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae88fe3b-28df-4269-8ce1-4a3e04560006",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c95c6421-6a84-4677-b722-946a65df65bb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dcf9a7e6-1c18-4598-adb9-e8b40a6a0687",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b0783ef-4948-4c03-bd72-0dda489ce333"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "987ff980-88b3-42e6-98f7-14a724394691",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1defbd7a-943a-4c07-b7f5-d9b97c66b87c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "647da7b1-3e39-4ae9-ad68-fddf7679901a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "92f3b0b1-6838-42b3-98e4-b9ec891b31c3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4e7b8588-6202-4777-b1fc-87410291782a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8dffd547-4ce4-49cd-9a69-1a42c68a0b00"
                }
              }
            ]
          },
          {
            "id": "100c7e6c-0f1c-447a-9297-50dd267f54be",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6c5d3ae9-a4df-42c6-a39a-62e2facc4215",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9fe748bb-fe5e-4875-bd02-db49db43614c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8c0deffd-827a-4635-8baa-23fc7c2e374c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "61d3b8ec-9cc8-4223-acfd-5890c776fb3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6a12ea30-3291-4e19-91ee-e5a8f0d1c16f"
                    }
                  }
                ]
              },
              {
                "id": "1203e56f-533a-4542-a61e-e3b3cc60d109",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c737b85-2f60-41da-9431-2f261e30bf7f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e2bd341-d5d3-41fe-b061-417cc1c635fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38b8546f-b80e-49ef-8dab-b6f640d27aca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bf8f698a-1584-4d6f-b3b0-975e2b26db93"
                    }
                  }
                ]
              },
              {
                "id": "0b17d9e0-2c78-401e-b616-f5f6f2ad8e58",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5355436-7174-4478-852a-91f8eda5605c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "152e50ae-fabd-46e5-9359-1faa6a5ea809"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58089bc5-96ef-4ead-9eb4-8cc1aa371590",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2b261b0f-a306-45c0-9459-a87ea71be561"
                    }
                  }
                ]
              },
              {
                "id": "bb08ce92-f886-4f4b-9886-669ae7dcf4b2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a8d98b4-1370-4cc3-a10c-dbab3164d76e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "abe0bf0a-bc5e-43d1-a06c-fcf05985f40a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e377ef41-1165-4868-989c-bea409585fd7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2746d344-3d1e-4316-8b4a-2b9d14dc2b52"
                    }
                  }
                ]
              },
              {
                "id": "d9a05c90-f8df-461b-abde-752bceeb7659",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c639a3bd-c75e-42e3-ae7b-9c78a98487d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3d37eb06-7618-4572-80ff-f4adeefe7a9b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15247bb6-5c00-4859-8b4c-b0bf54ff3763",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "816ed514-8f3d-4094-b075-8872291a4247"
                    }
                  }
                ]
              },
              {
                "id": "21f5f181-fda1-44d2-9ad8-e1ccbd44a68f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e821681e-9d74-4ad2-bf97-bdbcc2bf34c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "68bc1d05-8dff-420f-8ed1-f998ec664bb6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f2b4f2d-21b3-4cbd-bde1-bf9648164931",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3256ee81-93ea-4255-8425-79226918c624"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ea323a3d-4486-49ec-a221-1a508f1d7923",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ba9ecf43-c44a-4e91-86de-f92dbc56d9e9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3f019aab-3286-4104-be7f-7b1ffd1d6dc5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "de187d42-1c0b-43d3-8e25-7d217c93b042"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7eecdbb8-9191-4b47-ab3f-3f0487127291",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "cf004d08-a8c8-4155-811d-cf11d26d91af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33e535d9-611c-4ab0-a9b7-de66f3e5aea0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7a5d1670-2b08-4563-ab0e-c98667a44dd8"
            }
          }
        ]
      },
      {
        "id": "a2cf4e53-4652-476c-aa4c-99ea15b11b67",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "02187152-165d-4f75-b2b0-156e1b0a440a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d9bc7a1e-5caa-46d9-8acd-09a96832c3b3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7f4bff29-c7da-4426-b83f-e1d66cf77247",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1e654d-c410-4493-a236-78a46f8bd42f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ad62396-0f2c-4225-bf7d-74e02c9b91e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e75d7b4-d689-4dc3-9bda-c59b769f932a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "76981e9e-4c11-460c-b9de-791e60363616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0efa4b9f-f57a-4750-934f-a962e88e2cb5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58bf84c9-a2c4-43f6-a3de-78c80b636144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6817431b-f65c-4bcb-96b8-8e1c1adb9f62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0960674-4fa5-4520-b6ac-5b050b02b443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "215c39fd-ec86-4455-bfed-064adf00a509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56cdee2-262c-493a-9dfd-184993a2e239",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e497227-91e1-4307-83d4-c6c0e53e9f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ad7f110-e76a-4af7-b493-6fa67e9ddbac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc91db6d-428b-448d-a514-61b96ac96c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3048202b-dcff-4104-9157-6f5ef447f272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed20ab4c-6421-4fa9-b621-8b7afc44f451",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2a4fc6-2a63-40f4-b79d-e7578d62f6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0109a80f-720f-460a-82d7-7f1fef96e299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d845df-4f6a-4562-8c9a-7a13ef0f304b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "14177ee9-9912-44c8-8f3a-9906f7dacdef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "635d855a-9f64-45d3-bc97-b6a82dd1cf50",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380a96a2-9c84-4cbc-9b62-85f0ce1c157a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdac10fe-0ebe-4924-ab82-97795cd81636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed89432-c2b2-4068-9900-a01518c68582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8e342be-45bc-4aa3-93cc-f19f61164ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5750a610-3d69-4114-9527-9213f3493a4a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e37bfc1-db25-4070-8cbd-72929b960afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e2d5d34-2dd6-49fb-9003-7a1a61d469e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7edb80cb-0bf8-4873-86a9-5b35dd929195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8aafa6a-9603-425a-b26e-2c52b234104a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "823dbb11-dc23-489a-8145-fcdba15b7121",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10edf91-7c12-4fe3-a1b6-fc7d4bcdf08d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00083e15-83d8-46cd-8a7f-a4d1e00e7952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1247302d-5a20-4de3-84d0-0103a8c8a6fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "05cf19ba-a550-436b-9173-28356d21567d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77230303-4725-4d7d-b593-b6d701f45653",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef579f2-53b9-4b0b-bac9-184974861829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5441b88-3081-4ac8-939b-f25f1d5b5e53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628ae2ff-fd70-48dc-b517-11b33d6ab34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "015c72e0-455d-462a-9f8a-16b2eebdc913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69dc67f-b4b3-4464-9e1c-d0c162ffb651",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b6cf07-ae6f-480f-aaab-7b276fe66799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf37fb4-e7e9-49f8-b2f0-ce7e302f7058"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "287465bd-a78a-4b81-abdc-31fcd2246ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "88ff3ac7-d9c9-4ce7-bd73-f705f74c30b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9cd25f-b715-4272-af2a-bc6a509d57a5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4babb1-f7d0-4c0f-a2bb-927e8b366f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "444c3fac-466c-49c0-a66a-4732a50a9137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847bb26c-aecb-4f9e-8518-67996ac07ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07273fe0-74d4-498b-9b46-39f9bd025e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a8bf2a-de13-485e-8acf-5b424e168f8a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a72cb5-de9d-4de7-b876-7cb28a0f2513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baa05518-759c-4727-adfa-772880dfa4d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40fe543c-2ce5-4c8b-ba79-d16b81d2d79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a056812b-43e1-4867-8220-f46f046b7e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117f973c-11ca-4afb-9625-12f1999396f9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44bb3eb4-36b2-4b91-ae88-8da4a84927bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "661a3c51-bbe3-41ce-b621-1a0736e2d369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e9b5d7-99be-4968-a9bf-e356335eb6be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "023d6690-a860-4fe8-9f47-1078b656223b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6285a0-3dce-465a-b991-df34885cf95c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52940df-297d-484f-a34e-4e149c51dbab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5c882df-da3f-4e52-a6a8-59c670091041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fcdbc51-117a-4aaf-b805-f91454b68473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fe9947f-aa8a-4fbd-a002-a871f19d201a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4520238-746f-48d2-9a1a-401424acd276",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2357fd5f-e429-4bde-80b8-786e0f9a58ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57201275-afc0-4510-89a6-3bfde526742f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ef9854-fc8d-4c9c-a345-ee5db2963d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8690c73-aa42-4263-b66e-ca4d17e9f739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02937fe6-cbd5-4a96-b52b-bdfc5836eb6c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a58f1ca-57d9-464a-9604-7acf0d57c6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e119067-4524-4fd7-80a4-6011517c39e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc165bf-6a2f-45b4-a457-d651d7e499af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "afde7078-8d23-4948-b0c8-0694139459e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acbb5f01-cbd2-4e65-8658-8ddc6735e581",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "545de08b-d9d1-4593-8c04-3ff62e331743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f394402-310c-425e-8e45-875700ad89ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c22a3a2-b3bb-41c2-9780-512b7d66f15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcbedd1e-bf58-442a-bbf6-2f55e7f720e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7e2c5c-9cab-4afe-a260-175309230741",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf6390b-a854-405d-96ff-c123a339dfb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ac7a24b-0c95-443b-9d6d-3a3534ab9b95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781c9bb1-ab0d-47a8-8d76-45c33b4dec21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee5b09c5-0052-45fd-a4b0-8d1c6122da06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75218819-5424-4d02-b1da-b52de052f31b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc4ab62-6700-426d-a106-9d025444b537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b63dc7-f2b1-4e08-afa4-55612462b6be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b95b39-3827-4877-b273-1f85909a9de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ed4b781-2dbe-4063-9cc6-010113fb9804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17701126-8158-4dbb-a12a-24373f7a2d91",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83bd616e-7213-4809-ae4a-a8146bb22f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c55d6bf-c9e7-4123-a0d6-45aed0433ccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3e73be-9d00-4ff7-8808-89e7fd999b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ed10b6f-1664-4682-a4b1-802b80209abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f2b1eed-7f00-4585-b586-3c352a504c1a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b252eb-8ed3-4e86-b341-d39ee0ad07fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c03996a2-4c28-4053-ad6a-4dbc396c9b3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa97fc9-2735-4a50-b305-dfdebafcf661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71a9eb78-5b99-48c4-9a9c-ec893d387633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14afb7db-4597-4242-bc97-f1269cbf50cb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca014592-c74e-45c8-afdf-5e878a66649f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3450ed50-d47c-4850-a4f3-9efec7b05a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edfd3169-ad73-48dc-9cd3-e365581d34ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc80c006-14c6-45c3-932d-b5f39d6efc3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9adf81ed-84fa-409a-bfa6-a4827b8c2227",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc042f4-6891-409b-b8c7-b18b8ecfc460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3be965e8-41b2-47fd-8f53-0a27de5462ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd86d7e2-bb9c-444c-a8f2-c70fee591e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5499212-e298-428a-bbfd-cb2c8826c1d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e37626-a9f0-48a1-83c0-ed516cd45171",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d353caeb-f4f0-4912-a889-82134c2bc172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a03f47d2-dc22-4648-a389-1628119817dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5662298a-ca6f-459c-916a-277351af0915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88fb931f-b2a9-465c-ab60-71900631c8a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af1d818-3964-499f-adf3-a59bea1ca536",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d900bd1-99e2-4b46-90c2-0b5e50d72856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2203031f-eb8c-4f82-bf19-7a92b8372e4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbaae440-3604-4f11-8c9c-b8a8e264f692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e698edfa-24d3-4235-8cb7-ae1099702c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce99689-ffd3-48d5-a9d0-2a7be75da635",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "253160d5-06a1-42d9-9278-1f33c6c9d80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fdebdbd-cbb6-448c-b351-10121a4edf70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c97140-a6d7-49d6-b018-ab4be22206a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1edaf61a-eb9c-4d96-9c63-34f056119199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6592a5-9a0b-4b4d-8084-9712a41518a5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e45423-0c11-4ada-b6ff-ff7509e9a4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30927cd6-d73e-413d-84e0-b45cbe7a9758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9125a8ee-7499-4c3d-a991-8be535ffc9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fe51d01-7ec6-4c26-bb49-3dca4d061c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ee62a63-da72-4b06-b688-7f69475bbe84",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd76df6-3bf7-458f-aadd-cb31e2a5306a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "834dea4c-6ea0-42ec-9314-65be176664ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3da4a56-cf92-4396-a57b-d02ce31061e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b853cfc6-ffbc-418b-9292-b641aa35b9c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b5cde0-d897-484d-a3af-c274dd840b09",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a1ae71-9e4f-4412-bb16-c953a4f7b563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54b50676-5d51-4711-af82-267132db0b9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed398b30-683f-4bc9-bbee-472bbce79d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67126271-f06c-4507-9805-28d81df8f9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6684e73-4119-4c93-b327-52a16e5dfefa",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f3c726-db2f-44ce-afbe-11053439db5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1027fcf3-20f0-48e2-87ad-99c2882d2947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c9ab51-4dd3-4af8-8f03-99a142151666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19065129-fafb-4b9b-9623-700f883834da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c7b6450-c69b-4eb5-a194-82e233bc2ecd",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecdf70b4-d894-4fc6-9c0b-f6a55d9c4c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2d63436-ec8d-4a42-8218-43e372818e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d1562c-8577-45de-a941-41299d2a693d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94afc206-3825-417a-8497-5e463dca5790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0647e113-3d46-4e2a-a1b5-2d7a3c4381d6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dbca548-a7c2-429f-a985-d5af7462b8f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc24f921-55df-41a2-899a-3ae7147745b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed24f54e-a05c-46b3-82ae-2e31e2a49191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab73ce0a-3e8d-4a42-9b93-8f144c34a928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae4b4623-c90c-4d6e-ba57-c6aa61360ddc",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5446cb0-8335-4021-aaf6-4df909279573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "334de77d-ffc5-4368-8663-2040303ba987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe827627-74be-4df8-b664-574b24266eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da6494ad-a17a-4f98-8154-56390ed0fd4a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "089b3084-2c43-4395-bdf3-7752038330a8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f52a6fa5-02d7-413c-af50-dd5a1640cd31",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8f522d-6c75-4e96-b8fa-7c32a20feca7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2b47f0a5-6212-4020-9885-9dfd2a4dd771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2924766-fc05-4cb7-9701-97ca169023be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3cfe2533-af3f-4f65-972e-8abd58b92cc9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f16b1b14-be3e-4ade-bf04-53392dd2140d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9dd02c0-60ef-4bb7-9709-6afc7b7a917f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "81c3d0fb-0352-4bbc-905b-55a4248a1214",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18659737-adc2-4d6c-a999-6b083e53934e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c9cca1e-69b7-4725-a151-5852d532648d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "edd3726c-0ce9-485a-afb0-42898d8f4f58"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "94e95550-fd4c-4b91-ada7-cdad31a2d40c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "530b1d8f-d1aa-4573-8933-06025b713c46"
            }
          }
        ]
      },
      {
        "id": "d645bb16-a0a7-4984-b815-818b0ab22f4d",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "80584093-7daa-4280-af04-bd4f415493ed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "04b6647f-42d5-47b1-b9a9-6a6bac811ae8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bef4bb96-9835-4012-81ca-a3d42049488b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ca79cc-e6b7-426c-bfcb-33922a038158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e98288d-fd37-4e7a-ba61-31b58a60e7a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "064483b7-cd78-4c3c-96f7-88cbaa5ff921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ef9b35a-0034-4011-bc75-900c4956c91d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4719bb4-e814-4fee-9b54-458bf1299fbc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a1ee1a-c560-4177-ab19-10f6bca3a4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ba4a089-58ba-4d32-9aa9-7b2a0fffae58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1818c3f1-f35f-40c3-b26a-3cda78b23c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9461b682-0a4a-41fc-878e-aa5095aaf067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1bae05e-bb0f-48eb-a7da-0809fed034cb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8296100-7cf8-47a0-b40a-6edb5c1ccbb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1fa83f9-a166-4680-99bc-101a55d4439a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f8c427-4e8e-42db-b8a7-065a032c011e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2855ff71-fcf2-406f-9c68-0641ed707ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6693e50-6ede-44c5-9c7e-028ffe8973d6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c7748b-1f37-40d4-a37d-19896ff80bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d757b80e-0764-47f4-9f55-f88f89c244e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74226256-d4cb-4a54-87e9-b032d36315b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f62986e-69a3-449e-9c6a-d1daca56dde4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f28db4b2-83d3-4269-91e0-d9c6396ebb9b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d96127-6411-4789-b03c-0480b2ae22c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "969ce317-4a84-4f3d-aca2-68e95c238a76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2387c5e0-260e-479b-8f53-52284fe9e4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "752b4d7b-72b2-4324-853a-16c1416fe285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01a3118-e4c7-4cad-96e3-c6b82690aafd",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99089010-7e65-428d-88df-302f411cf8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4470cc6-858a-460b-98bf-0d045a961848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae528ee-56fc-40ba-8434-ff58bcecb043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "362bc33f-bc85-42ea-ae62-e71b53dffe48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d8d83a-4d1d-4de1-af4b-6be2a8bacc58",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce31b25-6616-4370-bfbf-b1fdd3667978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1e5053b-097d-4b84-8c46-4225ce3121fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49568060-0c31-4652-9822-8260274d6fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f7e2ab-9f2c-4012-90d3-b69f4001e5b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3eb4cc-ebbb-4a82-a2a2-ab38d324ac1d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96710de-38f8-46e9-ac57-4189e16e1149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1ce1065-77e4-4386-baa6-6fe118c0cce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90686db-da02-46b4-ac47-f29b008c4da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98774ade-a8b5-4ecd-aff2-c69d70614ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32fcf08-95e2-4436-9a2a-0a5ba7dd8727",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ebdf30b-6c8d-47ba-9468-1c224178a920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74c35220-be0b-4572-abfc-04d71b79cc58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de104c84-93ef-439d-ba37-b2664e8fe733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "797db5f9-4574-4888-ae91-bda6349bb71a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b27d438-6964-4f9c-b25b-213f6d5115ad",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c87294f-4d28-47ef-b1bc-91c255add9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a15dbad1-e2ad-40df-8ba4-bf2cce906f09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38eb5f59-6fb6-40f7-ad64-ee5021806e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "342e4a47-515c-4fd1-b9d0-995991593ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913b9f54-6dee-49f5-837f-cd7faeb7d144",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d92f59ac-48bc-4ba8-9bbd-0d170e30ca0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b46265ae-1dbe-4b76-a82e-4bc0d2260cd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b861749b-0d62-4f05-b5a1-cf652b6fca3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "efb34a57-18fd-4ee4-83d7-891a8a43a1ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e1c59f-73b7-416d-902a-721dd5148ebb",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7793ad73-b9f3-4b20-819e-8c4b5697f985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02e76b93-4be3-402f-9540-bf6e71c2591e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e9996b3-4281-4712-9368-4ab0d6b97250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "784cc370-31ef-4b24-a35d-1e23175d8fb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c4abc2-e217-4383-9e42-97a0f1784c2c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3885041e-27d0-474c-81b7-16eb23328ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c523d18f-2c92-4a99-adb7-2b51f344898d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a42af571-abdb-48f7-9529-dda6ce63e10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "100ea462-e2ec-4266-8414-b805be7729ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e97eae-dde4-4cea-b6f8-f74e21f26949",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f480a2e0-7295-4e5b-b1c2-af10b8e38bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62fcd5aa-671c-45e6-b3ce-2a9ef9c3747b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4513934-e30e-4818-ac77-cc13f746262b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c362e168-9a73-4889-9cb4-620c6fda633e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4173dc5e-8bd1-4abf-96fa-b2c5a13a6609",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8967250-298c-40d8-bd64-9c70a208c443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da62b195-f25e-4ff9-8da2-1aa935527ebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48709dfc-3380-404b-9255-e8d3d4af17f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f748d1a-ae7a-4a71-aa8a-283488ed5e12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1aec0da-60b3-488f-abcf-9a9a83124507",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a154c9-11ab-43aa-a22b-d813aa437f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e87070-f3c0-4501-be9d-8a785989c576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea4637d-8737-4508-b30d-d654ad21f1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "81ec7cbe-eb56-4370-b426-92be7ba31271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb425e9-84a4-4752-ac65-eedb963139ce",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "187d68ce-1917-4a9f-8647-d05d7bf136c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc6521f-2248-47fa-8745-81d44fc5919e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae08413-7244-42c0-ad79-9d4bbd5a5635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e5310c4-0b40-4648-adf5-8c0f304ccfb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6912a6-21f1-41d8-97de-706d8118335d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e494b07a-bb66-48a7-883a-156989f8db8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4814f07-8029-4447-b700-59df71383974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999b7e48-56be-4694-85ee-cce2ec7aa893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "08e0ddb3-ec9e-4f70-b9c2-71756d73408f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74beadeb-8c74-493f-8e6a-93abd14069cc",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc7d631-25c1-4a41-82c5-850bf73f3caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c86229e-696e-49fa-8695-155a341eb480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644074c7-a222-421b-8c58-531df081d1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff9b7085-11bc-450d-b99d-4d0745e1b64f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e33c61-92be-410c-a52a-0387d20f1d83",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4669e833-f311-420c-b346-6af92eb7aa1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684adc93-74e6-4b1c-bde2-71fed7657ee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc43e0bf-3b58-4cc9-b15b-8fedad2b6286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf84d20-016f-495f-b5b9-52a20306cb06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a078d19-c8b0-4c20-b83d-3c3d604f689c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d572927-f60f-49a4-bee0-c71ed22806b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b86b337-022a-4268-93ad-a2d3e2ce9651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "724b2b2c-ed8c-4c58-8436-8c143c595050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f061fd5-9834-419e-8d41-3095f18722b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d69965-107f-484e-aa56-47e807aecae2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b248c668-0fa7-4fdd-bf27-3f6e39742a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "466a6b74-1382-44fa-96d7-d4810d1e6105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e61e91-8c02-412c-b40c-8c50d4b9c181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1e92edb-41dd-4259-8d4a-8f6cf54cf51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc7bb97-ca15-4615-abac-710f7eb6eb48",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33083bcc-55cc-4d10-9c0f-37f93d9a51ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe3a473-2f52-4930-8619-7452c9cb316c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0efe2727-91b5-475c-97d6-b42aba3266fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2c4bdb7-9523-438a-93b0-136b9eb19aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2dfd23a-1e59-4d69-a809-869cf8073c92",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cef3442-d386-418c-a8d8-1507945f0701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c82d78d-0915-404b-a1c3-385d9128fa5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "339bfdaf-6af1-408a-a9aa-8d8aef223394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08654541-17c1-4812-8e3e-58981e0fc9d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694325ef-7da5-47aa-95b1-8527d0a16176",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8694e90-b1aa-469f-81ed-9efea299ba80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee3b38f1-8970-4352-8510-4b29ae9ab5ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4939c1e-4622-4f9f-ae9f-4cb8b9571415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7449fe4b-784b-4374-aa0e-54a6d0c39f8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd25ef1-a33a-4b8b-8a90-df568ec354e6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a97a0f88-0a83-4ffd-be12-0d2b6f92e750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebeca67f-501c-4391-b6db-83b489689770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be619a12-2ee5-426b-ade8-542d01f59ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f2a89da-64ea-4667-b161-933a675ce498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b3f8db-0ed8-4e49-85f2-6f729fa27e62",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e51b8df-0b60-4ec2-bf24-bac0f5b118f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7869f372-11d8-4f42-9d76-c028545173a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6548cd07-8895-4710-a27c-da4bf74694e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1f9e205-76d6-4b20-8072-08785daecd9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee732fdb-a2ab-415c-b435-446dc8d773e1",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "474ff983-798c-4a72-8150-2c1ed3e7a42f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "242918ad-ddb9-4ebc-96eb-b64c42fbd536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ccd867-8a26-480d-a1b2-2c30b07bc41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd0de75d-fba0-450e-9ccf-ee198e4e6c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898ca9f6-1b23-4d85-a689-f5314fe288b7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ec4fa6-da22-4d04-b401-f08ff74533c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb6519c-97f1-49f1-934e-1da5386372e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6780d1-bc02-4af4-8dd3-7f6a60976642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86c1d935-436a-491b-a1b8-fe0054788dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac54c0c1-ba81-42b7-b57f-37e5819a4b2c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc2ce2d-c5dc-4912-b021-6ca36e4341d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ad10200-93da-4780-b5f1-0fdc5aa02e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d210fe-7580-4c98-b979-0e0c2b3143ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb0cc2b3-6ec6-44f4-8cbb-548e99bf8289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c02939e-4a29-44c9-b320-b428ce28dd4c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f0ae98-047f-4c22-9f63-bb41835264b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "939d8918-8e68-497a-a8be-f8ba64d221b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50b578b4-7843-4b70-a9cb-98f8acf10ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27c4c2cd-943d-47a0-b416-64fcb6fe058f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d5944b-2106-4ee9-aef4-b42ba8e45ae9",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70670218-8693-4e50-b5b4-b51c3975cbb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bdf1310-7347-4cb7-beb9-ae2a09f88c13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6af382a-770b-4913-8a6b-a7643d135e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8019dea-a3c5-43da-ad19-bbd87a54b835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d35744-626f-406c-9ce0-75d57b7a4878",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18460bd-30cd-431f-9657-b34a7a6f4806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6dd80ba-614a-41c1-b417-da2b88f1795b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484695b1-b36b-4c5e-8f54-7c467691ad3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9c61bff-e32c-4c16-959b-458a9e62a8bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2289aa-292d-40a8-a95f-5a766db3ba2d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "092e7064-708e-4420-9f45-7a214e655b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13c1a766-6aa3-4c02-9fb7-d9272a5793b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a5cd2f-4e50-4353-b60b-01442e1d4a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78106029-7c81-4e2a-b718-db077d328784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b69565b-ce12-4cbe-b465-8f1e33432bba",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8400252-a730-4303-b2c7-ca47064329b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8200c284-8cf9-4512-b648-df720d1d1e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681e52ed-8234-4b42-acd6-4e76e03c7fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b365f15-fb83-411e-9c78-f8108164eca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f76b08d8-57d3-4510-839f-b674f26f487a",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8b9e13-6dc8-478b-8f1d-8cb8559526cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31e8d35e-5492-4092-bf72-1580b67bf367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b739e88-c92b-4b91-84e0-90675ebffc77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbf37e1f-5d62-477d-bff8-5392d131a2a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd63969c-ff37-4fb9-8466-0be8c15e8a7b",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f3eca3-9af6-4006-8541-0573ac2dd142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "541529a0-2acb-4012-afa4-a5a886c5431f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d989a806-e471-42a2-9692-b82026208700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f663303-4927-4f19-ab1a-37fa91bbb5c1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "91b7e372-c530-4779-9f84-3208e539f88f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bef99178-e212-4a7a-8972-e7fad2d11457",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a4a552-1f22-4c98-8eb7-d40af039c518",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "872c760c-53d7-4ef3-9d96-b2ca46732071"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ad78c9-a56a-4627-8e6a-fd58a96ddee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1c35112-1825-42b4-8b53-16738ec9dedd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec4f7b65-37f7-4145-a24c-752c35bbfd2a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55e9dcd6-a330-4c52-a8f6-a359874d6d81"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3d13b32-bcd5-4a79-82ea-b3266daff6af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f77acf3-3c99-4897-9442-6d8f5f59a7f0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "588ec2e1-4922-45b9-a1cb-f5dc8c5406f4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3c81069f-9b0f-428c-b2d8-bc81957351f0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5af4c86-2791-4331-8e24-e43e16fd635a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0a49feea-dd94-46c4-a0cb-1d5cfa6d04f2"
            }
          }
        ]
      },
      {
        "id": "da6dc42a-8464-470c-a516-08b5e34150ca",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b253b36a-2f02-4f9c-8afb-487562e287ea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0a6184a0-4ff5-4986-803e-4cfe5fa5e08c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ffd1150a-6a58-41c2-b7bd-55c307de959b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da8c25a-dc0e-41d4-b9d8-219b31d1326c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "619ca065-6562-40d9-985c-de6610659a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a1b60d-6b0e-4054-91e3-3ffa8bbc1046",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836846bc-8f34-4892-b9cb-48b8d741811d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03548f51-fce6-4864-abc8-325a39f0d539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37461a98-bfc8-4d5a-b009-4368b2ad0f31",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d97381d-e52f-40d6-aadc-7f57858856ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "509a459d-273f-4052-8a65-a6bfa6d3a900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c079e9-7adb-4ff3-b93e-3337d2f10e50",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "726f05e9-2758-4afb-b31e-d15ae46fdcde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07f2611d-8253-4626-94f2-0e1d5735ee8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b94b34-6fc6-4dbf-b5fd-a0fe2e87e5f1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "025b6aba-1528-492a-84b3-e54158594488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75a67294-6df4-4fb7-958b-2d3f6b711441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa9cd33-3099-453f-a224-c9824108908d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9bafff4-cadb-40e1-a66a-3ddcebe0877c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2bfb3c8-58ea-40aa-8fed-2d66557c058a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce3c8d8-f6fc-43db-b397-a03021b0e317",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564ce750-7e3e-4563-bc7f-a06f6c11fe42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fca03ac-c1e0-4a21-bebf-0d036bcfce28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf781e9-7ab1-47f5-9a41-407a02adbbf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "202d4cba-39cc-411d-bdb6-adb0298ae2f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf1821e-52f7-4268-955c-0bbbf891c819",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6382bc65-464e-4b3b-8276-6aae0dc34ade",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "436d842f-427d-4ee4-b3d4-907db89a0e67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17fd20f8-217d-4e1c-94e9-c08eb1728372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe8087bb-36f6-457d-aa2b-ff3d833fef6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d964fbc-3f4a-4db5-8af2-37294d53c7b1",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3480d102-1431-477f-b816-a7a915020bd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30612785-6bbb-4d6b-acc1-d85f0d7bf9db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f4bbf0c-26b8-4ce3-acd8-451e084bcffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4f334b3-5788-4e13-bf26-35343c338919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d39cb25f-a1c4-4d70-be49-f773797f24aa",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a12e0e-a796-4141-a9f1-72d9eed97269",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2c65738-e3bb-42b3-affd-8d02a0eca3a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b8b6cf-cb5a-49b8-8970-e2b2c3bba76b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "009592fa-a830-45be-bde4-7f2420656709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8ba462-fcad-4e66-bd72-0bee960dbe39",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586ba364-fb0d-4d17-803e-e75473c7cfd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7a03cc6-3e09-46f4-b6c0-92129ccc95de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff54c20d-cbb6-4328-860c-366566dca3ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69550bd8-e5b5-4fb1-aa79-74eb14ad5064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa613e2f-3e09-458f-a557-84fc2a8b17d2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a853c0-7fe6-4d56-ad4d-b3aca3c7faec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1fad7f-129b-42c8-abfb-4575d91e98c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd5fece-9012-4b9a-8101-aa9ee2664630",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf11a850-8e3c-405b-85d3-096dfb0feae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9930871c-d590-46b8-839c-6c08a838c038",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6574998-bbfd-4552-970e-e2d20d4318cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76944261-6628-4925-8223-f0dda9624750"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76624eca-b141-44bc-801f-bc8d83f898ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55c5d3bb-8503-4d12-a652-8b463d3dc063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171de44c-f2ed-47d3-9101-2c04e7a15abb",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cea3026-4e26-4328-afaf-ed10709dbaf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a090837f-1f7a-4adb-b5ce-0ad5036f305d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcb8dc0-45c7-47ac-a688-0b77f73076e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bd8cb2b-50d4-44a1-865b-cba51331d897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf93236-49c9-48e6-9125-44eb1fef126d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea8f7bfe-d936-449d-8d2e-a0e6b0036528",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01bb7553-52da-42fa-b0ec-b25ae0f7c10e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c7c91a-82df-4476-95cc-f8ecf906d384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2e37208-1d25-4c75-84af-d04124c558cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772965c0-a6eb-4a2b-98bf-806a17eab3b9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc42917-a9eb-4f3e-bfe3-4e03e03b7f5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9b21ca1-59d9-405f-acbe-571d719de945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca3aac8-f5a8-4b53-9c0e-270bcd5d047b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dd613e8-9dd1-4915-b97f-e0ae32ca77ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a9f98c-8777-42e8-be53-9ada870661be",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa34ad9-c0fb-4e39-8763-ef5cd42d2610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c70a85-bf54-4064-97d4-e79d48389359"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8849b91e-44d9-411a-b844-f42fe96cede8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91c5fd81-9d18-45fc-b96e-6dc6d5d04b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b631d40a-378e-40ef-9328-47b51163933d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf873103-8e01-488d-860d-4fa67177e729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0be29415-fb91-4c5c-89c2-1920f238ee06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f9f3a1-e97f-43c4-ac6d-56f3fdf0f7a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e930132-270b-4ad9-b6f0-1b143135c2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c17a92-05d2-4e8c-8a0a-72f205661127",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8b7512-b54f-4b33-bd8c-5e36f377033c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "984e2259-682c-4ea8-84c0-84fa17126a62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5df81d-bcef-4517-8553-1503d75d4e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "291a2558-e8b3-4b93-b9ed-279c9073ff45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ac22b2-0f50-4215-a0ab-f8359b8d62cc",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31589021-8429-4355-840d-e0ddca3112ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25ba9113-7211-4588-80e2-e91a7d557e1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d519eb86-b6f5-4bcc-8a53-a0afc8554e4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85945b91-87bb-4d8f-95a2-60ab68463310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc78beb1-fe94-4eb4-97df-61a5ce18b76e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d4216a-4649-4edd-a829-bed7e5f12ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2e05e61-1e73-42ca-b6f3-e46291ba6416"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4cf132-5812-4174-ae9b-994e2a987535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee9cc045-7e75-494e-89d5-d2312a3de869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d8ce50-bade-482f-bc6a-7757f577ff76",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7400500e-95be-4ed5-a7a4-1b0bd2af7f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eb4814b-77d8-4f1b-a668-0ba076fa8deb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c823394b-acc0-42f2-9908-6aaa067e9cd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecc03f1d-7739-4f77-b4b3-15609f9966d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623988ea-1559-45be-a7be-4d773a4ae428",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24893f1a-c251-44d7-8ca9-90ce2cea0efc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfdca204-a03c-446f-b85f-351b676074b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae04d58a-2852-48fb-b4dd-da5ba9406896",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fecdf716-2579-454a-a407-57dc0cac720b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a776ee5-37a7-44ad-9831-ec4e7ba21149",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa6dc75b-3916-471d-9445-262f1b4f236b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c668130-3c0b-40b6-883d-bb1cd7533170"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a9ecd9-aa17-4d6c-a53b-984296679aa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e67af78-c734-4bdf-9835-4707f5e49069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2662ec00-ba6e-44db-82db-2273ff5619b2",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d73da70a-eee8-4ed6-b16c-369d835e799a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c43e2f4b-a121-4140-a7db-57b8d06e7c77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68da7da8-13ee-4648-b4f8-1d50afd2f052",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a88a379-5745-4d4f-87e2-79d98f56c319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04698dc8-b11e-4795-ad2d-9ad5d3824ee7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5606cdf-1ad0-4564-8f31-677e4810049f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22249e0f-ad9b-4554-91fa-a1277ea7c381"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9076ee-b845-4359-b1eb-b1d63bb80a13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f5ba72-2805-4160-b86d-218dabf915af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ca9e0f-7a8d-4546-bab3-718a06a78ab1",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dce19f6-2c56-41f6-86f1-be7dac9a4d3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93db0db7-7a9c-4f38-bae8-410ee8a8db48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ddef14-a0ff-404f-8463-65c9f85100d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc366391-99d9-4d72-ac01-6c8721745e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49301237-5641-4d53-8256-a0c383a70456",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29bbe33-d981-4dfd-a68a-158cf491e86e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee738862-e48f-4252-acbf-404b36a34d60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb37e45-12d8-44e2-9885-6802548f9f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56ea0f66-8c3a-4fc7-8770-c300a923aa58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "022a8577-8986-43b3-a962-8c61887c5652",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fac6050-6205-47cf-9582-c4c1d8bd758f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d01b5646-6db7-4e9a-aefa-839d4784bbc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ffa2d2-5b64-4aab-b946-5f03dfdf01eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb512ea5-2dd1-4e88-a33e-bb1d1634ce5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d713dcb-d57d-4ce6-8b22-772b282f3dc1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20393830-a1dd-43b2-a180-c154e62b5857",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c620d31f-e916-4e25-b3d9-14523fbbfaf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "821f7449-0d9f-499f-b24c-055d744377a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab435f1-78ad-4998-b222-5d1a5c8d0e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c14c70-c2b8-4e79-8a68-cc1282fc3b0d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2015b821-3c4c-4d62-90e3-440c05f75f26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caec5b39-3103-43d7-a57e-9ca836613ea0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec280fcc-d2bd-46f7-946a-5d40e88c0052",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dcb70e7-dfee-412a-bbe9-eb1b60521ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "211d14e5-44ab-4ef3-8957-609226fcf07a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f9160a-d13b-45c4-8a43-8d74558ee30b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de2e3fc6-d5fe-4c1e-8943-1d093431c10f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bffd751-5d0e-40ad-b433-67c8ef847eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1022f44-2a19-48c4-91fa-56f79c489417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de59b8a0-2a89-472a-8768-a4d59d053fdf",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db63f85e-c594-4ad9-b2d4-22f262dcd6d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49016c1a-8059-43d6-8feb-52bdf090f0d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36055534-4090-4138-8a38-226b5eee248b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b35510fc-911a-4589-bd4d-eb97108972ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a128058-6d83-466a-9a9c-399b173fec64",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f45b383-aa07-4646-ac56-9c8cecc4d035",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ce1bc20-a7f4-4464-a47a-86c6351bcb0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d015008e-9363-427b-a0cb-ed0b164bb122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4863502-90d0-48c6-bd88-7031c3e73597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa57467-c3e1-4218-8d1a-6e3d6ee70d7d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbb9512-0c0f-446f-af58-1df9374fd21c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56cadf92-8d31-4ae3-9097-57ee218eab18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4adaef-eb56-47b1-8fb1-1e05f8173b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f6cc75d-31f0-4c2b-8e66-9a953e99fa4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10afe07-3c30-4ab4-8fb0-6aa0e485a3a0",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc1c6e0-9e15-40cb-aebd-9b49353cc849",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d1d3c60-d827-4e60-8e29-20e49b0f60db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f019fd71-22cc-46dc-9240-5666919a7621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87d552d5-0d38-4925-a45c-7bd397ca7f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edaf9b35-9590-4dd4-b4c6-8b0bf7d3a8e5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "872509ca-5898-4437-b945-acbe6d358f5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e433c56-cc6f-4e42-b2e0-0628f8a549be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba2fe722-8d72-4698-9fe7-48f0a41ba9c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69777006-8990-4ca5-b99c-3b63ecc022ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f5a1a19-9d71-472e-b704-c102635a4977",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e9bf905-7d92-4259-b8b1-3221d9b0fa89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "687f8d95-9205-4a2f-b370-925776f0b224"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4841d51d-7aea-440a-9f70-7e20511fa026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "896a1578-a465-45c0-bf04-15371b748582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9eed0b-b2e5-44c3-a113-10761a739443",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d83f02-4ef8-454a-b673-872860290739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d27d983f-165f-4f18-ad65-7273d0bc77a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1030cd-5752-437c-ae65-6d367e03db36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20f9e264-29a9-42f8-ba35-686b0a2945b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f762b4-8524-4df6-b9b1-8de15c9469ef",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f341e42-d813-4807-b403-a9a80c9ed56e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba5447d-9336-464a-b5df-05aab08b4c00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b904881-cdd5-4279-9642-1f68232bcc84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a7eba77-09d4-4a9b-8d2e-bef20ce92125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6510379-29b5-4f9a-86c6-a74f0e89bf86",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec8cf11-6616-4337-a4dd-17c5c183559f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93fc164d-8b58-4f8d-8b6e-28fc1df1160c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c472c2-4fe0-4a68-86ee-996b0f37b54d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b95402-fb92-461c-98e8-872274bcf2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf8d56d1-8a1e-4876-814b-3173e5011eaa",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54c9935-0af1-4ebf-9c1c-b0897c542a45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28f56199-214f-4124-afb3-c416c469f10c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f434a6-03cb-47d9-9a47-2a0962462d02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a30c3f1-7857-4697-9ba3-ab170f731bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0f3e24-d39a-4508-b6e5-ed90c75592db",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae43278-6b8f-4b57-ac97-ee39fd76309e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05115985-3ae8-4f2e-adb8-a51bc90702b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15f5976-fb97-4825-abef-d7a94a3e2184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b997b1d6-3a90-4af2-936c-72cd33b2f9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f1e8bb7-efa5-48d1-bbef-b5365b69f9d7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077a033f-5445-414a-88ab-1c34f9db8f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da45d554-ca1d-4e37-a9c3-f0eead7529dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af770f8-496d-4c9f-a514-e0600abe1fcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53331206-4f7f-408a-a45b-b7b013b4b037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e22b1ca-1958-4bf2-af35-1d780ddf5dad",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afbfba01-4caa-4030-8a18-9b052b668147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf4aa97-bcb5-45b6-ae5d-0f64c878c516"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1233295-569a-40a6-9e42-75c73d956bb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51d2b699-b415-4db6-a27d-234b05086727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3179853-6e77-4015-a564-914a55f06ed4",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddcb8bd6-4d87-4b2b-9041-b916d4e418be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "516eeca0-03b5-4685-b986-b6423fd0646a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed3f1d7-b345-4699-865b-1819f1c22af5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaa8b1c2-3f4d-45ad-99c9-b2c3af75d224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc22b75-a578-473c-8afc-7f378680e000",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2937da-1d73-4830-af59-d780cafd5a86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f940991c-4458-45f6-825a-15c953e9b76e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ad97a3-1229-4ca9-9164-7d20840be4a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31fdb35c-1e0a-4087-a3cc-5d527ee4491b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175185de-2fcc-42e3-9aab-084906e8747b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "544af20e-d130-40bf-b7a0-5817d537c15a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54624fb8-ddf6-4e51-beae-6a60e8c092c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a7608f-f397-4cc5-a260-56a34773f30f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb36771c-d17d-4c73-9184-ec1908b25ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ce87ac-1b11-4bf9-9e01-2f708a6ba3c0",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dfd2640-f541-426b-9cbc-b13f673ba4f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10428fdf-1eeb-45ea-aa78-4a74a3aee9f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba914219-51c7-4995-b30b-3ad0332a56be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "420ba56c-dcaf-4a0e-9e5e-42578c69688c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa58789-1e5c-4b5d-9ea4-b9041ef7757b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4adf075-1dc6-4173-8b0e-1767f0082760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07094d1c-396a-4a6a-9abc-5e5d10d98ed4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35bfb5c1-1c0b-4cb4-ab10-44b551457538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ec5cb17-38a1-45b4-9297-af398e4fcb52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c63f579-45c7-4757-be4a-111afab47858",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cba0529-9da1-4384-bf64-9c1e7d4a508d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4d7e303-9973-4e11-a8c9-224ed61d6906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45dbd2e4-909d-4dd1-a887-245ef6c3a545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad46ea2-5c50-460c-ae32-5b9c31b29ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab43569-0abb-4e71-9eb4-351f19f1e23b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb1d008c-66f6-47d8-9dc5-7aec6eef05fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb30967-f3e4-4c2c-99be-8630d6070705"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b772db9-bd2d-4346-aad3-dd4e2266ee24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab2e378c-3cda-4709-9250-2bb3506ad703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c391b4f4-e154-457c-9af8-ebe809ab29ff",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15898b47-5cc4-4a1f-a6fb-f9aef9a6fdcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc17588c-fa0d-413d-932c-4cd11a09b40d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82d8ad6-0139-49f9-92ce-0b791b7d3bc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aa79c27-6049-46e9-a3d6-a00c27eafb72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6927802-a35e-4f8f-ad7c-f21e3668dc08",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d71c795-99a7-41a4-a22c-9b681612c8d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1338af6f-91ef-41ac-82f4-4cdeaed4cb97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "183d814b-53ba-4687-8682-4c935d7e7514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dcfe82f-b40e-4975-8562-b8082457a0ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535a9a3c-7bd0-4030-8376-29ee6f0fd470",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17dbba7e-8301-4146-b583-0981745afa95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c542e0e2-6376-43ee-b3be-a48049b91efc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a72d99c7-f1c8-4521-b256-0168f45d2472",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "608eb287-bbeb-4b9b-97d6-14cb14d84e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b9d3cf-c906-492c-9869-7dcb33851e34",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1536d7e-c759-49f9-8d59-cbf4ba308003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b496ce7-c1c3-40de-bb4d-90ebc17bd2d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca57063d-be4e-41c6-8877-a262e6840f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42ab289d-5d4f-468c-a02f-4679836093f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc78b74d-003b-46aa-8e1b-eaef23c1ff2f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d04300-edaf-413a-a354-9334a46b35e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1157efad-d88b-4ef9-8043-736a0f03e1c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be8beb5-88c9-4325-a6ad-2115882d33cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81d03502-d97a-45ec-956f-2073f9d31027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "130087da-d96f-4bef-8a4c-68068f35b0b4",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd359b18-10ca-43a1-b1be-8e90bc3da095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe33312-6bd1-40be-9f1c-8c7783f14031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2be64f3-038a-40bc-b4f8-62177c815274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23ae90bb-d1bc-444e-badf-918ae628196f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e5777d-d9a2-4698-bebe-05ab31a28d8e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a18b69fb-4288-47a0-854c-4df7cbfaea02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e83a62b9-713a-45e9-b738-bf85b32036b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e3b306-5fe6-45fa-ac95-afe78bf95535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d835c7-f91a-4bf1-8694-8b5213f61510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4c9fae-7106-42ba-96f6-918cc4b31cc4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac56fea8-498a-4691-a314-32dfba0b3ac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37aa3db9-9daf-4401-aad3-b85fa935e550"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5327c19-f245-4878-a5b6-ac9243b88188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8559fdf0-2d06-47a6-8bfa-bb9cbc78fbcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "070ed595-3612-4a82-8cc1-6847554b96be",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a7515d-6ea2-472d-896b-e18fcc5e855e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec25e3d8-72ae-4702-bac4-8a871ac9ca8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d246f4-f04b-4844-bc7d-d483c5d91f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39996afa-1de4-4fa4-b436-6f8f0600b571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2483152-7462-4606-af15-50b579eec03d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398fd0d9-277b-44ae-9411-3a3d443ceaaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "209ce6a8-db7d-4fd2-ae53-3d90f19da633"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76dc2f1b-7977-4578-979c-2a8904ddf806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d348d7c-3883-4101-a97b-fa78a7c53517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92043bf5-7bcf-48fd-a771-a4ca41fa124f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4417fed8-e40b-40ae-87cb-577103598786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b03fdf94-2bf0-4674-84b0-e1308f40c825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a97778be-2ae2-4889-aadb-1d264b4f1a2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28e72050-30b1-47b9-b5d6-01ae1b9254a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c121db4-e93c-48ab-a44a-3dd2206dcd7b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b31fca8-1ef9-4ae7-8f8d-ea68b8160d48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfceaa85-4bb0-4d8e-9b08-3ae09d510ba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "841d70e3-dffc-43de-a384-c97fae2640b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cefd1e6-3b5c-4905-81e1-1ba814b1cf2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79f59d7-513c-4ebf-a360-8918923fbcac",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1254deda-edf2-4526-9221-91b5bb35be55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdfbf629-7c96-416c-9d2a-45cea6fe134a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e94e40-989f-4099-8d9d-ccd9efceeff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5a7948d-e743-4c48-8c62-7bc15c1b0687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ac9415-0c38-4e80-9417-d47592b4ef18",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb40bc01-e01b-4625-a52a-883bbf91ad24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc721189-e2b5-4f32-bfa3-a56da924b64e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "670b2e8b-c45e-48ed-8874-2c5356b1c491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6388ef5-71c8-4557-9260-bc1a3b22d781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96cf448-f22f-4096-9085-1434aba6036e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a4adb0b-8a5f-439b-b2a2-521ae859e80f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a367c45a-6dee-4b80-9e79-0884bcfa713c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7f185c-66b3-4c6d-903c-422c33db8300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48d1a294-1e73-4333-9025-7a5386587e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75716201-18b5-4289-9ead-3f29ec8ff1bd",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d71bb46-5a34-479a-a18e-147e7cb72b55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3131b9ad-e228-4b8b-bbb3-3b3f08530f1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0c21e1-010b-4613-99f0-d1cf8de01b16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f65c6c92-1c45-4a17-8fcd-b21c79939781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59d3dec-3eca-49be-af55-9d8370f3aece",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac8040e-a243-405e-93aa-a6f61aa4566d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7600f344-49f9-47c7-ab8b-25c50e3d4671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f1b267-d33f-4c94-859f-a67d974ee9e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a19e10e4-6b4a-4975-9bca-a45c244cd192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa9870a-5704-4a9e-8bf6-d2a441e9fbc0",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71dd4240-787c-429b-ad29-21c9d5cbf49a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcf36259-fcce-4884-a980-cdae272f7cac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15c8b2cf-aa04-406b-b57a-45b4aecce607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d5b8650-777d-4fdb-83d1-dbeedd16c6c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5590c507-b665-4d41-ad75-18831e13b5eb",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549ee464-d281-46c5-bd0b-307ed5be943f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e449a28-d4f3-43a8-bce6-7f0ebac8ed2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee93d30-2d3d-4c87-b50c-3438df5e54c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc917951-e1be-4d3f-9190-69d9e4a0a5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6f9a26-9aeb-4df4-941e-5670cae0b686",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b17aab63-5c93-4948-8cc0-b873983c606a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bfb8592-df58-4ced-a717-264a62950866"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4b0948-94a1-4f30-9ae3-1d858b5605ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4bda8da-3305-4441-900e-243ab08e45c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa904bf-42aa-40bd-bcf3-369eb8c29fbe",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdda7dd0-2264-4d46-900a-2290e76f8dc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6045ecac-60c1-4dc2-88b0-f238f44d65a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef61847-cbbd-4c68-8ebf-e0f1f39dce2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c41d0ab-8b95-4674-95cb-688b5f69311f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd71b59-0c95-43d2-bca0-38f5601327b9",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "590f145c-c5e1-4770-8edc-b7f99fa53ba9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23fbafc2-7850-429a-92a5-68a930a0fa6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d3a89a-e819-4d99-84b0-1526d8cedaf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8672157-cb07-4197-9a7a-36b271759cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd727194-89f3-47b2-b2b2-f176298960c0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b24861-9361-458d-9516-d1ee8186a40a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95d61c82-4d34-4abf-8245-0fc1b1594789"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f238cf5f-0707-4a81-86d3-49483d68d05b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aaa7ace-897c-49e9-a257-c1430419575b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451db127-0e9d-437e-8b3e-2818cb1e09bd",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaff541c-49fa-4459-ba27-8c61fa6912a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7683e417-805a-4990-96d4-2ac4a899f090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba706c4d-e4a4-482e-9671-8b34cd46e505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f60b90be-78c2-425b-95da-30738bf51bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "298977d3-fb64-4750-a676-4363e262c429",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33fdadb7-0106-4ae5-8c00-0c8ee00839e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c87e2b9-b2cb-47f4-96f2-a1cc1515d327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b87a75eb-958d-49c7-b992-97f601fc43b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05080c98-3345-47f1-8426-db7d71dc8f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c68d60-9824-4c8c-9e03-37a7a3c3decf",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "688e875a-cced-4f01-9d9d-8784abb918cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7550dd3-bbe2-4777-8b6c-50325b6ef91e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f19cbf-74d1-4b46-852f-2a4996aea4a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c43f0b88-3dd1-42cb-823c-ca6c51ce95e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "428a080a-dc01-4f9a-8012-5b14e24793b6",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89390c6f-0cd5-463b-9cf6-d40107b47dd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e170db8-ed69-4ffc-962f-d6d5de012988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dddc0d8-bd45-4491-8945-c27c327bee65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed9d36c6-7659-4f2a-aa98-d58e47800997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b679ce8f-3d4e-4883-ba71-4159c3044f3f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0edea811-63e2-424e-a220-6c44fc81ffed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10426c22-a7b2-4a6b-ad1a-0b75beb40941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b051ec0f-684e-412f-a8ca-d8798c01581d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2317fc5-0672-49ae-abd7-64115a872031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c914f776-1fbf-48c5-87c1-572ee4da4bc1",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb67b5a-2caa-4fde-8dea-67b28fa199da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce5cc529-6be3-487a-8c03-a6728c6fbe7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "630d1fab-4601-4df2-857e-4631d65514f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d8e39f4-141f-408e-b8f8-3377c5357f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f26ec0-367a-414a-b79e-febb0d7863c6",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed2eff0-10e1-4f57-a7dc-571f04c082a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7f80019-f811-4cb3-afc0-0528f66478f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7ce787-ed8e-4079-bfd9-85af5e5630de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b669cdd-5863-4eb6-aec7-6836587f9169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755cf4ca-1ad4-400e-a498-4bb5769b2e5a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937d8c33-af0e-4a65-88c6-977ac01ec6e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a40578b2-d70e-4035-a7e7-e5467fe35d1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2265103-5435-4224-8fbf-4c26a70008dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6005270f-1074-4edb-818e-24bd3328ef40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db84596d-1972-43c0-adbb-0aead8976ee7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f66e09-5f52-4963-913d-c5c57a3b7472",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69c608a9-1a42-45ec-aaec-1b6b9dbd1123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff02b951-3ee5-479b-819f-b377330072d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7264fa6b-5cd4-402e-9df2-635125967472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf5251e-d99c-40f7-88ad-0edad17793e7",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e7f620-0fdd-46bd-8e29-1843b03211d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99096343-27ca-411b-aded-3b25cef1c124"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f28826-499f-4762-98d4-1cc1a6d89a65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "140f0f31-a322-4435-85cd-48d02e5e593a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac8c921-3228-438d-a78c-67d19da4ba37",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b97fab-eb5d-49cd-8bab-6201d664051a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0db75b4-9c26-401c-9003-71dafc4e326d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aae5f39-8cf4-4d0d-b31a-710a29d778e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9565279-d14c-4fe0-8437-fa5130826539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89165c8b-bf75-4109-8edf-f35425e9a04a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1f7849-0e7b-4e76-9dd1-5d6eb7f8cdb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0bd00e4-575d-4a9c-b652-006d6a75fe46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d15993-3d31-4a22-8d3e-1edc2a4237dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "056b1636-cc4c-42b6-bd41-bc764aadf310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa326cd4-8361-4bd3-83a0-64060fd13481",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482f6088-38a7-466c-924c-ace7609a1c0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70c90923-fbdc-4ffa-a4eb-dd536a9b66b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a2a048-1ca3-445e-9f39-d80d324bd622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ce2f2d0-20a3-48ed-a322-d1aa4dfa5efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028ddf5d-6ede-41bc-9290-0cb3b6235503",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c647a94-b94c-4645-a6c2-d98caff55eea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee117506-64ba-4911-a3e2-0dd1378fcbf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ad6282-2c15-49cf-900b-da6f6d1e2017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8096abd-6e64-4316-a18c-48ca146f1ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec7b8a1-9b4f-4962-b6e3-5251563b5513",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25888f9b-ca0f-4bdd-94d6-7561d7130c20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6bf2018-d529-4c2e-b0bb-9ce150860846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c0b5a6-1405-4c04-a031-fd888eeb232d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8198d8-7c77-479b-be47-55e08fd64e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5963b206-bc80-4905-bde9-63b7aa68cb00",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a4b8c18-f7ae-4ff5-84e7-f61c560f9c12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09f68d65-8b96-443a-84ba-b8c5fe605460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4667399-ecbe-4578-b326-fd662a0be5d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "134e44a5-892d-407d-8053-37680f73893e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e43b3b7-6d44-4334-9687-389c7811706d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6556aece-6891-40dc-accf-06930fac3d7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3367b467-c313-42b9-be7a-43ff4e8f3c94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97e60fc-f2a8-49b7-9403-195407abe444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "056a9eb5-903b-45ee-b6ec-cf1ba3d2461b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b248b34-20c6-4568-acee-0c33a6d9e45c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f51021-0ee5-4cf5-a2d0-f7f7545fc89d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0b015c5-7eda-4ecd-9349-1acf0a53b880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dda9e81-0b4b-4a99-8430-ca3f092c70ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7125fc3-f5f3-4e61-8eb9-a97b2d3a7c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b534aed9-8b1e-44b0-902c-59826d9192d7",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc508e0-2f76-48b1-b08e-01f0fc31f308",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df7a5716-cbd0-419a-9c0c-775008217439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5f7380-4814-4f91-a90f-6b2f1401c193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48f96717-0642-4a61-ae50-433cc2d888e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c18c1e97-621b-4a16-9c91-3e25da9d9f96",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41aa7f4-f780-42ea-b5e0-eceb736a5d40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7023d155-b401-4474-b49e-a5bb18a8bb8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea981ab-ce23-4367-a2c1-22160c427a90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac345fa7-7b92-4e01-990c-9ad0318270dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53de61a-820d-46f1-b6b5-d60c13a6cca1",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec28c409-7372-44c6-8ec7-399f5125617c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71f3a138-a6b1-4ccb-afc8-de7a668a2ae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b7caa4-ea4b-48ca-b8c9-0334d1937acb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6458351-c951-4615-8e1c-13431402b902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d290e1de-57a5-4d6b-9b33-c68a88a06ace",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1747f0ce-9233-4520-afa6-1521aafcd113",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba6390a5-c875-4016-be95-6aec222a26d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce83cc7-6e7f-44ed-b8bd-64a4da272a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bec69927-e0fb-4b70-b577-52c982eb9082"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10fef9d6-02d9-42b4-b0d4-ec6c0a34d4fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6fdd909-c200-413c-a686-fed9fb02afd4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "075fceae-297f-4b46-ba0d-466a208e51d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3032680c-2f63-4422-a2d5-204d54154ea8"
                    }
                  }
                ]
              },
              {
                "id": "40bfb505-4ae3-48b9-8d3b-23048147787e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "86c8b54d-1e30-4bbc-b67e-544c20c55119",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14dd1c47-b769-46b2-9460-5a41844a69ca",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1a05244d-d029-4db8-8d9b-5abde2833302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c465164-cccc-448c-a7a1-1088488ff4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "157b5a09-0eb7-41a5-9385-9185b61358a9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47542736-58ad-4036-8723-223d58ed1489",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ef4d721-237e-45aa-9546-e00c33329550"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "36a4ac08-0d96-49c3-9d32-e18a23d3fb43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de5e33d0-f0f9-45c0-b285-691a4b8093bd"
                    }
                  }
                ]
              },
              {
                "id": "1dc6468e-90ad-4a66-b955-42955285d501",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b70c63cc-3083-43eb-92ed-46fc4ff79b44",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "254638e4-14ab-4590-84b2-e4d1b5a17cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "92ad0669-35a4-45e4-b547-6792c2f48194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0eaf64-2789-4574-8c12-e437c73aeb85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b180600-499a-4dd8-856e-4385d54ffac8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "63d8c29a-e676-4239-8228-78346ee5b53c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7f116bc5-d703-418e-a85f-24d5a6cae45e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f3c8623-86a0-44bd-aa02-8f8a632df26f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7b341cf3-b091-4c7d-ad51-442eaeb64a99"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8769224-1f1a-4515-87b1-7bdf69e80798",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6c21ad5-7746-4924-bff0-28a07a8fcc43"
                    }
                  }
                ]
              },
              {
                "id": "1c7dbdde-1e61-4ad4-8923-2a5efb12fcad",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cdad9a33-359f-4576-997e-23b4453a7d36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6b754e40-507f-41a5-835c-45ea8c5f898d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40ff196b-8d7b-4867-9702-cff97d98579b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1296011e-5fa5-4fc1-9f5e-07cbf6967256"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "167704ef-884c-48eb-857d-9b20b61826a7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e1059ffc-892a-4f90-b2c5-d99ec04c7f6a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6035c5d6-299a-4c1e-b6ca-e5e9dd20e0a9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7fe3991c-b7c7-4a51-9613-307e6c9a5d63"
            }
          }
        ]
      },
      {
        "id": "7e3ea73d-b73c-44fd-9240-a39dc80e0301",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "bdbb68ed-ced5-44da-9d53-fae206958bb9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "247fe2e9-3428-49eb-ab3f-dd3c6d593a79",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c8d03b00-2cab-4d76-a2e4-23cbe73cd3d2",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675e91d6-0023-485a-b3e5-98f142a1641c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "930fba32-848d-4498-a2ae-46797f5d2ba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6138d80-7db5-4a15-9eb8-84ea487c514c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6a0c066-c572-40d2-859b-9ef2af0c13a4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3734f547-a569-45d2-b828-062667c0456b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8d6678f-6499-46a2-b6be-19bf42ff057a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "25ddc387-2671-4143-8717-599ce0e230fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3a9a9ad-b5a7-444c-bd04-bbc1e720b8f5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8702ccc0-b3c9-4d51-aa52-1c5c23bdbc76",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "09fd445c-4d63-468e-bd2b-d9c914f4790a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05d51c65-fd59-45d8-a500-c30fafd5617e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5fc822e9-6b19-4ba4-a7af-d76e72e7f66b"
            }
          }
        ]
      },
      {
        "id": "2a811612-cc60-47d7-81e6-bf3840c78bd5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7b6795f5-f124-404c-8ae2-c6144f54cfb8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e8fde6ca-e809-4150-b7ce-5c1a936e7322",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4f1fedc9-12b6-450d-a003-268c29118afd",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02fdda6d-ab3a-4918-9ea8-cddb2a463edd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52906f95-0521-4f44-9922-3569a161b9d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50aeb56-1d1b-4ef9-961f-d9d18dc75435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59a69b0d-dfeb-4e5c-8745-51e94d23e4d4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f3b5eb0-d4ea-4ade-a970-d4333277bd84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87f5d3eb-6b0d-4bf9-b2bc-7f22fd9a54d8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "64479d99-51be-4b3e-8c3c-d92b8ae0126d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96088f9d-2335-4ef0-87a3-39994880f677"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a2c91c85-a88b-4888-8ba8-e993e271f493",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4af8ac17-039b-4c62-990f-b71e9235d79c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40abe5f0-85b1-4443-b0e9-deb005cf1825",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "462e8dec-7397-4d78-8625-b037cb354949"
            }
          }
        ]
      },
      {
        "id": "052dc2b5-65a1-4860-a9fa-c47939b32340",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d4d4c05b-3712-477c-94ec-082b7276efa9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4d923165-34b3-45ed-b37f-fce696f60fd0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ae682edb-3d00-4635-89d8-711d8a8519f0",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1390c92-50c9-45da-9326-3e939f53882a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70a9b696-15e7-4db8-9f52-016904169179"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eead393-b345-44bb-9edb-0a78c119e36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa1ccd7f-009b-44e6-9b45-784f2d147b5a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc5b1f87-6bc4-4fb4-8797-567326d24fd5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7ee2ce8-af0e-4e80-825f-c8a637c7de7a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "41f095a4-9d9c-48c5-b9b6-cfd57a799d1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50490478-38d2-4d05-8501-24180ae36bbb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b621329-6868-459c-a880-ceff04081c7e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "424c9134-0da5-4af5-a892-4a0d141cc68a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "364d00b6-7549-4113-95ea-c7524fcdbed5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eb0df83e-3612-4943-80c3-fd1391b62d62"
            }
          }
        ]
      },
      {
        "id": "b9a32663-d047-4091-98c0-708b9b3577f1",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8e9e2cf0-7ee7-404a-8e4a-0a955268d14f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7f465d97-c85e-43e8-a759-57254e009e3f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a562246c-a115-4bcb-8c33-3fd0438dc47d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "596a1273-a7d5-4196-b0ea-55c82c4dca74",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "687144cc-1544-4fe3-98da-318a4e543c5b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 273.5176056338027,
      "responseMin": 21,
      "responseMax": 9828,
      "responseSd": 917.039723961751,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1687999559446,
      "completed": 1687999651918
    },
    "executions": [
      {
        "id": "fc980fbb-a06a-4d99-bec7-ba1f4cdfe2e6",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "906ab443-31f5-4571-ab4d-88941defbae7",
          "httpRequestId": "60e8e1e0-f9e6-4fd0-a90e-4a0f0ce14aad"
        },
        "item": {
          "id": "fc980fbb-a06a-4d99-bec7-ba1f4cdfe2e6",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "11716bcb-a243-4feb-82bc-4c1da4e5b644",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 0
        }
      },
      {
        "id": "283ab5e4-9de2-4f2d-a652-ea29bf0b94f1",
        "cursor": {
          "ref": "52e99a3f-b16e-448a-8225-a3bebfcbd4c9",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "11b94d27-b078-4b74-9914-3a14a6d4c0cb"
        },
        "item": {
          "id": "283ab5e4-9de2-4f2d-a652-ea29bf0b94f1",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "21c53c63-0e5f-4917-b386-4fb8c3ae8e87",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "b72993f3-95cb-4b82-9507-c056258be1dc",
        "cursor": {
          "ref": "b611cea2-e8fd-4f3d-a47e-8dadfe729274",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "672c02a0-4497-4110-9122-87fe539fc158"
        },
        "item": {
          "id": "b72993f3-95cb-4b82-9507-c056258be1dc",
          "name": "did_json"
        },
        "response": {
          "id": "dc62cc52-5f17-4379-8a6a-e2151ff193db",
          "status": "OK",
          "code": 200,
          "responseTime": 398,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39cc5d82-c8a6-4ed9-95c8-ede116082eb3",
        "cursor": {
          "ref": "1202850d-10da-4c34-83fb-a39c6717547c",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e4c1d236-875c-4765-8a8c-e7515a03f80e"
        },
        "item": {
          "id": "39cc5d82-c8a6-4ed9-95c8-ede116082eb3",
          "name": "did:invalid"
        },
        "response": {
          "id": "14593d3d-9f58-422d-9647-1a09b87b64d8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1407,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "39cc5d82-c8a6-4ed9-95c8-ede116082eb3",
        "cursor": {
          "ref": "1202850d-10da-4c34-83fb-a39c6717547c",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e4c1d236-875c-4765-8a8c-e7515a03f80e"
        },
        "item": {
          "id": "39cc5d82-c8a6-4ed9-95c8-ede116082eb3",
          "name": "did:invalid"
        },
        "response": {
          "id": "14593d3d-9f58-422d-9647-1a09b87b64d8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1407,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "aa4fc843-19da-478c-9584-65457f7ad810",
        "cursor": {
          "ref": "5ad00986-9a16-4d5a-90c5-b15415a5e73c",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "440a9a0a-819d-4fc8-9dfc-5b926adce9b9"
        },
        "item": {
          "id": "aa4fc843-19da-478c-9584-65457f7ad810",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "73b077d4-d196-47c2-a916-a047767790e1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 68,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832acdf3-187a-4f4f-9739-24d187ec6a65",
        "cursor": {
          "ref": "bcef0930-824e-48eb-bea6-2f95af6ae433",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "33b41aaa-d076-4f36-8d3d-790d31803e22"
        },
        "item": {
          "id": "832acdf3-187a-4f4f-9739-24d187ec6a65",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "71b24e6a-ae3f-43bc-9e2b-13863dd57cab",
          "status": "Not Found",
          "code": 404,
          "responseTime": 56,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e13a895-07f6-463a-a992-f33ff646073a",
        "cursor": {
          "ref": "964dc87e-0362-4435-bcf5-223b94fa2c68",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d8b30f72-e2f3-4d1b-b13d-2bc3e264add3"
        },
        "item": {
          "id": "6e13a895-07f6-463a-a992-f33ff646073a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "fb82fb18-1089-4ac9-99f7-edb4c61608ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "e6077557-4e77-4a56-a31f-8d0c65b26aa1",
        "cursor": {
          "ref": "9866dc10-8808-4c84-9a5c-7bab92f5beea",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3c8ae573-1241-4656-b7b2-d0ad1e1655bd"
        },
        "item": {
          "id": "e6077557-4e77-4a56-a31f-8d0c65b26aa1",
          "name": "identifiers"
        },
        "response": {
          "id": "73ca5441-2273-49c4-bca5-5cfc26b6ba69",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79633a8c-787f-4382-91ea-acaee3c2767d",
        "cursor": {
          "ref": "f685177d-baa2-4e3d-9230-6f5ecba0a8e0",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9a0bed3b-13ab-48d7-8477-93f13a75d761"
        },
        "item": {
          "id": "79633a8c-787f-4382-91ea-acaee3c2767d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c9a2c3b9-f162-47e3-a0d9-0987bdfa708f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25afbd6-fab2-4dac-b845-c23eec268906",
        "cursor": {
          "ref": "a852fe6f-c495-4b3a-9409-505bbfab80dc",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ebf90a64-42ad-4f22-8700-0e745b0fdc35"
        },
        "item": {
          "id": "b25afbd6-fab2-4dac-b845-c23eec268906",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "aca4874b-5402-4cf6-b5ef-3046e4bd7bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f259e360-5270-44d5-acfe-4230c3e45268",
        "cursor": {
          "ref": "124132df-df0a-4b58-afff-0e0182c0d695",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9c6a63a1-96c4-4bb7-9a9e-baef9e87495f"
        },
        "item": {
          "id": "f259e360-5270-44d5-acfe-4230c3e45268",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ef5f3a1b-cb08-44ba-9753-9e3ab2a3fb28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17553fd7-f540-4794-92a9-52a8c6f1d53f",
        "cursor": {
          "ref": "b01f5a8b-538b-418e-a9a3-322b2d469a74",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "908139b3-6b92-4357-a809-d80c44c16204"
        },
        "item": {
          "id": "17553fd7-f540-4794-92a9-52a8c6f1d53f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ab94d770-a04a-4dd2-954f-599f839eeb54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e09379c-bf5e-4b01-9008-474da2e3773c",
        "cursor": {
          "ref": "746d5cca-5430-4426-b950-595b252eeb59",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "449a6fb9-1d50-4cb3-b637-8195937f97f1"
        },
        "item": {
          "id": "6e09379c-bf5e-4b01-9008-474da2e3773c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e52434d3-3957-42bc-809a-cf0e7f52b4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da11a65-aa52-435b-8c8f-88ecc3cb6ee1",
        "cursor": {
          "ref": "64501fe3-dd22-4a7f-ad63-eb13bd6deca8",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d8510244-645a-47f4-9a65-2ace2d321adf"
        },
        "item": {
          "id": "9da11a65-aa52-435b-8c8f-88ecc3cb6ee1",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0f310193-f253-4b13-b425-5d983e5f864b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e007e7-34ed-4a98-b2f5-5ed56983d9ee",
        "cursor": {
          "ref": "16b59c88-894e-469c-8fa7-1fc87d8e05c4",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "23f272fb-ea28-4d31-bad4-ef01986df1e5"
        },
        "item": {
          "id": "07e007e7-34ed-4a98-b2f5-5ed56983d9ee",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3a08d625-d635-4217-8eda-5bb0f4313f46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7918e575-e572-4263-b13d-25b66a925d52",
        "cursor": {
          "ref": "79d15145-9db9-4227-8560-3327a860e01a",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "07a8946f-34a7-4a74-ad79-25abc663ca78"
        },
        "item": {
          "id": "7918e575-e572-4263-b13d-25b66a925d52",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "093c8486-a3d3-4422-a112-64b84e8712eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a5a2ab-eebe-400b-9b2d-a144cdd8b8a4",
        "cursor": {
          "ref": "d34badd6-6447-46b6-a7f4-eb0fa729d8c6",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0a3fe64e-db59-48c5-a3ec-78060e7c3bca"
        },
        "item": {
          "id": "c8a5a2ab-eebe-400b-9b2d-a144cdd8b8a4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c0ee2bec-c130-457c-9c3a-72351ba71b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f47aed2e-fc93-4f6b-863e-86bd19dd7fd5",
        "cursor": {
          "ref": "39d82206-472f-4b64-879b-e1c195ca725b",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b8b122b0-024f-497b-850b-869edabc25d4"
        },
        "item": {
          "id": "f47aed2e-fc93-4f6b-863e-86bd19dd7fd5",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0767d340-bd16-4570-9b03-4576726946c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe3d85f-23c0-4598-bd8b-831a281a18e2",
        "cursor": {
          "ref": "1df046e1-0d89-429e-9eaa-029a023dd28e",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9304f987-1de6-4b20-8faf-987fcbec6f39"
        },
        "item": {
          "id": "cfe3d85f-23c0-4598-bd8b-831a281a18e2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ce3d4cf5-b48f-4df7-a3ad-acc706d4c9a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a182a3f-ed75-4d2d-a168-9ea05d07a426",
        "cursor": {
          "ref": "1ca76dc3-c3e2-4d9e-8ed0-dfd0d9296e8d",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "83149989-9e13-46ed-bff8-4e74ba6642c7"
        },
        "item": {
          "id": "0a182a3f-ed75-4d2d-a168-9ea05d07a426",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "82572f21-8f71-4fb1-80a5-04c279ce42cf",
          "status": "Created",
          "code": 201,
          "responseTime": 816,
          "responseSize": 980
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "0a77f8c8-320a-4022-bd6b-f84c6c3dbe18",
        "cursor": {
          "ref": "6fd06a6d-b0e6-4a38-8985-21f6a61afc53",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5fb1977b-232a-46cc-a4fa-46bf7fc3b5fa"
        },
        "item": {
          "id": "0a77f8c8-320a-4022-bd6b-f84c6c3dbe18",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2016f963-7648-421b-8be4-73c709a8c299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e123f2c4-0646-4b08-af74-f607dd809030",
        "cursor": {
          "ref": "a07d90c1-e786-48ac-aaae-b6fbfa4a7435",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d11e2ccd-150f-466d-9f80-9dd77c44d1b7"
        },
        "item": {
          "id": "e123f2c4-0646-4b08-af74-f607dd809030",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9a94d969-ea13-4f0d-8b77-45694cc79c10",
          "status": "Created",
          "code": 201,
          "responseTime": 6974,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "a3d0c5e7-d4f6-47d7-8b4e-2f2b11d5ad23",
        "cursor": {
          "ref": "e33fe2fd-1d12-4ea8-a38e-229772e9128e",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3f71ffd8-7bb8-4509-98af-b43b16fdefa3"
        },
        "item": {
          "id": "a3d0c5e7-d4f6-47d7-8b4e-2f2b11d5ad23",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8372f8da-e3f6-49f7-836a-da0fa9d14e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 468,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81b07bf4-5d8e-49e7-840a-3c51c33d2eba",
        "cursor": {
          "ref": "62c7475b-90b1-4c6b-bd5f-b2b4533460f6",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "7dc1adee-afe7-4d35-8ab4-33994c588dab"
        },
        "item": {
          "id": "81b07bf4-5d8e-49e7-840a-3c51c33d2eba",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "60838712-65ad-4308-a8b3-7767b5268301",
          "status": "Created",
          "code": 201,
          "responseTime": 9828,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "4474177f-f3b7-4777-a42c-863dd41f320f",
        "cursor": {
          "ref": "4b84387f-dfe8-4bba-bc3b-fd3bc93f4511",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8ae3213d-609c-4592-99a8-37583dff9620"
        },
        "item": {
          "id": "4474177f-f3b7-4777-a42c-863dd41f320f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1cac344e-819a-47c5-a2d5-8140465a81c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2289b16a-0a8b-4397-815d-0cd4b2338b15",
        "cursor": {
          "ref": "cd35efd0-6b90-45f2-b672-6e26796294f9",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "be9c2833-2826-4f6d-8dc1-f78596af8442"
        },
        "item": {
          "id": "2289b16a-0a8b-4397-815d-0cd4b2338b15",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0dbc10dc-5761-4129-8897-1e6f96d16892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7579d322-2d28-4d5e-91ca-a76ad8a188b2",
        "cursor": {
          "ref": "ad4c7faa-9415-4f69-a703-ee2c8053f795",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7acb30f3-b012-48c5-9ed3-da6dcd6d751b"
        },
        "item": {
          "id": "7579d322-2d28-4d5e-91ca-a76ad8a188b2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "081a264c-cc09-4ee3-a517-944f17039dd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b9d1f2-5556-429b-a9ad-6270b723b50f",
        "cursor": {
          "ref": "7a2d4257-836f-4531-a0d4-7ccb33622255",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f270dadc-32ae-4e96-a0c6-0a3745ca04f0"
        },
        "item": {
          "id": "20b9d1f2-5556-429b-a9ad-6270b723b50f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6ca0fce4-3fa7-4629-9d57-f3591400a16a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3746a9-7db7-4489-92a1-2fd0be76b44e",
        "cursor": {
          "ref": "27cd0179-b3c0-4153-9ec9-005ede04a11c",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f15c11b3-a8af-446f-a671-92657009a57b"
        },
        "item": {
          "id": "5f3746a9-7db7-4489-92a1-2fd0be76b44e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "14a25215-e177-400a-9924-d9650f3133d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f32e9ad-eb5d-4097-acbf-85b063890abc",
        "cursor": {
          "ref": "f472e070-4084-491a-a085-568a7055774c",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9546b624-0fcd-4b4e-ad33-45b85393d7cd"
        },
        "item": {
          "id": "8f32e9ad-eb5d-4097-acbf-85b063890abc",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b25030e8-9704-483e-8b5b-ebcfcb5f2b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16917ce7-6489-4527-8e94-636618c136f7",
        "cursor": {
          "ref": "64c1cf08-517e-4257-a790-95f934bf2e0e",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5eaeb79d-dccb-4366-9dd7-927b5d458b70"
        },
        "item": {
          "id": "16917ce7-6489-4527-8e94-636618c136f7",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "82eda7e5-7c0b-472d-814d-67be4b83d82c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0734fb75-5b88-40b7-90ba-5c359b49e6c3",
        "cursor": {
          "ref": "36406df4-9c6b-431d-a324-b812cbca095b",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a8789f19-87f7-4d21-96e0-d588923dd5b2"
        },
        "item": {
          "id": "0734fb75-5b88-40b7-90ba-5c359b49e6c3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "248e0c5c-9b35-45fe-a5d1-ff0652014cfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8c71c3-4092-4782-ac25-37e4a8816a1b",
        "cursor": {
          "ref": "eab7a713-aa0a-45e3-a18f-f53d051100f5",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9cdc3b34-4124-4dd6-bdc1-fa71692527eb"
        },
        "item": {
          "id": "ed8c71c3-4092-4782-ac25-37e4a8816a1b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "36338d22-cc5e-441b-808b-6a5067d8f26d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b3502d-e0fc-4f6e-861c-d9db49b99d87",
        "cursor": {
          "ref": "a0c62f10-86c7-4f73-90fb-750300e27a84",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bbf26fdb-d427-4065-bf72-1ecddf29d208"
        },
        "item": {
          "id": "57b3502d-e0fc-4f6e-861c-d9db49b99d87",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b0718c8d-1391-42ed-b040-49555896b271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8454966-3a4d-45f6-bcc7-1d16b8548807",
        "cursor": {
          "ref": "1350ef37-4968-4047-be4f-21683f52126f",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "dccf4e98-1a56-4ad9-bcfb-1c2476953849"
        },
        "item": {
          "id": "c8454966-3a4d-45f6-bcc7-1d16b8548807",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "74c47185-fcc7-44bb-8309-13cb1c271245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972566af-2f57-47d6-90c6-aa0a956f2ad5",
        "cursor": {
          "ref": "51f4d325-9ce6-4f3f-a0ff-31894e571d41",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2e0c5396-5aef-4826-b4ef-72b3ce663d56"
        },
        "item": {
          "id": "972566af-2f57-47d6-90c6-aa0a956f2ad5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4a644039-7462-4a20-a3ee-f1735fdb4b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe22422-a11c-4c61-b585-3e03c18e5122",
        "cursor": {
          "ref": "b4721824-7f86-4eed-be26-b49889e979ce",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8cc1440d-1c41-4d12-9a9f-ee99cfe2e0c1"
        },
        "item": {
          "id": "dfe22422-a11c-4c61-b585-3e03c18e5122",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f76e1a2b-60f1-49d1-a361-814ce747c12d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a72c6a-f83b-4acc-9896-a8a09a11506f",
        "cursor": {
          "ref": "92bc2e8f-1afa-44c1-97cd-2cff47dd8eed",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "11b9e377-6df9-4879-8b15-5a35ac6eb2ea"
        },
        "item": {
          "id": "b5a72c6a-f83b-4acc-9896-a8a09a11506f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "01db22ed-51e9-471b-ab26-189fd604aff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63c7430-4366-4db9-9c4b-edb1bf110f77",
        "cursor": {
          "ref": "9ffd5f11-4c01-432e-8d54-8ef6598966a8",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "656dedb8-8201-4d3c-bda6-5a6f7c66be39"
        },
        "item": {
          "id": "a63c7430-4366-4db9-9c4b-edb1bf110f77",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "7d628c2e-d5a9-48ac-bed0-457c5e6fb5be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81655597-4ccc-4e15-a268-917118d93039",
        "cursor": {
          "ref": "cbedb49d-1625-44fd-aefa-7424def6c670",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6ad79187-e44c-4c96-b4ae-36ffe9663715"
        },
        "item": {
          "id": "81655597-4ccc-4e15-a268-917118d93039",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "39f24602-6e9d-4f22-9fce-11417ceee8ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc9514c3-ca02-4ab4-a50d-046250ef76a0",
        "cursor": {
          "ref": "39441f3c-04ab-4c15-bedd-687ccf5a15ef",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4b9185ee-7e2f-4cfd-bcd9-ae8454640388"
        },
        "item": {
          "id": "dc9514c3-ca02-4ab4-a50d-046250ef76a0",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "829ac4a7-ef4c-47fe-a471-18faf8daae93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8f2d7f-e298-4aba-98a3-4a2fd0ce3e17",
        "cursor": {
          "ref": "064e6208-15b3-4354-9cb8-471cab0d5a77",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0440ed7e-7eaa-43f0-b91b-44d9078c7918"
        },
        "item": {
          "id": "1f8f2d7f-e298-4aba-98a3-4a2fd0ce3e17",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d01d7eed-0c54-4f68-8239-93e78cc687c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9d52e3-7450-44b9-87c4-e151a0abeac2",
        "cursor": {
          "ref": "a9c732c4-0db7-453c-be8d-2709cd94edc6",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "20e8b3f3-e392-4c40-ab7f-f54c747e3e6e"
        },
        "item": {
          "id": "fc9d52e3-7450-44b9-87c4-e151a0abeac2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e6de8c3c-a4e5-4467-88e2-5769d2d6d534",
          "status": "Created",
          "code": 201,
          "responseTime": 3604,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "07b5e59c-ccda-4e9a-867e-be8d4c793099",
        "cursor": {
          "ref": "d52d40da-2dcd-40ff-9d4e-b8ac5ec7bf60",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d6bf2aed-551f-4c48-ad68-647482634c51"
        },
        "item": {
          "id": "07b5e59c-ccda-4e9a-867e-be8d4c793099",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "44fd1131-f1b4-4098-8063-c215e0b24570",
          "status": "Created",
          "code": 201,
          "responseTime": 3449,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b86fb404-e858-45d9-a44c-0ec8f4fc2826",
        "cursor": {
          "ref": "27243e72-491d-4fef-8f23-eaf2de58da32",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "0214d027-a6aa-4312-8742-47373852de28"
        },
        "item": {
          "id": "b86fb404-e858-45d9-a44c-0ec8f4fc2826",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1cdd2199-5219-4661-9959-87d7eaa15f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849acaf1-d669-4ee9-b1cc-19bf3ec986e1",
        "cursor": {
          "ref": "7de08aae-d075-4d2b-b25c-fcab46c915b1",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3e732716-3c83-48da-8a87-283191142dec"
        },
        "item": {
          "id": "849acaf1-d669-4ee9-b1cc-19bf3ec986e1",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "00e1102a-161d-4265-884c-1c1e6b42549c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e2375c8-d3a5-4d94-83ef-3def0cb041e7",
        "cursor": {
          "ref": "269996a7-ae97-4257-844f-0a5873adb9e2",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "dbf452c2-1c7b-4309-8d20-617d3e7afd5a"
        },
        "item": {
          "id": "5e2375c8-d3a5-4d94-83ef-3def0cb041e7",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a296229f-5c04-4ab1-94f7-b8fee6a463b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5134462f-11c3-460c-a90e-b92ea089a254",
        "cursor": {
          "ref": "1b3b8620-5760-45af-bf36-b3a8cdac3139",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5a1b3f86-918d-48ac-aa29-d41749d4f641"
        },
        "item": {
          "id": "5134462f-11c3-460c-a90e-b92ea089a254",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7fbd76c5-0e3f-4a2c-9ce9-60018d2aca57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dabdf243-d3cf-4bba-8b36-7c6f1bc0f85f",
        "cursor": {
          "ref": "6a0be041-6e61-44e8-bf94-2f8f73584f73",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1992ff6e-bffd-4cb3-8863-75c0882fa18e"
        },
        "item": {
          "id": "dabdf243-d3cf-4bba-8b36-7c6f1bc0f85f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6c56df70-0ae6-4eff-bc84-b9c5463965bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de3d595-43f0-4813-9b2f-9b12ed378e2f",
        "cursor": {
          "ref": "c097e252-3e09-4823-90b9-62f80d7880b8",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d71bcfbd-0651-4423-97d4-801a3b270e77"
        },
        "item": {
          "id": "6de3d595-43f0-4813-9b2f-9b12ed378e2f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6ec77911-8aa6-4c5c-93ca-b6ded3a45058",
          "status": "Created",
          "code": 201,
          "responseTime": 2247,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "1c4fc205-7642-4c8a-a4ba-b510d4fffd52",
        "cursor": {
          "ref": "0c4a405c-f509-4ef4-a780-408e29f378f0",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5981cfac-d2f3-4231-b33d-9c3e1a72fa6e"
        },
        "item": {
          "id": "1c4fc205-7642-4c8a-a4ba-b510d4fffd52",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "de504f30-d50f-48e2-bcef-ec0651b082a4",
          "status": "Created",
          "code": 201,
          "responseTime": 2615,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "08638b99-b055-4b4e-b08e-bb2c5c6ad8d6",
        "cursor": {
          "ref": "7764133d-886a-42e6-8b10-c88db5c88a2d",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "956575ed-1941-4f12-983e-5685ab0240aa"
        },
        "item": {
          "id": "08638b99-b055-4b4e-b08e-bb2c5c6ad8d6",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6ffb7ca7-856e-4a67-8aae-95275561c669",
          "status": "Created",
          "code": 201,
          "responseTime": 2764,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "ad5b664f-380a-4053-b422-e6f0c288d656",
        "cursor": {
          "ref": "80752477-40c9-4932-b984-6427508d93c9",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "abc414f8-995d-4a9b-9a08-058c60177035"
        },
        "item": {
          "id": "ad5b664f-380a-4053-b422-e6f0c288d656",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2523a51c-a1e3-4ef9-b867-d73a7327e265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0755675f-7727-4eb8-b21d-9e66c14eafe9",
        "cursor": {
          "ref": "e4c19ffb-0b7d-416a-9ea1-dc27726ef803",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6842f05d-7885-4120-aa63-fe2f4dd5b19e"
        },
        "item": {
          "id": "0755675f-7727-4eb8-b21d-9e66c14eafe9",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1b93e3e8-d3b9-4d67-8622-7b69e1c4cef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f83b41-c311-4c4b-9146-9b734fa9a9d2",
        "cursor": {
          "ref": "8f718ed6-c361-4d9e-b026-b5d57933f7ab",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8f2fe225-6cca-4671-ad2a-f27d169a52e6"
        },
        "item": {
          "id": "f0f83b41-c311-4c4b-9146-9b734fa9a9d2",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "36b7245e-4999-4203-a5a7-bfa24a0c8995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a49b83c-6018-49a1-a472-b904813ea68d",
        "cursor": {
          "ref": "5404c0df-fda9-4a15-abfd-322dd4f20b12",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8241f0df-8239-4afb-86eb-51b57f738f1d"
        },
        "item": {
          "id": "4a49b83c-6018-49a1-a472-b904813ea68d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b70cf32f-4aa7-4521-872c-c4fd517fbf01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76901718-0108-4cb6-b7c9-41dae3da41b8",
        "cursor": {
          "ref": "9e71eb9e-7f61-48f0-89e3-9b379d75de65",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "815213ca-f376-4c24-879f-2cc30385fd88"
        },
        "item": {
          "id": "76901718-0108-4cb6-b7c9-41dae3da41b8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c47b82de-0779-47fc-b3ae-a183b03675c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fefabb4-ffab-48e6-8ce2-6a0e306da38f",
        "cursor": {
          "ref": "3ba18500-3da7-4dcc-a2ce-e426a4fe1c11",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "532efd64-88f3-4761-8615-4cfd2edf344f"
        },
        "item": {
          "id": "3fefabb4-ffab-48e6-8ce2-6a0e306da38f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4af41702-4d07-46aa-94f0-817825585a64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79dd209-2092-432b-8817-2d475cd57bc9",
        "cursor": {
          "ref": "7d186ca9-8720-425d-87c9-178df501ac66",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "49678757-dd3e-4917-ad7d-484c24f09937"
        },
        "item": {
          "id": "a79dd209-2092-432b-8817-2d475cd57bc9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2c29feae-28ac-4bed-aa7c-45e61378f2a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d02c598e-60e5-4d9e-aa5b-828c8fcba67a",
        "cursor": {
          "ref": "cd49e9b4-251c-4439-b63c-b7bb969d27ed",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c5b2feda-d258-4956-94c4-a8d6234e544e"
        },
        "item": {
          "id": "d02c598e-60e5-4d9e-aa5b-828c8fcba67a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7881c7ad-d91f-41d4-8aed-d68e6dd132ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff4d2f7-9c5e-4f3e-b4fb-10578ed083af",
        "cursor": {
          "ref": "ccd81fcb-a1dc-471a-90ae-0ecf7191a80b",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "589fecdf-2529-4585-b225-c734a3e7e2ab"
        },
        "item": {
          "id": "8ff4d2f7-9c5e-4f3e-b4fb-10578ed083af",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "132cec80-6b59-406d-8ecb-cee2a3e75db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08bf1d7a-6845-4250-bd6a-f421e52f9472",
        "cursor": {
          "ref": "0e832368-29b7-4c90-baa2-1ce9f9f44699",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "90c262f7-e314-4bb1-9b3e-cbeac7b04ca1"
        },
        "item": {
          "id": "08bf1d7a-6845-4250-bd6a-f421e52f9472",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ad7c3d2b-904a-4436-ad8c-2057acc13f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a2a60d3-b0aa-4f3f-83cb-cc8384abb0e7",
        "cursor": {
          "ref": "35bff034-fd91-45e4-9a23-3d196a3576f2",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8c06e018-5eda-4384-a3f9-f5fc983f78bd"
        },
        "item": {
          "id": "2a2a60d3-b0aa-4f3f-83cb-cc8384abb0e7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "28b3388a-d573-4c5c-ac8b-f7cf102f22d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61960047-3dbe-4103-8fab-3663f4d59044",
        "cursor": {
          "ref": "3db7f560-9323-40e4-b2f9-ee9936073e52",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f42ba788-6760-45cc-a042-b9a7d3d2590f"
        },
        "item": {
          "id": "61960047-3dbe-4103-8fab-3663f4d59044",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3f779760-7a37-4e9a-b4fd-0dff797bdac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2fe6c8-73ce-4688-8e51-b3cd34ba75df",
        "cursor": {
          "ref": "856b67cc-1eec-4f8d-a96a-ff51456debc9",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "6ce282ac-0a35-460f-b3d4-85aae532d5c1"
        },
        "item": {
          "id": "ec2fe6c8-73ce-4688-8e51-b3cd34ba75df",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b0194f01-9783-4a6c-96e2-6ea5c49249b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365dac38-aeb8-4201-b63f-8db9504ea1ba",
        "cursor": {
          "ref": "5ab553e9-1c0b-4408-b47b-bc1939c0a02e",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5e521781-2b17-40af-be5b-f2f0a61e87d4"
        },
        "item": {
          "id": "365dac38-aeb8-4201-b63f-8db9504ea1ba",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "97ff688d-95dd-40c3-b886-20a31b7f50d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bfd476b-8a6c-4087-9bc1-110e96e4adc6",
        "cursor": {
          "ref": "1fd4765b-b272-4059-b470-eaac023b9ae5",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7f0aabec-ab70-40a5-aa85-fe06243247a5"
        },
        "item": {
          "id": "4bfd476b-8a6c-4087-9bc1-110e96e4adc6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a96257fc-c85e-4d8c-aa1b-9f02fe10f96d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c59f6f-330a-4bde-8889-9d3a694e5c97",
        "cursor": {
          "ref": "0bd0c89e-f2eb-4ec1-a636-42c8d20f1dc7",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6a350a26-f447-47b4-8fb5-255b81780393"
        },
        "item": {
          "id": "84c59f6f-330a-4bde-8889-9d3a694e5c97",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "00232822-4f81-401d-9b2b-d77f3309185b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5560ead-4526-41cb-a804-2f0efa929594",
        "cursor": {
          "ref": "115b3d03-a3d7-40b1-9744-69055072a88b",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "9a3ba605-f388-4584-a57d-2f7e7e018ca7"
        },
        "item": {
          "id": "e5560ead-4526-41cb-a804-2f0efa929594",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0df9bfd3-ed41-4b73-a7ee-7c7292844741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39097e15-ba77-4025-84ea-b30878b87b30",
        "cursor": {
          "ref": "2c0bfbd6-e2b4-470a-bd7d-20fe69139ac5",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "60e2e4d3-f065-48cb-a091-64ef7d0721e6"
        },
        "item": {
          "id": "39097e15-ba77-4025-84ea-b30878b87b30",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e8c4d402-acc3-4a71-8eb9-9f93af36006f",
          "status": "Created",
          "code": 201,
          "responseTime": 2750,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "a0588aa6-41d2-4a5f-b95f-5f25801e4966",
        "cursor": {
          "ref": "6413809c-8f1a-4634-8207-eacef6340dd9",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2cc686d8-5b5a-4773-b8af-69e09b125ecb"
        },
        "item": {
          "id": "a0588aa6-41d2-4a5f-b95f-5f25801e4966",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "26fd5774-eb2d-4bf7-882f-0cfb15483ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8816b7c1-ba0a-491f-8ffe-3e37a54b1faf",
        "cursor": {
          "ref": "593d29ec-52cc-40e1-82b9-a142b9397922",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6b4d4e6b-ee1e-4044-b043-e9cd98a6d1d6"
        },
        "item": {
          "id": "8816b7c1-ba0a-491f-8ffe-3e37a54b1faf",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "aadb2c0c-a514-49bb-813e-45bb9f9fc6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f407fe6a-daec-40eb-9aab-e0e8d7e5bae7",
        "cursor": {
          "ref": "b7798b97-1913-4d54-a833-ec93cf8107f0",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3e3c1da8-02d9-40c9-ac48-2cc42dc4b452"
        },
        "item": {
          "id": "f407fe6a-daec-40eb-9aab-e0e8d7e5bae7",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "bdff46c4-2e64-4f50-90c7-59d3ff043662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30ec78bc-bc49-4c87-9a69-686e04216974",
        "cursor": {
          "ref": "6c68c207-0971-46de-9ccf-904e48b2aad1",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "aead9bc7-e806-4147-a28d-9810270c4957"
        },
        "item": {
          "id": "30ec78bc-bc49-4c87-9a69-686e04216974",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6f0460bf-d28e-4034-8502-5b5158324901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "635d3b3c-cd7c-4c61-b1e0-bfb46a597c28",
        "cursor": {
          "ref": "d5b1393b-40e9-43b1-854d-559adfdc25b4",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "afaa8a85-debe-499f-9a57-3d531f128dff"
        },
        "item": {
          "id": "635d3b3c-cd7c-4c61-b1e0-bfb46a597c28",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "db2887bd-33cb-4063-bf77-81161ed91c9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef89710c-1663-4bcc-8f08-3308fe12e423",
        "cursor": {
          "ref": "3a0087a5-2ea6-4db5-9a0c-ffd0cbd09afb",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "4ab74680-f47b-44ac-a9f5-59b2c46f5ec0"
        },
        "item": {
          "id": "ef89710c-1663-4bcc-8f08-3308fe12e423",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d77bc330-3e1c-45e2-a5c8-1180003d26e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c55e53c-b5a3-4b52-abe2-be48764a8969",
        "cursor": {
          "ref": "2a56a04a-4b46-4f96-908b-a3c05491b350",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e38c74c0-2c1b-4c9e-a90a-06cf9a2e0b08"
        },
        "item": {
          "id": "0c55e53c-b5a3-4b52-abe2-be48764a8969",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "aa75370b-7ccf-4962-9a96-f6feb8b2ded5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ad2fcd-4d72-424a-b1dd-ea7aab11fec1",
        "cursor": {
          "ref": "f4bc22ca-dd80-4855-af51-68ee8a390444",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "aebfd25c-e486-4ecb-9aed-00457f7046e6"
        },
        "item": {
          "id": "40ad2fcd-4d72-424a-b1dd-ea7aab11fec1",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "82a51da9-6e97-4704-ba9f-aa4a268f8d48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25755bb6-9aee-43dc-a182-2afcc7f7147e",
        "cursor": {
          "ref": "daaa8c12-eaa5-49fb-a3b3-058100bfa600",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2fc17ee4-b437-4a1a-96bb-05583be023a4"
        },
        "item": {
          "id": "25755bb6-9aee-43dc-a182-2afcc7f7147e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d429a230-8dc5-4e01-b8c6-fec79333d76c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90943a0e-204f-47e4-9c28-2e37adb3a785",
        "cursor": {
          "ref": "b8e03663-a8c1-4283-a603-0c5c109cdc32",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "939ceecc-4ca7-4303-9382-70d34e99b73f"
        },
        "item": {
          "id": "90943a0e-204f-47e4-9c28-2e37adb3a785",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "dad0f809-1fd3-4850-aca4-68c70175a09b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37215c85-3ec4-4e2c-9d21-745591e197e4",
        "cursor": {
          "ref": "3a98c64b-119c-4906-9a06-42020b572ad5",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7baad8b7-b14a-43e7-a587-62d56de03158"
        },
        "item": {
          "id": "37215c85-3ec4-4e2c-9d21-745591e197e4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "febceedc-6fa2-401b-88fc-ec7ca5e398f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "211e2f51-ae12-41b1-be2b-bca38f145ca9",
        "cursor": {
          "ref": "03bf90c6-d675-4b6a-b3d8-c467bbb971f1",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "84686737-8263-4188-b5dc-04b29b3c4cb3"
        },
        "item": {
          "id": "211e2f51-ae12-41b1-be2b-bca38f145ca9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c052f747-7f57-4167-ace3-35a8c0f4cbb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "941eb35d-ac7c-440c-835f-044270cbf299",
        "cursor": {
          "ref": "d107793c-86f1-4efa-a184-1b5c7c92b4b5",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a6dcca46-ded6-41f7-b925-933fb5a296d2"
        },
        "item": {
          "id": "941eb35d-ac7c-440c-835f-044270cbf299",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "06e726fa-96ff-447b-b6da-0eb3f2057f1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3899fc48-54ad-4e9b-97c0-1b1ed71d77cb",
        "cursor": {
          "ref": "41bd9b12-62a0-40bc-9f0e-14ae94c1f362",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9742d2ac-03f7-403a-a8fc-95f2c1061618"
        },
        "item": {
          "id": "3899fc48-54ad-4e9b-97c0-1b1ed71d77cb",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f00c9760-7ab9-40c5-866b-e77c915f1aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891cf289-44a1-4ae0-8bad-c09728fbe0f4",
        "cursor": {
          "ref": "bfba34ca-ad56-433e-b348-d0f1aeed8463",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2403fc55-befe-44e2-9ad7-d874958e9cb8"
        },
        "item": {
          "id": "891cf289-44a1-4ae0-8bad-c09728fbe0f4",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "04e04beb-1708-4b1e-90f2-c49c18abd2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452c8e21-6b73-4fa5-9bcd-69df672e2b07",
        "cursor": {
          "ref": "b2526a65-ec8c-40bf-974e-b96eef22a26b",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3ef1eabd-8d13-41a6-a969-9da9b04753f3"
        },
        "item": {
          "id": "452c8e21-6b73-4fa5-9bcd-69df672e2b07",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b8a0e18b-2300-4c07-9e8b-b923f23818d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1c16bc4-7d7a-4d75-bcdf-573317df9133",
        "cursor": {
          "ref": "9b12a805-0eae-4968-ab6c-830675186d6b",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "758db5c6-69b4-40f9-ae85-1c447c1ae7ae"
        },
        "item": {
          "id": "a1c16bc4-7d7a-4d75-bcdf-573317df9133",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b3647d9b-a917-4e5b-8929-af806323069b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303b1ec3-0673-43c7-852f-cfb757e2d82d",
        "cursor": {
          "ref": "3ec165a2-a154-402f-8d5e-185db5a49450",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b6bb2574-98d5-4ed8-8f14-a52f2c2d2079"
        },
        "item": {
          "id": "303b1ec3-0673-43c7-852f-cfb757e2d82d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9a2816ff-ffc3-4fb5-80d4-a83162742204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a937b9-3ff5-45c2-b710-24a677323487",
        "cursor": {
          "ref": "7a0f1e2d-a87e-491a-a21c-bcb2b1ea090a",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d8d47762-f97c-41c2-8390-1cbfb8362a70"
        },
        "item": {
          "id": "83a937b9-3ff5-45c2-b710-24a677323487",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "67e3a95f-858b-42be-9b45-85dead11747f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63475ef-45c1-4334-9b5c-48903684f595",
        "cursor": {
          "ref": "6e2c82e2-b7f3-44be-8f80-36de71aa7167",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "61743b0a-89b8-4054-b944-6d77827ecc46"
        },
        "item": {
          "id": "a63475ef-45c1-4334-9b5c-48903684f595",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "91079dca-e452-44c3-aa71-3287892bf55a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c96d69b-a00d-49f8-a9a8-ab7dc20b0107",
        "cursor": {
          "ref": "2bf2c17d-d841-4dec-9ed3-485a55fa647c",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b5a0cb11-f09d-47ff-a870-e1d015094a8c"
        },
        "item": {
          "id": "8c96d69b-a00d-49f8-a9a8-ab7dc20b0107",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "fc0af165-6251-4178-8d08-5f239db3191a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a4a4283-4af8-4ab0-83e9-89c98432d940",
        "cursor": {
          "ref": "770688c1-723e-43f5-ad74-ab4652eb87d4",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e82947da-af17-4b21-b1ca-f1beac22e6b8"
        },
        "item": {
          "id": "8a4a4283-4af8-4ab0-83e9-89c98432d940",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "58254898-282b-4ede-b1bf-6d5e5e97a8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a92f72-4107-45fb-b291-1027eb7cbb0a",
        "cursor": {
          "ref": "69e32a17-8655-46be-814f-06b0a1064b57",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e70a4fd1-4430-4ea0-b0b3-63f4202b0ca0"
        },
        "item": {
          "id": "a8a92f72-4107-45fb-b291-1027eb7cbb0a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e52c0106-c7e4-445c-855a-16ee9113b06d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f33e67-7308-4747-b5e2-b8e86b3eaa19",
        "cursor": {
          "ref": "b57bb296-a4f9-4e0b-929c-faa579f40d17",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "fd7d59b5-7a12-4b91-b8f7-8c1be1e06bac"
        },
        "item": {
          "id": "12f33e67-7308-4747-b5e2-b8e86b3eaa19",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "11a091d6-106a-46a5-a0c3-5155bb5c24bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccfb99ca-d3ff-447f-ab0a-5dbc372d9de7",
        "cursor": {
          "ref": "9046a64a-d2ca-4b13-8ee8-fc2853f27c89",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f838bc3b-2f4f-4e2c-a9e1-2a33204310d0"
        },
        "item": {
          "id": "ccfb99ca-d3ff-447f-ab0a-5dbc372d9de7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b1646a87-6669-4aa9-b8ab-780942d1e23e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c60ea2d4-ea9e-417d-a56d-259ecfabaa3c",
        "cursor": {
          "ref": "260c03b0-1e0a-47fc-9d81-009468772164",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6238854a-f0fa-48b2-97ca-792a6aa01109"
        },
        "item": {
          "id": "c60ea2d4-ea9e-417d-a56d-259ecfabaa3c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "16188b57-e58e-4aaa-95a0-e3cb3d5bd648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d2fa84-3c44-42ab-87b6-28ba5bea934a",
        "cursor": {
          "ref": "9fb2551a-754e-4b00-9918-b1dd5a1c9650",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6a8ec7ea-e437-491d-a37f-78686026c9e1"
        },
        "item": {
          "id": "02d2fa84-3c44-42ab-87b6-28ba5bea934a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2dd5fb5d-d870-4e61-89fd-3fa9ac0a7a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ef2516-7ab4-4cb7-930a-936e8bdd4548",
        "cursor": {
          "ref": "184eea9b-ceb3-4b14-9ef3-9a679bb47e04",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "53c02c17-2a26-4898-b350-7687612217e0"
        },
        "item": {
          "id": "b6ef2516-7ab4-4cb7-930a-936e8bdd4548",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "163a43ec-5599-4d9e-a3ab-d16420186937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd19eca-75d5-4dc0-ad4a-72d0e4464655",
        "cursor": {
          "ref": "a280ebf6-b09f-4150-a8d7-c8113b9256e5",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "756a4698-10ae-4ec3-9483-ea3fe6299ab5"
        },
        "item": {
          "id": "0dd19eca-75d5-4dc0-ad4a-72d0e4464655",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "262c4740-dbda-4462-9aef-02d17f3777c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf01227-58a7-4854-a732-64bc68c3888e",
        "cursor": {
          "ref": "0b30f068-2091-4632-8fc9-0c50f985c87c",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e99647d6-f944-400e-9c2b-5050c1add153"
        },
        "item": {
          "id": "bdf01227-58a7-4854-a732-64bc68c3888e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f0596fb1-3aaa-4803-bcac-61858a17b501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784de2c9-c78b-486b-9632-b7a24bf2c96c",
        "cursor": {
          "ref": "4a01b3dc-297d-48b2-a52e-25c29dbfe752",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f6ff854f-a3c1-47d7-8012-e2bc92eae244"
        },
        "item": {
          "id": "784de2c9-c78b-486b-9632-b7a24bf2c96c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ea4362a8-e1d6-438a-94e0-fef25bf633ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "6c5d3ae9-a4df-42c6-a39a-62e2facc4215",
        "cursor": {
          "ref": "ebac41fe-cff0-4bc7-8676-767c841b7bd3",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "abc4d19a-c5cf-49e1-9c2e-87663da8e8f3"
        },
        "item": {
          "id": "6c5d3ae9-a4df-42c6-a39a-62e2facc4215",
          "name": "credentials_issue"
        },
        "response": {
          "id": "fb80bb16-07b3-4085-8538-45b4289fecbb",
          "status": "Created",
          "code": 201,
          "responseTime": 1973,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "1203e56f-533a-4542-a61e-e3b3cc60d109",
        "cursor": {
          "ref": "1b90459a-27ef-4da5-8be7-be0f205a0db7",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ff3cb1ee-3a62-4008-a6b8-6ab54265d731"
        },
        "item": {
          "id": "1203e56f-533a-4542-a61e-e3b3cc60d109",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6f44032a-ecf6-42d7-bf91-8a9847c2c54c",
          "status": "Created",
          "code": 201,
          "responseTime": 2650,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b17d9e0-2c78-401e-b616-f5f6f2ad8e58",
        "cursor": {
          "ref": "e617ce30-087c-4e73-8f79-097861e65ab4",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a0b678af-4769-4cf9-8378-3e056a438635"
        },
        "item": {
          "id": "0b17d9e0-2c78-401e-b616-f5f6f2ad8e58",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f0471cbf-7327-428c-9677-d59dcbe49874",
          "status": "Created",
          "code": 201,
          "responseTime": 2832,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb08ce92-f886-4f4b-9886-669ae7dcf4b2",
        "cursor": {
          "ref": "021b4a19-315e-49bf-b4c1-bc03866bff25",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "00d92fe8-f63f-49ed-9255-42b0b32f8575"
        },
        "item": {
          "id": "bb08ce92-f886-4f4b-9886-669ae7dcf4b2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4c535ac5-edc0-4640-a91b-e825c130e0f3",
          "status": "Created",
          "code": 201,
          "responseTime": 2513,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a05c90-f8df-461b-abde-752bceeb7659",
        "cursor": {
          "ref": "fe16340e-0ae3-4b4e-a707-fceef472ffc8",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8c301f81-1f7f-408e-b3a6-fb6a51ebc5c8"
        },
        "item": {
          "id": "d9a05c90-f8df-461b-abde-752bceeb7659",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "73279cf9-82ce-4af5-ac1e-9f6ed3a2885d",
          "status": "Created",
          "code": 201,
          "responseTime": 3535,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-29T00:47:00Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-29T00:47:00Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "21f5f181-fda1-44d2-9ad8-e1ccbd44a68f",
        "cursor": {
          "ref": "55c478b6-f369-4734-987a-c81b68541b58",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "186f97a1-a89b-4e99-933b-31c2e9020e42"
        },
        "item": {
          "id": "21f5f181-fda1-44d2-9ad8-e1ccbd44a68f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "293233a9-d6c9-4398-badd-85b84090dce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "7f4bff29-c7da-4426-b83f-e1d66cf77247",
        "cursor": {
          "ref": "9fd8d1e8-3c53-4865-84e5-d01e24414e57",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c51a11a9-32a4-4011-a21d-91f06f7346d9"
        },
        "item": {
          "id": "7f4bff29-c7da-4426-b83f-e1d66cf77247",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a54b2a32-1975-4f91-a486-1e8b0545161d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0efa4b9f-f57a-4750-934f-a962e88e2cb5",
        "cursor": {
          "ref": "c2a8cebe-0233-45a9-b741-42a83d006303",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "55b982bf-fab7-422f-8558-c3912c76405d"
        },
        "item": {
          "id": "0efa4b9f-f57a-4750-934f-a962e88e2cb5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "33a05595-5880-4e6b-8e2d-ec0dc5d20d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56cdee2-262c-493a-9dfd-184993a2e239",
        "cursor": {
          "ref": "382e75fc-13c2-4198-855b-d15c7a6a1606",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ccc94bec-80d5-4043-b487-a5a9874b5cec"
        },
        "item": {
          "id": "b56cdee2-262c-493a-9dfd-184993a2e239",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "fc92f597-7278-4cfc-bda8-73983c0e22d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed20ab4c-6421-4fa9-b621-8b7afc44f451",
        "cursor": {
          "ref": "f7cb79d8-79ee-4c6f-b733-f3b4f3142429",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4a7bdb56-4416-47cb-a84d-cea5b0be5e48"
        },
        "item": {
          "id": "ed20ab4c-6421-4fa9-b621-8b7afc44f451",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "cfc4de88-1cd7-4cf2-880f-5e20ab0225c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "635d855a-9f64-45d3-bc97-b6a82dd1cf50",
        "cursor": {
          "ref": "2517f2d4-45e0-47b4-851b-d90153a67bdf",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "cad07de3-8a65-4c0b-8a44-6aec18240373"
        },
        "item": {
          "id": "635d855a-9f64-45d3-bc97-b6a82dd1cf50",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2d6e8e8e-53c0-4ca0-bbc4-40874fb1aa8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5750a610-3d69-4114-9527-9213f3493a4a",
        "cursor": {
          "ref": "a55ca547-1215-4a49-95d4-4899c174f6b6",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "73ee5f4f-d0a9-46ba-a0ac-a7a765aa1ee1"
        },
        "item": {
          "id": "5750a610-3d69-4114-9527-9213f3493a4a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6097120d-2455-4898-8e3a-d9bc83d93416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "823dbb11-dc23-489a-8145-fcdba15b7121",
        "cursor": {
          "ref": "71e72db8-d40a-4294-be6c-3a262555b4f8",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6b867733-56cb-4ef1-b692-c70562b8341c"
        },
        "item": {
          "id": "823dbb11-dc23-489a-8145-fcdba15b7121",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3419f3a2-9107-41f5-ac77-d97bf69c2167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77230303-4725-4d7d-b593-b6d701f45653",
        "cursor": {
          "ref": "de49f344-7521-4a2c-9e5c-8b618267f3e9",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "306a1a76-e7c4-4d76-9c3e-179bf82076fb"
        },
        "item": {
          "id": "77230303-4725-4d7d-b593-b6d701f45653",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9d6cf967-1884-489f-9ae9-c022745c1292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69dc67f-b4b3-4464-9e1c-d0c162ffb651",
        "cursor": {
          "ref": "27f1e033-6361-4289-bf69-69a62726c7e7",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "fdb64223-7a83-405e-aff5-c24464d0fbe4"
        },
        "item": {
          "id": "b69dc67f-b4b3-4464-9e1c-d0c162ffb651",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "52f1e04a-7106-4b88-a68b-0b73b51de3f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9cd25f-b715-4272-af2a-bc6a509d57a5",
        "cursor": {
          "ref": "0983c088-201a-422c-8655-0c59fc10adb9",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b78007c7-0948-46b7-b1aa-dd5a005fa0db"
        },
        "item": {
          "id": "6d9cd25f-b715-4272-af2a-bc6a509d57a5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c5543dee-7a63-4dd6-b92a-b4bcc4d7beab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a8bf2a-de13-485e-8acf-5b424e168f8a",
        "cursor": {
          "ref": "2e52dcbe-27f1-4d10-bd94-5f051d3609ce",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c127808d-6d1a-4fc0-9ea8-87de54b9f490"
        },
        "item": {
          "id": "d5a8bf2a-de13-485e-8acf-5b424e168f8a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a160dd65-4ff2-4d87-9903-c9993127d80a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117f973c-11ca-4afb-9625-12f1999396f9",
        "cursor": {
          "ref": "42eb07ae-d3d1-45fd-9670-4bc0f6e440f5",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ef58213a-0f62-431b-8347-b75761072735"
        },
        "item": {
          "id": "117f973c-11ca-4afb-9625-12f1999396f9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cc7d59c4-1e53-4bc6-a773-19ec3b4c5bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6285a0-3dce-465a-b991-df34885cf95c",
        "cursor": {
          "ref": "fdf58488-4b4b-4a41-bdc1-8b28b7e45caf",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c80f316d-6009-4bc1-bdd8-979e10caa452"
        },
        "item": {
          "id": "1b6285a0-3dce-465a-b991-df34885cf95c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "24f32c47-3f3a-4a31-b084-d0501cb5b1d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4520238-746f-48d2-9a1a-401424acd276",
        "cursor": {
          "ref": "01907ee2-92d3-4fec-997a-1330d3a13c64",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1c4e03a6-2450-4536-8e4d-accf9f8d49d1"
        },
        "item": {
          "id": "b4520238-746f-48d2-9a1a-401424acd276",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "637587f3-0b27-43c0-abd9-11ca5562ccdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02937fe6-cbd5-4a96-b52b-bdfc5836eb6c",
        "cursor": {
          "ref": "0ddf5a06-8aaa-4f19-b7ec-aa1fc55ef077",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d82e0e93-3620-4911-b7b3-f95dbd62f734"
        },
        "item": {
          "id": "02937fe6-cbd5-4a96-b52b-bdfc5836eb6c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a35cf6c7-bf87-4d82-8090-acdbcaad6c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acbb5f01-cbd2-4e65-8658-8ddc6735e581",
        "cursor": {
          "ref": "950a70d6-746a-464a-acb9-2851025d261f",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a17257c6-82b1-4ccd-9a9b-2ddc255fb156"
        },
        "item": {
          "id": "acbb5f01-cbd2-4e65-8658-8ddc6735e581",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5c3667df-de87-4594-ade0-d46f3f208f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7e2c5c-9cab-4afe-a260-175309230741",
        "cursor": {
          "ref": "11893e9a-79f1-4f24-9199-5e25abe1217e",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "243c7614-84fc-4afe-93cc-bce8dcdc4f63"
        },
        "item": {
          "id": "9d7e2c5c-9cab-4afe-a260-175309230741",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b1326132-cb95-44b6-a092-1bb8273841d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75218819-5424-4d02-b1da-b52de052f31b",
        "cursor": {
          "ref": "d9844fb6-09c2-4ff3-a84b-98b7d4a1d303",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7987f930-4019-4c34-bef3-0fa12428d530"
        },
        "item": {
          "id": "75218819-5424-4d02-b1da-b52de052f31b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6cecfaed-2c64-4689-b45b-39ca9d100185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17701126-8158-4dbb-a12a-24373f7a2d91",
        "cursor": {
          "ref": "1a610917-19c9-4a10-8101-dd4fba4e9d59",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c31813d2-c34d-4987-846d-78220dfea2c3"
        },
        "item": {
          "id": "17701126-8158-4dbb-a12a-24373f7a2d91",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8db9bdb3-0e7a-4781-b8c4-adbb8e67a5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f2b1eed-7f00-4585-b586-3c352a504c1a",
        "cursor": {
          "ref": "e75d33a2-4d0a-466b-b565-6c60573b4264",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2cc5d508-28bb-489d-a49b-b1a36c9f0d91"
        },
        "item": {
          "id": "4f2b1eed-7f00-4585-b586-3c352a504c1a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5ccb2324-8c15-4f4d-8551-ba125654d995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14afb7db-4597-4242-bc97-f1269cbf50cb",
        "cursor": {
          "ref": "1e0d21a8-5c89-49bd-bcb0-d6fc9501dd85",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7f566856-968c-43e6-9d36-da1c75f9feb2"
        },
        "item": {
          "id": "14afb7db-4597-4242-bc97-f1269cbf50cb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "62bec4ab-e656-45ac-a228-79996a4d9ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9adf81ed-84fa-409a-bfa6-a4827b8c2227",
        "cursor": {
          "ref": "7c5eb61e-32d0-4a03-b1ca-ee04543122c8",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c446980d-3b6d-4388-81bd-28c94e2a00da"
        },
        "item": {
          "id": "9adf81ed-84fa-409a-bfa6-a4827b8c2227",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "09333787-4c00-4ab1-ac91-91a00b6b7bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e37626-a9f0-48a1-83c0-ed516cd45171",
        "cursor": {
          "ref": "30e05354-8064-49c1-8b4d-c4f3ea14e6c4",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a8655436-be7d-42b6-99b1-5fdc435bac22"
        },
        "item": {
          "id": "d4e37626-a9f0-48a1-83c0-ed516cd45171",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b5bd2cd4-a434-4368-9113-2d1302741b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af1d818-3964-499f-adf3-a59bea1ca536",
        "cursor": {
          "ref": "230a8f01-eb75-438d-aa9e-2a8a8cfa9cab",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "798c1e3b-d69e-4dee-a32b-390286e0b7e3"
        },
        "item": {
          "id": "0af1d818-3964-499f-adf3-a59bea1ca536",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f4637f5e-21ac-4294-a59b-31e8ea8fad9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce99689-ffd3-48d5-a9d0-2a7be75da635",
        "cursor": {
          "ref": "fd33ea90-0144-4c26-8dfd-b2dfdb84ddc7",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8af594f6-653c-40aa-9032-27f2ac6df008"
        },
        "item": {
          "id": "2ce99689-ffd3-48d5-a9d0-2a7be75da635",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "db6f3315-8c81-493a-97a4-1b8116f43634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6592a5-9a0b-4b4d-8084-9712a41518a5",
        "cursor": {
          "ref": "34579cc9-0e9d-4a40-8315-ff0c9e4519e2",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "11f108c7-3dae-4e16-9793-1f366e255578"
        },
        "item": {
          "id": "6c6592a5-9a0b-4b4d-8084-9712a41518a5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "03e1e91e-f4d7-4bcb-aaaa-9c2aa3ff1f92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ee62a63-da72-4b06-b688-7f69475bbe84",
        "cursor": {
          "ref": "78daf7e1-bd8c-4734-9aa8-35826bb017da",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b0cfb355-74e5-47db-a81e-e6deec44ebc6"
        },
        "item": {
          "id": "2ee62a63-da72-4b06-b688-7f69475bbe84",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c49bd3ad-144f-4aaa-a03c-10db77e73bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b5cde0-d897-484d-a3af-c274dd840b09",
        "cursor": {
          "ref": "45008b02-644c-4a80-95a2-dba0064bc067",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1067e979-2593-4136-acb1-d60e16141379"
        },
        "item": {
          "id": "b4b5cde0-d897-484d-a3af-c274dd840b09",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "dcc3a7da-292a-4280-b906-6bd1f23d5751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6684e73-4119-4c93-b327-52a16e5dfefa",
        "cursor": {
          "ref": "437602c7-1840-4cd0-a574-554d0f7b4519",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "45b4cf11-33c9-41ed-a0dc-972cb2ce1792"
        },
        "item": {
          "id": "b6684e73-4119-4c93-b327-52a16e5dfefa",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d44bd53e-54e7-416a-aa6f-e99e2a606d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c7b6450-c69b-4eb5-a194-82e233bc2ecd",
        "cursor": {
          "ref": "95882465-c5a8-436a-8c51-ca9250732661",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9e6764fa-78d3-49c2-a7d0-15c0684a65fe"
        },
        "item": {
          "id": "7c7b6450-c69b-4eb5-a194-82e233bc2ecd",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b5c66e15-d58c-4ff4-8112-af25246e3493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0647e113-3d46-4e2a-a1b5-2d7a3c4381d6",
        "cursor": {
          "ref": "c05afd1b-a376-4036-90da-3ee01013f0be",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ecc865f6-e0f4-4074-b977-ab9d28721d27"
        },
        "item": {
          "id": "0647e113-3d46-4e2a-a1b5-2d7a3c4381d6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3b7ac9e7-47eb-4bba-8c97-c1b4f84e06f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae4b4623-c90c-4d6e-ba57-c6aa61360ddc",
        "cursor": {
          "ref": "e0f3638e-ce6b-4f83-9cc3-9cc8c0bab753",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "16fab3f1-7f34-4a7e-81ae-b489cd45b52b"
        },
        "item": {
          "id": "ae4b4623-c90c-4d6e-ba57-c6aa61360ddc",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "12843687-5329-4315-b4e4-05cb5a85863d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52a6fa5-02d7-413c-af50-dd5a1640cd31",
        "cursor": {
          "ref": "1a7eb120-1468-4904-8b2e-3dccda92ed87",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "09aac5cf-1f1d-41ba-a9c3-7fd0b5c010d8"
        },
        "item": {
          "id": "f52a6fa5-02d7-413c-af50-dd5a1640cd31",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c0bda6cd-bbb2-47aa-8636-0f2d799e57de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "bef4bb96-9835-4012-81ca-a3d42049488b",
        "cursor": {
          "ref": "8536616f-acf4-4504-93b8-099fe3c3b26e",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "95ac743c-0d63-4b03-800f-05171a35d368"
        },
        "item": {
          "id": "bef4bb96-9835-4012-81ca-a3d42049488b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "89acd556-fb5f-4f28-b81e-0422cae0f1ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4719bb4-e814-4fee-9b54-458bf1299fbc",
        "cursor": {
          "ref": "2a3fb66f-9b40-4dc4-a1c5-d5b652340206",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b2ebaa25-1322-4172-b28f-2c563f4538e8"
        },
        "item": {
          "id": "a4719bb4-e814-4fee-9b54-458bf1299fbc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8f450bfd-e3e1-4287-995c-3ef586924885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1bae05e-bb0f-48eb-a7da-0809fed034cb",
        "cursor": {
          "ref": "de3f428f-6f5f-4d1e-9e8c-a71a810831f0",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "da62e770-40bd-4867-b4cc-b8d04968e3ad"
        },
        "item": {
          "id": "d1bae05e-bb0f-48eb-a7da-0809fed034cb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d5264c2d-6170-4774-95da-76275b1e296a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6693e50-6ede-44c5-9c7e-028ffe8973d6",
        "cursor": {
          "ref": "4032a3cc-4550-48eb-be9c-5db043bd2c96",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d4971297-5c15-4ea4-99a6-13597b8c2936"
        },
        "item": {
          "id": "d6693e50-6ede-44c5-9c7e-028ffe8973d6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "bcc322cc-325f-42e4-9740-26b9bdda851b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f28db4b2-83d3-4269-91e0-d9c6396ebb9b",
        "cursor": {
          "ref": "0699b480-23fe-4c8e-95e3-472af23d7e98",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "426a7011-96ad-4e47-bbbd-3d7fa22a6b4f"
        },
        "item": {
          "id": "f28db4b2-83d3-4269-91e0-d9c6396ebb9b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "de9bc71f-3dc5-4492-9544-863178dcab0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f01a3118-e4c7-4cad-96e3-c6b82690aafd",
        "cursor": {
          "ref": "99eda89f-7ae2-4732-b2ab-32950a286aa6",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3990264a-a3af-436c-b9ab-57bbf277a84a"
        },
        "item": {
          "id": "f01a3118-e4c7-4cad-96e3-c6b82690aafd",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d7f71184-a8e2-4efc-88b5-ee5ccca3aa0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d8d83a-4d1d-4de1-af4b-6be2a8bacc58",
        "cursor": {
          "ref": "9d5f8804-7f62-4c57-a6c4-b7dce3679125",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f2ecda43-25ee-403d-8a15-331b25c717a3"
        },
        "item": {
          "id": "e5d8d83a-4d1d-4de1-af4b-6be2a8bacc58",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "dcf53826-c369-44a7-b546-15d81a59fe63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3eb4cc-ebbb-4a82-a2a2-ab38d324ac1d",
        "cursor": {
          "ref": "abeb6f7b-a878-48eb-bd71-ffe92f62185d",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5be2aa9d-0c0b-4160-bb70-b4bbb5b52ef7"
        },
        "item": {
          "id": "bd3eb4cc-ebbb-4a82-a2a2-ab38d324ac1d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "00e772d7-759b-4789-ab67-807e51a4f9a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32fcf08-95e2-4436-9a2a-0a5ba7dd8727",
        "cursor": {
          "ref": "0cb1376d-9c47-4ee2-b7b8-145195833305",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ff40f4d5-5e28-4112-b60e-0d8f2d654cd1"
        },
        "item": {
          "id": "b32fcf08-95e2-4436-9a2a-0a5ba7dd8727",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "34581410-fc8e-4958-855b-0edcef5b2c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b27d438-6964-4f9c-b25b-213f6d5115ad",
        "cursor": {
          "ref": "6c5962e5-2a0b-4787-870c-0a82b6d40459",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1ff90d60-ee68-461f-b8a4-7db3c1783660"
        },
        "item": {
          "id": "5b27d438-6964-4f9c-b25b-213f6d5115ad",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "62178cb1-6c99-49ca-ba86-08e7c71e8603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913b9f54-6dee-49f5-837f-cd7faeb7d144",
        "cursor": {
          "ref": "ade2d0f5-4b54-4553-a9f6-8dec53083ed4",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3b2dcaae-7955-427b-bde6-d77d8043076c"
        },
        "item": {
          "id": "913b9f54-6dee-49f5-837f-cd7faeb7d144",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f24f4c29-fe4c-437c-934f-d45cce203456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e1c59f-73b7-416d-902a-721dd5148ebb",
        "cursor": {
          "ref": "e93330a0-957f-4ef9-a657-d0250c2b94d6",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "214afe77-5a18-414e-b2ab-28b82e29ba96"
        },
        "item": {
          "id": "45e1c59f-73b7-416d-902a-721dd5148ebb",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "31bf7997-d521-44d0-b9c0-2e03b15e9fbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c4abc2-e217-4383-9e42-97a0f1784c2c",
        "cursor": {
          "ref": "a5c28ad3-2dac-4a44-b877-94e61f750053",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1d613b3c-b185-4073-9141-f0cf04c013af"
        },
        "item": {
          "id": "47c4abc2-e217-4383-9e42-97a0f1784c2c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d1432dcc-b6ab-406a-85a8-36e8e5bf17bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e97eae-dde4-4cea-b6f8-f74e21f26949",
        "cursor": {
          "ref": "e3f3b789-1ac4-405a-af16-faddbef654cb",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9005ed1e-ee38-4554-8c6d-0760db4b664a"
        },
        "item": {
          "id": "d3e97eae-dde4-4cea-b6f8-f74e21f26949",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "96ae0a18-fb45-43cf-84a5-6a19bf9df8d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 608,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4173dc5e-8bd1-4abf-96fa-b2c5a13a6609",
        "cursor": {
          "ref": "1e33301b-6ed0-41f0-a05b-cdb68da01364",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4e5439ea-5024-4444-945d-6c0e373e2b2a"
        },
        "item": {
          "id": "4173dc5e-8bd1-4abf-96fa-b2c5a13a6609",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "930e3e8e-2e6b-43f4-9609-204785df31d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1aec0da-60b3-488f-abcf-9a9a83124507",
        "cursor": {
          "ref": "7904d9d9-b6fb-4251-bfdb-d5efe1ebf0ce",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "693d0d6f-7bfb-4658-b376-4c9be77314dd"
        },
        "item": {
          "id": "f1aec0da-60b3-488f-abcf-9a9a83124507",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f100ae1d-2039-42a5-9160-f1d811073bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb425e9-84a4-4752-ac65-eedb963139ce",
        "cursor": {
          "ref": "b368d57b-3610-404f-bfa8-c8cc00d4b715",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ca98250b-946f-49e4-8182-c296305bb5c0"
        },
        "item": {
          "id": "0eb425e9-84a4-4752-ac65-eedb963139ce",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "41d14dae-d7e5-4fb7-8044-aa3d913c44ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6912a6-21f1-41d8-97de-706d8118335d",
        "cursor": {
          "ref": "79adcfe4-26c8-47aa-9b0b-ea876aa381a2",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "58783ac8-ada0-42fc-8c7a-681f93b84a76"
        },
        "item": {
          "id": "8c6912a6-21f1-41d8-97de-706d8118335d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "89fa1867-cc57-469b-887a-d27960c9aff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74beadeb-8c74-493f-8e6a-93abd14069cc",
        "cursor": {
          "ref": "b6385399-ad07-487f-926b-4afec35068b5",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "cdcfca53-2c17-4269-a0a2-b4b4b9268cc3"
        },
        "item": {
          "id": "74beadeb-8c74-493f-8e6a-93abd14069cc",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7d6b9af6-afd9-405f-8953-bb7fca739b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6e33c61-92be-410c-a52a-0387d20f1d83",
        "cursor": {
          "ref": "a8b2622d-0013-4efd-a7db-b4393fdb636f",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "dbb75add-120a-4395-9cf2-3519c91c82f0"
        },
        "item": {
          "id": "f6e33c61-92be-410c-a52a-0387d20f1d83",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a1d93475-2f7b-456e-b84f-938ee2a690fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a078d19-c8b0-4c20-b83d-3c3d604f689c",
        "cursor": {
          "ref": "2647fab9-a567-47fe-89da-93f70ce5245d",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "87644320-f9b2-401a-b5ff-df501fd58cac"
        },
        "item": {
          "id": "1a078d19-c8b0-4c20-b83d-3c3d604f689c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "81fe4d50-3b55-48bd-b74a-5293823e8bf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03d69965-107f-484e-aa56-47e807aecae2",
        "cursor": {
          "ref": "2b825675-850d-4562-90ff-90a3aba8433d",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "7c80f8fd-83c6-4390-9f7b-8aa440d6315e"
        },
        "item": {
          "id": "03d69965-107f-484e-aa56-47e807aecae2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "86b17d4c-366c-4743-b649-290ee9dc82db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc7bb97-ca15-4615-abac-710f7eb6eb48",
        "cursor": {
          "ref": "1434f409-6c28-4598-a022-8f07fa6a8d77",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "65382781-0740-46e6-a0b2-d2f621b49192"
        },
        "item": {
          "id": "fcc7bb97-ca15-4615-abac-710f7eb6eb48",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "bfffef41-077e-42fe-80a0-2e05e95ab019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2dfd23a-1e59-4d69-a809-869cf8073c92",
        "cursor": {
          "ref": "0e576e10-7c2d-42be-a25a-afb520ae1d41",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "fd89345e-32e9-4a05-a700-716ae8577950"
        },
        "item": {
          "id": "c2dfd23a-1e59-4d69-a809-869cf8073c92",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "83b86d08-0f19-4b0b-845e-83f69ec86158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "694325ef-7da5-47aa-95b1-8527d0a16176",
        "cursor": {
          "ref": "f9a6d354-5c21-4d71-8831-c85d2bc92867",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2093dcee-a495-4627-a5d1-eb196c6facf1"
        },
        "item": {
          "id": "694325ef-7da5-47aa-95b1-8527d0a16176",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b48a033a-711b-4211-b56f-c08cf7f82df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd25ef1-a33a-4b8b-8a90-df568ec354e6",
        "cursor": {
          "ref": "13e1deb4-4017-492c-8473-3d9db7548a2d",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "fdc9655f-e3a9-43c0-8a65-537e47e93461"
        },
        "item": {
          "id": "3fd25ef1-a33a-4b8b-8a90-df568ec354e6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5f2e80e8-2eef-4d38-8975-72f6333ad49d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b3f8db-0ed8-4e49-85f2-6f729fa27e62",
        "cursor": {
          "ref": "19ac1bac-6cae-461e-afb1-ed80c90e0901",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6089a7c7-efac-499a-a6c6-b7fd32eed71f"
        },
        "item": {
          "id": "b2b3f8db-0ed8-4e49-85f2-6f729fa27e62",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "41083c6e-536b-4822-9495-7dec55ffa0b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee732fdb-a2ab-415c-b435-446dc8d773e1",
        "cursor": {
          "ref": "51a71b0d-d271-4974-b9ee-c8f94edc5689",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "eaebe8f3-6303-4aed-b5ec-ae583317fd35"
        },
        "item": {
          "id": "ee732fdb-a2ab-415c-b435-446dc8d773e1",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "63c1408f-c82f-4469-baaa-a316388dc7d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898ca9f6-1b23-4d85-a689-f5314fe288b7",
        "cursor": {
          "ref": "7dfad46e-8d65-4f9e-8a5c-d4fb4a92488c",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "85ffb08f-9f0b-4cbe-b0d9-2cb93a405670"
        },
        "item": {
          "id": "898ca9f6-1b23-4d85-a689-f5314fe288b7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "af85407e-e793-4636-978c-0c77c3647d65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac54c0c1-ba81-42b7-b57f-37e5819a4b2c",
        "cursor": {
          "ref": "a206b49d-dc4e-4049-9b80-cf76cf730df2",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6e0e4357-b7fc-4137-90d6-abadaf360b70"
        },
        "item": {
          "id": "ac54c0c1-ba81-42b7-b57f-37e5819a4b2c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d54e21e1-8aca-4598-a73e-58a36e4b86b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c02939e-4a29-44c9-b320-b428ce28dd4c",
        "cursor": {
          "ref": "9551c3a7-1cb8-4358-ac24-a243f9c9acb8",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "65c9606b-8262-47ea-9b86-79581809744d"
        },
        "item": {
          "id": "0c02939e-4a29-44c9-b320-b428ce28dd4c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "20e8dfe7-61b8-43db-9d5d-1a96ee487919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d5944b-2106-4ee9-aef4-b42ba8e45ae9",
        "cursor": {
          "ref": "5076ce2c-e44b-4b57-a04e-1eacfe3d13db",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "8d22c78c-093a-4df0-8353-9726078019e4"
        },
        "item": {
          "id": "76d5944b-2106-4ee9-aef4-b42ba8e45ae9",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "22fc8e7e-dcde-44e8-8837-3d32f7027341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d35744-626f-406c-9ce0-75d57b7a4878",
        "cursor": {
          "ref": "9e8f3372-fb49-4461-94f8-33e379740a72",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9ad123f1-f0f7-4a85-b5c5-5e8d3717a0ff"
        },
        "item": {
          "id": "11d35744-626f-406c-9ce0-75d57b7a4878",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "c3c1dfd7-6e35-4d76-80f9-cc1f45bd1004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef2289aa-292d-40a8-a95f-5a766db3ba2d",
        "cursor": {
          "ref": "bebb224c-3462-4b9e-8b63-662dc59caaee",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0473e7a4-9633-4b6f-a0c5-f00818dfccaa"
        },
        "item": {
          "id": "ef2289aa-292d-40a8-a95f-5a766db3ba2d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "bf32ca43-11d7-4bdb-87f8-ebed1f5a46fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b69565b-ce12-4cbe-b465-8f1e33432bba",
        "cursor": {
          "ref": "1c9b8d19-91ea-4bcc-906d-2ca26ef7e20f",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "dc780b6c-94a4-4f75-ae41-b2c71fb26cbb"
        },
        "item": {
          "id": "1b69565b-ce12-4cbe-b465-8f1e33432bba",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "13fa3292-cc6b-4679-b0ac-b53d8c90d9bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f76b08d8-57d3-4510-839f-b674f26f487a",
        "cursor": {
          "ref": "394628c3-7c8d-4a2d-85b4-3b343c215d31",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "598dedf5-08f0-4537-9fbb-b9cff39d318e"
        },
        "item": {
          "id": "f76b08d8-57d3-4510-839f-b674f26f487a",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "1d0a7616-900a-4cf0-94ac-969c1b5b51c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd63969c-ff37-4fb9-8466-0be8c15e8a7b",
        "cursor": {
          "ref": "0a9af388-abfa-4196-9e90-af367cb4e647",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "2ece4a83-3463-476b-9813-1d4de9f7baa6"
        },
        "item": {
          "id": "cd63969c-ff37-4fb9-8466-0be8c15e8a7b",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "9bd45212-e5b7-45c8-a6d8-dc6f28f06f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef99178-e212-4a7a-8972-e7fad2d11457",
        "cursor": {
          "ref": "3a531734-f90a-472b-8801-ea4e312ba2cb",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "13fc3075-d28c-4cb6-abaa-3f4204d87149"
        },
        "item": {
          "id": "bef99178-e212-4a7a-8972-e7fad2d11457",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "99168881-f763-4772-bdff-63da2c7c4986",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "ffd1150a-6a58-41c2-b7bd-55c307de959b",
        "cursor": {
          "ref": "33ceb23b-c84e-43dc-a998-24315608e9a1",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3820b14a-bec7-4171-9dce-4f2677c658c1"
        },
        "item": {
          "id": "ffd1150a-6a58-41c2-b7bd-55c307de959b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9eb2527a-db43-46fc-aa50-96776f7bb46b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a1b60d-6b0e-4054-91e3-3ffa8bbc1046",
        "cursor": {
          "ref": "59626d3b-f332-41ef-b165-a14f80f7db9f",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "863aae8f-61d7-4f9d-bb53-797761ed4680"
        },
        "item": {
          "id": "d4a1b60d-6b0e-4054-91e3-3ffa8bbc1046",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4bddcb6f-38d0-4bba-9da4-98ce8b6bb13b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37461a98-bfc8-4d5a-b009-4368b2ad0f31",
        "cursor": {
          "ref": "62949057-bcf0-472c-9dd7-1da912f194f6",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "47c724d8-e3c9-42c3-9cd6-930764d44024"
        },
        "item": {
          "id": "37461a98-bfc8-4d5a-b009-4368b2ad0f31",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1d0c6637-bbba-43a4-8e9c-6fea4981be64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c079e9-7adb-4ff3-b93e-3337d2f10e50",
        "cursor": {
          "ref": "e97262d9-6085-4c6e-836c-6353ce577538",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c89d8093-3296-4fdf-80ec-c7b27742f811"
        },
        "item": {
          "id": "57c079e9-7adb-4ff3-b93e-3337d2f10e50",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "fdbc1c8c-e675-4b50-b2ae-4ba0213136d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b94b34-6fc6-4dbf-b5fd-a0fe2e87e5f1",
        "cursor": {
          "ref": "b9f25cfe-a54b-4c21-896c-285120c8ceef",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "01eef4f3-c9e0-4759-9093-1074d0af5844"
        },
        "item": {
          "id": "17b94b34-6fc6-4dbf-b5fd-a0fe2e87e5f1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "374aa044-cb26-41cd-815b-1c37d4521594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa9cd33-3099-453f-a224-c9824108908d",
        "cursor": {
          "ref": "5ba6d475-a3d3-405e-acbe-2e4e098c12f2",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ba46239d-7c0e-4511-adc1-f0998ab7b535"
        },
        "item": {
          "id": "eaa9cd33-3099-453f-a224-c9824108908d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a74f0c94-d9ee-49d0-8026-2f5298777e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce3c8d8-f6fc-43db-b397-a03021b0e317",
        "cursor": {
          "ref": "de75762c-8e06-4495-adb1-f4aa2216cc75",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "dd83873e-fd58-4fff-bc01-7bc72408618a"
        },
        "item": {
          "id": "4ce3c8d8-f6fc-43db-b397-a03021b0e317",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "fb11eb82-3db7-4547-8dcb-b7f5fc5b0344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf1821e-52f7-4268-955c-0bbbf891c819",
        "cursor": {
          "ref": "5727622b-2093-4a83-9663-27b0ea552952",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "dca514a6-4272-45b1-8dcb-e6a13a38f7bf"
        },
        "item": {
          "id": "ccf1821e-52f7-4268-955c-0bbbf891c819",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e0eeee5f-83a4-475f-aba9-b92c896d4e0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d964fbc-3f4a-4db5-8af2-37294d53c7b1",
        "cursor": {
          "ref": "7e766668-501c-41ed-ae50-fbe660c53f95",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "90edc27b-a0bb-4a40-ab0a-970a26d62d7f"
        },
        "item": {
          "id": "6d964fbc-3f4a-4db5-8af2-37294d53c7b1",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "2995e17d-6406-41f1-b5af-987237f95135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d39cb25f-a1c4-4d70-be49-f773797f24aa",
        "cursor": {
          "ref": "12b128ff-307b-4abf-9c22-cddea8e9860d",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2b733f7b-fe88-444a-b603-a22008b989f6"
        },
        "item": {
          "id": "d39cb25f-a1c4-4d70-be49-f773797f24aa",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2e0a2056-ae4f-416c-9554-87676f295d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8ba462-fcad-4e66-bd72-0bee960dbe39",
        "cursor": {
          "ref": "93af5d4c-ffac-4450-8527-25d3a06204c5",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2db92ed1-28be-4a32-86e8-d5757f452cfe"
        },
        "item": {
          "id": "7b8ba462-fcad-4e66-bd72-0bee960dbe39",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "734e95ee-f9b0-4f29-b762-50a7fa557461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa613e2f-3e09-458f-a557-84fc2a8b17d2",
        "cursor": {
          "ref": "8d32b8e7-cec3-4bc3-b5cf-36de082dfb8c",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e3d3852b-ea5f-4402-b3fc-b0afe2ababaf"
        },
        "item": {
          "id": "aa613e2f-3e09-458f-a557-84fc2a8b17d2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c4b9b66d-dea9-49cb-bc74-e3919e35d802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9930871c-d590-46b8-839c-6c08a838c038",
        "cursor": {
          "ref": "92a3e122-6b57-4d28-9e27-88dd7e450336",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "cb8b5a4d-0d4d-4103-afce-7da7dc912c77"
        },
        "item": {
          "id": "9930871c-d590-46b8-839c-6c08a838c038",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e17c49b2-675e-48f7-a13b-82c0bdd8643c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171de44c-f2ed-47d3-9101-2c04e7a15abb",
        "cursor": {
          "ref": "4bfdb7a6-a97d-4dee-be84-9e5579400b59",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5d9eeb13-6368-41ef-a14e-6395792a25e8"
        },
        "item": {
          "id": "171de44c-f2ed-47d3-9101-2c04e7a15abb",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "11c2e742-dcbd-448a-b06e-62eb740793af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf93236-49c9-48e6-9125-44eb1fef126d",
        "cursor": {
          "ref": "a6b6dc3e-d282-411a-96b8-5eeea8331bf0",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "be71c5ff-88ba-4cb5-ad63-1e69d42a4be6"
        },
        "item": {
          "id": "8bf93236-49c9-48e6-9125-44eb1fef126d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ada73abe-5dfd-4b2a-81aa-b5fbb08d6a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772965c0-a6eb-4a2b-98bf-806a17eab3b9",
        "cursor": {
          "ref": "d1d97405-43f3-4ccb-92f1-3b5d230f7c85",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "620dba38-22e6-4bd2-a900-1b2405c8033f"
        },
        "item": {
          "id": "772965c0-a6eb-4a2b-98bf-806a17eab3b9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "079ce9f0-a466-4240-9656-48af0298d766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a9f98c-8777-42e8-be53-9ada870661be",
        "cursor": {
          "ref": "80b51355-dc1b-4a41-bbcf-616eca9a3762",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "54a1560b-7554-4491-82cf-fcf3d28be942"
        },
        "item": {
          "id": "72a9f98c-8777-42e8-be53-9ada870661be",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6129e473-b58b-4f60-9ffb-56cc15f8ea62",
          "status": "OK",
          "code": 200,
          "responseTime": 309,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "b631d40a-378e-40ef-9328-47b51163933d",
        "cursor": {
          "ref": "8c7066d5-cf36-4559-a953-2c2e219863e2",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4c5cf6ff-40b4-4f9f-967f-bdfa859dabdd"
        },
        "item": {
          "id": "b631d40a-378e-40ef-9328-47b51163933d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0b357f08-3665-49ce-9657-0f8a430b44c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c17a92-05d2-4e8c-8a0a-72f205661127",
        "cursor": {
          "ref": "decf8b54-13ca-4b3f-a417-f6aaa71150ac",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "da2ad7a1-8061-4cec-80dd-771164743b61"
        },
        "item": {
          "id": "e1c17a92-05d2-4e8c-8a0a-72f205661127",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "04b90273-86de-453f-96c5-3c192f820554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ac22b2-0f50-4215-a0ab-f8359b8d62cc",
        "cursor": {
          "ref": "7a211bb3-07f9-45ae-9615-de2ed9159214",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "50af35c6-1742-4b4e-8262-3e735f9c0fc7"
        },
        "item": {
          "id": "c5ac22b2-0f50-4215-a0ab-f8359b8d62cc",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5a560c8b-7177-4d89-91db-78d37c056881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc78beb1-fe94-4eb4-97df-61a5ce18b76e",
        "cursor": {
          "ref": "a41eddd9-7e21-400d-b354-0e1d1edf5096",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "bd1a8571-32e1-4ebf-993e-70c1203c9314"
        },
        "item": {
          "id": "bc78beb1-fe94-4eb4-97df-61a5ce18b76e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f4388249-bcb0-4a01-91ef-4e3a647ab871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d8ce50-bade-482f-bc6a-7757f577ff76",
        "cursor": {
          "ref": "d73cc904-7c95-49d2-92bd-d0342d846d3a",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c9a00791-f5bd-4024-8048-ccb1dd673ceb"
        },
        "item": {
          "id": "05d8ce50-bade-482f-bc6a-7757f577ff76",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c48d028a-e1d2-40d9-b4d4-b07fe0c18246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623988ea-1559-45be-a7be-4d773a4ae428",
        "cursor": {
          "ref": "ef945074-1502-4d33-a086-39600dafc62d",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2ed16af8-e2bc-4b4b-9a55-c6269b02e737"
        },
        "item": {
          "id": "623988ea-1559-45be-a7be-4d773a4ae428",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b828cf94-29d1-468a-a6af-851aec9783ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a776ee5-37a7-44ad-9831-ec4e7ba21149",
        "cursor": {
          "ref": "7b88702b-1eba-4017-bd7a-108a7239dea3",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ddeddfd8-3975-481c-b72b-3efa6bfff9d7"
        },
        "item": {
          "id": "4a776ee5-37a7-44ad-9831-ec4e7ba21149",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7025f521-bbd8-4b67-ac02-68c28f92bc4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2662ec00-ba6e-44db-82db-2273ff5619b2",
        "cursor": {
          "ref": "7bf7101e-fdd6-4171-ba15-7ee10bd294e7",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c62f882d-2f84-4775-8ce6-1ad5a1c5f5ad"
        },
        "item": {
          "id": "2662ec00-ba6e-44db-82db-2273ff5619b2",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "86a803e3-7743-4e1b-a49e-09fc715fdbf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04698dc8-b11e-4795-ad2d-9ad5d3824ee7",
        "cursor": {
          "ref": "4d511fe7-2f62-43e3-a0e3-ebba84677db1",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8888f70b-7dcd-4d31-b0d4-ec69c46da28c"
        },
        "item": {
          "id": "04698dc8-b11e-4795-ad2d-9ad5d3824ee7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e0734df8-cb30-4311-9dda-489bfcfef8cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ca9e0f-7a8d-4546-bab3-718a06a78ab1",
        "cursor": {
          "ref": "88a8f5b5-f17a-484b-9ec6-9748c82b20f0",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b1372c50-4666-448a-b971-bbbd5a502bbe"
        },
        "item": {
          "id": "55ca9e0f-7a8d-4546-bab3-718a06a78ab1",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2155ea27-f7db-41c3-8fc0-cee55898f452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49301237-5641-4d53-8256-a0c383a70456",
        "cursor": {
          "ref": "8967a994-7f04-48aa-8238-78059d9c96dd",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "19a1f05b-81d2-47ad-ac85-a434241dd427"
        },
        "item": {
          "id": "49301237-5641-4d53-8256-a0c383a70456",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "51aaac07-397c-4247-a045-31003b583e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "022a8577-8986-43b3-a962-8c61887c5652",
        "cursor": {
          "ref": "ea1e4e50-bb86-4b54-91e5-86ba50f2026a",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "639c4f3c-b1ca-49a0-a602-5d9692ea5513"
        },
        "item": {
          "id": "022a8577-8986-43b3-a962-8c61887c5652",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "49e1c452-1b17-43ee-8959-260020010dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d713dcb-d57d-4ce6-8b22-772b282f3dc1",
        "cursor": {
          "ref": "ed149fc7-189d-410e-9720-244343240bdd",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "069a71b3-3ef5-4427-be39-aa7e91b7e8ec"
        },
        "item": {
          "id": "6d713dcb-d57d-4ce6-8b22-772b282f3dc1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "995e225e-32cb-4255-b166-59fa20b9b1cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c14c70-c2b8-4e79-8a68-cc1282fc3b0d",
        "cursor": {
          "ref": "84e38a4a-6873-4528-8ca1-296e558d72fc",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1b917cd0-c780-416d-81b1-b09736c293e0"
        },
        "item": {
          "id": "d5c14c70-c2b8-4e79-8a68-cc1282fc3b0d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a6adf68b-3721-419f-8d58-551dc3727d08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "211d14e5-44ab-4ef3-8957-609226fcf07a",
        "cursor": {
          "ref": "999d3070-138b-43af-8773-85600737555d",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6d5d6ba9-1e53-411b-8ac6-9ba8664bf692"
        },
        "item": {
          "id": "211d14e5-44ab-4ef3-8957-609226fcf07a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2afb74d1-25ee-4f49-9b02-e06de2c493e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de59b8a0-2a89-472a-8768-a4d59d053fdf",
        "cursor": {
          "ref": "17a2fe1d-915e-4e01-96b8-477b75f498d3",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "33918f15-4e28-4304-b879-95653c7e289d"
        },
        "item": {
          "id": "de59b8a0-2a89-472a-8768-a4d59d053fdf",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2372fb1a-329e-4a43-86c8-310a1390031c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a128058-6d83-466a-9a9c-399b173fec64",
        "cursor": {
          "ref": "495c3e09-7dfe-4243-b15e-163a68029cdd",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ea0db87a-03f5-4e51-8170-cc5350b8dff6"
        },
        "item": {
          "id": "0a128058-6d83-466a-9a9c-399b173fec64",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1fbb28d2-8dcb-4ab7-b739-632d17abc7c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa57467-c3e1-4218-8d1a-6e3d6ee70d7d",
        "cursor": {
          "ref": "23041305-8048-4d26-bd1c-980f7d6cdcc0",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f9109676-dfc6-42bd-9a8a-9c9eb6069583"
        },
        "item": {
          "id": "1fa57467-c3e1-4218-8d1a-6e3d6ee70d7d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "78cc1df1-295f-4877-8775-ebb197c21f5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10afe07-3c30-4ab4-8fb0-6aa0e485a3a0",
        "cursor": {
          "ref": "b45adedd-802a-474c-b1d2-4545fbeafb02",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4ca785c7-b684-4c43-92c2-e8f2bff71238"
        },
        "item": {
          "id": "d10afe07-3c30-4ab4-8fb0-6aa0e485a3a0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "58406a89-4bbb-4ba9-8d23-bb1ad3a27bc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edaf9b35-9590-4dd4-b4c6-8b0bf7d3a8e5",
        "cursor": {
          "ref": "aae125f2-b3e8-434c-aa80-a4c05f522f00",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fe13ee65-71c8-4d9c-b642-825ddff2a4b6"
        },
        "item": {
          "id": "edaf9b35-9590-4dd4-b4c6-8b0bf7d3a8e5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "076f896b-25f5-4ebf-b992-e51aaa2dee12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f5a1a19-9d71-472e-b704-c102635a4977",
        "cursor": {
          "ref": "e939940d-b799-46af-8ae1-919e5de4d036",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a7191a6e-9765-4822-a520-c5c7329b9bf6"
        },
        "item": {
          "id": "1f5a1a19-9d71-472e-b704-c102635a4977",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f1b64cee-ac2a-4f04-bae1-8fd991d8cba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9eed0b-b2e5-44c3-a113-10761a739443",
        "cursor": {
          "ref": "2c9b5c93-52df-4d79-b885-a893f2d2697a",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "97d86d7d-b0b0-4428-bfdb-f19345338afb"
        },
        "item": {
          "id": "2a9eed0b-b2e5-44c3-a113-10761a739443",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "fbf1aa2d-e631-4359-b8ef-945e9289faf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f762b4-8524-4df6-b9b1-8de15c9469ef",
        "cursor": {
          "ref": "17cc4410-a51f-4a7f-913d-ab4a89ec8036",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b304fbb3-c028-4c12-ad4a-e2b59a6e68ce"
        },
        "item": {
          "id": "16f762b4-8524-4df6-b9b1-8de15c9469ef",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c9a1c7c2-815f-44ec-b78d-514c2a24b96e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6510379-29b5-4f9a-86c6-a74f0e89bf86",
        "cursor": {
          "ref": "d392efb3-50d4-4e74-9eaa-ea7445694d4d",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f25e31b7-f9aa-4247-b9fb-bc1bbb10625a"
        },
        "item": {
          "id": "f6510379-29b5-4f9a-86c6-a74f0e89bf86",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a5673719-d498-41ab-bd60-0c5d56d6c7e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf8d56d1-8a1e-4876-814b-3173e5011eaa",
        "cursor": {
          "ref": "a2fb6816-9751-4cb8-9db5-846ba0ae837f",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5e125f46-cc3a-45ca-8c33-6706bfac6d3f"
        },
        "item": {
          "id": "cf8d56d1-8a1e-4876-814b-3173e5011eaa",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e9bdaca1-5453-4730-9b84-346bbf0f7b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0f3e24-d39a-4508-b6e5-ed90c75592db",
        "cursor": {
          "ref": "60d85d92-2875-4a6f-95a3-6d81eec7f4e8",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3d02ce9a-1ee5-47fa-8eba-40a173d5499a"
        },
        "item": {
          "id": "3b0f3e24-d39a-4508-b6e5-ed90c75592db",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a378a54f-a88b-43b7-b7f7-a4f98ac18c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f1e8bb7-efa5-48d1-bbef-b5365b69f9d7",
        "cursor": {
          "ref": "1c43d4ff-bdc6-42b9-870a-512c280abd1c",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c03ffa58-9a59-438b-83f3-5390f01ee53f"
        },
        "item": {
          "id": "5f1e8bb7-efa5-48d1-bbef-b5365b69f9d7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "7b0c3eed-f1e4-40ee-8397-9f7fd44afb95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 254,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e22b1ca-1958-4bf2-af35-1d780ddf5dad",
        "cursor": {
          "ref": "6fcc37e9-f624-41f4-84eb-6b05e296a521",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1613742e-c5fe-4da9-bc60-0f894f190783"
        },
        "item": {
          "id": "5e22b1ca-1958-4bf2-af35-1d780ddf5dad",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3c8e82cd-98db-4ad5-a306-610856f18238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3179853-6e77-4015-a564-914a55f06ed4",
        "cursor": {
          "ref": "b4a3bef1-d19b-468e-88be-d32ab31aa223",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e8657970-658e-465e-aeeb-14578c23f854"
        },
        "item": {
          "id": "d3179853-6e77-4015-a564-914a55f06ed4",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "434d30d3-c380-4a85-8264-81e197586013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc22b75-a578-473c-8afc-7f378680e000",
        "cursor": {
          "ref": "73407b5c-3809-4f7e-92b2-4c755a6fbb70",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b0c9227d-b0eb-489a-b6a8-b02482963ed9"
        },
        "item": {
          "id": "bdc22b75-a578-473c-8afc-7f378680e000",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2482562f-fb3e-49e6-bb14-2c45b5d2601b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1058,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175185de-2fcc-42e3-9aab-084906e8747b",
        "cursor": {
          "ref": "025cd212-91c6-4d2c-99da-a0065597f14b",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d77e03e3-b828-4ba8-8aa5-ac9f359d1507"
        },
        "item": {
          "id": "175185de-2fcc-42e3-9aab-084906e8747b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c3ddfa89-6021-47e9-b12b-e0953b58042c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ce87ac-1b11-4bf9-9e01-2f708a6ba3c0",
        "cursor": {
          "ref": "2a139de6-62a6-43db-9d6b-b23c598dadb3",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1b076cd0-253a-4659-8e2e-29d094989051"
        },
        "item": {
          "id": "a5ce87ac-1b11-4bf9-9e01-2f708a6ba3c0",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0a5abc75-b38a-4869-b873-19b8d751acf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa58789-1e5c-4b5d-9ea4-b9041ef7757b",
        "cursor": {
          "ref": "1a5a7a01-a204-4b94-a1ac-2b6cd2999b39",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2356a5ed-f184-4e86-bcbe-d4d3d75c858a"
        },
        "item": {
          "id": "efa58789-1e5c-4b5d-9ea4-b9041ef7757b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1c7d134c-01ec-43b3-a6b5-9f58513389c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c63f579-45c7-4757-be4a-111afab47858",
        "cursor": {
          "ref": "0adeaff1-8487-4dc0-9131-0a4328cee08a",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8b182231-8bc3-473d-8f13-e0f54ecfd8d7"
        },
        "item": {
          "id": "0c63f579-45c7-4757-be4a-111afab47858",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "46c5a9cc-d59e-4ff3-acf4-af60dfcd9826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab43569-0abb-4e71-9eb4-351f19f1e23b",
        "cursor": {
          "ref": "66b0c8ab-8f18-4db9-a59d-a3a05bb9452f",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "bfc3d11b-6aae-408d-a17a-6d78b7df3f5e"
        },
        "item": {
          "id": "bab43569-0abb-4e71-9eb4-351f19f1e23b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "22683758-50ad-4f49-b4d4-58a9f9932e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c391b4f4-e154-457c-9af8-ebe809ab29ff",
        "cursor": {
          "ref": "12a8685c-8b13-4707-a84a-bc0aa1369391",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "545352d7-cd5c-43d1-8f7c-908c837af735"
        },
        "item": {
          "id": "c391b4f4-e154-457c-9af8-ebe809ab29ff",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2274f1fa-6bac-4667-b838-b9a29e0882d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6927802-a35e-4f8f-ad7c-f21e3668dc08",
        "cursor": {
          "ref": "99c3605a-e0f4-4bfd-ac4d-acd4caa922d1",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5a4f65bc-503a-44cd-bd79-5c6c3839ac7b"
        },
        "item": {
          "id": "d6927802-a35e-4f8f-ad7c-f21e3668dc08",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2dfc0778-9fd9-430f-af7b-5c068cc47591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535a9a3c-7bd0-4030-8376-29ee6f0fd470",
        "cursor": {
          "ref": "646320da-7c46-489a-8bd1-db7f2153c09a",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "09546312-7091-4da4-b8fd-a26423941c0c"
        },
        "item": {
          "id": "535a9a3c-7bd0-4030-8376-29ee6f0fd470",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "20786168-0c60-4a3f-a7e1-26c450461d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b9d3cf-c906-492c-9869-7dcb33851e34",
        "cursor": {
          "ref": "8b04efe8-ac5c-43b6-88a7-be15e9bdb548",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "42284294-2c42-464d-976c-d88804e2a260"
        },
        "item": {
          "id": "91b9d3cf-c906-492c-9869-7dcb33851e34",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "049877a1-2418-4b74-819d-a1d5ade04f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc78b74d-003b-46aa-8e1b-eaef23c1ff2f",
        "cursor": {
          "ref": "ce755d18-df13-4a65-adf9-670541d171dc",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e583d786-5c2f-4793-9db2-7d9667541d9a"
        },
        "item": {
          "id": "bc78b74d-003b-46aa-8e1b-eaef23c1ff2f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "cefbc182-2290-46e2-a671-2ed196025130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "130087da-d96f-4bef-8a4c-68068f35b0b4",
        "cursor": {
          "ref": "5e551f7f-f8ef-4215-8f97-8f99325a224b",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f486d0a5-ce80-4797-a69b-5dd8ce4db6c8"
        },
        "item": {
          "id": "130087da-d96f-4bef-8a4c-68068f35b0b4",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "29aa7fe1-f653-4a2b-a333-5ac8402936f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e5777d-d9a2-4698-bebe-05ab31a28d8e",
        "cursor": {
          "ref": "38e1a20a-5786-46e8-bed3-0997574cab5b",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "da116a5b-543b-4b32-9dcd-541de73af98f"
        },
        "item": {
          "id": "52e5777d-d9a2-4698-bebe-05ab31a28d8e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "26282594-1f6e-4a23-9a1d-8737587a0a3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4c9fae-7106-42ba-96f6-918cc4b31cc4",
        "cursor": {
          "ref": "a10efefd-7a12-4129-bc07-75f40119b7c4",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0d301e9f-ebc3-49d0-be10-73272356786c"
        },
        "item": {
          "id": "ef4c9fae-7106-42ba-96f6-918cc4b31cc4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "aaecfa53-01a6-4d30-9a07-14ee6bf21b35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "070ed595-3612-4a82-8cc1-6847554b96be",
        "cursor": {
          "ref": "21b6f5a2-211b-4f95-bc42-0f87e35171aa",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "32af0798-a50a-4d0b-80c5-1f960f51dade"
        },
        "item": {
          "id": "070ed595-3612-4a82-8cc1-6847554b96be",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "43821679-2be4-40bd-b7fa-ee16d4209391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2483152-7462-4606-af15-50b579eec03d",
        "cursor": {
          "ref": "8a5f00b4-cbdb-4933-a62e-0f6dfebe81af",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "00c5f14b-cfe3-4ff0-a144-ea24804bc5cb"
        },
        "item": {
          "id": "a2483152-7462-4606-af15-50b579eec03d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "12896333-e03d-4b6b-9b8c-dae21e8eafeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92043bf5-7bcf-48fd-a771-a4ca41fa124f",
        "cursor": {
          "ref": "9e337fe5-05cf-47ec-9102-b2cc846e5a9d",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d90fe2b1-3519-4be0-98ab-5d89f4016b69"
        },
        "item": {
          "id": "92043bf5-7bcf-48fd-a771-a4ca41fa124f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1523acf7-a11b-47e6-aa28-bc5168e3690a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c121db4-e93c-48ab-a44a-3dd2206dcd7b",
        "cursor": {
          "ref": "76860750-8847-458f-ad30-cc5ea26a915b",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f7fa5c02-efa4-4e62-8220-fd61f77b58c0"
        },
        "item": {
          "id": "6c121db4-e93c-48ab-a44a-3dd2206dcd7b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "48c25c72-3cca-419a-85d2-39ad7b7bfd69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79f59d7-513c-4ebf-a360-8918923fbcac",
        "cursor": {
          "ref": "d4a508d7-e5c0-44e0-9ead-f46aa9d232e5",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ed192c25-392c-4e6c-80b3-872d3e2fb939"
        },
        "item": {
          "id": "f79f59d7-513c-4ebf-a360-8918923fbcac",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "10714c38-eca2-461f-9d88-0df1a9119c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01ac9415-0c38-4e80-9417-d47592b4ef18",
        "cursor": {
          "ref": "29f59b30-cc9b-4caf-97d9-e2847956b8c1",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "43d4d03e-97c8-4402-8dd9-f7606d8a2e69"
        },
        "item": {
          "id": "01ac9415-0c38-4e80-9417-d47592b4ef18",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b6b36fdf-b28c-4442-b6c8-8ce13b90403c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96cf448-f22f-4096-9085-1434aba6036e",
        "cursor": {
          "ref": "2e5170e4-2bce-4e1b-a363-c60888c4a9a6",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "39d18064-65c6-4d20-80ab-916dd1ffc0fb"
        },
        "item": {
          "id": "f96cf448-f22f-4096-9085-1434aba6036e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0bf47bec-941b-4439-a000-11708f578824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75716201-18b5-4289-9ead-3f29ec8ff1bd",
        "cursor": {
          "ref": "1e25315d-808f-4e5e-8f7a-b72b5e0b2204",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "aceb1e01-e9f4-406e-903d-f79764dde3e9"
        },
        "item": {
          "id": "75716201-18b5-4289-9ead-3f29ec8ff1bd",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "65647f1e-973b-4681-9cfb-06a8c427c2ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59d3dec-3eca-49be-af55-9d8370f3aece",
        "cursor": {
          "ref": "a04c9f82-f777-4e2e-89e2-8d8e1c02bed6",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "64c473b1-aa12-4d9a-b97a-25825b0d30fe"
        },
        "item": {
          "id": "d59d3dec-3eca-49be-af55-9d8370f3aece",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "08aaec83-2848-449d-b382-ba27590969df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa9870a-5704-4a9e-8bf6-d2a441e9fbc0",
        "cursor": {
          "ref": "187bc557-1c7e-4afd-a5ca-92376f497ca0",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4ebcf941-9f86-4298-8052-aefb974de5f6"
        },
        "item": {
          "id": "3aa9870a-5704-4a9e-8bf6-d2a441e9fbc0",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "443afa55-b22e-410d-b06f-d74040ccd892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5590c507-b665-4d41-ad75-18831e13b5eb",
        "cursor": {
          "ref": "5a975d07-e4fc-4fb9-b4fe-ba9cd1f19489",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b9d59bde-643d-462d-a67d-dc9f8c162c60"
        },
        "item": {
          "id": "5590c507-b665-4d41-ad75-18831e13b5eb",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "136a3a19-0f9c-4f5a-b92f-a4409a900a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f6f9a26-9aeb-4df4-941e-5670cae0b686",
        "cursor": {
          "ref": "c460d503-fd7c-4a5b-8fa9-7011be00f052",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e16a8c62-19f0-4625-b4f0-6e08ec5e66ab"
        },
        "item": {
          "id": "9f6f9a26-9aeb-4df4-941e-5670cae0b686",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "035f69d2-7af4-4d3d-9add-f9285d03f42d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa904bf-42aa-40bd-bcf3-369eb8c29fbe",
        "cursor": {
          "ref": "bd5068b1-b6b9-4af4-9b45-8de6dc71ef19",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "2ab9bf3e-2259-4cb9-b6b9-245f1f3ff1bb"
        },
        "item": {
          "id": "4aa904bf-42aa-40bd-bcf3-369eb8c29fbe",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "eb4ec4e9-2a9e-4e13-bcb3-2c48d2891f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd71b59-0c95-43d2-bca0-38f5601327b9",
        "cursor": {
          "ref": "c2294d39-b4ea-42c1-9309-88b3bd2dfea5",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "613972ff-c164-4022-a1bb-8759eb22b9d2"
        },
        "item": {
          "id": "ccd71b59-0c95-43d2-bca0-38f5601327b9",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "18a00070-d8c7-43c6-afe1-18b8decde176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd727194-89f3-47b2-b2b2-f176298960c0",
        "cursor": {
          "ref": "1d4ed215-57e7-4a6c-b2af-411da63427b3",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "b46439c8-4e02-4b3e-a54d-d3450ddbbc2b"
        },
        "item": {
          "id": "dd727194-89f3-47b2-b2b2-f176298960c0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8b743373-938b-4cca-a58a-c4078394fe81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451db127-0e9d-437e-8b3e-2818cb1e09bd",
        "cursor": {
          "ref": "79b65519-b3e5-4113-93ac-7daf72e1fa1c",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "ad0a16bc-dd3d-4b22-bf8b-a96073f3d456"
        },
        "item": {
          "id": "451db127-0e9d-437e-8b3e-2818cb1e09bd",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f179595c-df52-42d0-9630-112ba037c962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "298977d3-fb64-4750-a676-4363e262c429",
        "cursor": {
          "ref": "768a76b0-b943-4ad2-8740-c9d59db12e3f",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "7b4092d6-45e5-48cc-91fe-2100f65a7a3f"
        },
        "item": {
          "id": "298977d3-fb64-4750-a676-4363e262c429",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d0aae192-b403-461e-98d2-bd93b07245b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3c68d60-9824-4c8c-9e03-37a7a3c3decf",
        "cursor": {
          "ref": "ceeb9ea2-d0e3-4cf3-94ad-250c1da2e29c",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "dbd310c3-b29a-4d2c-8fa1-4a2b7bcb301e"
        },
        "item": {
          "id": "d3c68d60-9824-4c8c-9e03-37a7a3c3decf",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "caabcfd3-5edb-4a06-8bd2-bc7968214789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "428a080a-dc01-4f9a-8012-5b14e24793b6",
        "cursor": {
          "ref": "78ec5c65-c01a-4d35-a010-ec9a8c3400e2",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "5197f6fa-2602-4392-badb-996250a70219"
        },
        "item": {
          "id": "428a080a-dc01-4f9a-8012-5b14e24793b6",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6b285ebd-cf7c-482d-9e63-680e07237f5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b679ce8f-3d4e-4883-ba71-4159c3044f3f",
        "cursor": {
          "ref": "71a03774-99c0-4981-8bbb-51a947a4a033",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "67233596-2554-4763-9466-5a1c6cefde13"
        },
        "item": {
          "id": "b679ce8f-3d4e-4883-ba71-4159c3044f3f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "04892c28-b9dd-4e85-89de-4ba77c78832e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c914f776-1fbf-48c5-87c1-572ee4da4bc1",
        "cursor": {
          "ref": "b532ef6a-18e9-4bc0-b959-e75e589a80b3",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "7ff8fe2d-3714-4738-a246-fe7e6bd261fe"
        },
        "item": {
          "id": "c914f776-1fbf-48c5-87c1-572ee4da4bc1",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "de6535ce-86ef-441e-8f2d-ee36d1cb4a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f26ec0-367a-414a-b79e-febb0d7863c6",
        "cursor": {
          "ref": "2f3901a0-5634-41bd-9998-82d8cabe85b0",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "da7da486-78c6-483b-be21-012f6f5b6093"
        },
        "item": {
          "id": "64f26ec0-367a-414a-b79e-febb0d7863c6",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c915df82-9c9d-4153-84c5-9d1cc9f5832f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "755cf4ca-1ad4-400e-a498-4bb5769b2e5a",
        "cursor": {
          "ref": "e3c10367-7fc3-4385-b420-dcb715f7116d",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "2627d280-3bd1-47cf-92a9-0902cbd0d26d"
        },
        "item": {
          "id": "755cf4ca-1ad4-400e-a498-4bb5769b2e5a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d3b6f6b1-70e8-42d3-9739-5a5aea40f51e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db84596d-1972-43c0-adbb-0aead8976ee7",
        "cursor": {
          "ref": "85c37a68-d040-4ace-9460-eae68aa149e0",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "a950bb17-fa6f-4c86-9c68-0ae111aec518"
        },
        "item": {
          "id": "db84596d-1972-43c0-adbb-0aead8976ee7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c3557098-2a4d-4ddb-b770-f6458d82463c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf5251e-d99c-40f7-88ad-0edad17793e7",
        "cursor": {
          "ref": "7c469815-3936-47ed-9558-503494c37aa2",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "ee3f814d-a272-43f7-a7ff-47be36c5c067"
        },
        "item": {
          "id": "3cf5251e-d99c-40f7-88ad-0edad17793e7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9c8a4d0a-10c4-4718-9cd6-11ed8743bf32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac8c921-3228-438d-a78c-67d19da4ba37",
        "cursor": {
          "ref": "15576d78-9731-4014-9ddf-f6b0f27e58f3",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "b60c891d-6d39-43dc-8c43-f3bde244f00f"
        },
        "item": {
          "id": "7ac8c921-3228-438d-a78c-67d19da4ba37",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "28880182-6a7d-4d1f-b856-09d3b362cdab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89165c8b-bf75-4109-8edf-f35425e9a04a",
        "cursor": {
          "ref": "62134541-8351-4982-af80-c3ddfccb244e",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "472884a3-b7e7-46a8-8dd0-9e7fd94ed26f"
        },
        "item": {
          "id": "89165c8b-bf75-4109-8edf-f35425e9a04a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a0eb074b-03d2-424b-9ecd-12f292b611ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa326cd4-8361-4bd3-83a0-64060fd13481",
        "cursor": {
          "ref": "b77f832e-907e-4b37-8012-3c463f907821",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "39a488c2-a58d-437d-bddd-115453a2ea5b"
        },
        "item": {
          "id": "fa326cd4-8361-4bd3-83a0-64060fd13481",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "56947271-d5f3-4661-9c2d-8b3f144aea1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028ddf5d-6ede-41bc-9290-0cb3b6235503",
        "cursor": {
          "ref": "fe6edb74-b487-4cde-8879-5b10b3434e9b",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "0ba62c1a-ce80-4237-b889-f34b2a8f2349"
        },
        "item": {
          "id": "028ddf5d-6ede-41bc-9290-0cb3b6235503",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "90bc826c-d72c-4021-89c7-e24089ebbca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec7b8a1-9b4f-4962-b6e3-5251563b5513",
        "cursor": {
          "ref": "ed579083-02f7-44db-8dd7-a470825581b4",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "829bce1c-6a41-4c9f-9963-5653e9419d73"
        },
        "item": {
          "id": "8ec7b8a1-9b4f-4962-b6e3-5251563b5513",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8db3b625-1636-405b-a267-b38be5e7e39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5963b206-bc80-4905-bde9-63b7aa68cb00",
        "cursor": {
          "ref": "e991b6a8-0ec9-4008-ae3a-6513cdd5d22e",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "6a1a25bb-8be7-471e-97d5-83cb20e0e151"
        },
        "item": {
          "id": "5963b206-bc80-4905-bde9-63b7aa68cb00",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b66be51b-d12b-4549-8303-d65682112192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e43b3b7-6d44-4334-9687-389c7811706d",
        "cursor": {
          "ref": "63c1adcf-0380-4616-b884-9e8647de7c01",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "9ec6b208-1f5b-469d-86c1-8ccdf629530d"
        },
        "item": {
          "id": "4e43b3b7-6d44-4334-9687-389c7811706d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e39f5e1c-6fe0-450e-be4d-ac6346854724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b248b34-20c6-4568-acee-0c33a6d9e45c",
        "cursor": {
          "ref": "0ae136b7-a35d-4eb6-95d9-8be798de6580",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "916c4985-a95e-431d-bc85-1570e60a15a7"
        },
        "item": {
          "id": "3b248b34-20c6-4568-acee-0c33a6d9e45c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "0d75e420-796d-4045-a0a1-e96cc237bedd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b534aed9-8b1e-44b0-902c-59826d9192d7",
        "cursor": {
          "ref": "2d14eaf4-c512-4b56-9519-aa0c703b4719",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "c29f353e-e9db-48c2-a34a-7e217950bbe8"
        },
        "item": {
          "id": "b534aed9-8b1e-44b0-902c-59826d9192d7",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4c9dda55-2d07-4aec-b125-dc75447a8c51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c18c1e97-621b-4a16-9c91-3e25da9d9f96",
        "cursor": {
          "ref": "c93e370c-3d0f-4439-bbc0-49cd8d890c78",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "1e797578-22d2-43ec-9363-53e325400a0d"
        },
        "item": {
          "id": "c18c1e97-621b-4a16-9c91-3e25da9d9f96",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "32c0692f-8500-4bc7-b4e8-813d89cbdcc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53de61a-820d-46f1-b6b5-d60c13a6cca1",
        "cursor": {
          "ref": "9ba10298-2b0d-4a70-98a7-ad7fc2ec2b78",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "c19a41f6-919f-47cc-abff-5b43f4985e24"
        },
        "item": {
          "id": "d53de61a-820d-46f1-b6b5-d60c13a6cca1",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d94edd66-a9b5-463c-9d42-0e9620f506ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d290e1de-57a5-4d6b-9b33-c68a88a06ace",
        "cursor": {
          "ref": "16081de7-7abb-4d9a-a609-300ba5a3454e",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "23af908f-1d9b-479a-b4a2-ecfa08416fcd"
        },
        "item": {
          "id": "d290e1de-57a5-4d6b-9b33-c68a88a06ace",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "823abc11-f6bf-4ac8-9367-580f798b0169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c8b54d-1e30-4bbc-b67e-544c20c55119",
        "cursor": {
          "ref": "e2a5f0e9-15cf-4d7d-998d-f335b4ecaf48",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "17251e33-2051-4f39-bf2f-2cb76d38b333"
        },
        "item": {
          "id": "86c8b54d-1e30-4bbc-b67e-544c20c55119",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "155a60b6-8620-4471-a34b-1cb5754c4762",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "b70c63cc-3083-43eb-92ed-46fc4ff79b44",
        "cursor": {
          "ref": "f084d94d-93a9-4d6e-8edd-70445d157c64",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "bdefd24f-729c-42c1-9b77-60df54cc0125"
        },
        "item": {
          "id": "b70c63cc-3083-43eb-92ed-46fc4ff79b44",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8d7ef627-9d49-4d41-a68d-6902b5215f93",
          "status": "OK",
          "code": 200,
          "responseTime": 217,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f116bc5-d703-418e-a85f-24d5a6cae45e",
        "cursor": {
          "ref": "a70e76d6-26ba-4617-b5d1-19d452f77035",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "c15e73ef-6374-4c37-886b-6901cd9f0bbc"
        },
        "item": {
          "id": "7f116bc5-d703-418e-a85f-24d5a6cae45e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1eaac041-c7ed-4b71-9ae4-f50b6708e015",
          "status": "OK",
          "code": 200,
          "responseTime": 2394,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c7dbdde-1e61-4ad4-8923-2a5efb12fcad",
        "cursor": {
          "ref": "f5be83a7-3a28-4867-9cd1-410539160d12",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d28c738d-6e05-4048-a203-f617ecac4173"
        },
        "item": {
          "id": "1c7dbdde-1e61-4ad4-8923-2a5efb12fcad",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2e858f85-9f7b-41ef-b153-1bbf0f80fb8c",
          "status": "OK",
          "code": 200,
          "responseTime": 2532,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d03b00-2cab-4d76-a2e4-23cbe73cd3d2",
        "cursor": {
          "ref": "2e4596cf-7828-4e52-9f2b-c88019b7e25a",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "b2128b6d-172d-490f-94ba-50a0ac6c67bb"
        },
        "item": {
          "id": "c8d03b00-2cab-4d76-a2e4-23cbe73cd3d2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0b95b97b-a315-48ca-910e-7730bc2ee4d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "c8d03b00-2cab-4d76-a2e4-23cbe73cd3d2",
        "cursor": {
          "ref": "2e4596cf-7828-4e52-9f2b-c88019b7e25a",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "b2128b6d-172d-490f-94ba-50a0ac6c67bb"
        },
        "item": {
          "id": "c8d03b00-2cab-4d76-a2e4-23cbe73cd3d2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0b95b97b-a315-48ca-910e-7730bc2ee4d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "4f1fedc9-12b6-450d-a003-268c29118afd",
        "cursor": {
          "ref": "70225020-9df9-4a43-a2a1-95ecc38d8df2",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "c1361778-82fe-417a-b87f-a7c9dd7e5c58"
        },
        "item": {
          "id": "4f1fedc9-12b6-450d-a003-268c29118afd",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b878cecb-b0f9-4392-b2ef-36a1c4f5b5e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "ae682edb-3d00-4635-89d8-711d8a8519f0",
        "cursor": {
          "ref": "65e12676-4347-4d6b-8237-7f9880db8e4c",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "c1fa2448-9154-423c-8455-4d0b434d9476"
        },
        "item": {
          "id": "ae682edb-3d00-4635-89d8-711d8a8519f0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9287d022-5458-4781-bd4b-6be9415cb735",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}